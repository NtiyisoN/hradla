{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/json-stringify-pretty-compact/index.js","node_modules/libstl/Datastructures/DoublyLinkedList.js","node_modules/libstl/Datastructures/Heap.js","node_modules/libstl/Datastructures/MaxHeap.js","node_modules/libstl/Datastructures/MinHeap.js","node_modules/libstl/Datastructures/PriorityQueue.js","node_modules/libstl/Datastructures/Queue.js","node_modules/libstl/Datastructures/Stack.js","node_modules/libstl/node-module.js","src/es6/main.js","src/es6/modules/Canvas.js","src/es6/modules/Logic.js","src/es6/modules/Simulation.js","src/es6/modules/editorElements.js","src/es6/modules/editorElements/Blackbox.js","src/es6/modules/editorElements/Box.js","src/es6/modules/editorElements/Connector.js","src/es6/modules/editorElements/Gate.js","src/es6/modules/editorElements/HelperWire.js","src/es6/modules/editorElements/InputBox.js","src/es6/modules/editorElements/InputConnector.js","src/es6/modules/editorElements/NetworkElement.js","src/es6/modules/editorElements/OutputBox.js","src/es6/modules/editorElements/OutputConnector.js","src/es6/modules/editorElements/Transform.js","src/es6/modules/editorElements/Wire.js","src/es6/modules/editorElements/stateClasses.js","src/es6/modules/findPath.js","src/es6/modules/other/helperFunctions.js","src/es6/modules/other/id.js","src/es6/modules/other/mapWithDefaultValue.js","src/es6/modules/svgObjects.js","src/es6/modules/svgObjects/Group.js","src/es6/modules/svgObjects/MultiLineText.js","src/es6/modules/svgObjects/Pattern.js","src/es6/modules/svgObjects/PolyLine.js","src/es6/modules/svgObjects/PolyLinePoint.js","src/es6/modules/svgObjects/PolyLinePoints.js","src/es6/modules/svgObjects/Rectangle.js","src/es6/modules/svgObjects/SvgElement.js","src/es6/modules/svgObjects/SvgImage.js","src/es6/modules/svgObjects/Tag.js","src/es6/modules/svgObjects/Text.js","src/es6/modules/ui/ContextMenu.js","src/es6/modules/ui/FloatingMenu.js","src/es6/modules/ui/Messages.js","src/es6/modules/ui/Tutorial.js","src/es6/modules/ui/ViewBox.js","src/es6/modules/ui/networkLibrary.js"],"names":[],"mappingszvUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;;AAEA;;;;;;AAEA;;;AAGA,EAAE,YAAM;AACJ,uBAAW,SAAX,EAAsB,EAAtB;AACH,CAFD;;;;;;;;;;;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","file":"main.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","function stringify (obj, options) {\n  options = options || {}\n  var indent = JSON.stringify([1], null, get(options, 'indent', 2)).slice(2, -3)\n  var addMargin = get(options, 'margins', false)\n  var maxLength = (indent === '' ? Infinity : get(options, 'maxLength', 80))\n\n  return (function _stringify (obj, currentIndent, reserved) {\n    if (obj && typeof obj.toJSON === 'function') {\n      obj = obj.toJSON()\n    }\n\n    var string = JSON.stringify(obj)\n\n    if (string === undefined) {\n      return string\n    }\n\n    var length = maxLength - currentIndent.length - reserved\n\n    if (string.length <= length) {\n      var prettified = prettify(string, addMargin)\n      if (prettified.length <= length) {\n        return prettified\n      }\n    }\n\n    if (typeof obj === 'object' && obj !== null) {\n      var nextIndent = currentIndent + indent\n      var items = []\n      var delimiters\n      var comma = function (array, index) {\n        return (index === array.length - 1 ? 0 : 1)\n      }\n\n      if (Array.isArray(obj)) {\n        for (var index = 0; index < obj.length; index++) {\n          items.push(\n            _stringify(obj[index], nextIndent, comma(obj, index)) || 'null'\n          )\n        }\n        delimiters = '[]'\n      } else {\n        Object.keys(obj).forEach(function (key, index, array) {\n          var keyPart = JSON.stringify(key) + ': '\n          var value = _stringify(obj[key], nextIndent,\n                                 keyPart.length + comma(array, index))\n          if (value !== undefined) {\n            items.push(keyPart + value)\n          }\n        })\n        delimiters = '{}'\n      }\n\n      if (items.length > 0) {\n        return [\n          delimiters[0],\n          indent + items.join(',\\n' + nextIndent),\n          delimiters[1]\n        ].join('\\n' + currentIndent)\n      }\n    }\n\n    return string\n  }(obj, '', 0))\n}\n\n// Note: This regex matches even invalid JSON strings, but since we’re\n// working on the output of `JSON.stringify` we know that only valid strings\n// are present (unless the user supplied a weird `options.indent` but in\n// that case we don’t care since the output would be invalid anyway).\nvar stringOrChar = /(\"(?:[^\\\\\"]|\\\\.)*\")|[:,\\][}{]/g\n\nfunction prettify (string, addMargin) {\n  var m = addMargin ? ' ' : ''\n  var tokens = {\n    '{': '{' + m,\n    '[': '[' + m,\n    '}': m + '}',\n    ']': m + ']',\n    ',': ', ',\n    ':': ': '\n  }\n  return string.replace(stringOrChar, function (match, string) {\n    return string ? match : tokens[match]\n  })\n}\n\nfunction get (options, name, defaultValue) {\n  return (name in options ? options[name] : defaultValue)\n}\n\nmodule.exports = stringify\n","/**\n * The DoublyLinkedList class provides the main functionality of a doubly linked list.\n *\n * @class DoublyLinkedList\n */\nvar DoublyLinkedList = (function () {\n    function DoublyLinkedList() {\n        /**\n         * Count of elements in list\n         *\n         * @property _length\n         * @type number\n         * @private\n         */\n        this._length = 0;\n        /**\n         * Iteration pointer\n         *\n         * @property _key\n         * @type number\n         * @private\n         */\n        this._key = 0;\n        /**\n         * Reference to head(first) element in list\n         *\n         * @property _head\n         * @type DoublyLinkedListNode\n         * @private\n         */\n        this._head = null;\n        /**\n         * Reference to tail(last) element in list\n         *\n         * @property _tail\n         * @type DoublyLinkedListNode\n         * @private\n         */\n        this._tail = null;\n        /**\n         * Reference to iterated element in list\n         *\n         * @property _current\n         * @type DoublyLinkedListNode\n         * @private\n         */\n        this._current = null;\n    }\n    /**\n     * Insert a new value at the specified index\n     *\n     * @method add\n     * @param index The index where the new value is to be inserted.\n     * @param value The new value for the index.\n     * @return void\n     */\n    DoublyLinkedList.prototype.add = function (index, value) {\n        if (index < 0 || index >= this._length) {\n            throw new Error(\"Out of bounds\");\n        }\n        var i = 0;\n        var current = this._head;\n        while (i < index) {\n            current = current.next;\n            i++;\n        }\n        current.value = value;\n    };\n    /**\n     * Pops a node from the end of the doubly linked list\n     *\n     * @method pop\n     * @return any  The value of the popped node.\n     */\n    DoublyLinkedList.prototype.pop = function () {\n        if (this._length === 0) {\n            throw new Error(\"Can't pop from an empty data structure\");\n        }\n        var value = this._tail.value;\n        this._tail = this._tail.prev;\n        if (this._tail) {\n            delete this._tail.next;\n            this._tail.next = null;\n        }\n        this._length--;\n        if (this._length === 0) {\n            delete this._head;\n            this._head = null;\n        }\n        return value;\n    };\n    /**\n     * Shifts a node from the beginning of the doubly linked list\n     *\n     * @method shift\n     * @return any  The value of the shifted node.\n     */\n    DoublyLinkedList.prototype.shift = function () {\n        if (this._length === 0) {\n            throw new Error(\"Can't shift from an empty data structure\");\n        }\n        var value = this._head.value;\n        this._head = this._head.next;\n        if (this._head) {\n            delete this._head.prev;\n            this._head.prev = null;\n        }\n        this._length--;\n        return value;\n    };\n    /**\n     * Pushes an element at the end of the doubly linked list\n     *\n     * @method push\n     * @param value The value to push.\n     * @return void\n     */\n    DoublyLinkedList.prototype.push = function (value) {\n        // allocate new node\n        var node = {\n            value: value,\n            prev: this._tail,\n            next: null\n        };\n        if (this._length === 0) {\n            this._head = this._tail = node;\n        }\n        else {\n            this._tail.next = node;\n            this._tail = this._tail.next;\n        }\n        this._length++;\n    };\n    /**\n     * Prepends the doubly linked list with an element\n     *\n     * @method unshift\n     * @param value The value to unshift.\n     * @return void\n     */\n    DoublyLinkedList.prototype.unshift = function (value) {\n        // allocate new node\n        var node = {\n            value: value,\n            prev: null,\n            next: this._head\n        };\n        if (this._length === 0) {\n            this._head = this._tail = node;\n        }\n        else {\n            this._head.prev = node;\n            this._head = this._head.prev;\n        }\n        this._length++;\n    };\n    /**\n     * Peeks at the node from the end of the doubly linked list\n     *\n     * @method top\n     * @return any  The value of the last node.\n     */\n    DoublyLinkedList.prototype.top = function () {\n        if (this._tail)\n            return this._tail.value;\n    };\n    /**\n     * Peeks at the node from the beginning of the doubly linked list\n     *\n     * @method bottom\n     * @return any  The value of the first node.\n     */\n    DoublyLinkedList.prototype.bottom = function () {\n        if (this._head)\n            return this._head.value;\n    };\n    /**\n     * Counts the number of elements in the doubly linked list\n     *\n     * @method count\n     * @return number the number of elements in the doubly linked list.\n     */\n    DoublyLinkedList.prototype.count = function () {\n        return this._length;\n    };\n    /**\n     * Checks whether the doubly linked list is empty\n     *\n     * @method isEmpty\n     * @return boolean whether the doubly linked list is empty.\n     */\n    DoublyLinkedList.prototype.isEmpty = function () {\n        return (this._length === 0);\n    };\n    /**\n     * Rewind iterator back to the start\n     *\n     * @method rewind\n     * @return void\n     */\n    DoublyLinkedList.prototype.rewind = function () {\n        this._key = 0;\n        this._current = this._head;\n    };\n    /**\n     * Return current list entry\n     *\n     * @method current\n     * @return any  The current node value.\n     */\n    DoublyLinkedList.prototype.current = function () {\n        if (this._current) {\n            return this._current.value;\n        }\n        return null;\n    };\n    /**\n     * Return current node index\n     *\n     * @method key\n     * @return any  The current node index.\n     */\n    DoublyLinkedList.prototype.key = function () {\n        return this._key;\n    };\n    /**\n     * Move to next entry\n     *\n     * @method next\n     * @return void\n     */\n    DoublyLinkedList.prototype.next = function () {\n        this._current = this._current.next;\n        this._key++;\n    };\n    /**\n     * Move to previous entry\n     *\n     * @method prev\n     * @return void\n     */\n    DoublyLinkedList.prototype.prev = function () {\n        this._current = this._current.prev;\n        this._key--;\n    };\n    /**\n     * Check whether the doubly linked list contains more nodes\n     *\n     * @method valid\n     * @return boolean true if the doubly linked list contains any more nodes, false otherwise.\n     */\n    DoublyLinkedList.prototype.valid = function () {\n        return (this._key >= 0 && this._key < this._length);\n    };\n    /**\n     * Export the list to array\n     *\n     * @method toArray\n     * @return Array   The exported array\n     */\n    DoublyLinkedList.prototype.toArray = function () {\n        var list = [];\n        var current = this._head;\n        while (current) {\n            list.push(current.value);\n            current = current.next;\n        }\n        return list;\n    };\n    /**\n     * Serializes the list to string\n     *\n     * @method toString\n     * @return string   The serialized string.\n     */\n    DoublyLinkedList.prototype.toString = function () {\n        return \"{\" + this.toArray().join(\"->\") + \"}\";\n    };\n    return DoublyLinkedList;\n})();\nmodule.exports = DoublyLinkedList;\n//# sourceMappingURL=DoublyLinkedList.js.map","/**\n * The Heap class provides the main functionality of a Heap.\n *\n * @class Heap\n */\nvar Heap = (function () {\n    function Heap() {\n        /**\n         * Binary tree storage array\n         *\n         * @property _tree\n         * @type Array\n         * @private\n         */\n        this._tree = [];\n        /**\n         * Heap type\n         *\n         * @property _type\n         * @type number\n         * @private\n         */\n        this._type = Heap.MAX;\n        /**\n         * Iteration pointer\n         *\n         * @property _key\n         * @type number\n         * @private\n         */\n        this._key = 0;\n    }\n    /**\n     * Get index of left child element in binary tree stored in array\n     *\n     * @method _child\n     * @param n\n     * @return number\n     * @private\n     */\n    Heap.prototype._child = function (n) {\n        return 2 * n + 1;\n    };\n    /**\n     * Get index of parent element in binary tree stored in array\n     *\n     * @method _parent\n     * @param n\n     * @return number\n     * @private\n     */\n    Heap.prototype._parent = function (n) {\n        //console.log('n=', n, Math.floor(n / 2));\n        return Math.floor(n / 2);\n    };\n    /**\n     * Swap 2 elements in binary tree\n     *\n     * @method _swap\n     * @param first\n     * @param second\n     * @private\n     */\n    Heap.prototype._swap = function (first, second) {\n        var swap = this._tree[first];\n        this._tree[first] = this._tree[second];\n        this._tree[second] = swap;\n    };\n    /**\n     * Sift elements in binary tree\n     *\n     * @method _siftUp\n     * @param i\n     * @private\n     */\n    Heap.prototype._siftUp = function (i) {\n        while (i > 0) {\n            var parent = this._parent(i);\n            if (this.compare(this._tree[i], this._tree[parent]) * this._type > 0) {\n                this._swap(i, parent);\n                i = parent;\n            }\n            else {\n                break;\n            }\n        }\n    };\n    /**\n     * Sift down elements in binary tree\n     *\n     * @method _siftDown\n     * @param i\n     * @private\n     */\n    Heap.prototype._siftDown = function (i) {\n        while (i < this._tree.length) {\n            var left = this._child(i);\n            var right = left + 1;\n            if ((left < this._tree.length) && (right < this._tree.length) &&\n                (this.compare(this._tree[i], this._tree[left]) * this._type < 0 ||\n                    this.compare(this._tree[i], this._tree[right]) * this._type < 0)) {\n                // there is 2 children and one of them must be swapped\n                // get correct element to sift down\n                var sift = left;\n                if (this.compare(this._tree[left], this._tree[right]) * this._type < 0) {\n                    sift = right;\n                }\n                this._swap(i, sift);\n                i = sift;\n            }\n            else if (left < this._tree.length &&\n                this.compare(this._tree[i], this._tree[left]) * this._type < 0) {\n                // only one child exists\n                this._swap(i, left);\n                i = left;\n            }\n            else {\n                break;\n            }\n        }\n    };\n    /**\n     * Extracts a node from top of the heap and sift up\n     *\n     * @method extract\n     * @return any The value of the extracted node.\n     */\n    Heap.prototype.extract = function () {\n        if (this._tree.length === 0) {\n            throw new Error(\"Can't extract from an empty data structure\");\n        }\n        var extracted = this._tree[0];\n        if (this._tree.length === 1) {\n            this._tree = [];\n        }\n        else {\n            this._tree[0] = this._tree.pop();\n            this._siftDown(0);\n        }\n        return extracted;\n    };\n    /**\n     * Inserts an element in the heap by sifting it up\n     *\n     * @method insert\n     * @param value The value to insert.\n     * @return void\n     */\n    Heap.prototype.insert = function (value) {\n        this._tree.push(value);\n        this._siftUp(this._tree.length - 1);\n    };\n    /**\n     * Peeks at the node from the top of the heap\n     *\n     * @method top\n     * @return any The value of the node on the top.\n     */\n    Heap.prototype.top = function () {\n        if (this._tree.length === 0) {\n            throw new Error(\"Can't peek at an empty heap\");\n        }\n        return this._tree[0];\n    };\n    /**\n     * Counts the number of elements in the heap\n     *\n     * @method count\n     * @return number the number of elements in the heap.\n     */\n    Heap.prototype.count = function () {\n        return this._tree.length;\n    };\n    /**\n     * Checks whether the heap is empty\n     *\n     * @method isEmpty\n     * @return boolean whether the heap is empty.\n     */\n    Heap.prototype.isEmpty = function () {\n        return (this._tree.length === 0);\n    };\n    /**\n     * Rewind iterator back to the start (no-op)\n     *\n     * @method rewind\n     * @return void\n     */\n    Heap.prototype.rewind = function () {\n        this._key = 0;\n    };\n    /**\n     * Return current node pointed by the iterator\n     *\n     * @method current\n     * @return any The current node value.\n     */\n    Heap.prototype.current = function () {\n        return this._tree[this._key];\n    };\n    /**\n     * Return current node index\n     *\n     * @method key\n     * @return any The current node index.\n     */\n    Heap.prototype.key = function () {\n        return this._key;\n    };\n    /**\n     * Move to the next node\n     *\n     * @method next\n     * @return void\n     */\n    Heap.prototype.next = function () {\n        this._key++;\n    };\n    /**\n     * Move to previous entry\n     *\n     * @method prev\n     * @return void\n     */\n    Heap.prototype.prev = function () {\n        this._key--;\n    };\n    /**\n     * Check whether the heap contains more nodes\n     *\n     * @method valid\n     * @return boolean true if the heap contains any more nodes, false otherwise.\n     */\n    Heap.prototype.valid = function () {\n        return (this._key >= 0 && this._key < this._tree.length);\n    };\n    /**\n     * Compare elements in order to place them correctly in the heap while sifting up.\n     *\n     * @method compare\n     * @param first The value of the first node being compared.\n     * @param second The value of the second node being compared.\n     * @return number Result of the comparison, positive integer if first is greater than second, 0 if they are equal, negative integer otherwise.\n     * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\n     */\n    Heap.prototype.compare = function (first, second) {\n        if (first > second) {\n            return 1;\n        }\n        else if (first == second) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    };\n    /**\n     * Visually display heap tree\n     *\n     * @method _displayNode\n     * @param node\n     * @param prefix\n     * @param last\n     * @return String\n     * @private\n     */\n    Heap.prototype._displayNode = function (node, prefix, last) {\n        if (prefix === void 0) { prefix = ''; }\n        if (last === void 0) { last = true; }\n        var line = prefix;\n        // get child indexes\n        var left = this._child(node);\n        var right = left + 1;\n        if (last) {\n            line += (prefix ? '└─' : '  ');\n        }\n        else {\n            line += '├─';\n        }\n        line += this._tree[node];\n        prefix += (last ? '  ' : '│ ');\n        if (left < this._tree.length) {\n            line += '\\n' + this._displayNode(left, prefix, (this._tree[right] == undefined ? true : false));\n        }\n        if (right < this._tree.length) {\n            line += '\\n' + this._displayNode(right, prefix, true);\n        }\n        return line;\n    };\n    /**\n     * Serializes the heap to string\n     *\n     * @method toString\n     * @return string   The serialized string.\n     */\n    Heap.prototype.toString = function () {\n        // start with root and recursively goes to each node\n        return this._displayNode(0);\n    };\n    /**\n     * Serializes the heap to array\n     *\n     * @method toArray\n     * @return Array   The serialized array.\n     */\n    Heap.prototype.toArray = function () {\n        return this._tree;\n    };\n    /**\n     * Max heap flag\n     *\n     * @property MAX\n     * @type number\n     * @static\n     */\n    Heap.MAX = 1;\n    /**\n     * Min heap flag\n     *\n     * @property MIN\n     * @type number\n     * @static\n     */\n    Heap.MIN = -1;\n    return Heap;\n})();\nmodule.exports = Heap;\n//# sourceMappingURL=Heap.js.map","var __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Heap = require('./Heap');\n/**\n * The MaxHeap class provides the main functionality of a heap, keeping the maximum on the top.\n *\n * @class MaxHeap\n * @extends Heap\n */\nvar MaxHeap = (function (_super) {\n    __extends(MaxHeap, _super);\n    function MaxHeap() {\n        _super.apply(this, arguments);\n        this._type = Heap.MAX;\n    }\n    return MaxHeap;\n})(Heap);\nmodule.exports = MaxHeap;\n//# sourceMappingURL=MaxHeap.js.map","var __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Heap = require('./Heap');\n/**\n * The MinHeap class provides the main functionality of a heap, keeping the minimum on the top.\n *\n * @class MinHeap\n * @extends Heap\n */\nvar MinHeap = (function (_super) {\n    __extends(MinHeap, _super);\n    function MinHeap() {\n        _super.apply(this, arguments);\n        this._type = Heap.MIN;\n    }\n    return MinHeap;\n})(Heap);\nmodule.exports = MinHeap;\n//# sourceMappingURL=MinHeap.js.map","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Heap = require('./Heap');\n/**\n * The PriorityQueue class provides the main functionality of an prioritized queue, implemented using a max heap.\n *\n * @class PriorityQueue\n * @extends Heap\n */\nvar PriorityQueue = (function (_super) {\n    __extends(PriorityQueue, _super);\n    function PriorityQueue() {\n        _super.apply(this, arguments);\n        this._type = Heap.MAX;\n    }\n    /**\n     * Adds an element to the queue\n     *\n     * @method enqueue\n     * @param value The value to enqueue.\n     * @param priority The priority of value.\n     * @return void\n     */\n    PriorityQueue.prototype.enqueue = function (value, priority) {\n        return this.insert(new PriorityQueueNode(value, priority));\n    };\n    /**\n     * Dequeues a node from the queue\n     *\n     * @method dequeue\n     * @return any  The value of the dequeued node.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        return this.extract().value;\n    };\n    /**\n     * Peeks at the node from the top of the heap\n     *\n     * @method top\n     * @return any The value of the node on the top.\n     */\n    PriorityQueue.prototype.top = function () {\n        return _super.prototype.top.call(this).value;\n    };\n    /**\n     * Compare elements in order to place them correctly in the heap while sifting up.\n     *\n     * @method compare\n     * @param first The value of the first node being compared.\n     * @param second The value of the second node being compared.\n     * @return number Result of the comparison, positive integer if first is greater than second, 0 if they are equal, negative integer otherwise.\n     * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\n     */\n    PriorityQueue.prototype.compare = function (first, second) {\n        if (first.priority > second.priority) {\n            return 1;\n        }\n        else if (first.priority == second.priority) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    };\n    return PriorityQueue;\n})(Heap);\n/**\n * PriorityQueue Node\n *\n * @class PriorityQueueNode\n */\nvar PriorityQueueNode = (function () {\n    /**\n     * Constructor\n     *\n     * @method constructor\n     * @param value\n     * @param priority\n     */\n    function PriorityQueueNode(value, priority) {\n        this.value = value;\n        this.priority = priority;\n    }\n    /**\n     * Serializes the node to string\n     *\n     * @method toString\n     * @return string   The serialized string.\n     */\n    PriorityQueueNode.prototype.toString = function () {\n        return this.value + \" [\" + this.priority + \"]\";\n    };\n    return PriorityQueueNode;\n})();\nmodule.exports = PriorityQueue;\n//# sourceMappingURL=PriorityQueue.js.map","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DoublyLinkedList = require('./DoublyLinkedList');\n/**\n * The Queue class provides the main functionality of a queue implemented using a doubly linked list.\n *\n * @class Queue\n * @extends DoublyLinkedList\n */\nvar Queue = (function (_super) {\n    __extends(Queue, _super);\n    function Queue() {\n        _super.apply(this, arguments);\n    }\n    /**\n     * Adds an element to the queue\n     *\n     * @method enqueue\n     * @param value The value to enqueue.\n     * @return void\n     */\n    Queue.prototype.enqueue = function (value) {\n        return this.push(value);\n    };\n    /**\n     * Dequeues a node from the queue\n     *\n     * @method dequeue\n     * @return any  The value of the dequeued node.\n     */\n    Queue.prototype.dequeue = function () {\n        return this.shift();\n    };\n    return Queue;\n})(DoublyLinkedList);\nmodule.exports = Queue;\n//# sourceMappingURL=Queue.js.map","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DoublyLinkedList = require('./DoublyLinkedList');\n/**\n * The Stack class provides the main functionality of a stack implemented using a doubly linked list.\n *\n * @class Stack\n * @extends DoublyLinkedList\n */\nvar Stack = (function (_super) {\n    __extends(Stack, _super);\n    function Stack() {\n        _super.apply(this, arguments);\n    }\n    return Stack;\n})(DoublyLinkedList);\nmodule.exports = Stack;\n//# sourceMappingURL=Stack.js.map","/**\n * STL\n * @type {{DoublyLinkedList: exports, Stack: exports, Queue: exports, Heap: exports, MaxHeap: exports, MinHeap: exports, PriorityQueue: exports}}\n */\nmodule.exports = {\n\tDoublyLinkedList: require('./Datastructures/DoublyLinkedList'),\n\tStack: require('./Datastructures/Stack'),\n\tQueue: require('./Datastructures/Queue'),\n\tHeap: require('./Datastructures/Heap'),\n\tMaxHeap: require('./Datastructures/MaxHeap'),\n\tMinHeap: require('./Datastructures/MinHeap'),\n\tPriorityQueue: require('./Datastructures/PriorityQueue')\n};","\"use strict\";\n\nimport Canvas from './modules/Canvas';\n\n/**\n * When the document is ready, initialize the application\n */\n$(() => {\n    new Canvas(\"#canvas\", 10);\n});\n","// editor elements (gates, wires...)\nimport * as editorElements from './editorElements'\n\n// svg elements\nimport {Pattern, Rectangle, PolyLinePoint, PolyLinePoints, PolyLine} from './svgObjects'\n\n// network logic and simulation\nimport Logic from './Logic'\nimport Simulation from './Simulation'\n\n// ui stuff\nimport ContextMenu from './ui/ContextMenu'\nimport FloatingMenu from './ui/FloatingMenu'\nimport Tutorial from './ui/Tutorial'\nimport Messages from './ui/Messages'\nimport ViewBox from './ui/ViewBox'\n\n// mouse scroll event listerer for ui, manhattan distance for importData\nimport {addMouseScrollEventListener, manhattanDistance} from './other/helperFunctions'\n\n// used in importData\n// note: imported from a node module\nimport {PriorityQueue} from 'libstl'\n\nconst ctrlKey = 17,\n    cmdKey = 91;\n\n/** @module Canvas */\n/**\n * Main class of the application. It represents an instance of the whole editor and holds\n * references to all its elements.\n */\nexport default class Canvas {\n    /**\n     * Initialize the Svg class\n     * @param {string} canvas   query selector of the SVG element, that will contain all SVG content of the application\n     * @param {number} gridSize initial size of the grid in SVG pixels\n     */\n    constructor(canvas, gridSize) {\n        /**\n         * jQuery element for the SVG document\n         */\n        this.$svg = $(canvas);\n\n        /**\n         * space between grid lines in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = gridSize;\n\n        /**\n         * Array of all boxes (instances of objects derived from editorElements.Box) used on Canvas\n         * @type {Array}\n         */\n        this.boxes = []; // stores all boxes\n\n        /**\n         * Array of all wires (instances of editorElements.Wire) used on Canvas\n         * @type {Array}\n         */\n        this.wires = []; // stores all wires\n\n        // TODO document this\n        this.messages = new Messages();\n\n        this.simulationEnabled = true\n        this.simulation = new Simulation(this); // dummy, will be overwritten on startNewSimulation\n\n        /**\n         * distance from the left top corner to the first element in the imported network\n         * and distance from the left top corner to the imported black box _in grid pixels_\n         * @type {number}\n         */\n        this.leftTopPadding = 4;\n\n        // create the defs element, used for patterns\n        this.$defs = $(\"<defs>\");\n        this.$svg.prepend(this.$defs);\n\n        // BACKGROUND PATTERN\n        let pattern = new Pattern(\"grid\", this.gridSize, this.gridSize);\n\n        let patternPoints = new PolyLinePoints().append(new PolyLinePoint(0, 0)).append(new PolyLinePoint(this.gridSize, 0)).append(new PolyLinePoint(this.gridSize, this.gridSize));\n\n        pattern.addChild(new PolyLine(patternPoints, 2, \"#c2c3e4\"));\n        this.addPattern(pattern.get());\n\n        this.background = new Rectangle(0, 0, this.width, this.height, \"url(#grid)\", \"none\");\n        this.appendJQueryObject(this.background.get());\n        this.refresh();\n\n        // set the viewbox for future zooming and moving of the canvas\n        this.$svg.attr('preserveAspectRatio', 'xMinYMin slice')\n        this.viewbox = new ViewBox(0, 0, this.width, this.height)\n        this.applyViewbox()\n\n        // CONSTRUCT CONTEXT MENU\n        this.contextMenu = new ContextMenu(this);\n\n        // CONSTRUCT FLOATING MENU\n        this.floatingMenu = new FloatingMenu(this);\n\n        let target;\n\n        // ALL EVENT CALLBACKS\n        this.$svg.on('mousedown', event => {\n            target = this.getRealTarget(event.target);\n\n            if (target !== undefined) {\n                // propagate mousedown to the real target\n                target.onMouseDown(event);\n            } else {\n                // mousedown happened directly on the svg\n                this.onMouseDown(event)\n            }\n\n            this.hideContextMenu();\n            event.preventDefault();\n        }).on('mousemove', event => {\n            if (target !== undefined) {\n                target.onMouseMove(event);\n            } else {\n                // mousemove happened directly on the svg\n                this.onMouseMove(event)\n            }\n\n            event.preventDefault();\n        }).on('mouseup', event => {\n            if (target !== undefined) {\n                target.onMouseUp(event);\n            } else {\n                // mouseup happened directly on the svg\n                this.onMouseUp(event)\n            }\n\n            target = undefined;\n\n            event.preventDefault();\n        }).on(\"contextmenu\", event => {\n            this.displayContextMenu(event.pageX, event.pageY, this.getRealJQueryTarget(event.target));\n            event.preventDefault();\n        })\n\n        $(document).on('keydown', event => {\n            this.onKeyDown(event);\n        }).on(\"keyup\", event => {\n            this.onKeyUp(event);\n        });\n\n        // update the viewbox on window resize\n        $(window).on('resize', () => {\n            this.viewbox.newDimensions(this.width, this.height);\n            this.applyViewbox();\n        });\n\n        addMouseScrollEventListener(canvas, event => {\n            // zoom only if the ctrl key is not pressed\n            if (!event.ctrlKey) {\n                this.zoom += event.delta * 0.1;\n\n                event.preventDefault()\n            }\n        })\n\n        $(window).on('keydown', (event) => {\n            const actions = {\n                '+': 0.1,\n                '-': -0.1\n            }\n\n            if (actions[event.key]) {\n                this.zoom += actions[event.key];\n            }\n        })\n\n        /**\n         * property containing an instance of [Tutorial](./module-Tutorial.html), if there is any\n         * @type {Tutorial}\n         */\n        this.tutorial;\n\n        // check if the user visits for the first time, if so, start the tutorial\n        try {\n            if (!localStorage.userHasVisited) {\n                this.startTutorial();\n            }\n        } catch (e) {\n            console.warn(e);\n        }\n    }\n\n    /**\n     * Get the width of the main SVG element\n     * @return {number} width of the SVG element in pixels\n     */\n    get width() {\n        return this.$svg.width()\n    }\n\n    /**\n     * Get the height of the main SVG element\n     * @return {number} height of the SVG element in pixels\n     */\n    get height() {\n        return this.$svg.height()\n    }\n\n    /**\n     * Process all keydown events that are connected to Canvas\n     * @param  {jquery.KeyboardEvent} event KeyboardEvent generated by a listener\n     */\n    onKeyDown(event) {\n        if (event.keyCode === ctrlKey || event.keyCode === cmdKey) {\n            this.$svg.addClass('grabbable');\n        }\n    }\n\n    /**\n     * Process all keyup events that are connected to Canvas\n     * @param  {jquery.KeyboardEvent} event KeyboardEvent generated by a listener\n     */\n    onKeyUp(event) {\n        if (event.keyCode === ctrlKey || event.keyCode === cmdKey) {\n            this.$svg.removeClass('grabbable');\n        }\n    }\n\n    /**\n     * Process all mousedown events that are happening directly on the Canvas\n     * @param  {jquery.MouseEvent} event MouseEvent generated by a listener\n     */\n    onMouseDown(event) {\n        // any click on canvas cancels the wire creation\n        this.cancelWireCreation();\n\n        // middle mouse or left mouse + ctrl moves the canvas\n        if (event.which === 2 || (event.which === 1 && event.ctrlKey)) {\n            this.$svg.addClass('grabbed');\n            this.moveCanvas = {\n                left: event.pageX,\n                top: event.pageY\n            }\n        }\n    }\n\n    /**\n     * Process all mousemove events that are happening directly on the Canvas\n     * @param  {jquery.MouseEvent} event MouseEvent generated by a listener\n     */\n    onMouseMove(event) {\n        if (this.moveCanvas) {\n            let left = event.pageX - this.moveCanvas.left\n            let top = event.pageY - this.moveCanvas.top\n\n            this.viewbox.leftShift += left\n            this.viewbox.topShift += top\n            this.applyViewbox()\n\n            this.moveCanvas = {\n                left: event.pageX,\n                top: event.pageY\n            }\n        }\n    }\n\n    /**\n     * Process all mouseup events that are happening directly on the Canvas\n     */\n    onMouseUp() {\n        if (this.moveCanvas) {\n            this.$svg.removeClass('grabbed');\n            this.moveCanvas = undefined\n\n            // if tutorial exists, call tutorial callback\n            if (this.tutorial) {\n                this.tutorial.onCanvasMoved();\n            }\n        }\n    }\n\n    /**\n     * Set the viewBox attribute of the SVG element and size and position attributes\n     * of the rectangle with the background grid to match the values in this.viewbox\n     */\n    applyViewbox() {\n        // adjust background\n        this.background.addAttr({x: this.viewbox.left, y: this.viewbox.top, width: this.viewbox.width, height: this.viewbox.height})\n\n        // set the viewBox attribute\n        this.$svg.attr('viewBox', this.viewbox.str)\n    }\n\n    /**\n     * Get the current zoom multiplier of the canvas\n     * @return {number}\n     */\n    get zoom() {\n        return this.viewbox.zoom\n    }\n\n    /**\n     * Set the zoom multiplier of the canvas.\n     * I sets the viewbox zoom and then applies the new value by calling this.applyViewbox()\n     * @param  {number} value set the zoom to this value\n     */\n    set zoom(value) {\n        this.viewbox.zoom = value\n        this.applyViewbox()\n\n        // if tutorial exists, call tutorial callback\n        if (this.tutorial) {\n            this.tutorial.onCanvasZoomed();\n        }\n    }\n\n    /**\n     * start the tutorial\n     */\n    startTutorial() {\n        // instantiate the tutorial\n        this.tutorial = new Tutorial(this, () => {\n            // set userHasVisited to true when user closes (or finishes) the tutorial\n            localStorage.userHasVisited = true;\n\n            // unset the this.tutorial property\n            this.tutorial = undefined;\n        });\n\n        // start the tutorial\n        this.tutorial.start();\n    }\n\n    /**\n     * Generate an object containing export data for the Canvas and all elements.\n     * Data from this function should cover all important information needed to import the\n     * network in a different session.\n     * @return {object} object containing infomration about the network\n     */\n    get exportData() {\n        this.exportWireIdMap = new Map();\n        this.exportWireId = 0;\n\n        let data = {\n            boxes: []\n        };\n\n        for (const box of this.boxes) {\n            data.boxes.push(box.exportData)\n        }\n\n        return data;\n    }\n\n    /**\n     * Recreate a logic network from the data provided\n     * @param  {object} data object containing information about the imported network\n     * @param  {number} [x]  horizontal position of the left top corner of the network in grid pixels\n     * @param  {number} [y]  vertical position of the left top corner of the network in grid pixels\n     */\n    importData(data, x, y) {\n        return new Promise(resolve => {\n            let warnings = [];\n\n            // if the x or y is undefined, set it to leftTopPadding instead\n            // (cannot use x || leftTopPadding because of 0)\n            x = x !== undefined\n                ? x\n                : this.leftTopPadding\n            y = y !== undefined\n                ? y\n                : this.leftTopPadding\n\n            this.simulationEnabled = false\n\n            // list of wires to be added\n            let newWires = new Map();\n\n            // find the leftmost and topmost coordinate of any box, save them to leftTopCorner\n            let leftTopCorner = {\n                x: 0,\n                y: 0\n            };\n\n            for (const boxData of data.boxes) {\n                if (boxData.transform && boxData.transform.items) {\n                    for (const transformInfo of boxData.transform.items) {\n                        if (transformInfo.name === \"translate\") {\n                            if (leftTopCorner) {\n                                leftTopCorner = {\n                                    x: Math.min(leftTopCorner.x, transformInfo.args[0]),\n                                    y: Math.min(leftTopCorner.y, transformInfo.args[1])\n                                }\n                            } else {\n                                leftTopCorner = {\n                                    x: transformInfo.args[0],\n                                    y: transformInfo.args[1]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            for (let boxData of data.boxes) {\n                // mapping of dataBox.name of the objects that have category \"other\"\n                const otherMap = {\n                    \"input\": () => this.newInput(0, 0, boxData.isOn, false),\n                    \"output\": () => this.newOutput(0, 0, false)\n                }\n\n                // mapping of dataBox.category\n                const boxMap = {\n                    \"gate\": () => this.newGate(boxData.name, 0, 0, false),\n                    \"blackbox\": () => this.newBlackbox(boxData.inputs, boxData.outputs, boxData.table, boxData.name, 0, 0, false),\n                    \"other\": () => {\n                        if (!boxData.name)\n                            throw `This network contains a box without a name.`\n\n                        if (!otherMap[boxData.name])\n                            throw `This network contains unknown box names. (${boxData.name})`\n\n                        return otherMap[boxData.name]()\n                    }\n                }\n\n                const createBox = () => {\n                    if (!boxData.category)\n                        throw `This network a box without a category.`;\n\n                    if (!boxMap[boxData.category])\n                        throw `This network contains unknown box categories. (${boxData.category})`;\n\n                    return boxMap[boxData.category]()\n                }\n\n                let box;\n\n                try {\n                    box = createBox();\n                } catch (e) {\n                    warnings.push(e);\n                }\n\n                if (box) {\n                    // proccess box transforms (translation and rotation)\n                    let transform = new editorElements.Transform();\n                    let rotationCount = 0;\n\n                    const transformItemMap = {\n                        \"translate\": (args) => {\n                            transform.setTranslate(\n                                args[0]\n                                    - leftTopCorner.x // make it the relative distance from the leftmost element\n                                    + x // apply the position\n                                    ,\n                                args[1]\n                                    - leftTopCorner.y // make it the relative distance from the topmost element\n                                    + y // apply the position\n                          );\n                        },\n                        \"rotate\": (args) => {\n                            rotationCount = args[0] % 360 / 90;\n                        }\n                    }\n\n                    if (boxData.transform && boxData.transform.items) {\n                        for (const transformItem of boxData.transform.items) {\n                            const {name, args} = transformItem;\n\n                            if (!name) {\n                                warnings.push(`This network contains unnamed transform properties.`);\n                                break;\n                            }\n\n                            if (!transformItemMap[name]) {\n                                warnings.push(`This network contains unknown transform properties. (${transformItem.name})`);\n                                break;\n                            }\n\n                            transformItemMap[name](args)\n                        }\n                    }\n\n                    transform.toSVGPixels(this);\n                    box.setTransform(transform);\n\n                    for (let i = 0; i < rotationCount; ++i) {\n                        box.rotate(true);\n                    }\n\n                    // add all wires to the list of wires to be added\n                    if (boxData.connections) {\n                        for (const connection of boxData.connections) {\n                            // get the artificial wire id\n                            let wireId = connection.wireId;\n\n                            // pass the values got from json into a variable that will be added into the map\n                            let value = {\n                                index: connection.index,\n                                boxId: box.id\n                            };\n\n                            // add the value to the map\n                            if (newWires.has(wireId)) {\n                                // if there already is a wire with this id in the map,\n                                // add the value to the end of the array of values\n                                let mapValue = newWires.get(wireId);\n                                mapValue.push(value);\n                                newWires.set(wireId, mapValue);\n                            } else {\n                                // if there is no wire with this id in the map\n                                // add the wire and set the value to be the first element in the array\n                                newWires.set(wireId, [value]);\n                            }\n                        }\n                    }\n                }\n            }\n\n            // refresh the SVG document (needed for wiring)\n            this.refresh();\n\n            // with all boxes added, we can now connect them with wires\n\n            // priority queue for the new wires, priority being (1 / manhattanDistance) between the conenctors, higher is better\n            let wireQueue = new PriorityQueue();\n\n            // get all ids for lal the\n            for (const wireInfo of newWires.values()) {\n                let connectorIds = [];\n\n                // create an array [connector1Id, connector2Id]\n                for (const {boxId, index}\n                of wireInfo) {\n                    connectorIds.push(this.getBoxById(boxId).connectors[index].id)\n                }\n\n                // create and array [{x, y}, {x, y}] containing positions for connectors 1 and 2\n                const connectorsPositions = connectorIds.map(connectorId => this.getConnectorPosition(this.getConnectorById(connectorId), true))\n\n                if (connectorsPositions.length === 2) {\n                    let wire = this.newWire(...connectorIds, false, false);\n\n                    // get the manhattan distance between these two connectors\n                    const distance = manhattanDistance(...connectorsPositions);\n\n                    // add connectorids to the priority queue\n                    wireQueue.enqueue(wire, 1 / distance);\n                } else {\n                    warnings.push(`Found a wire that does not have two endings. (It had ${connectorsPositions.length} instead.)`)\n                }\n            }\n\n            if (window.Worker) {\n                let wirePoints = [];\n                let wireReferences = [];\n\n                // convert the queue to an array (this is needed by the web worker)\n                while (!wireQueue.isEmpty()) {\n                    const wire = wireQueue.dequeue();\n\n                    let wireStart = this.getConnectorPosition(wire.connection.from.connector, true);\n                    let wireEnd = this.getConnectorPosition(wire.connection.to.connector, true);\n\n                    wirePoints.push([\n                        {\n                            x: wireStart.x / this.gridSize,\n                            y: wireStart.y / this.gridSize\n                        }, {\n                            x: wireEnd.x / this.gridSize,\n                            y: wireEnd.y / this.gridSize\n                        }\n                    ])\n\n                    wireReferences.push(wire);\n                }\n\n                // [routeWorkerFileName] replaced in the build process (defined in gulpfile) depending on devel / prod build\n                let myWorker = new Worker(\"js/[routeWorkerFileName]\");\n\n                let loadingMessage = this.messages.newLoadingMessage(\"looking for the best wiring…\");\n\n                myWorker.onmessage = (event) => {\n                    const {paths} = event.data\n                    // iterate wireReferences and paths synchronously\n                    wireReferences.forEach((wire, key) => {\n                        wire.setWirePath(wire.pathToPolyLine(paths[key]))\n                        wire.updateWireState();\n                    })\n\n                    loadingMessage.hide();\n                }\n\n                const message = {\n                    wires: wirePoints,\n                    nonRoutableNodes: this.getNonRoutableNodes(),\n                    inconvenientNodes: this.getInconvenientNodes()\n                }\n\n                myWorker.postMessage(message)\n\n            } else {\n                // web worker is not supported: use an interval to make the import a bit slower\n                // by dividing it into chunks, so the browser window is not entirely frozen when the wiring is happening\n\n                const wiresToBeRoutedAtOnce = 10;\n                const delayBetweenIterations = 200;\n\n                // add wires in the order from short to long\n                let wirePlacingInterval = window.setInterval(() => {\n                    if (!wireQueue.isEmpty()) {\n                        for (let i = 0; i < wiresToBeRoutedAtOnce; ++i) {\n                            if (wireQueue.isEmpty()) {\n                                break;\n                            }\n\n                            const wire = wireQueue.dequeue();\n                            wire.routeWire(true, false);\n                            wire.updateWireState();\n                        }\n                    } else {\n                        console.log(\"finished\");\n                        clearInterval(wirePlacingInterval);\n                    }\n                }, delayBetweenIterations)\n            }\n\n            // refresh the SVG document\n            this.refresh();\n\n            this.simulationEnabled = true;\n\n            resolve(warnings)\n        })\n    }\n\n    /**\n     * When user clicks on a connector, remember it until they click on some other connector.\n     * Than call newWire with the last two connectors ids as arguments.\n     * Visualize the process by displaying a grey wire between the first conenctor and the mouse pointer.\n     * @param  {string} connectorId id of the connector that the user clicked on\n     */\n    wireCreationHelper(connectorId, mousePosition) {\n        if (!this.wireCreation) {\n            this.wireCreation = {\n                fromId: connectorId\n            }\n\n            this.displayCreatedWire(mousePosition);\n        } else {\n            if (this.wireCreation.fromId !== connectorId) {\n                this.hideCreatedWire();\n\n                this.newWire(this.wireCreation.fromId, connectorId);\n\n                this.wireCreation = undefined;\n            }\n        }\n    }\n\n    /**\n     * helper for wireCreationHelper that displays a grey wire between the first connector and the specified mousePosition\n     * @param  {Object} mousePosition object with x and y coordinates in SVG pixels\n     */\n    displayCreatedWire(mousePosition) {\n        this.wireCreation.tempWire = new editorElements.HelperWire(this, this.wireCreation.fromId, mousePosition);\n\n        $(window).on('mousemove.wireCreation', event => {\n            event = this.viewbox.transformEvent(event)\n\n            mousePosition = {\n                x: event.pageX,\n                y: event.pageY\n            }\n\n            this.wireCreation.tempWire.updateMousePosition(mousePosition);\n        })\n\n        this.appendElement(this.wireCreation.tempWire);\n        this.moveToBackById(this.wireCreation.tempWire.id);\n    }\n\n    /**\n     * helper for wireCreationHelper that hides the temporary wire when wire creation is done\n     */\n    hideCreatedWire() {\n        $(window).off('mousemove.wireCreation');\n\n        this.wireCreation.tempWire.get().remove();\n        this.wireCreation.tempWire = undefined;\n    }\n\n    /**\n     * helper for wireCreationHelper that cancels the wire creation process\n     */\n    cancelWireCreation() {\n        if (this.wireCreation) {\n            this.hideCreatedWire();\n            this.wireCreation = undefined;\n        }\n    }\n\n    /**\n     * Run a logic simulation from the startingConnector.\n     * This refreshes the states of all elements in the network whose inputs are\n     * directly (or by transition) connected to startingConnector's output\n     * @param  {OutputConnector} startingConnector run simulation from this output connector\n     * @param  {Logic.state} state new state of the startingConnector\n     */\n    startNewSimulation(startingConnector, state) {\n        if (this.simulationEnabled) {\n            this.simulation = new Simulation(this)\n            this.simulation.notifyChange(startingConnector.id, state)\n            this.simulation.run()\n        }\n    }\n\n    /**\n     * Create a new gate on the specified position\n     * @param  {string}  name           type of the gate (and, or ...)\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the gate\n     * @return {editorElements.Gate}    instance of Gate that has been newly added\n     */\n    newGate(name, x, y, refresh = true) {\n        return this.newBox(x, y, new editorElements.Gate(this, name, x, y), refresh);\n    }\n\n    /**\n     * Create an input box on the specified position\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [isOn=false]   state of the input box (default is false (off))\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the input box\n     * @return {editorElements.InputBox}    instance of the InputBox that has been newly added\n     */\n    newInput(x, y, isOn = false, refresh = true) {\n        return this.newBox(x, y, new editorElements.InputBox(this, isOn), refresh);\n    }\n\n    /**\n     * Create an output box on the specified position\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the output box\n     * @return {editorElements.InputBox}    instance of the OutputBox that has been newly added\n     */\n    newOutput(x, y, refresh = true) {\n        return this.newBox(x, y, new editorElements.OutputBox(this), refresh);\n    }\n\n    /**\n     * Add a new Box to the Canvas\n     * @param  {number}  x              horizontal position of the box in SVG pixels\n     * @param  {number}  y              vertical position of the box in SVG pixels\n     * @param  {editorElements.Box}  object         instance of an object derived from the editorElements.Box class\n     * @param  {Boolean} [refresh=true] if true, this.refresh() will be called after adding the box\n     * @return {editorElements.Box}                 return the instance of the newly added object\n     */\n    newBox(x, y, object, refresh = true) {\n        let index = this.boxes.length;\n\n        this.boxes[index] = object;\n\n        // translate the gate if x and y has been specified\n        if (x && y) {\n            let tr = new editorElements.Transform();\n            tr.setTranslate(x, y);\n\n            this.boxes[index].svgObj.addAttr({\"transform\": tr.get()});\n        }\n\n        this.appendElement(this.boxes[index], refresh);\n\n        // if tutorial exists, call tutorial callback\n        if (this.tutorial) {\n            this.tutorial.onElementAdded(this.boxes[index].name);\n        }\n\n        return this.boxes[index];\n    }\n\n    /**\n     * Remove a box from Canvas based on the provided ID\n     * @param {string} boxId id of the box that should be removed\n     */\n    removeBox(boxId) {\n        let $gate = $(\"#\" + boxId);\n\n        // find the gate in svg's list of gates\n        let gateIndex = -1;\n        for (let i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].svgObj.id === boxId) {\n                gateIndex = i;\n                break;\n            }\n        }\n\n        if (gateIndex > -1) {\n            // remove all wires connected to this gate\n            for (let i = 0; i < this.boxes[gateIndex].connectors.length; i++) {\n                this.removeWiresByConnectorId(this.boxes[gateIndex].connectors[i].id);\n            }\n\n            // remove the gate\n            this.boxes.splice(gateIndex, 1);\n            $gate.remove();\n\n            // if tutorial exists, call tutorial callback\n            if (this.tutorial) {\n                this.tutorial.onElementRemoved();\n            }\n        } else {\n            console.error(\"Trying to remove an nonexisting box. Box id:\", boxId);\n        }\n    }\n\n    /**\n     * Remove all boxes from the canvas\n     */\n    cleanCanvas() {\n        // cannot simply iterate through the array because removeBox works with it\n\n        // create an array of ids\n        const ids = this.boxes.map(box => box.id);\n\n        // remove all boxes by their ids\n        for (const id of ids) {\n            this.removeBox(id);\n        }\n    }\n\n    /**\n     * Create a new wire connecting the provided connectors\n     * @param  {string}  fromId         id of the connector that the wire is attached to\n     * @param  {string}  toId           id of the connector that the wire is attached to\n     * @param  {Boolean} [refresh=true] if refresh is set to true, the SVG document will be reloaded after adding the wire\n     * @return {editorElements.Wire}    instance of editorElements.Wire that has been added to the Canvas\n     */\n    newWire(fromId, toId, refresh = true, route = true) {\n        // wire must connect two distinct connectors\n        if (fromId === toId)\n            return undefined\n\n        let connectors = [this.getConnectorById(fromId), this.getConnectorById(toId)]\n\n        // input connectors can be connected to one wire max\n        connectors.forEach(conn => {\n            if (conn.isInputConnector)\n                this.removeWiresByConnectorId(conn.id)\n        })\n        let index = this.wires.length;\n\n        try {\n            this.wires[index] = new editorElements.Wire(this, fromId, toId, refresh, route);\n        } catch (e) {\n            this.messages.newErrorMessage(e);\n            return undefined;\n        }\n\n        connectors.forEach(conn => {\n            conn.addWireId(this.wires[index].svgObj.id);\n        })\n\n        this.appendElement(this.wires[index], refresh);\n        this.moveToBackById(this.wires[index].svgObj.id);\n\n        if (refresh)\n            this.wires[index].updateWireState()\n\n        return this.wires[index];\n    }\n\n    /**\n     * get the coordinates of the specified connector\n     * @param  {Connector}  connector      instance of {@link Connector}\n     * @param  {Boolean} [snapToGrid=true] if true, the connector position will be snapped to the grid\n     * @return {Object}                    point - object containing numeric attributes `x` and `y`\n     */\n    getConnectorPosition(connector, snapToGrid = true) {\n        // connector.svgObj.id has to be called, else the getCoordinates does not work on the first call in Firefox 55\n        const dummy = connector.svgObj.id; // eslint-disable-line no-unused-vars\n\n        let $connector = connector.svgObj.$el;\n\n        let position = $connector.position();\n\n        position.left = this.viewbox.transformX(position.left)\n        position.top = this.viewbox.transformY(position.top)\n\n        let width = $connector.attr(\"width\");\n        let height = $connector.attr(\"height\");\n\n        let x = position.left + width / 2;\n        let y = position.top + height / 2;\n        if (snapToGrid) {\n            x = this.snapToGrid(x);\n            y = this.snapToGrid(y);\n        }\n\n        return {x: x, y: y};\n    }\n\n    /**\n     * creates a new blackbox\n     * @param  {number} x       horizontal position of the blackbox in SVG pixels\n     * @param  {number} y       vertical position of the gate in SVG pixels\n     * @param  {number} inputs  number of input pins of this blackbox\n     * @param  {number} outputs number of output pins of this blackbox\n     * @param  {Array} table   Array of arrays, each inner array contains list of [Logic.state](./module-Logic.html#.state)s,\n     *                          that describe the combination of input pin and output pin states in the order from the top to bottom for both input and output connectors.\n     *                          If we had an AND array as a blackbox, one of the states could be `[Logic.state.on, Logic.state.off, Logic.state.off]`\n     *                          which means that if the first input connector is in the `on` state and the second connector is in the `off` state,\n     *                          the state of the output connector will be `off`.\n     *                          The array can be described as `[state for input conn 1, state for input conn 2, ..., state for output conn 1, state for output conn 2 ...]`.\n     * @param  {string}  name   a name that will be displayed on the blackbox\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the gate\n     *\n     * @return {editorElements.Blackbox} instance of {@link Blackbox} that has been added to the [Canvas](./module-Canvas.html)\n     */\n    newBlackbox(inputs, outputs, table, name, x, y, refresh = true) {\n        const index = this.boxes.length;\n\n        this.boxes[index] = new editorElements.Blackbox(this, inputs, outputs, (...inputStates) => {\n            for (const line of table) {\n                const lineInputStates = line.slice(0, inputs);\n\n                // if every input state matches the corresponding input state in this line of the truth table\n                if (inputStates.every((value, index) => value === lineInputStates[index])) {\n                    // return the rest of the line as output\n                    return line.slice(inputs);\n                }\n            }\n            // if nothing matches, set all outputs to undefined\n            return Array.from(new Array(outputs), () => Logic.state.unknown)\n        }, name);\n\n        if (x && y) {\n            let tr = new editorElements.Transform();\n            tr.setTranslate(x, y);\n\n            this.boxes[index].svgObj.addAttr({\"transform\": tr.get()});\n        }\n\n        this.appendElement(this.boxes[index], refresh);\n\n        return this.boxes[index];\n    }\n\n    /**\n     * Find the correct instance of editorElements.Wire in the Canvas' wires by the provided id\n     * @param  {string} wireId id of the wire\n     * @return {editorElements.Wire} instance of the wire\n     */\n    getWireById(wireId) {\n        for (const wire of this.wires) {\n            if (wire.svgObj.id === wireId) {\n                return wire\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find all wires that are connected to the specified connector\n     * @param  {string} connectorId id of the connector\n     * @return {Set} set of ID's of the wires connected to this connector\n     */\n    getWiresByConnectorId(connectorId) {\n        let connector = this.getConnectorById(connectorId);\n        return connector.wireIds;\n    }\n\n    /**\n     * Remove wire that has the provided ID\n     * @param  {string} wireId ID of the wire that should be removed\n     */\n    removeWireById(wireId) {\n        for (let i = 0; i < this.wires.length; ++i) {\n            if (this.wires[i].svgObj.id === wireId) {\n\n                let {connectors} = this.wires[i];\n\n                for (let connector of connectors) {\n                    connector.removeWireIdAndUpdate(wireId);\n                }\n\n                // start simulation from the input connector to\n                // refresh the network after this wire\n\n                let inputConnector = this.wires[i].connection.to.connector;\n                this.startNewSimulation(inputConnector, inputConnector.state);\n\n                this.wires[i].svgObj.$el.remove();\n                this.wires.splice(i, 1);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Remove all wires that are connected to the connector provided by its ID\n     * @param  {string} connectorId ID of the connector\n     */\n    removeWiresByConnectorId(connectorId) {\n        let connector = this.getConnectorById(connectorId);\n\n        connector.wireIds.forEach(wireId => {\n            let wire = this.getWireById(wireId);\n\n            let {from, to} = wire.connection;\n\n            // get the other connector that is the wire connected to\n            let otherConnector = connectorId === from.id\n                ? to.connector\n                : from.connector;\n\n            // delete the wire record from the other connector\n            otherConnector.wireIds.delete(wireId);\n\n            // remove the wire representation using jQuery\n            $(\"#\" + wireId).remove();\n\n            // if otherConnector is an input connector, set its state to unknown\n            if (otherConnector.isInputConnector) {\n                otherConnector.setState(Logic.state.unknown)\n                this.startNewSimulation(otherConnector, Logic.state.unknown)\n            }\n        });\n\n        // clear the list of wire Ids\n        connector.wireIds.clear();\n        // if connector is an input connector, set its state to unknown\n        if (connector.isInputConnector) {\n            connector.setState(Logic.state.unknown)\n            this.startNewSimulation(connector, Logic.state.unknown)\n        }\n    }\n\n    /**\n     * Find the correct instance of editorElements.Box in the Canvas' boxes by the provided id\n     * @param  {string} boxId id of the box\n     * @return {editorElements.Box} instance of the box\n     */\n    getBoxById(boxId) {\n        for (let i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].svgObj.id === boxId) {\n                return this.boxes[i];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Find the correct instance of editorElements.Box in the Canvas' boxes by ID of a connector that belongs to this box\n     * @param  {string} boxId id of the connector\n     * @return {editorElements.Box} instance of the box\n     */\n    getBoxByConnectorId(connectorId) {\n        for (let i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].getConnectorById(connectorId) !== undefined) {\n                return this.boxes[i];\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get instance of a connector based on it's ID (and also on an instance of editorElements.Wire if provided)\n     *\n     * The wire variable is used as heuristic: When we know the wire, we have to check only\n     * two gates instead of all of them\n     * @param  {string} connectorId id of the connector\n     * @param  {editorElements.Wire} [wire]      instance of the Wire that is connected to this connector\n     * @return {editorElements.Connector}        instance of the connector\n     */\n    getConnectorById(connectorId, wire = undefined) {\n\n        if (wire !== undefined) {\n            // we know the wire -- we can check only gates at the ends of this wire\n            const {from, to} = wire.connection;\n\n            if (from.id === connectorId)\n                return from.connector;\n\n            if (to.id === connectorId)\n                return to.connector;\n\n            }\n        else {\n            // we do not know the wire -- we have to check all gates\n            for (const box of this.boxes) {\n                const connector = box.getConnectorById(connectorId)\n                if (connector) {\n                    return connector\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    /**\n     * Get the logical jQuery target based on the factual jQuery target.\n     *\n     * If the object, that user interacted with, is not a connector and is in a group,\n     * return the group jQuery object instead of the original jQuery object.\n     * @param  {target} target jQuery target of the object user interacted with\n     * @return {target}        jQuery target of the object user wanted to interact with\n     */\n    getRealJQueryTarget(target) {\n        let $target = $(target);\n        if (!$target.hasClass(\"connector\") && $target.parents('g').length > 0) {\n            $target = $target.parent();\n            while ($target.prop(\"tagName\") !== \"G\" && $target.prop(\"tagName\") !== \"g\") {\n                $target = $target.parent();\n            }\n        }\n        return $target;\n    }\n\n    // returns the editorElement that user interacted with, the \"target\" argument is a jQuery element\n    /**\n     * Get instance of some object from editorElement based on the jQuery target\n     * @param  {target} target jQuery target that user interacted with\n     * @return {editorElements.NetworkElement} instance of an object derived from editorElements.NetworkElement that the user interacted with\n     */\n    getRealTarget(target) {\n        if (target === undefined) {\n            return undefined;\n        }\n\n        // eventy se museji zpracovat tady, protoze v SVG se eventy nepropaguji\n        let $target = $(target);\n\n        if ($target.hasClass(\"connector\")) {\n            // this is a connector, don't traverse groups\n            return this.getConnectorById($target.attr('id'));\n        } else if ($target.parents('g').length > 0) {\n            // this element is in a group and it is not a connector\n\n            // traversing up the DOM tree until we find the closest group\n            let $parentGroup = $target.parent();\n            while ($parentGroup.prop(\"tagName\") !== \"G\" && $parentGroup.prop(\"tagName\") !== \"g\") {\n                $parentGroup = $parentGroup.parent();\n            }\n\n            // try to match the jQuery element to the logical element using DOM classes\n\n            if ($parentGroup.hasClass(\"box\")) {\n                // return the corresponding box\n                return this.getBoxById($parentGroup.attr('id'));\n            } else if ($parentGroup.hasClass(\"wire\")) {\n                // return the corresponding wire\n                return this.getWireById($parentGroup.attr('id'));\n            } else {\n                // found a group that contains the target, but this group does not match any known element types\n                return undefined;\n            }\n        } else {\n            // element does not match any known element types\n            return undefined;\n        }\n    }\n\n    /**\n     * Add an element to the Canvas\n     * @param  {editorElements.NetworkElement}  element Element that will be added on the Canvas\n     * @param  {Boolean} [refresh=true] if true, the SVG document will be reloaded after adding this element\n     */\n    appendElement(element, refresh = true) {\n        this.appendJQueryObject(element.get(), refresh);\n    }\n\n    /**\n     * Append a jQuery element to the SVG document (helper for this.appendElement)\n     * @param  {object}  object         jQuery element that will be added to the SVG document\n     * @param  {Boolean} [refresh=true] if true, the SVG document will be reloaded after adding this element\n     */\n    appendJQueryObject(object, refresh = true) {\n        this.$svg.append(object);\n        if (refresh)\n            this.refresh();\n        }\n\n    /**\n     * Add a new pattern to the definitions element in the SVG document\n     * @param {svgObj.Pattern} pattern pattern that will be added to the <devs> element in the SVG document\n     */\n    addPattern(pattern) {\n        this.$defs.append(pattern);\n        this.refresh();\n    }\n\n    /**\n     * Reload the SVG document (needed to display a newly appended jQuery object)\n     */\n    refresh() {\n        this.$svg.html(this.$svg.html());\n        console.log(\"SVG document has been reloaded.\")\n    }\n\n    /**\n     * Display the context menu on the specified position\n     * @param  {number} x       horizontal position in CSS pixels\n     * @param  {number} y       vertical position in CSS pixels\n     * @param  {jQuery.element} $target the item user clicked on (used to display \"remove this element\"-type items in the menu)\n     */\n    displayContextMenu(x, y, $target) {\n        this.contextMenu.display(x, y, $target);\n\n        // if tutorial exists, call tutorial callback\n        if (this.tutorial) {\n            this.tutorial.onContextMenuOpened();\n        }\n    }\n\n    /**\n     * hide the context menu\n     */\n    hideContextMenu() {\n        this.contextMenu.hide();\n    }\n\n    /**\n     * snap a value to a grid\n     * @param  {number} value value in SVG pixels\n     * @return {number}       the value rounded to the closest number divisible by the grid size\n     */\n    snapToGrid(value) {\n        return Math.round(value / this.gridSize) * this.gridSize;\n    }\n\n    /**\n     * convert grid pixels to SVG pixels\n     * @param  {number} value distance in grid pixels\n     * @return {number}       distance in SVG pixels\n     */\n    gridToSVG(value) {\n        return value * this.gridSize;\n    }\n\n    /**\n     * convert SVG pixels to grid pixels\n     * @param {number} value distance in SVG pixels\n     * @return {number}      distance in grud pixels\n     */\n    SVGToGrid(value) {\n        return value / this.gridSize;\n    }\n\n    /**\n     * static function for snapping a value to a grid\n     * @param  {number} value value in SVG pixels\n     * @param  {number} gridSize size of the grid in SVG pixels\n     * @return {number}       the value rounded to the closest number divisible by the grid size\n     */\n    static snapToGrid(value, gridSize) {\n        return Math.round(value / gridSize) * gridSize;\n    }\n\n    /**\n     * move an element to the front in the canvas\n     * @param  {string} objId id of the element\n     */\n    moveToFrontById(objId) {\n        this.$svg.append($(\"#\" + objId));\n    }\n\n    /**\n     * move an element to the back in the canvas\n     * @param  {string} objId id of the element\n     */\n    moveToBackById(objId) {\n        $(\"#\" + this.background.id).after($(\"#\" + objId));\n    }\n\n    /**\n     * get set of nodes, that cannot be used for wiring at any circumstances\n     * @return {Set} set of nodes (objects containing x and y coordinates) that are not suitable for wiring\n     */\n    getNonRoutableNodes() {\n        let blockedNodes = new Set();\n        // for each box\n        for (const box of this.boxes) {\n            const translate = box.getGridPixelTransform().getTranslate();\n\n            // for each item in blockedNodes (set of blocked nodes with coordinates relative\n            // to the left upper corner of rect; unit used is \"one gridSize\") convert the coordinates\n            // to absolute (multiple with gridSize and add position of rect) and add the result to the set\n            for (const node of box.blockedNodes) {\n                blockedNodes.add({\n                    x: translate.x + node.x,\n                    y: translate.y + node.y\n                });\n            }\n        }\n\n        // FOR DEBUG ONLY: display the non routable nodes\n        /*\n\n        if(this.nodeDisplay) {\n            for (const rectangleId of this.nodeDisplay) {\n                $(`#${rectangleId}`).remove();\n            }\n        }\n\n        this.nodeDisplay = [];\n\n        let first = true;\n\n        for (const node of blockedNodes) {\n            const x = this.gridToSVG(node.x);\n            const y = this.gridToSVG(node.y);\n\n            const w = 4;\n            const p = w / 2;\n\n            const nodeRectangle = new Rectangle(x - p, y - p, w, w, first ? \"blue\" : \"red\", \"none\")\n            this.nodeDisplay.push(nodeRectangle.id);\n            this.appendElement(nodeRectangle, false);\n\n            first = false;\n        }\n\n        this.refresh();\n\n        */\n        // END FOR DEBUG ONLY\n\n        // return the set\n        return blockedNodes;\n    }\n\n    /**\n     * get set of nodes, that are inconvenient for wiring, but can be used, just are not preferred\n     * @return {Set} set of nodes (objects containing x and y coordinates) that are not preferred for wiring\n     */\n    getInconvenientNodes(ignoreWireId) {\n        let inconvenientNodes = new Set();\n        // for each wire\n\n        for (const wire of this.wires) {\n            if (ignoreWireId === undefined || ignoreWireId !== wire.id) {\n                if (wire.inconvenientNodes) {\n                    for (const node of wire.inconvenientNodes) {\n                        inconvenientNodes.add(node);\n                    }\n                }\n            }\n        }\n\n        // FOR DEBUG ONLY: display the inconvenient nodes\n        /*\n\n        if(this.inconvenientNodeDisplay) {\n            for (const rectangleId of this.inconvenientNodeDisplay) {\n                $(`#${rectangleId}`).remove();\n            }\n        }\n\n        this.inconvenientNodeDisplay = [];\n\n        for (const node of inconvenientNodes) {\n            const x = this.gridToSVG(node.x);\n            const y = this.gridToSVG(node.y);\n\n            const w = 4;\n            const p = w / 2;\n\n            const nodeRectangle = new Rectangle(x - p, y - p, w, w, \"orange\", \"none\")\n            this.inconvenientNodeDisplay.push(nodeRectangle.id);\n            this.appendElement(nodeRectangle, false);\n        }\n\n        this.refresh();\n\n        */\n        // END FOR DEBUG ONLY\n\n        // return the set\n        return inconvenientNodes;\n    }\n}\n","/** @module Logic */\n/**\n * definitions of logic states and basic logic functions used in the simulation\n */\nexport default class Logic {\n    /**\n     * Enum for logic states.\n     *\n     * States:\n     * - `unknown`\n     * - `on`\n     * - `off`\n     * - `oscillating`\n     * @type {Number}\n     */\n    static get state() {\n        return {\n            unknown: 0,\n            on: 1,\n            off: 2,\n            oscillating: 3\n        }\n    }\n\n    /**\n     * list of all states that can be used in the simulation\n     *\n     * This getter iterates over Logic.state and returns an array containing all values of Logic.state's members\n     * @type {Array}\n     */\n    static get stateList() {\n        let states = [];\n\n        // iterate over all defined states and add their values to the states array\n        Object.keys(Logic.state).forEach(key => {\n            states.push(Logic.state[key]);\n        });\n\n        return states;\n    }\n\n    /**\n     * Logic AND\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static and(a, b) {\n        return Logic.runSymmetricRules(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.on],\n            [Logic.state.on, Logic.state.off, Logic.state.off],\n            [Logic.state.on, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.off],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.off],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n    /**\n     * Logic NAND\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static nand(a, b) {\n        return Logic.not(Logic.and(a, b));\n    }\n\n    /**\n     * Logic NOR\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static nor(a, b) {\n        return Logic.not(Logic.or(a, b));\n    }\n\n    /**\n     * Logic NOT\n     * @param  {Logic.state} a first input state\n     * @return {Logic.state}   output state\n     */\n    static not(a) {\n        if(a === Logic.state.on) {\n            return Logic.state.off;\n        } else if (a === Logic.state.off) {\n            return Logic.state.on;\n        } else {\n            return a;\n        }\n    }\n\n    /**\n     * Logic OR\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static or(a, b) {\n        return Logic.runSymmetricRules(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.on],\n            [Logic.state.on, Logic.state.off, Logic.state.on],\n            [Logic.state.on, Logic.state.unknown, Logic.state.on],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.on],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n\n    /**\n     * Logic XNOR\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static xnor(a, b) {\n        return Logic.not(Logic.xor(a, b));\n    }\n\n    /**\n     * Logic XOR\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static xor(a, b) {\n        return Logic.runSymmetricRules(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.off],\n            [Logic.state.on, Logic.state.off, Logic.state.on],\n            [Logic.state.on, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n\n    /**\n     * Finds the correct rule in the array of rules and returns the corresponding return value.\n     * This function expects rules to be symmetric (so `a RULE b` should returns the same value as `b RULE a`),\n     * which allows to cut down on the `rules` array quite a bit\n     * @param  {Logic.state} a     first input state\n     * @param  {Logic.state} b     second input state\n     * @param  {Array} rules       Array of arrays. Each inner array represents a rule in the format [input1, input2, output].\n     *                             The function finds an array, where `a === input1` and `b === input1` (or `a === input2` and `b === input1`)\n     *                             and returns `output` from this array.\n     * @return {Logic.state}       output state\n     */\n    static runSymmetricRules(a, b, rules) {\n        // iterate through all the rules\n        for (const rule of rules) {\n            if ((rule[0] === a && rule[1] === b) || (rule[0] === b && rule[1] === a)) {\n                return rule[2];\n            }\n        }\n\n        // if no rule matches, the output state is unknown\n        return Logic.state.unknown;\n    }\n}\n","import Logic from './Logic'\n\n/**\n * @module Simulation\n */\n\n\nclass stateChange {\n    constructor(connectorId, state, whoCausedIt) {\n        this.connectorId = connectorId\n        this.state = state\n        this.whoCausedIt = whoCausedIt\n    }\n}\n\n/**\n * This class runs the network simulation.\n *\n * _note: all connectors that are used in this class are **output connectors**_\n */\nexport default class Simulation {\n    /**\n     * @param {Canvas} parentSVG instance of [Canvas](./module-Canvas.html)\n     */\n    constructor(parentSVG) {\n        /**\n         * instance of Canvas this Simulation belongs to\n         * @type {Canvas}\n         */\n        this.parentSVG = parentSVG\n\n        /**\n         * maps each affected output connector to it's directly preceeding output connectors\n         * @type {Map}\n         */\n        this.predecessors = new Map();\n\n        /**\n         * maps waveId to an array of affected outputConnectors\n         * @type {Map}\n         */\n        this.waves = new Map();\n        this.wave = 0\n\n        /**\n         * maps cycled connector id to set of states this connector was in\n         * @type {Map}\n         */\n        this.cycledConnectors = new Map()\n\n        /**\n         * set of cycled connectors that have been already resolved\n         * @type {Set}\n         */\n        this.resolvedCycledConnectors = new Set()\n\n    }\n\n    /**\n     * run the simulation\n     */\n    run() {\n        this.wave++;\n        while(this.waves.has(this.wave)) {\n            this.step()\n            this.waves.delete(this.wave) // clean old waves on the go\n            this.wave++\n        }\n    }\n\n    /**\n     * one step/wave of the simulation\n     *\n     * determines states of the connectors in the current wave, detects cycles\n     */\n    step() {\n        for (let {connectorId, state, whoCausedIt} of this.waves.get(this.wave)) {\n            // skip resolved cycles\n            if(this.resolvedCycledConnectors.has(connectorId)) {\n                continue\n            }\n\n            // skip connector that are cycles\n            if (this.cycledConnectors.has(connectorId)) {\n                // get the set of states that this connector appeared from the moment the signal first cycled\n                let states = this.cycledConnectors.get(connectorId)\n\n                // if the connector already had this state in this cycle, resolve the cycle\n                if(states.has(state)) {\n\n                    // if there are more states in the set, the connector is oscillating\n                    // (else it keeps its state and we just break the cycle)\n                    if(states.size > 1) {\n                        state = Logic.state.oscillating\n                    }\n\n                    // mark this connector as resolved\n                    this.resolvedCycledConnectors.add(connectorId)\n\n                // this is a new, unseen state, add it to the set and continue simulating the cycle\n                } else {\n                    states.add(state)\n                }\n\n                // map the modified set of states to the connector\n                this.cycledConnectors.set(connectorId, states)\n            }\n\n            this.whoCausedIt = connectorId\n            /*  process all outputConnectors by setting their state\n                this will trigger a following event chain:\n                    outputConnector changes\n                    -> all connected wires change\n                    -> all inputConnectors connected to these wires change\n                    -> all elements that contain these inputConnectors change\n                    -> these elements compute the new state of their output connectors and call notifyChange()\n            */\n\n\n            if(whoCausedIt) {\n                this.addPredecessor(connectorId, whoCausedIt)\n            }\n\n            if (!this.cycledConnectors.has(connectorId) && this.getAllPredecessors(connectorId).has(connectorId)) {\n                this.cycledConnectors.set(connectorId, new Set([state]))\n            }\n\n\n            // reflect the changes in SVG\n            let connector = this.parentSVG.getConnectorById(connectorId)\n            if(connector) {\n                connector.setState(state)\n            }\n        }\n        this.whoCausedIt = undefined\n    }\n\n    /**\n     * mark a predecessorConnectorId as a predecessor of connectorId\n     * @param {string} connectorId ID of a connector\n     * @param {string} predecessorConnectorId predecessor of `connectorId`\n     */\n    addPredecessor(connectorId, predecessorConnectorId) {\n        if(!this.predecessors.has(connectorId)) {\n            this.predecessors.set(connectorId, new Set())\n        }\n\n        this.predecessors.get(connectorId).add(predecessorConnectorId)\n    }\n\n    /**\n     * get set of all output connectors that are before this output connector\n     * @param  {string} connectorId ID of a connector\n     * @return {Set}                set of connector ids that are before this output connector\n     */\n    getAllPredecessors(connectorId) {\n        if(!this.predecessors.has(connectorId)) {\n            this.predecessors.set(connectorId, new Set())\n        }\n\n        let all = new Set()\n\n        this.predecessors.get(connectorId).forEach(all.add, all);\n\n        let prevSize = 0\n        let size = all.size\n        while(prevSize < size) {\n            for (let connector of all) {\n                if (this.predecessors.has(connector)) {\n                    this.predecessors.get(connector).forEach(all.add, all);\n                }\n            }\n            prevSize = size\n            size = all.size\n        }\n\n        return all\n    }\n\n    /**\n     * Notify a change in the network. This function adds the changed connector to the next wave\n     * @param  {string} connectorId ID of the changed connector\n     * @param  {Logic.state} state  new [Logic.state](./module-Logic.html#.state) of the connector\n     */\n    notifyChange(connectorId, state) {\n        let waveId = this.wave + 1\n\n        if(!this.waves.has(waveId)) {\n            this.waves.set(waveId, [])\n        }\n\n        this.waves.get(waveId).push(new stateChange(connectorId, state, this.whoCausedIt));\n    }\n}\n","/** @module editorElements */\n\n// transform\nexport { default as Transform } from './editorElements/Transform'\n\n// connectors\nexport { default as InputConnector} from './editorElements/InputConnector'\nexport { default as OutputConnector} from './editorElements/OutputConnector'\n\n// boxes\nexport { default as InputBox} from './editorElements/InputBox'\nexport { default as OutputBox} from './editorElements/OutputBox'\nexport { default as Gate} from './editorElements/Gate'\nexport { default as Blackbox} from './editorElements/Blackbox'\n\n// helper wire\nexport { default as HelperWire} from './editorElements/HelperWire'\n\n// wire\nexport { default as Wire} from './editorElements/Wire'\n","import {Group, Rectangle, MultiLineText, PolyLine, PolyLinePoints, PolyLinePoint} from '../svgObjects'\nimport Logic from '../Logic'\n\nimport Box from './Box'\n\n/** @module editorElements.Blackbox */\n\n/**\n * Blackbox is a box that is defined by its evaluation function\n * @extends Box\n */\nexport default class Blackbox extends Box {\n    /**\n     * @param {Canvas} parentSVG  instance of [Canvas](./module-Canvas.html)\n     * @param {number} inputConnectors  number of input connectors\n     * @param {number} outputConnectors number of output connectors\n     * @param {Function} evalFunction   function that takes `inputConnectors` [Logic.state](./module-Logic.html#.state)s\n     *                                  and returns `outputConnectors` Logic.states.\n     * @param {String} [name]        name that will be displayed on the blackbox\n     */\n    constructor(parentSVG, inputConnectors, outputConnectors, evalFunction, name = \"\") {\n        const width = 11;\n        const height = Math.max(inputConnectors, outputConnectors) * 2;\n\n        super(parentSVG, name, \"blackbox\", width, height);\n\n        const connectorPinLenght = 2.5 * this.gridSize;\n\n        // override default svgObj structure\n        this.svgObj = new Group();\n\n        // transparent background rectangle\n        let hitbox = new Rectangle(0, 0, this.width, this.height, \"none\", \"none\");\n        hitbox.$el.addClass('rect');\n\n        this.svgObj.addChild(hitbox);\n\n        // main rectangle\n        const bodyWidth = this.width - 2 * connectorPinLenght;\n\n        let rectangle = new Rectangle(connectorPinLenght, 0, bodyWidth, this.height, \"white\", \"black\");\n        rectangle.addAttr({'stroke-width': '2.5'});\n        rectangle.$el.addClass('rect');\n\n        this.svgObj.addChild(rectangle);\n\n        // text description of the box\n        const textWidth = bodyWidth - this.gridSize;\n        const textHeight = this.height - this.gridSize;\n        let text = new MultiLineText(\n            (this.width - textWidth) / 2, // horizontal centering\n            (this.height - textHeight) / 2, // vertical centering\n            textWidth,\n            textHeight,\n            name.toUpperCase(),\n            this.gridSize * 1.2\n        );\n        this.svgObj.addChild(text);\n\n        // add input connectors\n        for (let i = 0 ; i < inputConnectors ; ++i) {\n            const gridPosition = (i * 2) + 1;\n            const pixelPosition = gridPosition * this.gridSize;\n\n            let pin = new PolyLine(\n                new PolyLinePoints([\n                    new PolyLinePoint(0, pixelPosition),\n                    new PolyLinePoint(connectorPinLenght, pixelPosition),\n                ]),\n                1,\n                \"black\"\n            )\n\n            this.svgObj.addChild(pin);\n\n            // add the connector\n            this.addInputConnector(0, gridPosition);\n        }\n\n        // add output connectors\n        for (let i = 0 ; i < outputConnectors ; ++i) {\n            const gridPosition = (i * 2) + 1;\n            const pixelPosition = gridPosition * this.gridSize;\n\n            let pin = new PolyLine(\n                new PolyLinePoints([\n                    new PolyLinePoint(this.width - connectorPinLenght, pixelPosition),\n                    new PolyLinePoint(this.width, pixelPosition),\n                ]),\n                1,\n                \"black\"\n            )\n\n            this.svgObj.addChild(pin);\n\n            this.addOutputConnector(width, gridPosition);\n        }\n\n        this.svgObj.$el.addClass(\"box\");\n\n        /**\n         * function that takes `inputConnectors` [Logic.state](./module-Logic.html#.state)s\n         * and returns `outputConnectors` Logic.states.\n         */\n        this.evalFunction = evalFunction;\n\n        // regenerate the blocked nodes after adding all the connectors\n        this.generateBlockNodes();\n    }\n\n    /**\n     * get data of this blackbox as a JSON-ready object\n     * @return {Object} javascript object containing essential data for this blackbox\n     */\n    get exportData() {\n        let data = super.exportData;\n        data.inputs = this.inputConnectors.length;\n        data.outputs = this.outputConnectors.length;\n\n        // generate the truth table\n\n        data.table = []\n\n        // array of tested input states\n        const stateList = Logic.stateList;\n\n        // recursive function that generates all possible inputs\n        const getPermutations = (length) => {\n            let permutations = [];\n            switch (length) {\n                case 0:\n                    return [];\n                case 1:\n                    for (const state of stateList) {\n                        permutations.push([state])\n                    }\n                    return permutations;\n                default:\n                    for (const state of stateList) {\n                        for(const perm of getPermutations(length - 1)) {\n                            permutations.push([state, ...perm])\n                        }\n                    }\n                    return permutations;\n            }\n        }\n\n        // generate outputs for all the possible inputs\n        for (const inputValues of getPermutations(data.inputs)) {\n            const outputValues = this.evalFunction(...inputValues);\n\n            // if there is an output value that is not Logic.state.unknown, add this line to the\n            // truthtable, otherwise don't add it (if all output values are Logic.state.unknown,\n            // the input combination does not have to be defines, because Logic.state.unknown is the default value)\n            if (outputValues.reduce((accumulator, current) => {\n                return accumulator || current !== Logic.state.unknown\n            })) {\n                data.table.push([...inputValues, ...outputValues])\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * proccess the input connector states and reflect them in the output connector states according\n     * to the logic defined by this.evalFunction\n     */\n    refreshState() {\n        const inputStates = this.inputConnectors.map(conn => conn.state);\n        // call the evalFunction to get the output states\n        const outputStates = this.evalFunction(...inputStates);\n\n        // apply the outputStates to the outputConnectors\n        for (let i = 0; i < outputStates.length ; ++i) {\n            this.outputConnectors[i].setState(outputStates[i]);\n        }\n    }\n\n    generateBlockNodes() {\n        // add blocked nodes on the connectors and between them as well\n\n        let specialNodes = []\n        for (let i = 1 ; i < this.inputConnectors.length * 2 ; ++i) {\n            specialNodes.push({\n                x: 0,\n                y: i\n            })\n        }\n        for (let i = 1 ; i < this.outputConnectors.length * 2 ; ++i) {\n            specialNodes.push({\n                x: this.gridWidth,\n                y: i\n            })\n        }\n\n        super.generateBlockNodes(0, 1, 0, 1, ...specialNodes);\n    }\n}\n","import {Group, Rectangle, SvgImage} from '../svgObjects'\n\nimport NetworkElement from './NetworkElement'\nimport InputConnector from './InputConnector'\nimport OutputConnector from './OutputConnector'\nimport Transform from './Transform'\n\n/** @module editorElements.Box */\n\n/**\n * Parent class for gates and input and output boxes. Defines all the factors\n * that the boxes have in common (svgObj structure, draggability and rotatability...)\n * @extends NetworkElement\n */\nexport default class Box extends NetworkElement {\n    /**\n     * @param {Canvas} parentSVG  instance of [Canvas](./module-Canvas.html)\n     * @param {string} name       name of the element (input, output, and, or, xor...)\n     * @param {string} category   type of the element (io, gate)\n     * @param {number} gridWidth  width of the element in grid pixels\n     * @param {number} gridHeight height of the element in grid pixels\n     */\n    constructor(parentSVG, name, category, gridWidth, gridHeight) {\n        super(parentSVG);\n\n        /**\n         * specifies the box type within the category (input/output in io, and/or/... in gate)\n         * @type {string}\n         */\n        this.name = name;\n\n        /**\n         * specifies the box category (io for input or output, gate for logic gates)\n         * @type {string}\n         */\n        this.category = category;\n\n        /**\n         * size of the grid in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = this.parentSVG.gridSize;\n\n        /**\n         * array of connectors of this box\n         * @type {Array}\n         */\n        this.connectors = [];\n\n        /**\n         * svgObj containing all SVG data used to display this box\n         * @type {svgObj}\n         */\n        this.svgObj = new Group();\n\n        /**\n         * width of this element in SVG pixels\n         * @type {number}\n         */\n        this.width = gridWidth * this.gridSize;\n        /**\n         * height of this element in SVG pixels\n         * @type {number}\n         */\n        this.height = gridHeight * this.gridSize;\n\n        /**\n         * width of this element in grid pixels\n         * @type {number}\n         */\n        this.gridWidth = gridWidth;\n        /**\n         * height of this element in grid pixels\n         * @type {number}\n         */\n        this.gridHeight = gridHeight;\n\n        // transparent background rectangle\n        let rectangle = new Rectangle(0, 0, this.width, this.height, \"none\", \"none\");\n        rectangle.$el.addClass('rect');\n\n        this.svgObj.addChild(rectangle);\n\n        // image of the element\n        this.image = new SvgImage(0, 0, this.width, this.height, this.url);\n        this.svgObj.addChild(this.image);\n\n        // add type=\"gate\", used in special callbacks in contextmenu\n        this.svgObj.addAttr({\"type\": category});\n\n        this.svgObj.$el.addClass(\"box\");\n        this.svgObj.$el.addClass(category);\n    }\n\n    /**\n     * url of the image depicting this object\n     * @type {string}\n     */\n    get url() {\n        const\n            category = this.category || \"\",\n            name = this.name || \"\",\n            suffix = this.imgSuffix || \"\";\n\n        return `img/svg/${category}/${name}${suffix}.svg`;\n    }\n\n    /**\n     * get all input connectors of this box\n     * @return {Array} array of input connectors\n     */\n    get inputConnectors() {\n        return this.connectors.filter(conn => conn.isInputConnector)\n    }\n\n    /**\n     * get all output connectors of this box\n     * @return {Array} array of output connectors\n     */\n    get outputConnectors() {\n        return this.connectors.filter(conn => conn.isOutputConnector)\n    }\n\n    /**\n     * get data of this box as a JSON-ready object\n     * @return {Object} javascript object containing essential data for this box\n     */\n    get exportData() {\n        let connections = [];\n\n        // go through all connectors\n        let counter = 0\n        for (const conn of this.connectors) {\n            // go through each its wire id\n            for (const item of conn.wireIds) {\n                let thisWireId;\n                if(!this.parentSVG.exportWireIdMap.has(item)) {\n                    // if the wire id is not in the map, add it and assign new arbitrary id\n                    this.parentSVG.exportWireIdMap.set(item, this.parentSVG.exportWireId);\n                    thisWireId = this.parentSVG.exportWireId;\n                    this.parentSVG.exportWireId++;\n                } else {\n                    // else get id from the map\n                    thisWireId = this.parentSVG.exportWireIdMap.get(item);\n                }\n\n\n                // add this connection to the list\n                connections[connections.length] = {\n                    index: counter,\n                    type: conn.type,\n                    wireId: thisWireId\n                };\n            }\n            counter++\n        }\n\n        return {\n            name: this.name,\n            category: this.category,\n            transform: this.getTransform(true),\n            connections: connections\n        };\n    }\n\n    /**\n     * get set of nodes that are not suitable for wire routing\n     * @param  {Number} [marginTop=0]    top margin of the element (distance from the element that should be also blocked)\n     * @param  {Number} [marginRight=0]  right margin of the element\n     * @param  {Number} [marginBottom=0] bottom margin of the element\n     * @param  {Number} [marginLeft=0]   left margin of the element\n     * @param  {Number} specialNodes     additional nodes that should be added to the set\n     * @return {Set}                     set of not suitable nodes\n     */\n    generateBlockNodes(marginTop = 0, marginRight = 0, marginBottom = 0, marginLeft = 0, ...specialNodes) {\n        this.blockedNodes = new Set();\n        for(let x = marginLeft ; x <= this.gridWidth - marginRight ; x++) {\n            for(let y = marginTop ; y <= this.gridHeight - marginBottom ; y++) {\n                this.blockedNodes.add({\n                    x: x,\n                    y: y\n                });\n            }\n        }\n\n        for (let node of specialNodes) {\n            this.blockedNodes.add(node);\n        }\n    }\n\n    /**\n     * empty function, redefined in inherited elements\n     * refreshState takes input connector values and sets output values accordingly\n     */\n    refreshState() {\n        console.warn(\"Calling the virtual function refreshState has no effect.\");\n    }\n\n    /**\n     * change image to another one that ends with a specified suffix\n     *\n     * *usage:* `changeImage(\"abc\")` changes image url to `image-abc.svg`,\n     * `changeImage()` changes image url to the default one (`image.svg`)\n     * @param  {string} [suffix] new suffix for the image\n     */\n    changeImage(suffix) {\n        if(suffix === undefined || suffix === \"\") {\n            this.imgSuffix = \"\";\n        } else {\n            this.imgSuffix = \"-\" + suffix;\n        }\n\n        this.image.changeUrl(this.url);\n    }\n\n    /**\n     * get a jQuery element representing this box\n     * @return {jQuery.element}\n     */\n    get() {\n        return this.svgObj.get();\n    }\n\n    /**\n     * rotate the set of blocked nodes by 90 degrees to the right or to the left, depending on the parameter\n     *\n     * used to rotate the nodes when the object itself is rotated\n     * @param  {boolean} right rotate clockwise if true, counterclockwise if false\n     */\n    rotateBlockedNodes(center, right) {\n        if(this.rotationParity===undefined) {\n            this.rotationParity = false;\n        }\n\n        this.rotationParity = !this.rotationParity;\n\n        let newBlockedNodes = new Set();\n\n        // rotate the node\n\n        for (const node of this.blockedNodes) {\n            let newNode;\n\n            const parityFactor =  (this.rotationParity ? 1 : -1);\n\n            if(right) {\n                newNode = {\n                    x: - node.y + this.gridHeight + (center.x - center.y) * parityFactor,\n                    y: node.x + (center.y - center.x) * parityFactor\n                };\n            } else {\n                newNode = {\n                    x: node.y + (center.x - center.y) * parityFactor\n                }\n\n                if(this.rotationParity) {\n                    newNode.y = - node.x + this.gridWidth + ((this.gridHeight - center.y) - (this.gridWidth - center.x))\n                } else {\n                    newNode.y = - node.x + this.gridHeight + (center.y - center.x)\n                }\n            }\n\n            newBlockedNodes.add(newNode);\n        }\n\n        this.blockedNodes = newBlockedNodes;\n    }\n\n    /**\n     * rotate the set of blocked nodes to the right\n     *\n     * used to rotate the nodes when the object itself is rotated\n     */\n    rotateBlockedNodesRight(center) {\n        this.rotateBlockedNodes(center, true);\n    }\n\n    /**\n     * rotate the set of blocked nodes to the right\n     *\n     * used to rotate the nodes when the object itself is rotated\n     */\n    rotateBlockedNodesLeft(center) {\n        this.rotateBlockedNodes(center, false);\n    }\n\n    rotate(clockWise) {\n        // get the transform value for this box\n        let transform = this.getTransform();\n\n        // get the bounding rectangle for this box\n        let rect = this.svgObj.$el[0].getBoundingClientRect();\n\n        // use the bounding rectangle dimensions to figure out the geometrical center of the box\n        const center = {\n            x: Math.round(rect.width / 2),\n            y: Math.round(rect.height / 2)\n        }\n\n        center.x -= center.x % this.gridSize;\n        center.y -= center.y % this.gridSize;\n\n        // apply the rotation to the transform object\n        if(clockWise) {\n            transform.rotateRight(center.x, center.y);\n        } else {\n            transform.rotateLeft(center.x, center.y);\n        }\n\n\n        // apply the modified transform object ot the svgObj\n        this.svgObj.addAttr({\"transform\": transform.get()});\n\n        const gridCenter = {\n            x: center.x / this.gridSize,\n            y: center.y / this.gridSize\n        };\n\n        // rotate also the blocked nodes\n        if(clockWise) {\n            this.rotateBlockedNodesRight(gridCenter);\n        } else {\n            this.rotateBlockedNodesLeft(gridCenter);\n        }\n\n        // update the wires\n        this.updateWires();\n\n        // if tutorial exists, call tutorial callback\n        if(this.parentSVG.tutorial) {\n            this.parentSVG.tutorial.onBoxRotated();\n        }\n    }\n\n    /**\n     * add a connector to the element on the specified position\n     * @param {number}  left             horizontal distance from the left edge of the element\n     * @param {number}  top              vertical distance from the top edge of the element\n     * @param {Boolean} isInputConnector whether or not should this connector an input connector (`true` for input connector, `false` for output connector)\n     */\n    addConnector(left, top, isInputConnector) {\n        let index = this.connectors.length;\n        if(isInputConnector) {\n            this.connectors[index] = new InputConnector(this.parentSVG, left, top);\n        } else {\n            this.connectors[index] = new OutputConnector(this.parentSVG, left, top);\n        }\n        this.svgObj.addChild(this.connectors[index].get());\n    }\n\n    /**\n     * add an input connector to the element on the specified position\n     * @param {number} left horizontal distance from the left edge of the element\n     * @param {number} top  vertical distance from the top edge of the element\n     */\n    addInputConnector(left, top) {\n        return this.addConnector(left, top, true)\n    }\n\n    /**\n     * add an output connector to the element on the specified position\n     * @param {number} left horizontal distance from the left edge of the element\n     * @param {number} top  vertical distance from the top edge of the element\n     */\n    addOutputConnector(left, top) {\n        return this.addConnector(left, top, false)\n    }\n\n    /**\n     * get the connector object based on its id\n     * @param  {string} connectorId ID of the {@link Connector}\n     * @return {Connector}             instance of the {@link Connector} or `undefined` if not found\n     */\n    getConnectorById(connectorId) {\n        for(let i = 0 ; i < this.connectors.length ; i++) {\n            if(this.connectors[i].id===connectorId) {\n                return this.connectors[i];\n            }\n        }\n        // if connector not found, return undefined\n        return undefined;\n    }\n\n    /**\n     * get the instance of {@link Transform} representing the state of the transform attribute of this element\n     * @param  {Boolean} [gridPixels=false] if `true`, function will return the result in grid pixels instead of SVG pixels\n     * @return {Transform}                  {@link Transform} of the element\n     */\n    getTransform(gridPixels = false) {\n        let transform;\n        if (!this.svgObj.$el.attr(\"transform\")) {\n            // the element does not have a \"transform\" property --> create it\n            transform = new Transform();\n            transform.setTranslate(0, 0);\n            this.svgObj.addAttr({\"transform\": transform.get()});\n        } else {\n            // the element does have a \"transform\" property --> change it\n            transform = new Transform(this.svgObj.$el.attr(\"transform\"));\n        }\n\n        // convert values to grid pixels\n        if(gridPixels) {\n            transform.toGridPixels(this.parentSVG);\n        }\n\n        return transform;\n    }\n\n    /**\n     * get the instance of {@link Transform} representing the state of the transform attribute of this element _with lenght units in grid pixels_\n     * @return {Transform} {@link Transform} of the element\n     */\n    getGridPixelTransform() {\n        return this.getTransform(true);\n    }\n\n    /**\n     * set the transform attribute of this element\n     * @param {Transform} transform {@link Transform} of the element (with lengths specified in SVG pixels)\n     */\n    setTransform(transform) {\n        this.svgObj.addAttr({\"transform\": transform.get()});\n    }\n\n    /**\n     * function that is called on every mouse down on this element\n     *\n     * moves the element to the front and calls onMouseDownLeft if applicable\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseDown(event) {\n        this.mouseLeft = false;\n        if(event.which === 1) {\n            this.mouseLeft = true;\n            this.onMouseDownLeft(event);\n\n            // move the DOM element to front\n            this.parentSVG.moveToFrontById(this.svgObj.id);\n        }\n    }\n\n    /**\n     * function that is called on every left mouse down on this element\n     *\n     * prepares element for the \"click\" and \"drag and drop\" actions\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseDownLeft(event) {\n        this.mouseMoved = false;\n\n        let transform = this.getTransform();\n\n        // save the current item position into a variable\n        let currentPosition = transform.getTranslate();\n\n        let {pageX, pageY} = this.parentSVG.viewbox.transformEvent(event)\n\n        // calculate mouse offset from the object origin\n        this.offset = {\n            x: pageX - currentPosition.x,\n            y: pageY - currentPosition.y\n        };\n    }\n\n    /**\n     * function that is called on every left mouse move with this element\n     * applies the correct transform values to provide the \"drag and drop\" functionality\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseMove(event) {\n        if(this.mouseLeft) {\n            this.svgObj.$el.addClass('grabbed');\n\n            this.mouseMoved = true;\n\n            let {pageX, pageY} = this.parentSVG.viewbox.transformEvent(event)\n\n            const left = pageX - this.offset.x;\n            const top = pageY - this.offset.y;\n\n            let transform = this.getTransform();\n            transform.setTranslate(left, top);\n\n            this.setTransform(transform);\n\n            this.updateWires(true);\n        }\n    }\n\n    /**\n     * function that is called on every mouse up on this element\n     * provides the \"click\" functionality and calls the onDrop handler for the \"drag and drop\" functionality\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseUp(event) {\n        if(event.which === 1) {\n            if(this.mouseMoved) {\n                this.onDrop(event);\n            } else {\n                this.onClick();\n            }\n        } else if (event.which === 2 ) {\n            this.onClickMiddle(event);\n        }\n\n        this.svgObj.$el.removeClass('grabbed');\n    }\n\n    /**\n     * called by onMouseUp when the mouse has been moved between onMouseDown and onMouseUp\n     *\n     * applies grid snapping of the element on the end of the \"drag and drop\" action\n     * @param  {jQuery.MouseEvent} event\n     */\n    onDrop(event) {\n        let {pageX, pageY} = this.parentSVG.viewbox.transformEvent(event)\n\n        let left = pageX - this.offset.x;\n        let top = pageY - this.offset.y;\n\n        left = this.parentSVG.snapToGrid(left);\n        top = this.parentSVG.snapToGrid(top);\n\n        let transform = this.getTransform();\n        transform.setTranslate(left, top);\n\n        this.setTransform(transform);\n\n        this.updateWires();\n\n        // if tutorial exists, call tutorial callback\n        if(this.parentSVG.tutorial) {\n            this.parentSVG.tutorial.onBoxMoved();\n        }\n    }\n\n    /**\n     * empty function, will be redefined in InputBox\n     */\n    onClick() {}\n\n    /**\n     * custom callback function for middle click that rotates the box by 90 degrees to the right\n     */\n    onClickMiddle(event) {\n        if(event.ctrlKey) {\n            this.rotate(false);\n        } else {\n            this.rotate(true);\n        }\n    }\n\n    /**\n     * Updates all wires connected to this box. Iterates over all wires that are connected to this box\n     * and calls routeWire (or temporaryWire if the `temporary` parameter is set to true) to update the wire routing\n     * @param  {Boolean} [temporary=false] [description]\n     */\n    updateWires(temporary = false) {\n        this.connectors.forEach(conn => {\n            conn.wireIds.forEach(wireId => {\n                let wire = this.parentSVG.getWireById(wireId);\n                if(temporary) {\n                    wire.temporaryWire();\n                } else {\n                    wire.routeWire();\n                }\n            })\n        })\n    }\n}\n","import NetworkElement from './NetworkElement';\nimport {Rectangle} from '../svgObjects'\nimport Logic from '../Logic'\n\nimport stateClasses from './stateClasses'\n\n/** @module editorElements.Connector */\n\n/**\n * parent class for input and output connectors\n * @extends NetworkElement\n */\nexport default class Connector extends NetworkElement {\n    /**\n     * @param {Canvas} parentSVG link to the {@link Canvas} instance that this connector will belong to\n     * @param {number} gridSize  size of the grid in SVG pixels\n     * @param {number} left      horizontal position defined in grid units (SVG pixels divided by the grid size)\n     * @param {number} top       vertical position defined in grid units (SVG pixels divided by the grid size)\n     */\n    constructor(parentSVG, left, top) {\n        super(parentSVG);\n\n        /**\n         * size of the grid in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = parentSVG.gridSize;\n        /**\n         * size of the connector in SVG pixels\n         * @type {number}\n         */\n        this.connectorSize = parentSVG.gridSize;\n        /**\n         * offset of the connector from the grid in SVG pixels\n         * @type {number}\n         */\n        this.connectorOffset = this.connectorSize / 2;\n\n        /**\n         * instance of {@link svgObjects.svgObj} that holds all SVG information about this connector\n         * @type {svgObj}\n         */\n        this.svgObj = new Rectangle(\n            left * this.gridSize - this.connectorOffset,\n            top * this.gridSize - this.connectorOffset,\n            this.connectorSize,\n            this.connectorSize,\n            \"none\",\n            \"black\"\n        );\n\n        this.svgObj.$el.addClass(\"connector\");\n\n        /**\n         * this flag describes whether this connector is an input connector\n         * @type {Boolean}\n         */\n        this.isInputConnector = false;\n\n        /**\n         * current logical state of this connector\n         * @type {Logic.state}\n         */\n        this.elementState = Logic.state.unknown;\n        this.svgObj.addClass(stateClasses[Logic.state.unknown]);\n\n        /**\n         * set of ids of all wires connected to this connector\n         * @type {Set}\n         */\n        this.wireIds = new Set();\n    }\n\n    /**\n     * whether this connector is an output connector\n     * @return {Boolean}\n     */\n    get isOutputConnector() {\n        return !this.isInputConnector;\n    }\n\n    /**\n     * whether this connector is an output connector\n     * @return {Boolean}\n     */\n    set isOutputConnector(value) {\n        this.isInputConnector = !value;\n    }\n\n    /**\n     * add a wire id to the list of wire ids\n     * @param {string} wireId\n     */\n    addWireId(wireId) {\n        this.wireIds.add(wireId);\n    }\n\n    /**\n     * remove a wire id from the list of wire ids\n     * @param {string} wireId\n     */\n    removeWireId(wireId) {\n        this.wireIds.delete(wireId);\n    }\n\n    /**\n     * remove a wire specified by ID and update the connector\n     * @param  {string} wireId ID of the wire to be removed\n     */\n    removeWireIdAndUpdate(wireId) {\n        this.removeWireId(wireId);\n    }\n\n    /**\n     * set logical state of the connector\n     * @param {Logic.state} state new state of the connector\n     */\n    setState(state) {\n        this.svgObj.removeClasses(...stateClasses);\n        this.svgObj.addClass(stateClasses[state]);\n\n        this.elementState = state;\n    }\n\n    /**\n     * get state of this connector\n     * @return {Logic.state}\n     */\n    get state() {\n        return this.elementState;\n    }\n\n    /**\n     * get svgObj instance content of this connector\n     * @return {svgObjects.Rectangle}\n     */\n    get() {\n        return this.svgObj;\n    }\n\n    /**\n     * call [wireCreationHelper](./module-Canvas.html#wireCreationHelper) on mouse up\n     */\n    onMouseUp(event) {\n        // only left click counts\n        if(event.which === 1) {\n            event = this.parentSVG.viewbox.transformEvent(event);\n\n            const mousePosition = {\n                x: event.pageX,\n                y: event.pageY\n            }\n\n            this.parentSVG.wireCreationHelper(this.svgObj.id, mousePosition);\n        }\n    }\n}\n","import Logic from '../Logic'\n\nimport Box from './Box'\n\n/** @module editorElements.Gate */\n\n/**\n * Gate is a box that processes the states of its input connectors and returns the result in its output connectors.\n * @extends Box\n */\nexport default class Gate extends Box {\n    /**\n     * @param {Canvas} parentSVG  instance of [Canvas](./module-Canvas.html)\n     * @param {string} name       name of the gate (and, not, xor...)\n     */\n    constructor(parentSVG, name) {\n        const width = 9;\n        const height = 4;\n\n        super(parentSVG, name, \"gate\", width, height);\n\n        // ADD CONNECTORS\n\n        let specialNodes = [];\n\n        // output\n        this.addConnector(width, height / 2, false);\n\n        // block the output connector\n        specialNodes.push({\n            x: width,\n            y: height / 2\n        });\n\n        if(this.name===\"not\" || this.name===\"repeater\") {\n            // input\n            this.addConnector(0, height / 2, true);\n            // block the input connector\n            specialNodes.push({\n                x: 0,\n                y: height / 2\n            });\n        } else {\n            // input\n            this.addConnector(0, height / 4, true);\n            this.addConnector(0, height / (4/3), true);\n\n            // block the input connectors\n            specialNodes.push({\n                x: 0,\n                y: height / 4\n            })\n            specialNodes.push({\n                x: 0,\n                y: height / (4/3)\n            });\n\n            // add one blocked node between the inputs (for better looking wiring)\n            specialNodes.push({\n                x: 0,\n                y: height / 2\n            });\n        }\n\n        this.generateBlockNodes(...specialNodes);\n\n        this.refreshState();\n    }\n\n    /**\n     * array of valid gate names\n     * @type {Set}\n     */\n    static get validGates() {\n        return new Set([\"not\", \"and\", \"or\", \"nand\", \"nor\", \"xor\", \"xnor\", \"repeater\"]);\n    }\n\n    generateBlockNodes(...specialNodes) {\n        if(specialNodes!==undefined) {\n            super.generateBlockNodes(0, 1, 0, 1, ...specialNodes);\n        } else {\n            super.generateBlockNodes(0, 1, 0, 1);\n        }\n    }\n\n    /**\n     * proccess the input connector states and reflect them in the output connector states according\n     * to the logic corresponding to this gate's name\n     */\n    refreshState() {\n        // map gate names to their logic functions\n        const stateMap = {\n            \"and\": () => Logic.and(this.connectors[1].state, this.connectors[2].state),\n            \"nand\": () => Logic.nand(this.connectors[1].state, this.connectors[2].state),\n            \"nor\": () => Logic.nor(this.connectors[1].state, this.connectors[2].state),\n            \"not\": () => Logic.not(this.connectors[1].state),\n            \"or\": () => Logic.or(this.connectors[1].state, this.connectors[2].state),\n            \"xnor\": () => Logic.xnor(this.connectors[1].state, this.connectors[2].state),\n            \"xor\": () => Logic.xor(this.connectors[1].state, this.connectors[2].state),\n            \"repeater\": () => this.connectors[1].state\n        }\n\n        let state = Logic.state.unknown\n\n        if(stateMap[this.name]) {\n            state = stateMap[this.name]()\n        }\n\n        // notify the simulator about this change\n        this.parentSVG.simulation.notifyChange(this.connectors[0].id, state)\n    }\n}\n","import {PolyLine, PolyLinePoints, PolyLinePoint} from '../svgObjects'\n\nimport NetworkElement from './NetworkElement'\n\n/** @module editorElements.HelperWire */\n\n/**\n * A temporary wire that is connecting a {@link Connector} with a mouse pointer when user creates a wire.\n * @extends NetworkElement\n */\nexport default class HelperWire extends NetworkElement {\n    constructor(parentSVG, fromId, mousePosition) {\n        super(parentSVG);\n\n        const connector = this.parentSVG.getConnectorById(fromId);\n        this.connectorPosition = this.parentSVG.getConnectorPosition(connector, true);\n\n        const from = new PolyLinePoint(this.connectorPosition.x, this.connectorPosition.y);\n        const to = new PolyLinePoint(mousePosition.x, mousePosition.y);\n\n        const points = new PolyLinePoints([from, to]);\n\n        this.svgObj = new PolyLine(points, 2, \"#8b8b8b\");\n    }\n\n    updateMousePosition(mousePosition) {\n        const from = new PolyLinePoint(this.connectorPosition.x, this.connectorPosition.y);\n        const to = new PolyLinePoint(mousePosition.x, mousePosition.y);\n\n        const points = new PolyLinePoints([from, to]);\n\n        this.svgObj.updatePoints(points);\n    }\n\n    /**\n     * get the jQuery element for this helper wire\n     * @return {jQuery.element}\n     */\n    get() {\n        return this.svgObj.get();\n    }\n}\n","import Logic from '../Logic'\n\nimport Box from './Box'\n\n/** @module editorElements.InputBox */\n\n/**\n * InputBox has only output connectors and is used to set the input states for the logic network.\n * @extends Box\n */\nexport default class InputBox extends Box {\n    /**\n     * @param {Canvas} parentSVG  instance of [Canvas](./module-Canvas.html)\n     * @param {Boolean} [isOn=false] the initial state of the inputbox (`true` is *on*, `false` is *off*)\n     */\n    constructor(parentSVG, isOn = false) {\n        const gridWidth = 7;\n        const gridHeight = 4;\n\n        super(parentSVG, \"input\", \"other\", gridWidth, gridHeight);\n\n        this.addConnector(gridWidth, gridHeight / 2, false);\n\n        this.on = isOn;\n\n        this.generateBlockNodes();\n    }\n\n    /**\n     * get data of this input box as a JSON-ready object\n     * @return {Object} javascript object containing essential data for this input box\n     */\n    get exportData() {\n        let data = super.exportData;\n        data.isOn = this.isOn;\n\n        return data;\n    }\n\n    generateBlockNodes() {\n        // block the input connector node\n        const specialNode = {\n            x: this.gridWidth,\n            y: this.gridHeight / 2\n        }\n        super.generateBlockNodes(0, 1, 1, 0, specialNode);\n    }\n\n    /**\n     * start a new simulation from the output connector\n     */\n    refreshState() {\n        this.parentSVG.startNewSimulation(this.connectors[0], this.connectors[0].state)\n    }\n\n    /**\n     * set the state of the inputbox to the corresponding value\n     * @param  {Boolean} isOn set to *on* if `true`, set to *off* if `false`\n     */\n    set on(isOn) {\n        if (isOn) {\n            // turn on\n            this.changeImage(\"on\");\n            this.connectors[0].setState(Logic.state.on);\n            this.refreshState()\n        } else {\n            // turn off\n            this.changeImage();\n            this.connectors[0].setState(Logic.state.off);\n            this.refreshState()\n        }\n\n        this.isOn = isOn;\n    }\n\n    /**\n     * get the state of the inputbox (`true` if *on*, `false` if *off*)\n     * @return {Boolean} [description]\n     */\n    get on() {\n        return this.isOn;\n    }\n\n    /**\n     * toggle the state of the inputbox\n     */\n    onClick() {\n        this.on = !this.on;\n\n        if(this.parentSVG.tutorial) {\n            this.parentSVG.tutorial.onChangeInputBoxState();\n        }\n    }\n}\n","import Connector from './Connector'\nimport Logic from '../Logic'\n\n/** @module editorElements.InputConnector */\n\n/**\n * Connector that gets its state from a connected value and passes it through to the {@link Box} this connector belongs to.\n * @extends Connector\n */\nexport default class InputConnector extends Connector {\n    /**\n     * Call the constructor from the parent {@link Connector} class and set isInputConnector to true.\n     * @param {Canvas} parentSVG link to the {@link Canvas} instance that this connector will belong to\n     * @param {number} left      horizontal position defined in grid units (SVG pixels divided by the grid size)\n     * @param {number} top       vertical position defined in grid units (SVG pixels divided by the grid size)\n     */\n    constructor(parentSVG, left, top) {\n        super(parentSVG, left, top);\n\n        this.isInputConnector = true;\n    }\n\n    /**\n     * Call the setState method of {@link Connector} and than refresh the state of the connected {@link Box}\n     * @param {Logic.state} state new {@link Logic.state} of the connector\n     */\n    setState(state) {\n        super.setState(state);\n        // console.log(\"SET STATE ON IC\", this.id, \":\", state)\n\n        let box = this.parentSVG.getBoxByConnectorId(this.svgObj.id);\n        box.refreshState();\n    }\n\n    /**\n     * remove the wire (by calling the removeWireIdAndUpdate of {@link Connector})\n     * and update state of this connector by setting it to undefined using the setState method\n     * @param  {string} wireId ID of the {@link Wire}\n     */\n    removeWireIdAndUpdate(wireId) {\n        super.removeWireIdAndUpdate(wireId);\n        this.setState(Logic.state.unknown);\n    }\n}\n","/** @module editorElements.NetworkElement */\n\n/**\n * parent class for all network elements\n */\nexport default class NetworkElement {\n    /**\n     * Basic constructor for NetworkElement\n     * @param {Canvas} parentSVG reference to the instance of {@link Canvas} that this element belongs to\n     */\n    constructor(parentSVG) {\n        if(!parentSVG) {\n            console.error(\"Parent SVG element has to be defined.\");\n        }\n        this.parentSVG = parentSVG;\n\n        // used to store the svjObject's instance of this element\n        this.svgObj = undefined;\n    }\n\n    /**\n     * Get the unique ID of the SVG element tied to this logical element\n     * @return {string} ID of the SVG element\n     */\n    get id() {\n        return this.svgObj.id;\n    }\n\n    /**\n     * empty callback function to prevent error messages, function is implemented later in the {@link Box} class\n     */\n    onMouseDown() {}\n\n    /**\n     * empty function to prevent error messages, function is implemented later in the {@link Box} and {@link Connector} classes\n     */\n    onMouseUp() {}\n\n    /**\n     * empty function to prevent error messages, function is implemented later in the {@link Box} class\n     */\n    onMouseMove() {}\n\n    /**\n     * \"virtual\" getter for json data, prints an error that it has to be redefined in the derived classes\n     */\n    get exportData() {\n        console.error(\"'json' getter has not been defined for this element\", this);\n        return undefined;\n    }\n}\n","import Logic from '../Logic'\n\nimport Box from './Box'\n\n/** @module editorElements.OutputBox */\n\n/**\n * OutputBox has only input connectors and is used to visualize the output states of the logic network.\n * @extends Box\n */\nexport default class OutputBox extends Box {\n    /**\n     * @param {Canvas} parentSVG  instance of [Canvas](./module-Canvas.html)\n     */\n    constructor(parentSVG) {\n        const gridHeight = 4;\n        const gridWidth = 5;\n\n        super(parentSVG, \"output\", \"other\", gridWidth, gridHeight);\n\n        this.addConnector(0, gridHeight / 2, true);\n\n        this.generateBlockNodes();\n    }\n\n    /**\n     * set state of this output box to match the state of its input connector\n     */\n    refreshState() {\n        this.setState(this.connectors[0].state);\n    }\n\n    /**\n     * Reflect the input connector state in the appearance of the element - set\n     * the element image to represent the corresponding state\n     * @param {Logic.state} state new state of this outputBox\n     */\n    setState(state) {\n        if(state===Logic.state.on){\n            if(this.parentSVG.tutorial) {\n                this.parentSVG.tutorial.onOutputBoxTrue();\n            }\n        }\n\n        let stateMap = {};\n        stateMap[Logic.state.on] = \"on\"\n        stateMap[Logic.state.off] = \"off\"\n        stateMap[Logic.state.unknown] = \"\"\n        stateMap[Logic.state.oscillating] = \"osc\"\n\n        this.changeImage(stateMap[state]);\n    }\n\n    generateBlockNodes() {\n        // block the input connector node\n        const specialNode = {\n            x: 0,\n            y: this.gridHeight / 2\n        }\n        super.generateBlockNodes(0, 0, 0, 1, specialNode);\n    }\n}\n","import Connector from './Connector'\n\n/** @module editorElements.OutputConnector */\n\n/**\n * Connector that takes a state defined by the {@link Box} it belongs to and passes it to all connected wire\n * @extends Connector\n */\nexport default class OutputConnector extends Connector {\n    /**\n     * Call the constructor from the parent {@link Connector} class and set isOutputConnector to true.\n     * @param {Canvas} parentSVG link to the {@link Canvas} instance that this connector will belong to\n     * @param {number} left      horizontal position defined in grid units (SVG pixels divided by the grid size)\n     * @param {number} top       vertical position defined in grid units (SVG pixels divided by the grid size)\n     */\n    constructor(parentSVG, left, top) {\n        super(parentSVG, left, top);\n\n        this.isOutputConnector = true;\n    }\n\n    /**\n     * Call the setState method of {@link Connector} and than set the state of the connected {@link Wire}s\n     * @param {Logic.state} state new {@link Logic.state} of the connector\n     */\n    setState(state) {\n        super.setState(state);\n\n        for (const wireId of this.wireIds) {\n            this.parentSVG.getWireById(wireId).setState(state);\n        }\n    }\n}\n","/** @module editorElements.Transform */\n\n/**\n * Helper class used by {@link Transform}.\n *\n * Represents one single property of the transform argument, for example `translate(360 150)`\n * that may be a part of longer transform argument like `transform=\"translate(360 150) rotate(90 30 20)\"`\n */\nclass Property {\n    /**\n     * Initialize the Property object\n     * @param {string} [string] string in the property format `propertyname(list of space separated values)`\n     */\n    constructor(string) {\n        if(string!==undefined) {\n            this.name = string.replace(/^[ ]*([^(]+).*/, \"$1\");\n            this.args = string.replace(/^[^(]+\\((.*)\\)/, \"$1\").split(' ');\n        }\n    }\n\n    /**\n     * set or replace the name of this property\n     * @param {string} name new name for this property\n     */\n    setName(name) {\n        this.name = name;\n    }\n\n    /**\n     * set arguments of this property\n     * @param {array} args array of arguments\n     */\n    setArguments(args) {\n        this.args = args;\n    }\n\n    /**\n     * get string representation of the property\n     * @return {string} property in the property format `name(arg1 arg2)`\n     */\n    get() {\n        return this.name + \"(\" + this.args.join(\" \") + \")\";\n    }\n}\n\n/**\n * API for manipulating the transform argument used in SVG\n */\nexport default class Transform {\n    /**\n     * Initialize the Transform object\n     * @param {string} [string] string in the format of the `transform` argument in SVG, for example `translate(360 150) rotate(90 30 20)`\n     */\n    constructor(string) {\n        /**\n         * array of {@link Property} instances\n         * @type {Array}\n         */\n        this.items = [];\n\n        if(string!==undefined) {\n            for (const item of string.split(\")\")) {\n                if(item) { // if not empty\n                    this.items.push(new Property(item + \")\"));\n                }\n            }\n        }\n    }\n\n    /**\n     * convert distances from SVG pixels to grid pixels\n     * @param  {Canvas} parentSVG instance of [Canvas](./module-Canvas.html)\n     */\n    toGridPixels(parentSVG) {\n        this.pixelConversion((val) => parentSVG.SVGToGrid(val))\n    }\n\n    /**\n     * convert distances from grid pixels to SVG pixels\n     * @param  {Canvas} parentSVG instance of [Canvas](./module-Canvas.html)\n     */\n    toSVGPixels(parentSVG) {\n        this.pixelConversion((val) => parentSVG.gridToSVG(val))\n    }\n\n    /**\n     * Convert distances using a specified convertor. Used by toGridPixels and toSVGPixels\n     * @param  {Function} convertor function that converts int to int\n     */\n    pixelConversion(convertor) {\n        const propertyMap = {\n            \"translate\": (item) => {\n                item.args = item.args.map(arg => convertor(arg))\n                return item;\n            },\n            \"rotate\": (item) => {\n                item.args = [\n                    item.args[0],\n                    convertor(item.args[1]),\n                    convertor(item.args[2])\n                ]\n                return item;\n            }\n        }\n\n        this.items = this.items.map((item) => {\n            return propertyMap[item.name] ? propertyMap[item.name](item) : item\n        })\n    }\n\n    /**\n     * find a transform property by name and get its index in the [items](#items) array\n     * @param  {string} name name of the property\n     * @return {number}      index of the property in the array of properties or `-1` if not found\n     */\n    getIndex(name) {\n        for(let i = 0 ; i < this.items.length; i++) {\n            if(name === this.items[i].name) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * get the translate property\n     * @return {Object} object containing parameters of the translate attribute\n     */\n    getTranslate() {\n        let args = this.getArguments(this.getIndex(\"translate\"));\n\n        return {\n            x: Number(args[0]),\n            y: Number(args[1])\n        }\n    }\n\n    /**\n     * get the rotate property\n     * @return {Object} object containing parameters of the rotate attribute\n     */\n    getRotate() {\n        let args = this.getArguments(this.getIndex(\"rotate\"));\n\n        return {\n            deg: Number(args[0]),\n            centerX: Number(args[1]),\n            centerY: Number(args[2])\n        }\n    }\n\n    /**\n     * set translate to the specified values\n     * @param {number} x horizontal translation\n     * @param {number} y vertical translation\n     */\n    setTranslate(x, y) {\n        this.setParameter(\"translate\", [x, y]);\n    }\n\n    /**\n     * set rotate to the specified values\n     * @param {number} deg     angle of the rotation in degrees\n     * @param {number} centerX horizontal position of the center of the rotation\n     * @param {number} centerY vertical position of the center of the rotation\n     */\n    setRotate(deg, centerX, centerY) {\n        this.setParameter(\"rotate\", [deg, centerX, centerY]);\n    }\n\n    /**\n     * rotate by 90 degrees to the right or left, depending on the parameter `right`\n     * @param {number} centerX horizontal position of the center of the rotation\n     * @param {number} centerY vertical position of the center of the rotation\n     * @param {boolean} right rotate to the right if `true`, to the left if `false`\n     */\n    rotateRightAngle(centerX, centerY, right) {\n        const amount = right ? 90 : 270;\n\n        if(this.getIndex(\"rotate\")===-1) {\n            this.setRotate(amount, centerX, centerY);\n        } else {\n            let newRotation = (parseInt(this.getRotate().deg) + amount) % 360;\n\n            if(newRotation===180) {\n                // swap center coordinates\n                // because rotate(c, x, y) is defined like transform(-x, -y) rotate(c) transform(x, y)\n                let a = centerX;\n                centerX = centerY;\n                centerY = a;\n            }\n\n            this.setRotate(\n                newRotation,\n                centerX,\n                centerY\n            );\n        }\n    }\n\n    /**\n     * rotate by 90 degrees to the right\n     * @param  {number} centerX horizontal position of the center of the rotation\n     * @param  {number} centerY vertical position of the center of the rotation\n     */\n    rotateRight(centerX, centerY) {\n        this.rotateRightAngle(centerX, centerY, true);\n    }\n\n    /**\n     * rotate by 90 degrees to the left\n     * @param  {number} centerX horizontal position of the center of the rotation\n     * @param  {number} centerY vertical position of the center of the rotation\n     */\n    rotateLeft(centerX, centerY) {\n        this.rotateRightAngle(centerX, centerY, false);\n    }\n\n    /**\n     * get the transform values in a string\n     * @return {string} string that can be used as a value for the transform property of a SVG element\n     */\n    get() {\n        let retVal;\n        for(const item of this.items) {\n            if(retVal) {\n                retVal += \" \" + item.get();\n            } else {\n                retVal = item.get();\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * get arguments of a property specified by index\n     * @param  {number} index index of the property\n     * @return {array}       array of arguments of the specified property\n     */\n    getArguments(index) {\n        return this.items[index].args;\n    }\n\n    /**\n     * set argumets of a property specified by name\n     * @param {string} name name of the property\n     * @param {array} args array of arguments of the specified property\n     */\n    setParameter(name, args) {\n        // determine index of the parameter (if set), else index == -1\n        let index = this.getIndex(name);\n\n        // if the property has been already set, change it (rewrite the array in the right index)\n        // else create a new one (set index to the length of an array --> ad an item to the end)\n        if(index===-1) {\n            index = this.items.length;\n            this.items[index] = new Property();\n            this.items[index].setName(name);\n        }\n\n        // save args under the right index\n        this.items[index].setArguments(args);\n    }\n}\n","/** @module editorElements.Wire */\n\nimport {PolyLine, PolyLinePoints, PolyLinePoint, Group} from '../svgObjects'\nimport Logic from '../Logic'\nimport stateClasses from './stateClasses'\nimport findPath from '../findPath'\n\nimport NetworkElement from './NetworkElement'\n\n/**\n * Wire represents connection of two {@link Connector}s.\n * @extends NetworkElement\n */\nexport default class Wire extends NetworkElement {\n    /**\n     * @param {Canvas} parentSVG  instance of [Canvas](./module-Canvas.html)\n     * @param {string}  fromId    id of the first connector this wire will be connected to\n     * @param {string}  toId      id of the second connector this wire will be connected to\n     * @param {Boolean} [refresh=true] if `true`, the [Canvas](./module-Canvas.html) will refresh after creating this wire\n     */\n    constructor(parentSVG, fromId, toId, refresh = true, route = true) {\n        super(parentSVG);\n\n        this.gridSize = parentSVG.gridSize;\n\n        this.connection = {\n            from: {\n                id: fromId,\n                box: this.parentSVG.getBoxByConnectorId(fromId),\n                connector: this.parentSVG.getConnectorById(fromId)\n            },\n            to: {\n                id: toId,\n                box: this.parentSVG.getBoxByConnectorId(toId),\n                connector: this.parentSVG.getConnectorById(toId)\n            }\n        }\n\n        if(this.connection.from.connector.isOutputConnector) {\n            if(this.connection.to.connector.isInputConnector) {\n                // desired state\n            } else {\n                // connecting two output connectors\n                throw \"Can not place wire between two output connectors\";\n            }\n        } else {\n            if(this.connection.to.connector.isInputConnector) {\n                // connecting two input connectors\n                throw \"Can not place wire between two input connectors\";\n            } else {\n                // swap them and we are ready to go\n                [ this.connection.from, this.connection.to ] = [ this.connection.to, this.connection.from ];\n            }\n        }\n\n        if(route) {\n            this.routeWire(true, refresh);\n        } else {\n            this.temporaryWire();\n        }\n\n        this.elementState = Logic.state.unknown;\n\n        this.setState(this.connection.from.connector.state)\n\n        if(refresh) {\n            const {connector} = this.connection.to;\n            this.parentSVG.startNewSimulation(connector, connector.state);\n        }\n\n        this.svgObj.$el.addClass(\"wire\");\n    }\n\n    get boxes() {\n        return [this.connection.from.box, this.connection.to.box];\n    }\n\n    get connectors() {\n        return [this.connection.from.connector, this.connection.to.connector];\n    }\n\n    /**\n     * get data of this wire as a JSON-ready object\n     * @return {Object} javascript object containing essential data for this wire\n     */\n    get exportData() {\n        return {\n            fromId: this.connection.from.id,\n            toId: this.connection.to.id\n        };\n    }\n\n    /**\n     * set the state of this wire to match the state of the input connector it is connected to\n     * @param {Logic.state} state [description]\n     */\n    setState(state) {\n        this.svgObj.removeClasses(...stateClasses);\n        this.svgObj.addClass(stateClasses[state]);\n\n        this.connection.to.connector.setState(state);\n\n        this.elementState = state;\n    }\n\n    /**\n     * get the current [Logic.state](./modules-Logic.html#.state) of this wire\n     * @return {Logic.state}\n     */\n    get state() {\n        return this.elementState;\n    }\n\n    /**\n     * update the state of this wire\n     */\n    updateWireState() {\n        // TODO investigate\n        for (const box of this.boxes) {\n            box.refreshState()\n        }\n    }\n\n    /**\n     * get the jQuery element for this wire\n     * @return {jQuery.element}\n     */\n    get() {\n        return this.svgObj.get();\n    }\n\n    /**\n     * get the PolyLine points for a temporary wire placement connecting the two connectors\n     * @return {PolyLinePoints} new instance of {@link PolyLinePoints}\n     */\n    getTemporaryWirePoints() {\n        let points = new PolyLinePoints();\n        points.append(new PolyLinePoint(this.wireStart.x, this.wireStart.y));\n        points.append(new PolyLinePoint(this.wireEnd.x, this.wireEnd.y));\n        return points;\n    }\n\n    /**\n     * route the wire using the temporary wire points\n     */\n    temporaryWire() {\n        this.wireStart = this.parentSVG.getConnectorPosition(this.connection.from.connector, false);\n        this.wireEnd = this.parentSVG.getConnectorPosition(this.connection.to.connector, false);\n\n        this.setWirePath(this.getTemporaryWirePoints());\n    }\n\n    /**\n     * route the wire using the modified A* wire routing algorithm\n     */\n    routeWire(snapToGrid = true, refresh = true) {\n        this.wireStart = this.parentSVG.getConnectorPosition(this.connection.from.connector, snapToGrid);\n        this.wireEnd = this.parentSVG.getConnectorPosition(this.connection.to.connector, snapToGrid);\n\n        this.points = this.findRoute(\n            {\n                x: this.wireStart.x / this.gridSize,\n                y: this.wireStart.y / this.gridSize\n            },\n            {\n                x: this.wireEnd.x / this.gridSize,\n                y: this.wireEnd.y / this.gridSize\n            });\n\n        this.setWirePath(this.points);\n\n        if (refresh)\n            this.updateWireState();\n\n        // regenerate inconvenient nodes\n        this.generateInconvenientNodes();\n    }\n\n    /**\n     * set the wire to follow the specified points\n     * @param {PolyLinePoints} points instance of {@link PolyLinePoints}\n     */\n    setWirePath(points) {\n        // set the line\n        if(this.svgObj!==undefined) {\n            // this.svgObj.updatePoints(points);\n            for (let child of this.svgObj.children) {\n                child.updatePoints(points);\n            }\n        } else {\n            this.svgObj = new Group();\n\n            let hitbox = new PolyLine(points, 10, 'white');\n            hitbox.addClass(\"hitbox\");\n            hitbox.addAttr({opacity: 0});\n            this.svgObj.addChild(hitbox);\n\n            let mainLine = new PolyLine(points, 2);\n            mainLine.addClass(\"main\", \"stateUnknown\");\n            this.svgObj.addChild(mainLine);\n        }\n    }\n\n    pathToPolyLine(path) {\n        let totalPath = new PolyLinePoints();\n        for (const point of path) {\n            totalPath.append(new PolyLinePoint(point.x * this.gridSize, point.y * this.gridSize));\n        }\n        return totalPath;\n    }\n\n    /**\n     * find a nice route for the wire\n     * @param  {Object} start object containing numeric attributes `x` and `y` that represent the first endpoint of the wire in grid pixel\n     * @param  {Object} end   object containing numeric attributes `x` and `y` that represent the second endpoint of the wire in grid pixels\n     * @return {PolyLinePoints}       [description]\n     */\n    findRoute(start, end) {\n        let nonRoutable = this.parentSVG.getNonRoutableNodes();\n\n        let punishedButRoutable;\n        if(this.svgObj===undefined) {\n            punishedButRoutable = this.parentSVG.getInconvenientNodes();\n        } else {\n            punishedButRoutable = this.parentSVG.getInconvenientNodes(this.svgObj.id);\n        }\n\n        let path = findPath(start, end, nonRoutable, punishedButRoutable, this.gridSize);\n\n        if(path) {\n            return this.pathToPolyLine(path);\n        }\n\n\n        // if a path was not found, try again but don't take into account the punished and non routable node\n        path = findPath(start, end, new Set(), new Set(), this.gridSize);\n\n        if(path) {\n            return this.pathToPolyLine(path);\n        }\n\n        // if the path was still not found, give up and return temporary points\n        return this.getTemporaryWirePoints();\n    }\n\n    /**\n     * generate a set of nodes, that are inconvenient for wiring, but can be used, just are not preferred\n     * @return {Set} set of nodes (objects containing x and y coordinates) that are not preferred for wiring\n     */\n    generateInconvenientNodes() {\n        this.inconvenientNodes = new Set();\n\n        let prevPoint;\n\n        this.points.forEach(point => {\n            const\n                x = this.parentSVG.SVGToGrid(point.x),\n                y = this.parentSVG.SVGToGrid(point.y);\n\n            if (prevPoint === undefined) {\n                // if the prevPoint is undefined, add the first point\n                this.inconvenientNodes.add({x, y});\n            } else {\n                // else add all the point between the prevPoint (excluded) and point (included)\n\n                if(prevPoint.x === x) {\n                    // if the line is horizontal\n                    let from = Math.min(prevPoint.y, y);\n                    let to = Math.max(prevPoint.y, y);\n\n                    while(from <= to) {\n                        this.inconvenientNodes.add({x: x, y: from});\n                        from++;\n                    }\n                } else if(prevPoint.y === y) {\n                    // if the line is vertical\n                    let from = Math.min(prevPoint.x, x);\n                    let to = Math.max(prevPoint.x, x);\n\n                    while(from <= to) {\n                        this.inconvenientNodes.add({x: from, y: y});\n                        from++;\n                    }\n                } else {\n                    // line is neither horizontal nor vertical, throw an error for better future debugging\n                    // console.error(\"getInconvenientNodes: line between two points is neither horizontal nor vertical\");\n                }\n            }\n\n            // set new prevPoint\n            prevPoint = {x, y};\n        });\n    }\n}\n","import Logic from '../Logic'\n\n/**\n * mapping of logical states to css classes\n * @type {Object}\n */\n\nlet map = []; // array so we can use the ...spread operator\n\nmap[Logic.state.on] = \"stateOn\"\nmap[Logic.state.off] = \"stateOff\"\nmap[Logic.state.unknown] = \"stateUnknown\"\nmap[Logic.state.oscillating] = \"stateOscillating\"\n\nexport default map;\n","import { manhattanDistance } from './other/helperFunctions'\nimport MapWithDefaultValue from './other/mapWithDefaultValue'\n\nimport { PriorityQueue } from 'libstl'; // note: imported from a node module\n\n/** @module findPath */\n\n/**\n * Heavily modified implementation of the A* algorithm\n * @param  {Object} start object containing numeric attributes `x` and `y` that represent the first endpoint of the wire in grid pixels\n * @param  {Object} end   object containing numeric attributes `x` and `y` that represent the second endpoint of the wire in grid pixels\n * @param  {Set} nonRoutable set of non routable nodes\n * @param  {Set} punishedButRoutable set of nodes that are not optimal for routing\n * @return {Array} array of objects containing numeric attributes `x` and `y`\n */\nexport default function findPath(start, end, nonRoutable, punishedButRoutable) {\n    const distanceFunction = manhattanDistance;\n\n    const wireCrossPunishment = 1;\n    const wireBendPunishment = 1;\n\n    // number of nodes, that can be opened at once\n    // once is this limit exceeded, aStar will fail and return undefined\n    const maxNodeLimit = 100000;\n\n    let closedNodes = new Set();\n    let openNodes = new Set();\n    let openNodeQueue = new PriorityQueue();\n\n    // functions for working with open nodes:\n\n    /**\n     * add a new open node to the structure\n     * @param {Object} node   object containing numeric attributes `x` and `y` that represent the first endpoint of the wire\n     * @param {number} fscore fScore of this node\n     */\n    const addOpenNode = (node, fscore) => {\n        openNodes.add(node);\n        // flip the fscore, because PriorityQueue uses max heap\n        openNodeQueue.enqueue(node, 1 / fscore);\n    }\n\n    /**\n     * get the open node with the lowest fScore and remove it\n     * @return {Object} object containing numeric attributes `x` and `y` that represent the first endpoint of the wire\n     */\n    const getOpenNode = () => {\n        const node = openNodeQueue.dequeue();\n        openNodes.delete(node);\n        return node;\n    }\n\n    let cameFrom = new Map();\n\n    // default value: infinity\n    let gScore = new MapWithDefaultValue(Infinity);\n    gScore.set(start, 0);\n\n    let startFScore = distanceFunction(start, end);\n\n    addOpenNode(start, startFScore);\n\n    openNodes.add(start);\n    openNodeQueue.enqueue(start, 1 / startFScore);\n\n    while (openNodes.size > 0) {\n        // get the value from openNodes that has the lowest fScore\n        const currentNode = getOpenNode();\n\n        // if we reached the end point, reconstruct the path and return it\n        if (currentNode.x == end.x && currentNode.y == end.y) {\n            return reconstructPath(cameFrom, currentNode);\n        }\n\n        // add this node to the closed nodes\n        closedNodes.add(currentNode);\n\n        // the farthest points accessible without avoiding obstacles in every direction\n        // (but max 50 in each direction)\n        for (let direction = 0; direction < 4; direction++) {\n            let newPoint = movePoint(currentNode, direction);\n\n            let wiresCrossed = 0;\n\n            for (let i = 0; i < 50; i++) {\n                // if newPoint is in the set of non routable points,\n                // don't add it and stop proceeding in this direction\n                if (setHasThisPoint(nonRoutable, newPoint)) {\n                    // if this not the end or start point, break\n                    if (!(newPoint.x === end.x && newPoint.y === end.y) &&\n                        !(newPoint.x === start.x && newPoint.y === start.y)) {\n                            break;\n                    }\n                }\n\n                // skip this node, if it has been already closed\n                // or if it is on the list of non routable nodes\n                if (closedNodes.has(newPoint)) {\n                    continue;\n                }\n\n                // calculate possible GScore by applying a punishment for each node (\"bend\") in the path\n                let newGScore = wireBendPunishment + gScore.getWithDefault(currentNode);\n\n                if (setHasThisPoint(punishedButRoutable, newPoint)) {\n                    // if the node is in the set of punished nodes, apply the punishment\n                    wiresCrossed++;\n                }\n\n                // apply the punishment for each wire crossed in this direction\n                // note: we are counting the wires crossed when exporting this direction, not the wires\n                // crossed in the final path, there will be probably only at most of these nodes in the\n                // final path, not multiple\n                newGScore += wiresCrossed * wireCrossPunishment;\n\n                // skip this node if it has worst estimage gscore than in the gscore table\n                if (newGScore >= gScore.getWithDefault(newPoint)) {\n                    continue;\n                }\n\n                cameFrom.set(newPoint, currentNode);\n                gScore.set(newPoint, newGScore);\n\n                const newFScore = newGScore + distanceFunction(newPoint, end);\n\n                if (!openNodes.has(newPoint)) {\n                    // add the point to the list of points\n                    addOpenNode(newPoint, newFScore);\n                }\n\n                // move to the next point in the direciton\n                newPoint = movePoint(newPoint, direction);\n            }\n        }\n\n        if (openNodes.size > maxNodeLimit) {\n            console.log(`aStar: Number of open nodes (${openNodes.size}) exceeded the limit for open nodes (${maxNodeLimit}).`)\n            break;\n        }\n    }\n    // if we got here, the path was not found\n\n    return undefined;\n}\n\n/**\n * returns `true` if the specified set of points contains the specified point (and returns `false` otherwise)\n * @param {Set} set set of points\n * @param {Object} point object containing numeric attributes `x` and `y`\n */\nfunction setHasThisPoint(set, point) {\n    for (let item of set) {\n        if (item.x === point.x && item.y === point.y) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Helper that moves the passed point in the specified direction. It simply adds or subtracts 1 from one of the coordinates depending on the direction attribute.\n * @param  {Object} point     object containing numeric attributes `x` and `y`\n * @param  {number} direction directions:\n *     - 0: up\n *     - 1: right\n *     - 2: down\n *     - 3: left\n * @return {Object}           object containing numeric attributes `x` and `y`\n */\nfunction movePoint({x, y}, direction) {\n    // map direction do point coordinate modification\n    const dirMap = {\n        0: () => {\n            y -= 1\n        },\n        1: () => {\n            x += 1\n        },\n        2: () => {\n            y += 1\n        },\n        3: () => {\n            x -= 1\n        }\n    }\n\n    dirMap[direction]();\n\n    return {x, y}\n}\n\n/**\n * helper backtracking function used by the aStar algorithm to construct the final path\n * @param  {Object} cameFrom    object containing numeric attributes `x` and `y`\n * @param  {Object} currentNode object containing numeric attributes `x` and `y`\n * @return {Array} array of objects containing numeric attributes `x` and `y`\n */\nfunction reconstructPath(cameFrom, currentNode) {\n    let path = [];\n\n    path.push({\n        x: currentNode.x,\n        y: currentNode.y\n    })\n\n    while (cameFrom.has(currentNode)) {\n        currentNode = cameFrom.get(currentNode);\n        path.push({\n            x: currentNode.x,\n            y: currentNode.y\n        })\n    }\n\n    return path;\n}\n","/**\n * @module HelperFunctions\n */\n\nimport stringify from \"json-stringify-pretty-compact\"; // note: imported from a module\n\n/**\n * add a cross browser event listener on a mouse scroll\n * @param {string} query DOM query of the element that the listener will be added to\n * @param {Function} func  Function that will be called when the event occurs. The function takes as a parameter an event object.\n */\nexport function addMouseScrollEventListener(query, func) {\n    let MouseWheelHandler = event => {\n        // redeclare for old IE support\n        var event = window.event || event; // eslint-disable-line no-redeclare\n\n        event.delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\n\n        func(event)\n\n        return false;\n    }\n\n    let svgelement;\n\n    // if the query is a simple DOM id selector, we can use getElementById which has better backwards compatibility\n    if(query.match(/^#\\w+$/)) {\n        svgelement = document.getElementById(query.substr(1))\n    } else {\n        svgelement = document.querySelector(query)\n    }\n\n    if (svgelement.addEventListener) {\n        // IE9, Chrome, Safari, Opera\n        svgelement.addEventListener(\"mousewheel\", MouseWheelHandler, false);\n        // Firefox\n        svgelement.addEventListener(\"DOMMouseScroll\", MouseWheelHandler, false);\n    } else  {\n        // IE 6/7/8\n        svgelement.attachEvent(\"onmousewheel\", MouseWheelHandler);\n    }\n    svgelement.addEventListener('mousewheel', function(e) {\n        console.log('event', e)\n    }, false)\n}\n\n/**\n * convert a data object to JSON string or to a data URI containing a JSON string\n * @param  {Object}  data            object that will be serialized into a JSON string\n * @param  {Boolean} [pretty=false]  if `true`, the code will be proprerly indented, else a more compact syntax will be used\n * @param  {Boolean} [dataUri=false] return dataUri containing the JSON string instead of the pure JSON string\n * @return {string}\n */\nexport function getJSONString(data, pretty = false, dataUri = false) {\n    if(dataUri) {\n        return 'data:application/json;charset=utf-8,'\n            + encodeURIComponent(getJSONString(data, pretty));\n    } else {\n        if (pretty)\n            return stringify(data, {maxLength: 50});\n\n        return JSON.stringify(data);\n    }\n}\n\n/**\n * returns the Manhattan distance between the points _a_ and _b_\n * @param  {Object} a object containing numeric attributes `x` and `y`\n * @param  {Object} b object containing numeric attributes `x` and `y`\n * @return {number}\n */\nexport function manhattanDistance(a, b) {\n    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n}\n","/** @module Id */\n\n/**\n * the current instance of Id\n * @type {Id}\n */\nlet existingIdInstance;\n\n/**\n * singleton to generate unique id's\n *\n * usage: `let id = new Id().unique`\n */\nexport default class Id {\n    constructor() {\n        if(!existingIdInstance){\n            existingIdInstance = this;\n        }\n\n        /**\n         * prefix for the id, that is common in all the Ids\n         * @type {String}\n         */\n        this.prefix = \"id\";\n\n        /**\n         * numeric part of the next id (the next id without the prefix)\n         * @type {number}\n         */\n        this.nextId = 0;\n\n        return existingIdInstance;\n    }\n\n    /**\n     * get unique ID\n     * @return {string} new unique ID\n     */\n    get unique() {\n        let retVal = this.prefix + this.nextId;\n\n        // find next unused idXXXX to prevent id collision that might be caused by some other component\n        // (it really should not happen, but this is a simple way to ensure it)\n        while($(\"#\"+retVal).length) {\n            this.nextId++;\n            retVal = this.generate();\n        }\n        // return this id\n        this.nextId++;\n\n        return retVal;\n    }\n}\n","/** @module MapWithDefaultValue */\n/**\n * Map that has a default value specified in the constructor.\n *\n * For the complete documentation of the Map see [Map in the MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n *\n * Usage:\n * ```JavaScript\n let myMap = new MapWithDefaultValue(Infinity);\n const value = myMap.getWithDefault(key)\n ```\n *\n * _Note: This version is written specially for ES6 compiled into ES5. In non-compiled ES6 is the implementation far more elegant:_\n *\n * ```JavaScript\n export class MapWithDefaultValue extends Map {\n     constructor(defaultValue) {\n         super();\n\n         this.default = defaultValue;\n     }\n\n     get(key) {\n         if(this.has(key)) {\n             return super.get(key);\n         } else {\n             return this.default;\n         }\n     }\n }```\n * @class MapWithDefaultValue\n * @param defaultValue {any} default value that will be returned when the requested key is not found in the map\n */\nexport default function(defaultValue) {\n    let map = new Map();\n    /**\n     * @param  {any} key key of a requested item\n     * @return {any} value of the item with the corresponding key, or defaultValue if the key is not found in the map\n     */\n    map.getWithDefault = (key) => {\n        return map.has(key)\n            ? map.get(key)\n            : defaultValue;\n    }\n    return map;\n}\n","/** @module svgObjects */\n\n// non-svg classes used as helpers\nexport { default as PolyLinePoint } from './svgObjects/PolyLinePoint'\nexport { default as PolyLinePoints } from './svgObjects/PolyLinePoints'\n\n// virtual svg elements\nexport { default as Pattern } from './svgObjects/Pattern'\nexport { default as Group } from './svgObjects/Group'\n\n// \"physical/touchable\" svg elements\nexport { default as Rectangle } from './svgObjects/Rectangle'\nexport { default as SvgImage } from './svgObjects/SvgImage'\nexport { default as PolyLine } from './svgObjects/PolyLine'\n\nexport { default as Text } from './svgObjects/Text'\nexport { default as MultiLineText } from './svgObjects/MultiLineText'\n","import Tag from './Tag'\n\n/** @module svgObjects.Group */\n\n/**\n * SVG group, used for grouping elements, for example a gate is represented by many elements (rectangle, image, inivisible hitbox rectangle...),\n * but all of the elements need to be transformed together. Using groups the transform property can be set on the group which contains all the elements.\n * @extends Tag\n */\nexport default class Group extends Tag {\n    constructor() {\n        super(\"g\");\n\n        this.children = [];\n    }\n\n    /**\n     * add an element to the group\n     * @param {SvgElement} el an instance of {@link SvgElement}\n     */\n    addChild(el) {\n        this.children.push(el);\n\n        this.$el.append(el.$el);\n        return el; // pro jednodussi \"let rect = g.addChild(new Rectangle(...\"\n    }\n}\n","import Tag from './Tag'\nimport Text from './Text'\n\n/** @module svgObjects.MultiLineText */\n\n/**\n * Multi line text element in SVG\n *\n * Multi line text is not natively supportend in SVG 1.1,\n * the workaround is to use the <foreignObject> element and display\n * a HTML paragraph inside of the SVG document.\n *\n * Because this technique is not supported by all of the browsers,\n * the foreignObject element is wrapped in <switch>, which\n * provides fallback for those cases.\n *\n * read more: [foreignObject on MDN web docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject)\n *\n * @extends Tag\n */\nexport default class MultiLineText extends Tag {\n    /**\n     * @param {number} x       horizontal position in SVG pixels\n     * @param {number} y       vertical position in SVG pixels\n     * @param {number} w       width of the text box in SVG pixels\n     * @param {number} h       height of the text box in SVG pixels\n     * @param {number} text    text content of the text box\n     * @param {string} size    CSS font size of the text\n     * @param {String} [color=\"black\"] color of the text\n     *\n     */\n    constructor(x, y, w, h, text, size, color = \"black\") {\n        super(\"switch\");\n\n        let foreignObject = new Tag(\"foreignObject\");\n        let alternativeText = new Text(x, y, w, h, text, size, color);\n\n        foreignObject.addAttr({\n            x,\n            y,\n            width: w,\n            height: h\n        });\n\n        let $wrapper = $(\"<div>\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .addClass(\"multilinetext\")\n            .css(\"height\", h);\n\n        let $paragraph = $(\"<p>\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .css(\"font-size\", size)\n            .append(text);\n\n        $wrapper.append($paragraph);\n        foreignObject.$el.append($wrapper)\n\n        this.$el.append(\n            foreignObject.$el\n        ).append(\n            alternativeText.$el\n        )\n    }\n}\n","import Tag from './Tag'\n\n/** @module svgObjects.Pattern */\n\n/**\n * pattern object in SVG\n * @extends Tag\n */\nexport default class Pattern extends Tag {\n    /**\n     * @param {string} id     unique id of this pattern\n     * @param {number} width  width of one pattern tile in SVG pixels\n     * @param {number} height height of one pattern tile in SVG pixels\n     */\n    constructor(id, width, height) {\n        super(\"pattern\");\n\n        this.addAttr({\n            id: id,\n            x: 0,\n            y: 0,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            viewBox: \"0 0 \"+width+\" \"+height\n        });\n    }\n\n    /**\n     * add a child to this pattern\n     *\n     * pattern behaves a little like {@link Group} - it contains child elements, which represent the content of one tile of the pattern\n     * and the whole package of the child elements is repeated on each tile of the pattern\n     * @param {SvgElement} el element that will be added to the pattern\n     */\n    addChild(el) {\n        this.$el.append(el.$el);\n        return el;\n    }\n}\n","import Tag from './Tag'\n\n/** @module svgObjects.PolyLine */\n\n/**\n * SVG PolyLine (a path defined by sequence of points on plane)\n * @extends Tag\n */\nexport default class PolyLine extends Tag {\n    /**\n     * @param {PolyLinePoints} points points describing this PolyLine\n     * @param {number} [strokeWidth] width of the stroke for this PolyLine in SVG pixels\n     * @param {string} [color] CSS color of this PolyLine\n     */\n    constructor(points, strokeWidth, color) {\n        super(\"PolyLine\");\n\n        let attributes = {\n            points: points.string,\n            fill: \"none\",\n            \"stroke-width\": strokeWidth\n        };\n\n        if(color!==undefined) {\n            attributes.stroke = color\n        }\n\n        this.addAttr(attributes);\n    }\n\n    /**\n     * update points of this PolyLine\n     * @param {PolyLinePoints} points new set of points describing this PolyLine\n     */\n    updatePoints(points) {\n        this.addAttr({\n            points: points.string\n        });\n    }\n}\n","/** @module svgObjects.PolyLinePoint */\n\n/**\n * one point of {@link PolyLinePoints}, used in the {@link PolyLine} object\n */\nexport default class PolyLinePoint {\n    /**\n     * @param {number} x horizontal coordinate of the PolyLine point\n     * @param {number} y vertical coordinate of the PolyLine point\n     */\n    constructor(x, y) {\n        this.x = 0;\n        this.y = 0;\n        if(x !== undefined && y !== undefined) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    /**\n     * change the coordinates of this point\n     * @param {number} x horizontal coordinate of the PolyLine point\n     * @param {number} y vertical coordinate of the PolyLine point\n     */\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * create PolyLine from a comma separated string (e.g. from a string formatted like this: \"x,y\", for example \"15,8\")\n     * @param  {string} string string in the format \"x,y\" representing a point in the SVG PolyLine\n     * @return {PolyLinePoint} newly created instance of {@link PolyLinePoint}\n     */\n    static parseFromString(string) {\n        let arr = string.split(\",\");\n        return new PolyLinePoint(arr[0], arr[1]);\n    }\n\n    /**\n     * return a string representation of this PolyLine point\n     * @return {string} string in the format \"x,y\"\n     */\n    get string() {\n        return this.x + \",\" + this.y;\n    }\n\n    /**\n     * compare PolyLine points, return `true` if they are equal, else return `false`\n     * @param  {PolyLinePoint} a\n     * @param  {PolyLinePoint} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        return a.x === b.x && a.y === b.y;\n    }\n}\n","import PolyLinePoint from './PolyLinePoint'\n\n/** @module svgObjects.PolyLinePoints */\n\n/**\n * array-like structure used in {@link PolyLinePoints}\n */\nclass SmartArray {\n    /**\n     * @param {Array} [arr] if set, initialized SmartArray will contain these values\n     */\n    constructor(arr) {\n        if(arr !== undefined) {\n            this.arr = arr;\n        } else {\n            this.arr = [];\n        }\n    }\n\n    /**\n     * get a deep copy of this array\n     * @return {SmartArray}\n     */\n    copy() {\n        return SmartArray($.extend(true, [], this.arr));\n    }\n\n    /**\n     * append an item to the array\n     * @param item new item that will be appended to the array\n     */\n    append(item) {\n        return this.addWithIndex(item, this.arr.length);\n    }\n\n    /**\n     * prepend an item to the array\n     * @param item new item that will be prepended to the array\n     */\n    prepend(item) {\n        return this.addWithIndex(item, 0);\n    }\n\n    /**\n     * add a new item at the specified index, move all following items\n     * @param item new item that will be added at the specified index\n     * @param {number} index index of this item\n     */\n    addWithIndex(item, index) {\n        for(let i = this.arr.length ; i > index ; --i) {\n            this.arr[i] = this.arr[i-1];\n        }\n        this.arr[index] = item;\n        return this; // to enable chaining of append / preppend / addWithIndex commands\n    }\n\n    /**\n     * get length of the array\n     * @return {number}\n     */\n    get length() {\n        return this.arr.length;\n    }\n\n    /**\n     * get item by index\n     * @param  {number} index index of the item\n     * @return contents of the array on the specified index\n     */\n    getItem(index) {\n        return this.arr[index];\n    }\n\n    /**\n     * @return last element of the array\n     */\n    get last() {\n        if(this.length!==0) {\n            return this.arr[this.length - 1];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @return first element of the array\n     */\n    get first() {\n        if(this.length!==0) {\n            return this.arr[0];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * remove an item from the array by index\n     * @param  {number} index index of the item that will be removed\n     */\n    remove(index) {\n        let length = this.length;\n\n        for(let i = index ; i < length ; ++i) {\n            this.arr[i] = this.arr[i + 1];\n        }\n        this.arr.pop();\n    }\n}\n\n/**\n * points of the {@link PolyLine}\n * @extends SmartArray\n */\nexport default class PolyLinePoints extends SmartArray {\n    /**\n     * @param {Array} [arr] array containing instances of {@link PolyLinePoint}\n     */\n    constructor(arr) {\n        super(arr);\n    }\n\n    /**\n     * get a deep copy of this object\n     * @return {PolyLinePoints}\n     */\n    copy() {\n        return new PolyLinePoints($.extend(true, [], this.arr));\n    }\n\n    /**\n     * append a point\n     * @param  {PolyLinePoint} point a new point\n     */\n    append(point) {\n        // call inherited function to handle the appending\n        super.append(point);\n\n        // if the second to last point is unnecessary, remove it\n        let length = this.length;\n        if ( length >= 3\n                && (    ( this.getItem(length - 3).x === this.getItem(length - 2).x &&\n                          this.getItem(length - 2).x === this.getItem(length - 1).x )\n                     || ( this.getItem(length - 3).y === this.getItem(length - 2).y &&\n                          this.getItem(length - 2).y === this.getItem(length - 1).y )\n                   )\n           )\n        {\n            this.remove(length - 2);\n        }\n\n        // return this element (to allow chaining)\n        return this;\n    }\n\n    /**\n     * parse PolyLine from string\n     * @param  {string} string string in the PolyLine format (`x1,y1 x2,y2, x3,y3`)\n     * @return {PolyLinePoints} a new instance of {@link PolyLinePoints} created by parsing the string\n     */\n    static parseFromString(string) {\n        let pointStrings = string.split(\" \");\n        let points = new PolyLinePoints();\n\n        for(let i = 0 ; i < pointStrings.length ; ++i) {\n            points.append(PolyLinePoint.parseFromString(pointStrings[i]));\n        }\n\n        return points;\n    }\n\n    /**\n     * get a string representation of this PolyLine\n     * @return {string} string in the PolyLine format (`x1,y1 x2,y2, x3,y3`)\n     */\n    get string() {\n        let string = \"\";\n        for(let i = 0 ; i < this.length ; ++i) {\n            if(i !== 0) {\n                string += \" \";\n            }\n            string += this.arr[i].string;\n        }\n        return string;\n    }\n\n    /**\n     * wrapper for foreach on the PolyLine points\n     * @param  {Function} func function that will be called on each element\n     */\n    forEach(func) {\n        for(let i = 0 ; i < this.arr.length ; ++i) {\n            func(this.arr[i]);\n        }\n    }\n}\n","import SvgElement from './SvgElement'\n\n/** @module svgObjects.Rectangle */\n\n/**\n * a rectangle in SVG\n * @extends SvgElement\n */\nexport default class Rectangle extends SvgElement {\n    /**\n     * @param {number} x       horizontal position in SVG pixels\n     * @param {number} y       vertical position in SVG pixels\n     * @param {number} w       width in SVG pixels\n     * @param {number} h       height in SVG pixels\n     * @param {string} fill    filling color of the rectangle\n     * @param {string} stroke  stroke color of the rectangle\n     */\n    constructor(x, y, w, h, fill, stroke) {\n        super(x, y, w, h, \"rect\");\n        this.addAttr({\n            fill: fill,\n            stroke: stroke,\n            'stroke-width': 0.5,\n            'pointer-events': 'all' // to trigger hover even with transparent background\n        });\n    }\n}\n","import Tag from './Tag'\n\n/** @module svgObjects.SvgElement */\n\n/**\n * represents visible element in SVG that has position and dimensions (for example `rectangle` is a SvgElement, but `pattern` is not, even though both are tags)\n * @extends Tag\n */\nexport default class SvgElement extends Tag {\n    /**\n     * @param {number} x       horizontal position in SVG pixels\n     * @param {number} y       vertical position in SVG pixels\n     * @param {number} w       width in SVG pixels\n     * @param {number} h       height in SVG pixels\n     * @param {string} tagName tag name of the element\n     */\n    constructor(x, y, w, h, tagName) {\n        super(tagName);\n\n        this.addAttr({\n            x: x,\n            y: y,\n            width: w,\n            height: h\n        });\n    }\n}\n","import SvgElement from './SvgElement'\n\n/** @module svgObjects.SvgImage */\n\n/**\n * an image in SVG\n * @extends SvgElement\n */\nexport default class SvgImage extends SvgElement {\n    constructor(x, y, w, h, url) {\n        super(x, y, w, h, \"image\");\n        this.addAttr({\n            \"xlink:href\": url\n        });\n    }\n\n    /**\n     * change url of the image\n     * @param {string} url the new url of the image\n     */\n    changeUrl(url) {\n        this.addAttr({\n            \"xlink:href\": url\n        });\n    }\n}\n","import Id from '../other/id'\n\n/** @module svgObjects.Tag */\n\n/**\n * Parent class for all svgObjects\n */\nexport default class Tag {\n    /**\n     * @param {string} tagName SVG tag identifier (`rect`, `image`, `PolyLine`)\n     */\n    constructor(tagName) {\n        /**\n         * SVG tag identifier (`rect`, `image`, `PolyLine`)\n         * @type {string}\n         */\n        this.tagName = tagName;\n\n        /**\n         * jQuery element for this tag\n         * @type {jQuery.element}\n         */\n        this.$el = $(\"<\"+this.tagName+\">\");\n\n        /**\n         * unique ID of this SVG object\n         * @type {string}\n         */\n        this.id = new Id().unique;\n    }\n\n    /**\n     * add a class to this element\n     * @param {string} name class name to be added\n     */\n    addClass(name) {\n        this.$el.addClass(name);\n    }\n\n    /**\n     * remove class names from this element\n     * @param  {string} classes class names to be removed\n     */\n    removeClasses(...classes) {\n        for(let item of classes) {\n            this.$el.removeClass(item);\n        }\n    }\n\n    /**\n     * set attributes of this element\n     * @param {Object} assoc javascript object that will be mapped into attributes (`{key: value}` -> `key=\"value\"`)\n     */\n    addAttr(assoc) {\n        this.checkIfElementExistsInDOM();\n\n        // add attributes to the element\n        this.$el.attr(assoc);\n    }\n\n    /**\n     * get attribute value by name\n     * @param  {string} name name of the attribute\n     * @return {string}      value of the attribute\n     */\n    getAttr(name) {\n        this.checkIfElementExistsInDOM();\n\n        return this.$el.attr(name);\n    }\n\n    /**\n     * remove attribute by value\n     * @param  {string} name name of the attribute to be removed\n     */\n    removeAttr(name) {\n        this.checkIfElementExistsInDOM();\n\n        this.$el.removeAttr(name);\n    }\n\n    /**\n     * set id of this SVG object\n     * @param  {string} id new id for this object\n     */\n    set id(id) {\n        this.addAttr({\"id\": id});\n    }\n\n    /**\n     * get id of this SVG object\n     * @return {string}\n     */\n    get id() {\n        return this.getAttr(\"id\");\n    }\n\n    /**\n     * get jQuery element for this SVG object\n     * @return {jQuery.element}\n     */\n    get() {\n        this.checkIfElementExistsInDOM();\n        return this.$el;\n    }\n\n    /**\n     * check if the element exists in dom, if so, refetch it from DOM using jQuery\n     */\n    checkIfElementExistsInDOM() {\n        let $jqElement = $(\"#\"+this.$el.attr('id'));\n        if($jqElement.length) {\n            this.$el = $jqElement;\n        }\n    }\n}\n","import Tag from './Tag'\n\n/** @module svgObjects.Text */\n\n/**\n * Text element in SVG\n * @extends Tag\n */\nexport default class Text extends Tag {\n    /**\n     * @param {number} x       horizontal position in SVG pixels\n     * @param {number} y       vertical position in SVG pixels\n     * @param {number} w       width of the text box in SVG pixels\n     * @param {number} h       height of the text box in SVG pixels\n     * @param {number} text    text content of the text box\n     * @param {string} size    CSS font size of the text\n     * @param {String} [color=\"black\"] color of the text\n     *\n     */\n    constructor(x, y, w, h, text, size, color = \"black\") {\n        super(\"text\");\n        this.addAttr({\n            x: x,\n            y: y,\n            width: w,\n            height: h,\n            fill: color\n        });\n\n        if(size) {\n            this.addAttr({\n                'font-size': size\n            })\n        }\n\n        this.$el.append(text);\n    }\n}\n","import {\n    getLibrary,\n    getNetworkFromLibrary\n} from './networkLibrary';\n\nimport {Gate} from '../editorElements'\n\n/**\n * Item in the [ContextMenu](./module-ContextMenu.html). ContextMenuItems can be nested using the appendItem function.\n */\nclass ContextMenuItem {\n    /**\n     * @param {string} text          text on the button\n     * @param {ContextMenu} contextMenu instance of the [ContextMenu](./module-ContextMenu.html) this item belongs to\n     * @param {Function} clickFunction callback function that will be called when user clicks this item\n     */\n    constructor(text, contextMenu, clickFunction) {\n        /**\n         * text on the button\n         * @type {string}\n         */\n        this.text = text;\n\n        /**\n         * instance of the [ContextMenu](./module-ContextMenu.html) this item belongs to\n         * @type {ContextMenu}\n         */\n        this.contextMenu = contextMenu;\n\n        /**\n         * jQuery element representing DOM content of this menu item\n         * @type {jQuery.element}\n         */\n        this.$el = $(\"<li>\").text(text);\n\n        // set up click callback if clickFunction is defined\n        if(clickFunction!==undefined) {\n            $(this.$el).click(\n                (event) => {\n                    clickFunction();\n                    contextMenu.hide();\n\n                    event.stopPropagation();\n                }\n            );\n        }\n\n        /**\n         * jQuery element containing the submenu (or undefined, if item has no subitems)\n         * @type {jQuery.element}\n         */\n        this.$submenu = undefined\n\n        /**\n         * submenu item counter\n         * @type {Number}\n         */\n        this.itemCount = 0\n\n        // set hover callback\n        $(this.$el).hover((event) => {\n            // mouse on\n\n            if(this.length > 0) {\n                this.$submenu.css({\n                    display: \"block\",\n                    top: this.$el.offset().top,\n                    left: this.$el.parent().offset().left + this.$el.parent().width(),\n                })\n\n                this.contextMenu.$el.after(this.$submenu);\n\n                event.stopPropagation()\n            }\n        }, () => {\n            // mouse out\n            if(this.$submenu) {\n                this.$submenu.css({\n                    display: \"none\"\n                })\n            }\n\n            // do not stop event propagation, here it is wanted\n            // (because submenu overrides display: none when user moves from this menu item to the submenu)\n        })\n    }\n\n    /**\n     * instance of [Canvas](./module-Canvas.html) this menu belongs to\n     * @type {Canvas}\n     */\n    get parentSVG() {\n        return this.contextMenu.parentSVG;\n    }\n\n    /**\n     * number of items in the submenu\n     * @return {Number}\n     */\n    get length() {\n        return this.itemCount;\n    }\n\n    /**\n     * add a CSS class to this item\n     * @param {string} cls [description]\n     */\n    addClass(cls) {\n        this.$el.addClass(cls);\n        return this;\n    }\n\n    /**\n     * append a nested {@link ContextMenuItem} to this item\n     * @param  {ContextMenuItem} item item that will be appended\n     */\n    appendItem(item) {\n        if(!this.$submenu) {\n            this.$submenu = $(\"<ul>\").addClass(\"subList\");\n            this.$submenu.hover(() => {\n                this.$submenu.css(\"display\", \"block\");\n            }, () => {\n                this.$submenu.css(\"display\", \"none\");\n            })\n        }\n        this.$submenu.append(item.$el);\n\n        this.itemCount++;\n\n        return item;\n    }\n\n    /**\n     * get jQuery element of this menu item\n     * @return {jQuery.element} jQuery element containing all DOM content for this menu item\n     */\n    get jQuery() {\n        return this.$el;\n    }\n\n    get jQuerySubmenu() {\n        return this.$submenu;\n    }\n}\n\n/**\n * Menu item that has a custom click callback function that adds a {@link Gate} of the specified type to the [Canvas](./module-Canvas.html)\n * @extends ContextMenuItem\n */\nclass GateMenuItem extends ContextMenuItem {\n    /**\n     * @param {string} type        type of the gate {@link Gate} (and, or, ...)\n     * @param {ContextMenu} contextMenu instance of the [ContextMenu](./module-ContextMenu.html) that this item belongs to\n     */\n    constructor(type, contextMenu) {\n        super(\n            `${type.toUpperCase()} gate`,\n            contextMenu,\n            () => {\n                this.parentSVG.newGate(\n                    type,\n                    this.parentSVG.snapToGrid(this.parentSVG.viewbox.transformX(contextMenu.position.x)),\n                    this.parentSVG.snapToGrid(this.parentSVG.viewbox.transformY(contextMenu.position.y))\n                );\n            }\n        );\n    }\n}\n\n/**\n * Menu item that has a custom click callback function that adds a specified {@link Blackbox} to the [Canvas](./module-Canvas.html)\n * @extends ContextMenuItem\n */\nclass BlackboxMenuItem extends ContextMenuItem {\n    constructor(name, file, contextMenu) {\n        super(\n            name,\n            contextMenu,\n            () => {\n                getNetworkFromLibrary(file).then(({blackbox, name}) => {\n                    const {inputs, outputs, table} = blackbox;\n\n                    // use the name specified in the blackbox item, if it does not exist, use the name for the network\n                    let usedName = blackbox.name || name;\n\n                    this.parentSVG.newBlackbox(\n                        inputs,\n                        outputs,\n                        table,\n                        usedName,\n                        this.parentSVG.snapToGrid(this.parentSVG.viewbox.transformX(contextMenu.position.x)),\n                        this.parentSVG.snapToGrid(this.parentSVG.viewbox.transformY(contextMenu.position.y))\n                    );\n                }).catch(error => {\n                    console.error(error);\n                })\n            }\n        )\n    }\n}\n\n/**\n * Menu item that has a custom click callback function that adds a specified Network to the [Canvas](./module-Canvas.html)\n * @extends ContextMenuItem\n */\nclass NetworkMenuItem extends ContextMenuItem {\n    constructor(name, file, contextMenu) {\n        super(\n            name,\n            contextMenu,\n            () => {\n                getNetworkFromLibrary(file).then(data => {\n                    this.parentSVG.importData(\n                        data,\n                        Math.round(this.parentSVG.viewbox.transformX(contextMenu.position.x) / this.parentSVG.gridSize),\n                        Math.round(this.parentSVG.viewbox.transformY(contextMenu.position.y) / this.parentSVG.gridSize)\n                    ).then(warnings => {\n                        for (const warning of warnings) {\n                            this.parentSVG.messages.newWarningMessage(warning)\n                        }\n                    })\n                }).catch(error => {\n                    this.parentSVG.messages.newErrorMessage(error);\n                })\n            }\n        )\n    }\n}\n\n/** @module ContextMenu */\n/**\n * ContextMenu represents the menu that is displayed to the user when they right click on a canvas.\n * This menu allows user to add elements to the Canvas and in the case that user rightclicked\n * on a specific element, this menu allows them to remove this element.\n */\nexport default class ContextMenu {\n    /**\n     * @param {Canvas} parentSVG instance of [Canvas](./module-Canvas.html) this menu belongs to\n     */\n    constructor(parentSVG) {\n        /**\n         * instance of [Canvas](./module-Canvas.html) this menu belongs to\n         * @type {Canvas}\n         */\n        this.parentSVG = parentSVG;\n\n        /**\n         * Position of the context menu. It is used to add the new elements to the correct position on the Canvas.\n         * @type {Object}\n         */\n        this.position = {\n            x: 0, y: 0\n        };\n\n        /**\n         * jQuery element containing the context menu\n         * @type {jQuery.element}\n         */\n        this.$el = $(\"<ul>\");\n        this.$el.attr('id', 'contextMenu');\n\n        let special = new ContextMenuItem(\"Special elements\", this);\n\n        // add input box\n        special.appendItem(\n            new ContextMenuItem(\"Input box\", this,\n                () => {\n                    let position = {\n                        left: this.parentSVG.snapToGrid(parentSVG.viewbox.transformX(this.position.x)),\n                        top: this.parentSVG.snapToGrid(parentSVG.viewbox.transformY(this.position.y))\n                    };\n\n                    parentSVG.newInput(position.left, position.top);\n                }\n            )\n        );\n\n        // add output box\n        special.appendItem(new ContextMenuItem(\"Output box\", this, () => {\n            let position = {\n                left: this.parentSVG.snapToGrid(parentSVG.viewbox.transformX(this.position.x)),\n                top: this.parentSVG.snapToGrid(parentSVG.viewbox.transformY(this.position.y))\n            };\n\n            parentSVG.newOutput(position.left, position.top);\n        }));\n\n        this.appendItem(special);\n\n        // list of gates that can be added\n        const gates = Gate.validGates;\n        let gateList = new ContextMenuItem(\"New gate\", this, parentSVG);\n        for (const name of gates) {\n            gateList.appendItem(\n                new GateMenuItem(name, this)\n            );\n        }\n        this.appendItem(gateList);\n\n        // more options will be added in the getLibrary() callback below\n        let networkList = new ContextMenuItem(\"Add a network\", this);\n        networkList.appendItem(new ContextMenuItem(\"Paste a network\", this, () => {\n            this.displayImportDialog()\n        }));\n        this.appendItem(networkList); // always append\n\n        let blackboxList = new ContextMenuItem(\"Add a blackbox\", this); // appends only if contains items (see the callback)\n\n        // network import (blackbox, network)\n        getLibrary().then(networks => {\n\n            for (const {name, file, hasTable, hasNetwork} of networks) {\n                // add a network as a blackbox\n                if(hasTable) {\n                    blackboxList.appendItem(\n                        new BlackboxMenuItem(name, file, this)\n                    );\n                }\n\n                // load a network as a network of components connected with wires\n                if(hasNetwork) {\n                    networkList.appendItem(\n                        new NetworkMenuItem(name, file, this)\n                    );\n                }\n            }\n\n            if(blackboxList.length > 0) {\n                this.appendItem(blackboxList);\n            }\n        }).catch(error => {\n            console.error(error);\n        })\n\n        // add conditional items for box and wire removal\n        this.appendConditionalItem('box', 'Remove this item', id => {this.parentSVG.removeBox(id)});\n        this.appendConditionalItem('wire', 'Remove this wire', id => {this.parentSVG.removeWireById(id)});\n\n        // add the context menu to the DOM\n        parentSVG.$svg.before(this.$el);\n\n        /**\n         * Number of items in this menu (used in the .lenght getter). Conditional items do not count.\n         * @type {Number}\n         */\n        this.itemCount = 0;\n    }\n\n    get length() {\n        return this.itemCount;\n    }\n\n    /**\n     * append a context menu item to the context menu\n     * @param  {ContextMenuItem} item instance of {@link ContextMenuItem} that will be added to this menu\n     */\n    appendItem(item) {\n        this.$el.append(item.jQuery);\n\n        this.itemCount++;\n\n        return item;\n    }\n\n    /**\n     * appends an connditional item (that is shown only if the target has the class itemClass)\n     * @param  {string} itemClass     show the item only if the target has this class\n     * @param  {string} text          text of this menu item\n     * @param  {Function} clickFunction function with one argument (ID of the target) that will be called on click\n     */\n    appendConditionalItem(itemClass, text, clickFunction) {\n        if(!this.conditionalItems) {\n            this.conditionalItems = [];\n        }\n\n        this.conditionalItems[this.conditionalItems.length] = {\n            itemClass: itemClass,\n            text: text,\n            clickFunction: clickFunction\n        }\n    }\n\n    /**\n     * display the dialog for importing a network from a clipboard\n     */\n    displayImportDialog() {\n        let $popup = $(\"<div>\")\n            .addClass(\"importExport\")\n            .addClass(\"import\");\n\n        let textareaId = \"importJSON\";\n        let $textblock = $(\"<textarea>\").attr('id', textareaId);\n\n        let lityInstance;\n\n        $popup.append(\n            $textblock\n        ).append(\n            $(\"<a>\").attr({\n                \"href\": \"#\",\n                \"class\": \"upload\"\n            })\n            .append(\n                $(\"<img>\").attr('src', \"img/gui/import.svg\")\n            )\n            .append(\" import from JSON\")\n            .on('click', () => {\n                let data;\n\n                try {\n                    data = JSON.parse($('#' + textareaId).val());\n                } catch(e) {\n                    this.parentSVG.messages.newErrorMessage(\"The imported file is not a valid JSON file.\");\n                    lityInstance.close();\n                }\n\n                if(data) {\n                    // proccess the imported data\n                    this.parentSVG.importData(\n                        data,\n                        Math.round(this.parentSVG.viewbox.transformX(this.position.x) / this.parentSVG.gridSize),\n                        Math.round(this.parentSVG.viewbox.transformY(this.position.y) / this.parentSVG.gridSize)\n                    ).then(warnings => {\n                        for (const warning of warnings) {\n                            this.parentSVG.messages.newWarningMessage(warning)\n                        }\n                    }).finally(() => {\n                        lityInstance.close();\n                    })\n                }\n            })\n        );\n\n        lityInstance = lity($popup);\n\n        // focus on the textblock\n        $textblock.focus();\n    }\n\n    /**\n     * decide whether or not to display specific conditional items\n     * @param  {jQuery.element} $target jQuery target of a MouseEvent (element that user clicked on)\n     */\n    resolveConditionalItems($target) {\n        for(let item of this.conditionalItems) {\n            if($target.hasClass(item.itemClass)) {\n                this.appendItem(\n                    new ContextMenuItem(\n                        item.text, this,\n                        () => {\n                            item.clickFunction($target.attr('id'));\n                        }\n                    )\n                ).addClass('conditional');\n            }\n        }\n    }\n\n    /**\n     * hide all conditional items\n     */\n    hideAllConditionalItems() {\n        this.$el.children('.conditional').remove();\n    }\n\n    /**\n     * displays the context menu with the right set of conditional items\n     * @param  {number} x       horizontal position of the context menu in CSS pixels\n     * @param  {number} y       vertical position of the context menu in CSS pixels\n     * @param  {jQuery.element} $target jQuery target of a MouseEvent (element that user clicked on)\n     */\n    display(x, y, $target) {\n        this.position = {\n            x: x,\n            y: y\n        };\n\n        this.resolveConditionalItems($target);\n\n        this.$el.css({\n            display: 'block',\n            top: y,\n            left: x\n        })\n        // set the width expicitly, or else the menu will widen when displaying a submenu\n        // 2 is to prevent a weird text wrap bug\n        .css('width', 'auto')\n        .css('width', this.$el.innerWidth() + 2);\n    }\n\n    /**\n     * hide the context menu\n     */\n    hide() {\n        this.$el.css({display: 'none'});\n        $(\".subList\").css({display: 'none'});\n        this.hideAllConditionalItems();\n    }\n}\n","import { getJSONString } from \"../other/helperFunctions\";\n\n/**\n * FloatingButton represents a button that is used in the floating menu in the right bottom corner\n * of the application. It may have a custom tooltip and callback on the click event\n */\nclass FloatingButton {\n    /**\n     * @param {string} buttonClass Custom string that identifies the SVG icon used on this button. This string is also added as a CSS class to the button.\n     * @param {string} tooltip     tooltip for the button, that will be displayed on hover and also used as alternative title for the image\n     * @param {Function} clickEvent  custom callback when user clicks the button\n     * @param {Canvas} parentSVG   reference to the parent SVG element\n     */\n    constructor(buttonClass, tooltip, clickEvent, parentSVG) {\n        /**\n         * jQuery element representing the button\n         * @type {jQuery.element}\n         */\n        this.$el = $('<a>')\n\n        // add classes to the element\n        this.$el.addClass(\"button\");\n        this.$el.addClass(buttonClass);\n\n        // add the icon\n        this.$el.append(\n            $(\"<img>\")\n            .attr(\"src\", `img/gui/${buttonClass}.svg`)\n            .attr(\"alt\", tooltip)\n        );\n\n        // add the tooltip element and an event listener if tooltip is defined\n        if (tooltip) {\n            /**\n             * jQuery element representing the tooltip\n             * @type {jQuery.element}\n             */\n            this.$tooltip = $(\"<div>\");\n            this.$tooltip\n                .addClass(\"tooltip\")\n                .html(tooltip);\n\n            parentSVG.$svg.after(this.$tooltip);\n\n            this.$el.hover(() => {\n                this.$tooltip.fadeIn(200);\n            }, () => {\n                this.$tooltip.fadeOut(200);\n            });\n        }\n\n        // add an event listener on click, if the callback function is defined\n        if (clickEvent) {\n            this.$el.on(\"click\", clickEvent);\n        }\n    }\n}\n\n/** @module FloatingMenu */\n/**\n * Class to represent the floating menu in the right bottom corner of the page.\n * It instantiates all the buttons and their callbacks.\n */\nexport default class FloatingMenu {\n    /**\n     * @param {Canvas} parentSVG reference to the Canvas element this menu is associated with\n     */\n    constructor(parentSVG) {\n        /**\n         * the jQuery element containing all buttons\n         * @type {jQuery.element}\n         */\n        this.$el = $('<div>')\n\n        const id = 'floatingMenu';\n\n        this.$el.attr(\"id\", id);\n\n        // const $loader = $(\"<div>\").addClass(\"loader\").addClass(\"hidden\");\n\n\n        /* EXPORT */\n        this.append(\n            new FloatingButton(\"export\", \"Get code for this network\", () => {\n                // create the popup container holding all popup content (that will be passed to lity)\n                let $popup = $(\"<div>\")\n                    .addClass(\"importExport\")\n                    .addClass(\"export\");\n\n                // generate the block with code to be displayed and append it to the popup element\n                const $textblock = $(\"<textarea>\").text(\n                    getJSONString(parentSVG.exportData, true)\n                )\n\n                $popup.append($textblock);\n\n                // generate the links\n                $popup.append(\n                    $(\"<a>\").attr({\n                        \"href\": getJSONString(parentSVG.exportData, true, true),\n                        \"class\": \"download\",\n                        \"download\": \"network.json\"\n                    }).append(\n                        $(\"<img>\").attr('src', \"img/gui/export.svg\")\n                    ).append(\" expanded JSON\")\n                );\n                $popup.append(\n                    $(\"<a>\").attr({\n                        \"href\": getJSONString(parentSVG.exportData, false, true),\n                        \"class\": \"download\",\n                        \"download\": \"network.min.json\"\n                    }).append(\n                        $(\"<img>\").attr('src', \"img/gui/export.svg\")\n                    ).append(\" compact JSON\")\n                );\n\n                lity($popup);\n\n                // highlight the text in the textblock\n                $textblock.select();\n            }, parentSVG)\n        );\n\n        /* Tutorial */\n        this.append(\n            new FloatingButton(\"tutorial\", \"Start the tutorial\", () => {\n                parentSVG.startTutorial();\n            }, parentSVG)\n        );\n\n        parentSVG.$svg.after(this.$el);\n\n        /* HELP */\n\n        let help = new FloatingButton(\"help\", \"Display a help page\", false, parentSVG);\n        help.$el.attr({\n            'href': './docs/user.html',\n            'data-lity': ''\n        });\n        this.append(help);\n\n        parentSVG.$svg.after(this.$el);\n    }\n\n    /**\n     * append a FloatingButton to this menu\n     * @param  {FloatingButton} menuItem append an instance of  {@link FloatingButton} to this menu\n     */\n    append(menuItem) {\n        this.$el.append(menuItem.$el);\n    }\n}\n","/** @module Messages */\n\n/**\n * a generic message that can be displayed in the {@link Messages} box\n */\nclass Message {\n    /**\n     * @param {string} text               text of the message\n     * @param {Function} [onHide] a function that will be called when the `hide()` method is called\n     */\n    constructor(text, onHide) {\n        this.$el = $(\"<div>\").addClass(\"message\").text(text);\n\n        /**\n         * callback function that will be called when the `hide()` method is called\n         * @type {Function}\n         */\n        this.onHide = onHide;\n    }\n\n    /**\n     * hide the message (and call the onHide callback if there is any)\n     */\n    hide() {\n        this.$el.remove();\n\n        if(this.onHide) {\n            this.onHide();\n        }\n    }\n}\n\n/**\n * a loading message that can be displayed in the {@link Messages} box\n * @extends Message\n */\nclass LoadingMessage extends Message {\n    constructor(text, onHide = undefined) {\n        super(text, onHide);\n\n        this.$el.addClass(\"loading\");\n    }\n}\n\n/**\n * a message that has a close button and that can be displayed in the {@link Messages} box\n * @extends Message\n */\nclass ClosableMessage extends Message {\n    constructor(text, onHide = undefined) {\n        super(text, onHide);\n\n        this.$el.append(\n            $(\"<span>\").addClass(\"close\").click(() => {\n                this.hide();\n            })\n        )\n    }\n}\n\n/**\n * an error message that can be displayed in the {@link Messages} box\n * @extends ClosableMessage\n */\nclass ErrorMessage extends ClosableMessage {\n    constructor(text, onHide = undefined) {\n        super(text, onHide);\n\n        this.$el.addClass(\"error\");\n    }\n}\n\n/**\n * a warning message that can be displayed in the {@link Messages} box\n * @extends ClosableMessage\n */\nclass WarningMessage extends ClosableMessage {\n    constructor(text, onHide = undefined) {\n        super(text, onHide);\n\n        this.$el.addClass(\"warning\");\n    }\n}\n\n/**\n * display messages to the user in a nice UI\n */\nexport default class Messages {\n    constructor() {\n        /**\n         * jQuery element that represents the message interface. This element contains all the currently displayed messages.\n         * @type {jQuery.element}\n         */\n        this.$el = $(\"<div>\").addClass('messages');\n\n        /**\n         * number of currently displayed messages, has a specified setter and getter\n         * @type {number}\n         */\n        this.count = 0;\n\n        // place the progress info element\n        $('body').append(this.$el);\n    }\n\n    /**\n     * get the number of currently displayed messages\n     * @return {number} [description]\n     */\n    get count() {\n        return this.messageCount;\n    }\n\n    /**\n     * Set the number of currently displayed messages. Should be called only through functions that add messages.\n     *\n     * If the message count is >= 1, the jQuery element for the UI is displayed, if the message count is <1, the UI is hidden.\n     * @param  {number} value [description]\n     * @return {number}       [description]\n     */\n    set count(value) {\n        this.messageCount = value;\n\n        if(this.messageCount < 1) {\n            this.hide();\n        } else {\n            this.display();\n        }\n    }\n\n    /**\n     * hide the message box by adding a `hidden` class to the element\n     */\n    hide() {\n        this.$el.addClass('hidden');\n    }\n\n    /**\n     * display the message box by removing the `hidden` class to the element\n     */\n    display() {\n        this.$el.removeClass('hidden');\n    }\n\n    /**\n     * add a new message to the message box\n     * @param  {string} text             text of the message\n     * @param  {Message} [constr=Message] constructor of the message, must be a derivate of the {@link Message} class\n     * @return {Message}                  the newly constructed message (instance made by the specified constructor)\n     */\n    newMessage(text, constr = Message) {\n        // Create the message by calling the constructor,\n        // provide it with text and a callback function that will be called when hiding the message.\n        // This callback subtracts 1 from the\n        let message = new constr(text, () => {\n            this.count--;\n        });\n\n        this.$el.append(message.$el);\n        this.count++;\n\n        return message;\n    }\n\n    /**\n     * create a new loading message and add it to the message box\n     * @param  {string} text text of the message\n     * @return {LoadingMessage} the newly constructed {@link LoadingMessage}\n     */\n    newLoadingMessage(text) {\n        return this.newMessage(text, LoadingMessage);\n    }\n\n    /**\n     * create a new error message and add it to the message box\n     * @param  {string} text text of the message\n     * @return {ErrorMessage} the newly constructed {@link ErrorMessage}\n     */\n    newErrorMessage(text) {\n        return this.newMessage(text, ErrorMessage);\n    }\n\n    /**\n     * create a new warning message and add it to the message box\n     * @param  {string} text text of the message\n     * @return {WarningMessage} the newly constructed {@link WarningMessage}\n     */\n    newWarningMessage(text) {\n        return this.newMessage(text, WarningMessage);\n    }\n}\n","/** @module Tutorial */\n/**\n * Display and manage the tutorial\n */\nexport default class Tutorial {\n    /**\n     * @param {Canvas} parentSVG instance of [Canvas](./module-Canvas.html) for this tutorial\n     * @param {Function} [onTutorialClosed] callback function when user closes or finishes the tutorial\n     */\n    constructor(parentSVG, onTutorialClosed) {\n        /**\n         * instance of [Canvas](./module-Canvas.html) for this tutorial\n         * @type {Canvas}\n         */\n        this.parentSVG = parentSVG;\n\n        /**\n         * helper variable for the `step` property, stores current state of the tutorial (step `0` means that tutorial is closed)\n         * @type {Number}\n         */\n        this.currentStep = 0;\n\n        /**\n         * jQuery element containing the tutorial popup\n         * @type {jQuery.element}\n         */\n        this.$tutorialWindow;\n        /**\n         * jQuery element for the dynamic part of the tutorial popup\n         * (text and buttons that are dependent on the current state of the tutorial)\n         * @type {Array}\n         */\n        this.$tutorialContent;\n\n        /**\n         * array of functions that represent intividual steps in the tutorial\n         * by default populated with step `0` that closes the tutorial\n         * @type {Array}\n         */\n        this.steps = [() => { this.closeWindow(onTutorialClosed) }];\n\n        // set up the tutorial\n        this.setUpTutorial();\n    }\n\n    /**\n     * get the current step of the tutorial, this number corresponds to the index in the `this.steps` array\n     * that contains the function for the last displayed step\n     * @return {Number}\n     */\n    get step() {\n        return this.currentStep;\n    }\n\n    /**\n     * change the current step of the tutorial, `0` means \"stop the tutorial\"\n     * @param  {Number} value the step of the tutorial to be displayed\n     */\n    set step(value) {\n        // reset all hooks\n        this.resetHooks();\n\n        this.currentStep = value;\n\n        if(this.step < this.steps.length) {\n            this.steps[this.step]();\n\n            if(this.step === 1)\n                this.displayWindow();\n        } else {\n            this.step = 0;\n        }\n    }\n\n    /**\n     * reset all tutorial hooks\n     */\n    resetHooks() {\n        /**\n         * _tutorial hook_, called when the context menu is opened\n         */\n        this.onContextMenuOpened = () => {};\n\n        /**\n         * _tutorial hook_, called when a new element is added\n         */\n        this.onElementAdded = () => {};\n\n        /**\n         * _tutorial hook_, called when a box is moved\n         */\n        this.onBoxMoved = () => {};\n\n        /**\n         * _tutorial hook_, called when a box is rotated\n         */\n        this.onBoxRotated = () => {};\n\n        /**\n         * _tutorial hook_, called when an output box value is set to `on`\n         */\n        this.onOutputBoxTrue = () => {};\n\n        /**\n         * _tutorial hook_, called when the canvas is moved\n         */\n        this.onCanvasMoved = () => {};\n\n        /**\n         * _tutorial hook_, called when the canvas is zoomed\n         */\n        this.onCanvasZoomed = () => {};\n\n        /**\n         * _tutorial hook_, called when a box is removed\n         */\n        this.onElementRemoved = () => {};\n\n        /**\n         * _tutorial hook_, called when user changes the state of an input box\n         */\n        this.onChangeInputBoxState = () => {};\n    }\n\n    /**\n     * set up the tutorial: reset all tutorial hooks and define the order of tutorial steps\n     */\n    setUpTutorial() {\n        this.resetHooks();\n\n        this.steps.push(\n            () => { this.stepWelcome() },\n            () => { this.stepAddBoxes() },\n            () => { this.stepMoveCanvas() },\n            () => { this.stepZoomCanvas() },\n            () => { this.stepMoveBoxes() },\n            () => { this.stepWiring() },\n            () => { this.switchInputBox() },\n            () => { this.stepRemoveBox() },\n            () => { this.stepFinish() }\n        )\n    }\n\n    /**\n     * _tutorial step_: display context menu\n     */\n    stepWelcome() {\n        this.windowContent(\n            `Welcome to Hradla! To get started, click anywhere on the editing area with your right mouse button.`\n        )\n\n        this.onContextMenuOpened = () => {\n            this.next();\n        }\n    }\n\n    /**\n     * _tutorial step_: add input box, output box and a NOT gate\n     */\n    stepAddBoxes() {\n        this.windowContent(\n            `Great job! Now you know, how to open the editor menu.\n            Now try to add an <em>Input box</em>, <em>Output box</em> and a <em>NOT gate</em>\n            to the editing area.`)\n\n        let elementsAdded = {\n            inputBox: false,\n            outputBox: false,\n            notGate: false\n        }\n\n        this.onElementAdded = (name) => {\n            switch (name) {\n                case \"input\":\n                    elementsAdded.inputBox = true;\n                    break;\n                case \"output\":\n                    elementsAdded.outputBox = true;\n                    break;\n                case \"not\":\n                    elementsAdded.notGate = true;\n                    break;\n                default:\n                    // no action on default\n                    break;\n            }\n\n            if(elementsAdded.inputBox && elementsAdded.outputBox && elementsAdded.notGate) {\n                // proceed to the next step of the tutorial\n                this.next();\n            }\n        };\n    }\n\n    /**\n     * _tutorial step_: move the canvas\n     */\n    stepMoveCanvas() {\n        this.windowContent(\n            `You can move the editing area (sometimes called canvas) by dragging\n            with the middle mouse button or by holding the <code>Ctrl</code> key\n            and dragging with the left mouse button. Check it out.`)\n\n        this.onCanvasMoved = () => {\n            this.next();\n        }\n    }\n\n    /**\n     * _tutorial step_: zoom the canvas\n     */\n    stepZoomCanvas() {\n        this.windowContent(\n            `You can also zoom in and out using the mouse wheel\n            or with the <code>+</code>&nbsp;and <code>−</code>&nbsp;keys.`\n        )\n\n        this.onCanvasZoomed = () => {\n            this.next();\n        }\n    }\n\n    /**\n     * _tutorial step_: move the boxes\n     */\n    stepMoveBoxes() {\n        this.windowContent(`You can move the elements on the editing canvas by dragging them\n            using the left mouse button. You can also rotate them using middle click. Try it out.`)\n\n        let boxMoved = false;\n        let boxRotated = false;\n\n        let moveRotateCallback = () => {\n            if(boxMoved && boxRotated) {\n                this.next();\n            }\n        }\n\n        this.onBoxMoved = () => {\n            boxMoved = true;\n            moveRotateCallback()\n        }\n\n        this.onBoxRotated = () => {\n            boxRotated = true;\n            moveRotateCallback()\n        }\n    }\n\n    /**\n     * _tutorial step_: create an invertor\n     */\n    stepWiring() {\n        this.windowContent(`Essential part of logic networks is the wiring. Create a very simple\n            inverter by connecting the <em>Input box</em> to the input of the <em>NOT gate</em>\n            and the output of the <em>NOT gate</em> to the input of the <em>Output box</em>.`,\n            `To connect two elemnts, simply click on a connector of the first element,\n            than click on a conector of the second element.`)\n\n        this.onOutputBoxTrue = () => {\n            this.next();\n        };\n    }\n\n    /**\n     * _tutorial step_: change the state of an input box\n     */\n    switchInputBox() {\n        this.windowContent(`\n            The input boxes can be in two states: <em>ON</em> and <em>OFF</em>, signalled\n            by the green and red colors respectively. You can left click on an Input box to\n            switch its state. Try it out!\n        `)\n\n        this.onChangeInputBoxState = () => {\n            this.next();\n        };\n    }\n\n    /**\n     * _tutorial step_: remove a box\n     */\n    stepRemoveBox() {\n        this.windowContent(\n            `When you right click on an element, you can find a new item in the menu,\n            that allows you to remove the element. This works for wires as well as for gates and other types of boxes.\n            Try to remove an element!`\n        )\n\n        this.onElementRemoved = () => {\n            this.next();\n        }\n    }\n\n    /**\n     * _tutorial step_: ask the user if they want to clean the canvas before closing the tutorial\n     */\n    stepFinish() {\n        this.windowContent(`You're all set, enjoy your stay!`,\n                           `Do you wish to start with empty canvas?`)\n        this.windowChoice(\n            {\n                text: 'yes, clean the canvas',\n                func: () => {\n                    this.parentSVG.cleanCanvas();\n                    this.stop();\n                }\n            },\n            {\n                text: 'no, keep the canvas as it is',\n                func: () => {\n                    this.stop();\n                }\n            }\n        )\n    }\n\n    /**\n     * display the tutorial window\n     */\n    displayWindow() {\n        this.parentSVG.$svg.after(this.$tutorialWindow)\n    }\n\n    /**\n     * close the tutorial window\n     * @param  {Function} [onTutorialClosed] callback function that is called when the tutorial is closed\n     */\n    closeWindow(onTutorialClosed) {\n        this.$tutorialWindow.remove();\n\n        if(onTutorialClosed!==undefined) {\n            onTutorialClosed();\n        }\n    }\n\n    /**\n     * set the tutorial window text content\n     * @param  {...string} text each string is a separate paragraph\n     */\n    windowContent(...text) {\n        if(!this.$tutorialWindow) {\n            this.$tutorialWindow = $(\"<div>\").attr(\"id\", \"tutorial\");\n\n            this.$topButtonsLeft = $(\"<div>\").addClass(\"left\");\n\n            this.$tutorialWindow.append(\n                $(\"<div>\").addClass(\"topButtons\")\n                    .append(this.$topButtonsLeft)\n                    .append( // the .right div can be added here because it is not modified during the tutorial\n                        $(\"<div>\").addClass(\"right\")\n                        .append(\n                            $(\"<a>\").attr({\n                                href: \"#\",\n                                title: \"close tutorial\"\n                            }).addClass(\"button close\")\n                            .click(() => {\n                                this.stop();\n                            })\n                        )\n                    )\n            )\n\n            this.$tutorialWindow.append(this.$topButtons);\n\n            this.$tutorialContent = $(\"<div>\").addClass(\"content\");\n            this.$tutorialWindow.append(this.$tutorialContent);\n        }\n\n        this.$topButtonsLeft.html(\"\");\n\n        let $prev = $(\"<a>\").attr({\n            href: \"#\",\n            title: \"go back\"\n        }).addClass(\"button prev\");\n\n        if(this.step>1) {\n            $prev.click(() => {\n                this.prev();\n            });\n        } else {\n            $prev.addClass(\"disabled\");\n        }\n\n        let $next = $(\"<a>\").attr({\n            href: \"#\",\n            title: \"go forward\"\n        }).addClass(\"button next\");\n\n        if(this.step < this.steps.length - 1) {\n            $next.click(() => {\n                this.next();\n            });\n        } else {\n            $next.addClass(\"disabled\");\n        }\n\n        this.$topButtonsLeft.append($prev).append($next);\n\n        // set the text content\n\n        this.$tutorialContent.html(\"\");\n        for (const paragraph of text) {\n            this.$tutorialContent.append(\n                $(\"<p>\").html(paragraph)\n            );\n        }\n\n        // // render the buttons in each step (to remove focus and to\n        // // ensure there is no \"back\" button on the first step or \"next\" button on the last step)\n        // if(this.$prevNext) {\n        //     this.$prevNext.remove();\n        // }\n        //\n        // this.$prevNext = $(\"<div>\").addClass(\"bottomButtons\");\n        //\n        // if(this.step>1) {\n        //     this.$prevNext.append(\n        //         $(\"<a>\").attr(\"href\", \"#\").addClass(\"button prev\")\n        //         // .text(\"back\")\n        //         .click(() => {\n        //             this.step--;\n        //         })\n        //     )\n        // }\n        //\n        // if(this.step < this.steps.length - 1) {\n        //     this.$prevNext.append(\n        //         $(\"<a>\").attr(\"href\", \"#\").addClass(\"button next\")\n        //         // .text(\"next\")\n        //         .click(() => {\n        //             this.next();\n        //         })\n        //     )\n        // }\n        //\n        // this.$tutorialWindow.append(this.$prevNext);\n    }\n\n    /**\n     * add buttons with choices to the tutorial window\n     * @param  {...object} choices each choice is an object in with a `string` property _text_ and a `function` property _func_\n     */\n    windowChoice(...choices) {\n        let $choices = $(\"<ol>\").addClass(\"choices\");\n        for (const choice of choices) {\n            $choices.append(\n                $(\"<li>\").append(\n                    $(\"<a>\").attr(\"href\", \"#\").click(() => {\n                        choice.func()\n                    }).html(choice.text)\n                )\n            )\n        }\n        this.$tutorialContent.append($choices);\n    }\n\n    /**\n     * start the tutorial\n     */\n    start() { this.step = 1; }\n\n    /**\n     * go to the next step of the tutorial\n     */\n    next() { this.step++; }\n\n    /**\n     * go to the previous step of the tutorial\n     */\n    prev() { this.step--; }\n\n    /**\n     * stop the tutorial\n     */\n    stop() { this.step = 0 }\n}\n","/** @module ViewBox */\n/**\n * ViewBox provides an api for oprerating with the viewBox argument of the <svg> DOM element.\n */\nexport default class ViewBox {\n    /**\n     * Initialize viewBox\n     * @param {number} left   distance of the left edge of the viewbox from document's y axis in SVG pixels\n     * @param {number} top    distance of the top edge of the viewbox from the document's x axis in SVG pixels\n     * @param {number} width  width of the viewbox in SVG pixels\n     * @param {number} height height of the viewbox in SVG pixels\n     */\n    constructor(left, top, width, height) {\n        /**\n         * ViewBox attributes before applying zoom and shift\n         * @type {object}\n         */\n        this.real = { left, top, width, height }\n\n        /**\n         * The maximum amount of zoom on the viewbox\n         * @type {number}\n         */\n        this.maxZoom = 8;\n        /**\n         * The minimum amount of zoom on the viewbox\n         * @type {number}\n         */\n        this.minZoom = 0.1;\n\n        /**\n         * Amount of zoom on the viewbox, always between this.minZoom and this.maxZoom\n         * @type {number}\n         */\n        this.realZoom = 1\n\n        /**\n         * amount of horizontal shift of the document\n         * @type {number}\n         */\n        this.leftShift = 0\n        /**\n         * amount of vertical shift of the document\n         * @type {number}\n         */\n        this.topShift = 0\n    }\n\n    /**\n     * update the dimensions of the viewbox (used on window resize)\n     * @param  {Number} width  new width of the viewbox in SVG pixels\n     * @param  {Number} height new height of the viewbox in SVG pixels\n     */\n    newDimensions(width, height) {\n        // keep the viewbox centered\n        this.real.left += (this.real.width - width)/2\n        this.real.top += (this.real.height - height)/2\n\n        // update the dimensions\n        this.real.width = width;\n        this.real.height = height;\n    }\n\n    /**\n     * get the amount of zoom on the viewbox\n     * @return {number}\n     */\n    get zoom() {\n        return this.realZoom;\n    }\n\n    /**\n     * set the amount of zoom on the viewbox\n     * @param {number} value the new amount of zoom\n     */\n    set zoom(value) {\n        // fit this.realZoom to fit between this.minZoom and this.maxZoom\n        this.realZoom = Math.max(Math.min(value, this.maxZoom), this.minZoom);\n    }\n\n    /**\n     * get the width of the viewbox with the current zoom applied\n     * @return {number} the final width of the viewbox\n     */\n    get width() {\n        return this.real.width / this.zoom\n    }\n\n    /**\n     * get the height of the viewbox with the current zoom applied\n     * @return {number} the final height of the viewbox\n     */\n    get height() {\n        return this.real.height / this.zoom\n    }\n\n    /**\n     * get the horizontal distance from the y axis of the document with zoom and shift value applied\n     * @return {number}\n     */\n    get left() {\n        return this.real.left - (this.leftShift / this.zoom) + ((this.real.width - this.width) / 2)\n    }\n\n    /**\n     * get the vertical distance from the x axis of the document with zoom and shift value applied\n     * @return {number}\n     */\n    get top() {\n        return this.real.top - (this.topShift / this.zoom) + ((this.real.height - this.height) / 2)\n    }\n\n    /**\n     * get the computed viewbox values as a string in the correct format that can be used in the viewBox attribute of the SVG element\n     * @return {string} string in format \"left top width height\"\n     */\n    get str() {\n        return `${this.left} ${this.top} ${this.width} ${this.height}`\n    }\n\n    /**\n     * transform horizontal units to the scale and shift of the editor\n     * @param  {number} x original horizontal value\n     * @return {number}   transformed horizontal value\n     */\n    transformX(x) {\n        return this.left + (x / this.zoom)\n    }\n\n    /**\n     * transform vertical units to the scale and shift of the editor\n     * @param  {number} y original vertical value\n     * @return {number}   transformed vertical value\n     */\n    transformY(y) {\n        return this.top + (y / this.zoom)\n    }\n\n    /**\n     * transform pageX and pageY parameters of the jquery event to match the zoom and shift of the viewbox\n     * @param  {jquery.MouseEvent} event original event\n     * @return {jquery.MouseEvent}       the same event but with transformed pageX and pageY members\n     */\n    transformEvent(event) {\n        event.pageX = this.transformX(event.pageX)\n        event.pageY = this.transformY(event.pageY)\n\n        return event\n    }\n}\n","/**\n * @module Library\n */\n\nconst libraryDir = './library/'\n\n/**\n * get list of networks from the library\n * @return {Promise} promise, the resolution is an object containing a list of libraries\n */\nexport function getLibrary() {\n    return new Promise((resolve, reject) => {\n        const libraryFile = libraryDir + 'networkList.json';\n\n        let request = new XMLHttpRequest();\n\n        request.addEventListener(\"load\", function() {\n            if(this.response) {\n                resolve(this.response.networks);\n            }\n        });\n\n        request.addEventListener([\"error\", \"abort\"], () => {\n            reject(\"Failed loading libraries.\")\n        });\n\n        request.open('GET', libraryFile, true);\n        request.responseType = 'json';\n        request.send();\n    });\n}\n\n/**\n * get a network from the library, specified by filename\n * @param  {string} networkName library file name without the extension\n * @return {Promise} promise, the resolution is an object containing the library import data\n */\nexport function getNetworkFromLibrary(networkName) {\n    return new Promise((resolve, reject) => {\n        let request = new XMLHttpRequest();\n\n        request.addEventListener(\"load\", function() {\n            if(this.response) {\n                resolve(this.response);\n            }\n        });\n\n        request.addEventListener([\"error\", \"abort\"], () => {\n            reject(`Failed loading library ${networkName}.`)\n        });\n\n        request.open('GET', libraryDir + networkName + '.json', true);\n        request.responseType = 'json';\n        request.send();\n    });\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvanNvbi1zdHJpbmdpZnktcHJldHR5LWNvbXBhY3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbGlic3RsL0RhdGFzdHJ1Y3R1cmVzL0RvdWJseUxpbmtlZExpc3QuanMiLCJub2RlX21vZHVsZXMvbGlic3RsL0RhdGFzdHJ1Y3R1cmVzL0hlYXAuanMiLCJub2RlX21vZHVsZXMvbGlic3RsL0RhdGFzdHJ1Y3R1cmVzL01heEhlYXAuanMiLCJub2RlX21vZHVsZXMvbGlic3RsL0RhdGFzdHJ1Y3R1cmVzL01pbkhlYXAuanMiLCJub2RlX21vZHVsZXMvbGlic3RsL0RhdGFzdHJ1Y3R1cmVzL1ByaW9yaXR5UXVldWUuanMiLCJub2RlX21vZHVsZXMvbGlic3RsL0RhdGFzdHJ1Y3R1cmVzL1F1ZXVlLmpzIiwibm9kZV9tb2R1bGVzL2xpYnN0bC9EYXRhc3RydWN0dXJlcy9TdGFjay5qcyIsIm5vZGVfbW9kdWxlcy9saWJzdGwvbm9kZS1tb2R1bGUuanMiLCJzcmMvZXM2L21haW4uanMiLCJzcmMvZXM2L21vZHVsZXMvQ2FudmFzLmpzIiwic3JjL2VzNi9tb2R1bGVzL0xvZ2ljLmpzIiwic3JjL2VzNi9tb2R1bGVzL1NpbXVsYXRpb24uanMiLCJzcmMvZXM2L21vZHVsZXMvZWRpdG9yRWxlbWVudHMuanMiLCJzcmMvZXM2L21vZHVsZXMvZWRpdG9yRWxlbWVudHMvQmxhY2tib3guanMiLCJzcmMvZXM2L21vZHVsZXMvZWRpdG9yRWxlbWVudHMvQm94LmpzIiwic3JjL2VzNi9tb2R1bGVzL2VkaXRvckVsZW1lbnRzL0Nvbm5lY3Rvci5qcyIsInNyYy9lczYvbW9kdWxlcy9lZGl0b3JFbGVtZW50cy9HYXRlLmpzIiwic3JjL2VzNi9tb2R1bGVzL2VkaXRvckVsZW1lbnRzL0hlbHBlcldpcmUuanMiLCJzcmMvZXM2L21vZHVsZXMvZWRpdG9yRWxlbWVudHMvSW5wdXRCb3guanMiLCJzcmMvZXM2L21vZHVsZXMvZWRpdG9yRWxlbWVudHMvSW5wdXRDb25uZWN0b3IuanMiLCJzcmMvZXM2L21vZHVsZXMvZWRpdG9yRWxlbWVudHMvTmV0d29ya0VsZW1lbnQuanMiLCJzcmMvZXM2L21vZHVsZXMvZWRpdG9yRWxlbWVudHMvT3V0cHV0Qm94LmpzIiwic3JjL2VzNi9tb2R1bGVzL2VkaXRvckVsZW1lbnRzL091dHB1dENvbm5lY3Rvci5qcyIsInNyYy9lczYvbW9kdWxlcy9lZGl0b3JFbGVtZW50cy9UcmFuc2Zvcm0uanMiLCJzcmMvZXM2L21vZHVsZXMvZWRpdG9yRWxlbWVudHMvV2lyZS5qcyIsInNyYy9lczYvbW9kdWxlcy9lZGl0b3JFbGVtZW50cy9zdGF0ZUNsYXNzZXMuanMiLCJzcmMvZXM2L21vZHVsZXMvZmluZFBhdGguanMiLCJzcmMvZXM2L21vZHVsZXMvb3RoZXIvaGVscGVyRnVuY3Rpb25zLmpzIiwic3JjL2VzNi9tb2R1bGVzL290aGVyL2lkLmpzIiwic3JjL2VzNi9tb2R1bGVzL290aGVyL21hcFdpdGhEZWZhdWx0VmFsdWUuanMiLCJzcmMvZXM2L21vZHVsZXMvc3ZnT2JqZWN0cy5qcyIsInNyYy9lczYvbW9kdWxlcy9zdmdPYmplY3RzL0dyb3VwLmpzIiwic3JjL2VzNi9tb2R1bGVzL3N2Z09iamVjdHMvTXVsdGlMaW5lVGV4dC5qcyIsInNyYy9lczYvbW9kdWxlcy9zdmdPYmplY3RzL1BhdHRlcm4uanMiLCJzcmMvZXM2L21vZHVsZXMvc3ZnT2JqZWN0cy9Qb2x5TGluZS5qcyIsInNyYy9lczYvbW9kdWxlcy9zdmdPYmplY3RzL1BvbHlMaW5lUG9pbnQuanMiLCJzcmMvZXM2L21vZHVsZXMvc3ZnT2JqZWN0cy9Qb2x5TGluZVBvaW50cy5qcyIsInNyYy9lczYvbW9kdWxlcy9zdmdPYmplY3RzL1JlY3RhbmdsZS5qcyIsInNyYy9lczYvbW9kdWxlcy9zdmdPYmplY3RzL1N2Z0VsZW1lbnQuanMiLCJzcmMvZXM2L21vZHVsZXMvc3ZnT2JqZWN0cy9TdmdJbWFnZS5qcyIsInNyYy9lczYvbW9kdWxlcy9zdmdPYmplY3RzL1RhZy5qcyIsInNyYy9lczYvbW9kdWxlcy9zdmdPYmplY3RzL1RleHQuanMiLCJzcmMvZXM2L21vZHVsZXMvdWkvQ29udGV4dE1lbnUuanMiLCJzcmMvZXM2L21vZHVsZXMvdWkvRmxvYXRpbmdNZW51LmpzIiwic3JjL2VzNi9tb2R1bGVzL3VpL01lc3NhZ2VzLmpzIiwic3JjL2VzNi9tb2R1bGVzL3VpL1R1dG9yaWFsLmpzIiwic3JjL2VzNi9tb2R1bGVzL3VpL1ZpZXdCb3guanMiLCJzcmMvZXM2L21vZHVsZXMvdWkvbmV0d29ya0xpYnJhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdlVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7O0FBRUE7Ozs7OztBQUVBOzs7QUFHQSxFQUFFLFlBQU07QUFDSix1QkFBVyxTQUFYLEVBQXNCLEVBQXRCO0FBQ0gsQ0FGRDs7Ozs7Ozs7Ozs7cWpCQ1BBOzs7QUFHQTs7O0FBR0E7OztBQUlBOzs7QUFPQTs7O0FBR0E7QUFDQTs7O0FBcEJBOztJQUFZLGM7O0FBR1o7O0FBR0E7Ozs7QUFDQTs7OztBQUdBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFHQTs7QUFJQTs7Ozs7Ozs7OztBQUVBLElBQU0sVUFBVSxFQUFoQjtBQUFBLElBQ0ksU0FBUyxFQURiOztBQUdBO0FBQ0E7Ozs7O0lBSXFCLE07QUFDakI7Ozs7O0FBS0Esb0JBQVksTUFBWixFQUFvQixRQUFwQixFQUE4QjtBQUFBOztBQUFBOztBQUMxQjs7O0FBR0EsYUFBSyxJQUFMLEdBQVksRUFBRSxNQUFGLENBQVo7O0FBRUE7Ozs7QUFJQSxhQUFLLFFBQUwsR0FBZ0IsUUFBaEI7O0FBRUE7Ozs7QUFJQSxhQUFLLEtBQUwsR0FBYSxFQUFiLENBaEIwQixDQWdCVDs7QUFFakI7Ozs7QUFJQSxhQUFLLEtBQUwsR0FBYSxFQUFiLENBdEIwQixDQXNCVDs7QUFFakI7QUFDQSxhQUFLLFFBQUwsR0FBZ0Isd0JBQWhCOztBQUVBLGFBQUssaUJBQUwsR0FBeUIsSUFBekI7QUFDQSxhQUFLLFVBQUwsR0FBa0IseUJBQWUsSUFBZixDQUFsQixDQTVCMEIsQ0E0QmM7O0FBRXhDOzs7OztBQUtBLGFBQUssY0FBTCxHQUFzQixDQUF0Qjs7QUFFQTtBQUNBLGFBQUssS0FBTCxHQUFhLEVBQUUsUUFBRixDQUFiO0FBQ0EsYUFBSyxJQUFMLENBQVUsT0FBVixDQUFrQixLQUFLLEtBQXZCOztBQUVBO0FBQ0EsWUFBSSxVQUFVLHdCQUFZLE1BQVosRUFBb0IsS0FBSyxRQUF6QixFQUFtQyxLQUFLLFFBQXhDLENBQWQ7O0FBRUEsWUFBSSxnQkFBZ0IsaUNBQXFCLE1BQXJCLENBQTRCLDhCQUFrQixDQUFsQixFQUFxQixDQUFyQixDQUE1QixFQUFxRCxNQUFyRCxDQUE0RCw4QkFBa0IsS0FBSyxRQUF2QixFQUFpQyxDQUFqQyxDQUE1RCxFQUFpRyxNQUFqRyxDQUF3Ryw4QkFBa0IsS0FBSyxRQUF2QixFQUFpQyxLQUFLLFFBQXRDLENBQXhHLENBQXBCOztBQUVBLGdCQUFRLFFBQVIsQ0FBaUIseUJBQWEsYUFBYixFQUE0QixDQUE1QixFQUErQixTQUEvQixDQUFqQjtBQUNBLGFBQUssVUFBTCxDQUFnQixRQUFRLEdBQVIsRUFBaEI7O0FBRUEsYUFBSyxVQUFMLEdBQWtCLDBCQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsS0FBSyxLQUF6QixFQUFnQyxLQUFLLE1BQXJDLEVBQTZDLFlBQTdDLEVBQTJELE1BQTNELENBQWxCO0FBQ0EsYUFBSyxrQkFBTCxDQUF3QixLQUFLLFVBQUwsQ0FBZ0IsR0FBaEIsRUFBeEI7QUFDQSxhQUFLLE9BQUw7O0FBRUE7QUFDQSxhQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUscUJBQWYsRUFBc0MsZ0JBQXRDO0FBQ0EsYUFBSyxPQUFMLEdBQWUsc0JBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsS0FBSyxLQUF2QixFQUE4QixLQUFLLE1BQW5DLENBQWY7QUFDQSxhQUFLLFlBQUw7O0FBRUE7QUFDQSxhQUFLLFdBQUwsR0FBbUIsMEJBQWdCLElBQWhCLENBQW5COztBQUVBO0FBQ0EsYUFBSyxZQUFMLEdBQW9CLDJCQUFpQixJQUFqQixDQUFwQjs7QUFFQSxZQUFJLGVBQUo7O0FBRUE7QUFDQSxhQUFLLElBQUwsQ0FBVSxFQUFWLENBQWEsV0FBYixFQUEwQixpQkFBUztBQUMvQixxQkFBUyxNQUFLLGFBQUwsQ0FBbUIsTUFBTSxNQUF6QixDQUFUOztBQUVBLGdCQUFJLFdBQVcsU0FBZixFQUEwQjtBQUN0QjtBQUNBLHVCQUFPLFdBQVAsQ0FBbUIsS0FBbkI7QUFDSCxhQUhELE1BR087QUFDSDtBQUNBLHNCQUFLLFdBQUwsQ0FBaUIsS0FBakI7QUFDSDs7QUFFRCxrQkFBSyxlQUFMO0FBQ0Esa0JBQU0sY0FBTjtBQUNILFNBYkQsRUFhRyxFQWJILENBYU0sV0FiTixFQWFtQixpQkFBUztBQUN4QixnQkFBSSxXQUFXLFNBQWYsRUFBMEI7QUFDdEIsdUJBQU8sV0FBUCxDQUFtQixLQUFuQjtBQUNILGFBRkQsTUFFTztBQUNIO0FBQ0Esc0JBQUssV0FBTCxDQUFpQixLQUFqQjtBQUNIOztBQUVELGtCQUFNLGNBQU47QUFDSCxTQXRCRCxFQXNCRyxFQXRCSCxDQXNCTSxTQXRCTixFQXNCaUIsaUJBQVM7QUFDdEIsZ0JBQUksV0FBVyxTQUFmLEVBQTBCO0FBQ3RCLHVCQUFPLFNBQVAsQ0FBaUIsS0FBakI7QUFDSCxhQUZELE1BRU87QUFDSDtBQUNBLHNCQUFLLFNBQUwsQ0FBZSxLQUFmO0FBQ0g7O0FBRUQscUJBQVMsU0FBVDs7QUFFQSxrQkFBTSxjQUFOO0FBQ0gsU0FqQ0QsRUFpQ0csRUFqQ0gsQ0FpQ00sYUFqQ04sRUFpQ3FCLGlCQUFTO0FBQzFCLGtCQUFLLGtCQUFMLENBQXdCLE1BQU0sS0FBOUIsRUFBcUMsTUFBTSxLQUEzQyxFQUFrRCxNQUFLLG1CQUFMLENBQXlCLE1BQU0sTUFBL0IsQ0FBbEQ7QUFDQSxrQkFBTSxjQUFOO0FBQ0gsU0FwQ0Q7O0FBc0NBLFVBQUUsUUFBRixFQUFZLEVBQVosQ0FBZSxTQUFmLEVBQTBCLGlCQUFTO0FBQy9CLGtCQUFLLFNBQUwsQ0FBZSxLQUFmO0FBQ0gsU0FGRCxFQUVHLEVBRkgsQ0FFTSxPQUZOLEVBRWUsaUJBQVM7QUFDcEIsa0JBQUssT0FBTCxDQUFhLEtBQWI7QUFDSCxTQUpEOztBQU1BO0FBQ0EsVUFBRSxNQUFGLEVBQVUsRUFBVixDQUFhLFFBQWIsRUFBdUIsWUFBTTtBQUN6QixrQkFBSyxPQUFMLENBQWEsYUFBYixDQUEyQixNQUFLLEtBQWhDLEVBQXVDLE1BQUssTUFBNUM7QUFDQSxrQkFBSyxZQUFMO0FBQ0gsU0FIRDs7QUFLQSwwREFBNEIsTUFBNUIsRUFBb0MsaUJBQVM7QUFDekM7QUFDQSxnQkFBSSxDQUFDLE1BQU0sT0FBWCxFQUFvQjtBQUNoQixzQkFBSyxJQUFMLElBQWEsTUFBTSxLQUFOLEdBQWMsR0FBM0I7O0FBRUEsc0JBQU0sY0FBTjtBQUNIO0FBQ0osU0FQRDs7QUFTQSxVQUFFLE1BQUYsRUFBVSxFQUFWLENBQWEsU0FBYixFQUF3QixVQUFDLEtBQUQsRUFBVztBQUMvQixnQkFBTSxVQUFVO0FBQ1oscUJBQUssR0FETztBQUVaLHFCQUFLLENBQUM7QUFGTSxhQUFoQjs7QUFLQSxnQkFBSSxRQUFRLE1BQU0sR0FBZCxDQUFKLEVBQXdCO0FBQ3BCLHNCQUFLLElBQUwsSUFBYSxRQUFRLE1BQU0sR0FBZCxDQUFiO0FBQ0g7QUFDSixTQVREOztBQVdBOzs7O0FBSUEsYUFBSyxRQUFMOztBQUVBO0FBQ0EsWUFBSTtBQUNBLGdCQUFJLENBQUMsYUFBYSxjQUFsQixFQUFrQztBQUM5QixxQkFBSyxhQUFMO0FBQ0g7QUFDSixTQUpELENBSUUsT0FBTyxDQUFQLEVBQVU7QUFDUixvQkFBUSxJQUFSLENBQWEsQ0FBYjtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7Ozs7QUFnQkE7Ozs7a0NBSVUsSyxFQUFPO0FBQ2IsZ0JBQUksTUFBTSxPQUFOLEtBQWtCLE9BQWxCLElBQTZCLE1BQU0sT0FBTixLQUFrQixNQUFuRCxFQUEyRDtBQUN2RCxxQkFBSyxJQUFMLENBQVUsUUFBVixDQUFtQixXQUFuQjtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7Z0NBSVEsSyxFQUFPO0FBQ1gsZ0JBQUksTUFBTSxPQUFOLEtBQWtCLE9BQWxCLElBQTZCLE1BQU0sT0FBTixLQUFrQixNQUFuRCxFQUEyRDtBQUN2RCxxQkFBSyxJQUFMLENBQVUsV0FBVixDQUFzQixXQUF0QjtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7b0NBSVksSyxFQUFPO0FBQ2Y7QUFDQSxpQkFBSyxrQkFBTDs7QUFFQTtBQUNBLGdCQUFJLE1BQU0sS0FBTixLQUFnQixDQUFoQixJQUFzQixNQUFNLEtBQU4sS0FBZ0IsQ0FBaEIsSUFBcUIsTUFBTSxPQUFyRCxFQUErRDtBQUMzRCxxQkFBSyxJQUFMLENBQVUsUUFBVixDQUFtQixTQUFuQjtBQUNBLHFCQUFLLFVBQUwsR0FBa0I7QUFDZCwwQkFBTSxNQUFNLEtBREU7QUFFZCx5QkFBSyxNQUFNO0FBRkcsaUJBQWxCO0FBSUg7QUFDSjs7QUFFRDs7Ozs7OztvQ0FJWSxLLEVBQU87QUFDZixnQkFBSSxLQUFLLFVBQVQsRUFBcUI7QUFDakIsb0JBQUksT0FBTyxNQUFNLEtBQU4sR0FBYyxLQUFLLFVBQUwsQ0FBZ0IsSUFBekM7QUFDQSxvQkFBSSxNQUFNLE1BQU0sS0FBTixHQUFjLEtBQUssVUFBTCxDQUFnQixHQUF4Qzs7QUFFQSxxQkFBSyxPQUFMLENBQWEsU0FBYixJQUEwQixJQUExQjtBQUNBLHFCQUFLLE9BQUwsQ0FBYSxRQUFiLElBQXlCLEdBQXpCO0FBQ0EscUJBQUssWUFBTDs7QUFFQSxxQkFBSyxVQUFMLEdBQWtCO0FBQ2QsMEJBQU0sTUFBTSxLQURFO0FBRWQseUJBQUssTUFBTTtBQUZHLGlCQUFsQjtBQUlIO0FBQ0o7O0FBRUQ7Ozs7OztvQ0FHWTtBQUNSLGdCQUFJLEtBQUssVUFBVCxFQUFxQjtBQUNqQixxQkFBSyxJQUFMLENBQVUsV0FBVixDQUFzQixTQUF0QjtBQUNBLHFCQUFLLFVBQUwsR0FBa0IsU0FBbEI7O0FBRUE7QUFDQSxvQkFBSSxLQUFLLFFBQVQsRUFBbUI7QUFDZix5QkFBSyxRQUFMLENBQWMsYUFBZDtBQUNIO0FBQ0o7QUFDSjs7QUFFRDs7Ozs7Ozt1Q0FJZTtBQUNYO0FBQ0EsaUJBQUssVUFBTCxDQUFnQixPQUFoQixDQUF3QixFQUFDLEdBQUcsS0FBSyxPQUFMLENBQWEsSUFBakIsRUFBdUIsR0FBRyxLQUFLLE9BQUwsQ0FBYSxHQUF2QyxFQUE0QyxPQUFPLEtBQUssT0FBTCxDQUFhLEtBQWhFLEVBQXVFLFFBQVEsS0FBSyxPQUFMLENBQWEsTUFBNUYsRUFBeEI7O0FBRUE7QUFDQSxpQkFBSyxJQUFMLENBQVUsSUFBVixDQUFlLFNBQWYsRUFBMEIsS0FBSyxPQUFMLENBQWEsR0FBdkM7QUFDSDs7QUFFRDs7Ozs7Ozs7O0FBdUJBOzs7d0NBR2dCO0FBQUE7O0FBQ1o7QUFDQSxpQkFBSyxRQUFMLEdBQWdCLHVCQUFhLElBQWIsRUFBbUIsWUFBTTtBQUNyQztBQUNBLDZCQUFhLGNBQWIsR0FBOEIsSUFBOUI7O0FBRUE7QUFDQSx1QkFBSyxRQUFMLEdBQWdCLFNBQWhCO0FBQ0gsYUFOZSxDQUFoQjs7QUFRQTtBQUNBLGlCQUFLLFFBQUwsQ0FBYyxLQUFkO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7O0FBcUJBOzs7Ozs7bUNBTVcsSSxFQUFNLEMsRUFBRyxDLEVBQUc7QUFBQTs7QUFDbkIsbUJBQU8sSUFBSSxPQUFKLENBQVksbUJBQVc7QUFDMUIsb0JBQUksV0FBVyxFQUFmOztBQUVBO0FBQ0E7QUFDQSxvQkFBSSxNQUFNLFNBQU4sR0FDRSxDQURGLEdBRUUsT0FBSyxjQUZYO0FBR0Esb0JBQUksTUFBTSxTQUFOLEdBQ0UsQ0FERixHQUVFLE9BQUssY0FGWDs7QUFJQSx1QkFBSyxpQkFBTCxHQUF5QixLQUF6Qjs7QUFFQTtBQUNBLG9CQUFJLFdBQVcsSUFBSSxHQUFKLEVBQWY7O0FBRUE7QUFDQSxvQkFBSSxnQkFBZ0I7QUFDaEIsdUJBQUcsQ0FEYTtBQUVoQix1QkFBRztBQUZhLGlCQUFwQjs7QUFsQjBCO0FBQUE7QUFBQTs7QUFBQTtBQXVCMUIseUNBQXNCLEtBQUssS0FBM0IsOEhBQWtDO0FBQUEsNEJBQXZCLE9BQXVCOztBQUM5Qiw0QkFBSSxRQUFRLFNBQVIsSUFBcUIsUUFBUSxTQUFSLENBQWtCLEtBQTNDLEVBQWtEO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQzlDLHNEQUE0QixRQUFRLFNBQVIsQ0FBa0IsS0FBOUMsbUlBQXFEO0FBQUEsd0NBQTFDLGFBQTBDOztBQUNqRCx3Q0FBSSxjQUFjLElBQWQsS0FBdUIsV0FBM0IsRUFBd0M7QUFDcEMsNENBQUksYUFBSixFQUFtQjtBQUNmLDREQUFnQjtBQUNaLG1EQUFHLEtBQUssR0FBTCxDQUFTLGNBQWMsQ0FBdkIsRUFBMEIsY0FBYyxJQUFkLENBQW1CLENBQW5CLENBQTFCLENBRFM7QUFFWixtREFBRyxLQUFLLEdBQUwsQ0FBUyxjQUFjLENBQXZCLEVBQTBCLGNBQWMsSUFBZCxDQUFtQixDQUFuQixDQUExQjtBQUZTLDZDQUFoQjtBQUlILHlDQUxELE1BS087QUFDSCw0REFBZ0I7QUFDWixtREFBRyxjQUFjLElBQWQsQ0FBbUIsQ0FBbkIsQ0FEUztBQUVaLG1EQUFHLGNBQWMsSUFBZCxDQUFtQixDQUFuQjtBQUZTLDZDQUFoQjtBQUlIO0FBQ0o7QUFDSjtBQWY2QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBZ0JqRDtBQUNKO0FBekN5QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLDJDQTJDakIsUUEzQ2lCO0FBNEN0QjtBQUNBLHdCQUFNLFdBQVc7QUFDYixpQ0FBUztBQUFBLG1DQUFNLE9BQUssUUFBTCxDQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsU0FBUSxJQUE1QixFQUFrQyxLQUFsQyxDQUFOO0FBQUEseUJBREk7QUFFYixrQ0FBVTtBQUFBLG1DQUFNLE9BQUssU0FBTCxDQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUIsS0FBckIsQ0FBTjtBQUFBOztBQUdkO0FBTGlCLHFCQUFqQixDQU1BLElBQU0sU0FBUztBQUNYLGdDQUFRO0FBQUEsbUNBQU0sT0FBSyxPQUFMLENBQWEsU0FBUSxJQUFyQixFQUEyQixDQUEzQixFQUE4QixDQUE5QixFQUFpQyxLQUFqQyxDQUFOO0FBQUEseUJBREc7QUFFWCxvQ0FBWTtBQUFBLG1DQUFNLE9BQUssV0FBTCxDQUFpQixTQUFRLE1BQXpCLEVBQWlDLFNBQVEsT0FBekMsRUFBa0QsU0FBUSxLQUExRCxFQUFpRSxTQUFRLElBQXpFLEVBQStFLENBQS9FLEVBQWtGLENBQWxGLEVBQXFGLEtBQXJGLENBQU47QUFBQSx5QkFGRDtBQUdYLGlDQUFTLGlCQUFNO0FBQ1gsZ0NBQUksQ0FBQyxTQUFRLElBQWIsRUFDSTs7QUFFSixnQ0FBSSxDQUFDLFNBQVMsU0FBUSxJQUFqQixDQUFMLEVBQ0kscURBQW1ELFNBQVEsSUFBM0Q7O0FBRUosbUNBQU8sU0FBUyxTQUFRLElBQWpCLEdBQVA7QUFDSDtBQVhVLHFCQUFmOztBQWNBLHdCQUFNLFlBQVksU0FBWixTQUFZLEdBQU07QUFDcEIsNEJBQUksQ0FBQyxTQUFRLFFBQWIsRUFDSTs7QUFFSiw0QkFBSSxDQUFDLE9BQU8sU0FBUSxRQUFmLENBQUwsRUFDSSwwREFBd0QsU0FBUSxRQUFoRTs7QUFFSiwrQkFBTyxPQUFPLFNBQVEsUUFBZixHQUFQO0FBQ0gscUJBUkQ7O0FBVUEsd0JBQUksWUFBSjs7QUFFQSx3QkFBSTtBQUNBLDhCQUFNLFdBQU47QUFDSCxxQkFGRCxDQUVFLE9BQU8sQ0FBUCxFQUFVO0FBQ1IsaUNBQVMsSUFBVCxDQUFjLENBQWQ7QUFDSDs7QUFFRCx3QkFBSSxHQUFKLEVBQVM7QUFDTDtBQUNBLDRCQUFJLFlBQVksSUFBSSxlQUFlLFNBQW5CLEVBQWhCO0FBQ0EsNEJBQUksZ0JBQWdCLENBQXBCOztBQUVBLDRCQUFNLG1CQUFtQjtBQUNyQix5Q0FBYSxtQkFBQyxJQUFELEVBQVU7QUFDbkIsMENBQVUsWUFBVixDQUNJLEtBQUssQ0FBTCxJQUNNLGNBQWMsQ0FEcEIsQ0FDc0I7QUFEdEIsa0NBRU0sQ0FIVixDQUdZOztBQUhaLGtDQUtJLEtBQUssQ0FBTCxJQUNNLGNBQWMsQ0FEcEIsQ0FDc0I7QUFEdEIsa0NBRU0sQ0FQVixDQU9ZO0FBUFo7QUFTSCw2QkFYb0I7QUFZckIsc0NBQVUsZ0JBQUMsSUFBRCxFQUFVO0FBQ2hCLGdEQUFnQixLQUFLLENBQUwsSUFBVSxHQUFWLEdBQWdCLEVBQWhDO0FBQ0g7QUFkb0IseUJBQXpCOztBQWlCQSw0QkFBSSxTQUFRLFNBQVIsSUFBcUIsU0FBUSxTQUFSLENBQWtCLEtBQTNDLEVBQWtEO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQzlDLHNEQUE0QixTQUFRLFNBQVIsQ0FBa0IsS0FBOUMsbUlBQXFEO0FBQUEsd0NBQTFDLGFBQTBDO0FBQUEsd0NBQzFDLElBRDBDLEdBQzVCLGFBRDRCLENBQzFDLElBRDBDO0FBQUEsd0NBQ3BDLElBRG9DLEdBQzVCLGFBRDRCLENBQ3BDLElBRG9DOzs7QUFHakQsd0NBQUksQ0FBQyxJQUFMLEVBQVc7QUFDUCxpREFBUyxJQUFUO0FBQ0E7QUFDSDs7QUFFRCx3Q0FBSSxDQUFDLGlCQUFpQixJQUFqQixDQUFMLEVBQTZCO0FBQ3pCLGlEQUFTLElBQVQsMkRBQXNFLGNBQWMsSUFBcEY7QUFDQTtBQUNIOztBQUVELHFEQUFpQixJQUFqQixFQUF1QixJQUF2QjtBQUNIO0FBZjZDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFnQmpEOztBQUVELGtDQUFVLFdBQVY7QUFDQSw0QkFBSSxZQUFKLENBQWlCLFNBQWpCOztBQUVBLDZCQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksYUFBcEIsRUFBbUMsRUFBRSxDQUFyQyxFQUF3QztBQUNwQyxnQ0FBSSxNQUFKLENBQVcsSUFBWDtBQUNIOztBQUVEO0FBQ0EsNEJBQUksU0FBUSxXQUFaLEVBQXlCO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ3JCLHNEQUF5QixTQUFRLFdBQWpDLG1JQUE4QztBQUFBLHdDQUFuQyxVQUFtQzs7QUFDMUM7QUFDQSx3Q0FBSSxTQUFTLFdBQVcsTUFBeEI7O0FBRUE7QUFDQSx3Q0FBSSxRQUFRO0FBQ1IsK0NBQU8sV0FBVyxLQURWO0FBRVIsK0NBQU8sSUFBSTtBQUZILHFDQUFaOztBQUtBO0FBQ0Esd0NBQUksU0FBUyxHQUFULENBQWEsTUFBYixDQUFKLEVBQTBCO0FBQ3RCO0FBQ0E7QUFDQSw0Q0FBSSxXQUFXLFNBQVMsR0FBVCxDQUFhLE1BQWIsQ0FBZjtBQUNBLGlEQUFTLElBQVQsQ0FBYyxLQUFkO0FBQ0EsaURBQVMsR0FBVCxDQUFhLE1BQWIsRUFBcUIsUUFBckI7QUFDSCxxQ0FORCxNQU1PO0FBQ0g7QUFDQTtBQUNBLGlEQUFTLEdBQVQsQ0FBYSxNQUFiLEVBQXFCLENBQUMsS0FBRCxDQUFyQjtBQUNIO0FBQ0o7QUF2Qm9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUF3QnhCO0FBQ0o7QUE1SnFCOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQTJDMUIsMENBQW9CLEtBQUssS0FBekIsbUlBQWdDO0FBQUEsNEJBQXZCLFFBQXVCOztBQUFBLDhCQUF2QixRQUF1QjtBQWtIL0I7O0FBRUQ7QUEvSjBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBZ0sxQix1QkFBSyxPQUFMOztBQUVBOztBQUVBO0FBQ0Esb0JBQUksWUFBWSwyQkFBaEI7O0FBRUE7QUF2SzBCO0FBQUE7QUFBQTs7QUFBQTtBQXdLMUIsMENBQXVCLFNBQVMsTUFBVCxFQUF2QixtSUFBMEM7QUFBQSw0QkFBL0IsUUFBK0I7O0FBQ3RDLDRCQUFJLGVBQWUsRUFBbkI7O0FBRUE7QUFIc0M7QUFBQTtBQUFBOztBQUFBO0FBSXRDLGtEQUNHLFFBREgsbUlBQ2E7QUFBQTtBQUFBLG9DQURELEtBQ0MsUUFERCxLQUNDO0FBQUEsb0NBRE0sS0FDTixRQURNLEtBQ047O0FBQ1QsNkNBQWEsSUFBYixDQUFrQixPQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsRUFBdUIsVUFBdkIsQ0FBa0MsS0FBbEMsRUFBeUMsRUFBM0Q7QUFDSDs7QUFFRDtBQVRzQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVV0Qyw0QkFBTSxzQkFBc0IsYUFBYSxHQUFiLENBQWlCO0FBQUEsbUNBQWUsT0FBSyxvQkFBTCxDQUEwQixPQUFLLGdCQUFMLENBQXNCLFdBQXRCLENBQTFCLEVBQThELElBQTlELENBQWY7QUFBQSx5QkFBakIsQ0FBNUI7O0FBRUEsNEJBQUksb0JBQW9CLE1BQXBCLEtBQStCLENBQW5DLEVBQXNDO0FBQ2xDLGdDQUFJLFNBQU8sT0FBSyxPQUFMLGVBQWdCLFlBQWhCLFNBQThCLEtBQTlCLEVBQXFDLEtBQXJDLEdBQVg7O0FBRUE7QUFDQSxnQ0FBTSxXQUFXLHVFQUFxQixtQkFBckIsRUFBakI7O0FBRUE7QUFDQSxzQ0FBVSxPQUFWLENBQWtCLE1BQWxCLEVBQXdCLElBQUksUUFBNUI7QUFDSCx5QkFSRCxNQVFPO0FBQ0gscUNBQVMsSUFBVCwyREFBc0Usb0JBQW9CLE1BQTFGO0FBQ0g7QUFDSjtBQS9MeUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFpTTFCLG9CQUFJLE9BQU8sTUFBWCxFQUFtQjtBQUNmLHdCQUFJLGFBQWEsRUFBakI7QUFDQSx3QkFBSSxpQkFBaUIsRUFBckI7O0FBRUE7QUFDQSwyQkFBTyxDQUFDLFVBQVUsT0FBVixFQUFSLEVBQTZCO0FBQ3pCLDRCQUFNLE9BQU8sVUFBVSxPQUFWLEVBQWI7O0FBRUEsNEJBQUksWUFBWSxPQUFLLG9CQUFMLENBQTBCLEtBQUssVUFBTCxDQUFnQixJQUFoQixDQUFxQixTQUEvQyxFQUEwRCxJQUExRCxDQUFoQjtBQUNBLDRCQUFJLFVBQVUsT0FBSyxvQkFBTCxDQUEwQixLQUFLLFVBQUwsQ0FBZ0IsRUFBaEIsQ0FBbUIsU0FBN0MsRUFBd0QsSUFBeEQsQ0FBZDs7QUFFQSxtQ0FBVyxJQUFYLENBQWdCLENBQ1o7QUFDSSwrQkFBRyxVQUFVLENBQVYsR0FBYyxPQUFLLFFBRDFCO0FBRUksK0JBQUcsVUFBVSxDQUFWLEdBQWMsT0FBSztBQUYxQix5QkFEWSxFQUlUO0FBQ0MsK0JBQUcsUUFBUSxDQUFSLEdBQVksT0FBSyxRQURyQjtBQUVDLCtCQUFHLFFBQVEsQ0FBUixHQUFZLE9BQUs7QUFGckIseUJBSlMsQ0FBaEI7O0FBVUEsdUNBQWUsSUFBZixDQUFvQixJQUFwQjtBQUNIOztBQUVEO0FBQ0Esd0JBQUksV0FBVyxJQUFJLE1BQUosQ0FBVywwQkFBWCxDQUFmOztBQUVBLHdCQUFJLGlCQUFpQixPQUFLLFFBQUwsQ0FBYyxpQkFBZCxDQUFnQyw4QkFBaEMsQ0FBckI7O0FBRUEsNkJBQVMsU0FBVCxHQUFxQixVQUFDLEtBQUQsRUFBVztBQUFBLDRCQUNyQixLQURxQixHQUNaLE1BQU0sSUFETSxDQUNyQixLQURxQjtBQUU1Qjs7QUFDQSx1Q0FBZSxPQUFmLENBQXVCLFVBQUMsSUFBRCxFQUFPLEdBQVAsRUFBZTtBQUNsQyxpQ0FBSyxXQUFMLENBQWlCLEtBQUssY0FBTCxDQUFvQixNQUFNLEdBQU4sQ0FBcEIsQ0FBakI7QUFDQSxpQ0FBSyxlQUFMO0FBQ0gseUJBSEQ7O0FBS0EsdUNBQWUsSUFBZjtBQUNILHFCQVREOztBQVdBLHdCQUFNLFVBQVU7QUFDWiwrQkFBTyxVQURLO0FBRVosMENBQWtCLE9BQUssbUJBQUwsRUFGTjtBQUdaLDJDQUFtQixPQUFLLG9CQUFMO0FBSFAscUJBQWhCOztBQU1BLDZCQUFTLFdBQVQsQ0FBcUIsT0FBckI7QUFFSCxpQkFoREQsTUFnRE87QUFDSDtBQUNBOztBQUVBLHdCQUFNLHdCQUF3QixFQUE5QjtBQUNBLHdCQUFNLHlCQUF5QixHQUEvQjs7QUFFQTtBQUNBLHdCQUFJLHNCQUFzQixPQUFPLFdBQVAsQ0FBbUIsWUFBTTtBQUMvQyw0QkFBSSxDQUFDLFVBQVUsT0FBVixFQUFMLEVBQTBCO0FBQ3RCLGlDQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUkscUJBQXBCLEVBQTJDLEVBQUUsQ0FBN0MsRUFBZ0Q7QUFDNUMsb0NBQUksVUFBVSxPQUFWLEVBQUosRUFBeUI7QUFDckI7QUFDSDs7QUFFRCxvQ0FBTSxRQUFPLFVBQVUsT0FBVixFQUFiO0FBQ0Esc0NBQUssU0FBTCxDQUFlLElBQWYsRUFBcUIsS0FBckI7QUFDQSxzQ0FBSyxlQUFMO0FBQ0g7QUFDSix5QkFWRCxNQVVPO0FBQ0gsb0NBQVEsR0FBUixDQUFZLFVBQVo7QUFDQSwwQ0FBYyxtQkFBZDtBQUNIO0FBQ0oscUJBZnlCLEVBZXZCLHNCQWZ1QixDQUExQjtBQWdCSDs7QUFFRDtBQUNBLHVCQUFLLE9BQUw7O0FBRUEsdUJBQUssaUJBQUwsR0FBeUIsSUFBekI7O0FBRUEsd0JBQVEsUUFBUjtBQUNILGFBalJNLENBQVA7QUFrUkg7O0FBRUQ7Ozs7Ozs7OzsyQ0FNbUIsVyxFQUFhLGEsRUFBZTtBQUMzQyxnQkFBSSxDQUFDLEtBQUssWUFBVixFQUF3QjtBQUNwQixxQkFBSyxZQUFMLEdBQW9CO0FBQ2hCLDRCQUFRO0FBRFEsaUJBQXBCOztBQUlBLHFCQUFLLGtCQUFMLENBQXdCLGFBQXhCO0FBQ0gsYUFORCxNQU1PO0FBQ0gsb0JBQUksS0FBSyxZQUFMLENBQWtCLE1BQWxCLEtBQTZCLFdBQWpDLEVBQThDO0FBQzFDLHlCQUFLLGVBQUw7O0FBRUEseUJBQUssT0FBTCxDQUFhLEtBQUssWUFBTCxDQUFrQixNQUEvQixFQUF1QyxXQUF2Qzs7QUFFQSx5QkFBSyxZQUFMLEdBQW9CLFNBQXBCO0FBQ0g7QUFDSjtBQUNKOztBQUVEOzs7Ozs7OzJDQUltQixhLEVBQWU7QUFBQTs7QUFDOUIsaUJBQUssWUFBTCxDQUFrQixRQUFsQixHQUE2QixJQUFJLGVBQWUsVUFBbkIsQ0FBOEIsSUFBOUIsRUFBb0MsS0FBSyxZQUFMLENBQWtCLE1BQXRELEVBQThELGFBQTlELENBQTdCOztBQUVBLGNBQUUsTUFBRixFQUFVLEVBQVYsQ0FBYSx3QkFBYixFQUF1QyxpQkFBUztBQUM1Qyx3QkFBUSxPQUFLLE9BQUwsQ0FBYSxjQUFiLENBQTRCLEtBQTVCLENBQVI7O0FBRUEsZ0NBQWdCO0FBQ1osdUJBQUcsTUFBTSxLQURHO0FBRVosdUJBQUcsTUFBTTtBQUZHLGlCQUFoQjs7QUFLQSx1QkFBSyxZQUFMLENBQWtCLFFBQWxCLENBQTJCLG1CQUEzQixDQUErQyxhQUEvQztBQUNILGFBVEQ7O0FBV0EsaUJBQUssYUFBTCxDQUFtQixLQUFLLFlBQUwsQ0FBa0IsUUFBckM7QUFDQSxpQkFBSyxjQUFMLENBQW9CLEtBQUssWUFBTCxDQUFrQixRQUFsQixDQUEyQixFQUEvQztBQUNIOztBQUVEOzs7Ozs7MENBR2tCO0FBQ2QsY0FBRSxNQUFGLEVBQVUsR0FBVixDQUFjLHdCQUFkOztBQUVBLGlCQUFLLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBMkIsR0FBM0IsR0FBaUMsTUFBakM7QUFDQSxpQkFBSyxZQUFMLENBQWtCLFFBQWxCLEdBQTZCLFNBQTdCO0FBQ0g7O0FBRUQ7Ozs7Ozs2Q0FHcUI7QUFDakIsZ0JBQUksS0FBSyxZQUFULEVBQXVCO0FBQ25CLHFCQUFLLGVBQUw7QUFDQSxxQkFBSyxZQUFMLEdBQW9CLFNBQXBCO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7Ozs7OzsyQ0FPbUIsaUIsRUFBbUIsSyxFQUFPO0FBQ3pDLGdCQUFJLEtBQUssaUJBQVQsRUFBNEI7QUFDeEIscUJBQUssVUFBTCxHQUFrQix5QkFBZSxJQUFmLENBQWxCO0FBQ0EscUJBQUssVUFBTCxDQUFnQixZQUFoQixDQUE2QixrQkFBa0IsRUFBL0MsRUFBbUQsS0FBbkQ7QUFDQSxxQkFBSyxVQUFMLENBQWdCLEdBQWhCO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7Ozs7Ozs7Z0NBUVEsSSxFQUFNLEMsRUFBRyxDLEVBQW1CO0FBQUEsZ0JBQWhCLE9BQWdCLHVFQUFOLElBQU07O0FBQ2hDLG1CQUFPLEtBQUssTUFBTCxDQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLElBQUksZUFBZSxJQUFuQixDQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxDQUFwQyxFQUF1QyxDQUF2QyxDQUFsQixFQUE2RCxPQUE3RCxDQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7O2lDQVFTLEMsRUFBRyxDLEVBQWlDO0FBQUEsZ0JBQTlCLElBQThCLHVFQUF2QixLQUF1QjtBQUFBLGdCQUFoQixPQUFnQix1RUFBTixJQUFNOztBQUN6QyxtQkFBTyxLQUFLLE1BQUwsQ0FBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixJQUFJLGVBQWUsUUFBbkIsQ0FBNEIsSUFBNUIsRUFBa0MsSUFBbEMsQ0FBbEIsRUFBMkQsT0FBM0QsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7Ozs7O2tDQU9VLEMsRUFBRyxDLEVBQW1CO0FBQUEsZ0JBQWhCLE9BQWdCLHVFQUFOLElBQU07O0FBQzVCLG1CQUFPLEtBQUssTUFBTCxDQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLElBQUksZUFBZSxTQUFuQixDQUE2QixJQUE3QixDQUFsQixFQUFzRCxPQUF0RCxDQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7OytCQVFPLEMsRUFBRyxDLEVBQUcsTSxFQUF3QjtBQUFBLGdCQUFoQixPQUFnQix1RUFBTixJQUFNOztBQUNqQyxnQkFBSSxRQUFRLEtBQUssS0FBTCxDQUFXLE1BQXZCOztBQUVBLGlCQUFLLEtBQUwsQ0FBVyxLQUFYLElBQW9CLE1BQXBCOztBQUVBO0FBQ0EsZ0JBQUksS0FBSyxDQUFULEVBQVk7QUFDUixvQkFBSSxLQUFLLElBQUksZUFBZSxTQUFuQixFQUFUO0FBQ0EsbUJBQUcsWUFBSCxDQUFnQixDQUFoQixFQUFtQixDQUFuQjs7QUFFQSxxQkFBSyxLQUFMLENBQVcsS0FBWCxFQUFrQixNQUFsQixDQUF5QixPQUF6QixDQUFpQyxFQUFDLGFBQWEsR0FBRyxHQUFILEVBQWQsRUFBakM7QUFDSDs7QUFFRCxpQkFBSyxhQUFMLENBQW1CLEtBQUssS0FBTCxDQUFXLEtBQVgsQ0FBbkIsRUFBc0MsT0FBdEM7O0FBRUE7QUFDQSxnQkFBSSxLQUFLLFFBQVQsRUFBbUI7QUFDZixxQkFBSyxRQUFMLENBQWMsY0FBZCxDQUE2QixLQUFLLEtBQUwsQ0FBVyxLQUFYLEVBQWtCLElBQS9DO0FBQ0g7O0FBRUQsbUJBQU8sS0FBSyxLQUFMLENBQVcsS0FBWCxDQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7a0NBSVUsSyxFQUFPO0FBQ2IsZ0JBQUksUUFBUSxFQUFFLE1BQU0sS0FBUixDQUFaOztBQUVBO0FBQ0EsZ0JBQUksWUFBWSxDQUFDLENBQWpCO0FBQ0EsaUJBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxLQUFLLEtBQUwsQ0FBVyxNQUEvQixFQUF1QyxHQUF2QyxFQUE0QztBQUN4QyxvQkFBSSxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsTUFBZCxDQUFxQixFQUFyQixLQUE0QixLQUFoQyxFQUF1QztBQUNuQyxnQ0FBWSxDQUFaO0FBQ0E7QUFDSDtBQUNKOztBQUVELGdCQUFJLFlBQVksQ0FBQyxDQUFqQixFQUFvQjtBQUNoQjtBQUNBLHFCQUFLLElBQUksS0FBSSxDQUFiLEVBQWdCLEtBQUksS0FBSyxLQUFMLENBQVcsU0FBWCxFQUFzQixVQUF0QixDQUFpQyxNQUFyRCxFQUE2RCxJQUE3RCxFQUFrRTtBQUM5RCx5QkFBSyx3QkFBTCxDQUE4QixLQUFLLEtBQUwsQ0FBVyxTQUFYLEVBQXNCLFVBQXRCLENBQWlDLEVBQWpDLEVBQW9DLEVBQWxFO0FBQ0g7O0FBRUQ7QUFDQSxxQkFBSyxLQUFMLENBQVcsTUFBWCxDQUFrQixTQUFsQixFQUE2QixDQUE3QjtBQUNBLHNCQUFNLE1BQU47O0FBRUE7QUFDQSxvQkFBSSxLQUFLLFFBQVQsRUFBbUI7QUFDZix5QkFBSyxRQUFMLENBQWMsZ0JBQWQ7QUFDSDtBQUNKLGFBZEQsTUFjTztBQUNILHdCQUFRLEtBQVIsQ0FBYyw4Q0FBZCxFQUE4RCxLQUE5RDtBQUNIO0FBQ0o7O0FBRUQ7Ozs7OztzQ0FHYztBQUNWOztBQUVBO0FBQ0EsZ0JBQU0sTUFBTSxLQUFLLEtBQUwsQ0FBVyxHQUFYLENBQWU7QUFBQSx1QkFBTyxJQUFJLEVBQVg7QUFBQSxhQUFmLENBQVo7O0FBRUE7QUFOVTtBQUFBO0FBQUE7O0FBQUE7QUFPVixzQ0FBaUIsR0FBakIsbUlBQXNCO0FBQUEsd0JBQVgsRUFBVzs7QUFDbEIseUJBQUssU0FBTCxDQUFlLEVBQWY7QUFDSDtBQVRTO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFVYjs7QUFFRDs7Ozs7Ozs7OztnQ0FPUSxNLEVBQVEsSSxFQUFvQztBQUFBOztBQUFBLGdCQUE5QixPQUE4Qix1RUFBcEIsSUFBb0I7QUFBQSxnQkFBZCxLQUFjLHVFQUFOLElBQU07O0FBQ2hEO0FBQ0EsZ0JBQUksV0FBVyxJQUFmLEVBQ0ksT0FBTyxTQUFQOztBQUVKLGdCQUFJLGFBQWEsQ0FBQyxLQUFLLGdCQUFMLENBQXNCLE1BQXRCLENBQUQsRUFBZ0MsS0FBSyxnQkFBTCxDQUFzQixJQUF0QixDQUFoQyxDQUFqQjs7QUFFQTtBQUNBLHVCQUFXLE9BQVgsQ0FBbUIsZ0JBQVE7QUFDdkIsb0JBQUksS0FBSyxnQkFBVCxFQUNJLE9BQUssd0JBQUwsQ0FBOEIsS0FBSyxFQUFuQztBQUNQLGFBSEQ7QUFJQSxnQkFBSSxRQUFRLEtBQUssS0FBTCxDQUFXLE1BQXZCOztBQUVBLGdCQUFJO0FBQ0EscUJBQUssS0FBTCxDQUFXLEtBQVgsSUFBb0IsSUFBSSxlQUFlLElBQW5CLENBQXdCLElBQXhCLEVBQThCLE1BQTlCLEVBQXNDLElBQXRDLEVBQTRDLE9BQTVDLEVBQXFELEtBQXJELENBQXBCO0FBQ0gsYUFGRCxDQUVFLE9BQU8sQ0FBUCxFQUFVO0FBQ1IscUJBQUssUUFBTCxDQUFjLGVBQWQsQ0FBOEIsQ0FBOUI7QUFDQSx1QkFBTyxTQUFQO0FBQ0g7O0FBRUQsdUJBQVcsT0FBWCxDQUFtQixnQkFBUTtBQUN2QixxQkFBSyxTQUFMLENBQWUsT0FBSyxLQUFMLENBQVcsS0FBWCxFQUFrQixNQUFsQixDQUF5QixFQUF4QztBQUNILGFBRkQ7O0FBSUEsaUJBQUssYUFBTCxDQUFtQixLQUFLLEtBQUwsQ0FBVyxLQUFYLENBQW5CLEVBQXNDLE9BQXRDO0FBQ0EsaUJBQUssY0FBTCxDQUFvQixLQUFLLEtBQUwsQ0FBVyxLQUFYLEVBQWtCLE1BQWxCLENBQXlCLEVBQTdDOztBQUVBLGdCQUFJLE9BQUosRUFDSSxLQUFLLEtBQUwsQ0FBVyxLQUFYLEVBQWtCLGVBQWxCOztBQUVKLG1CQUFPLEtBQUssS0FBTCxDQUFXLEtBQVgsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7Ozs7NkNBTXFCLFMsRUFBOEI7QUFBQSxnQkFBbkIsVUFBbUIsdUVBQU4sSUFBTTs7QUFDL0M7QUFDQSxnQkFBTSxRQUFRLFVBQVUsTUFBVixDQUFpQixFQUEvQixDQUYrQyxDQUVaOztBQUVuQyxnQkFBSSxhQUFhLFVBQVUsTUFBVixDQUFpQixHQUFsQzs7QUFFQSxnQkFBSSxXQUFXLFdBQVcsUUFBWCxFQUFmOztBQUVBLHFCQUFTLElBQVQsR0FBZ0IsS0FBSyxPQUFMLENBQWEsVUFBYixDQUF3QixTQUFTLElBQWpDLENBQWhCO0FBQ0EscUJBQVMsR0FBVCxHQUFlLEtBQUssT0FBTCxDQUFhLFVBQWIsQ0FBd0IsU0FBUyxHQUFqQyxDQUFmOztBQUVBLGdCQUFJLFFBQVEsV0FBVyxJQUFYLENBQWdCLE9BQWhCLENBQVo7QUFDQSxnQkFBSSxTQUFTLFdBQVcsSUFBWCxDQUFnQixRQUFoQixDQUFiOztBQUVBLGdCQUFJLElBQUksU0FBUyxJQUFULEdBQWdCLFFBQVEsQ0FBaEM7QUFDQSxnQkFBSSxJQUFJLFNBQVMsR0FBVCxHQUFlLFNBQVMsQ0FBaEM7QUFDQSxnQkFBSSxVQUFKLEVBQWdCO0FBQ1osb0JBQUksS0FBSyxVQUFMLENBQWdCLENBQWhCLENBQUo7QUFDQSxvQkFBSSxLQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBSjtBQUNIOztBQUVELG1CQUFPLEVBQUMsR0FBRyxDQUFKLEVBQU8sR0FBRyxDQUFWLEVBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBaUJZLE0sRUFBUSxPLEVBQVMsSyxFQUFPLEksRUFBTSxDLEVBQUcsQyxFQUFtQjtBQUFBLGdCQUFoQixPQUFnQix1RUFBTixJQUFNOztBQUM1RCxnQkFBTSxRQUFRLEtBQUssS0FBTCxDQUFXLE1BQXpCOztBQUVBLGlCQUFLLEtBQUwsQ0FBVyxLQUFYLElBQW9CLElBQUksZUFBZSxRQUFuQixDQUE0QixJQUE1QixFQUFrQyxNQUFsQyxFQUEwQyxPQUExQyxFQUFtRCxZQUFvQjtBQUFBLGtEQUFoQixXQUFnQjtBQUFoQiwrQkFBZ0I7QUFBQTs7QUFBQSw2Q0FDNUUsSUFENEU7QUFFbkYsd0JBQU0sa0JBQWtCLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxNQUFkLENBQXhCOztBQUVBO0FBQ0Esd0JBQUksWUFBWSxLQUFaLENBQWtCLFVBQUMsS0FBRCxFQUFRLEtBQVI7QUFBQSwrQkFBa0IsVUFBVSxnQkFBZ0IsS0FBaEIsQ0FBNUI7QUFBQSxxQkFBbEIsQ0FBSixFQUEyRTtBQUN2RTtBQUNBO0FBQUEsK0JBQU8sS0FBSyxLQUFMLENBQVcsTUFBWDtBQUFQO0FBQ0g7QUFSa0Y7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ3ZGLDBDQUFtQixLQUFuQixtSUFBMEI7QUFBQSw0QkFBZixJQUFlOztBQUFBLDJDQUFmLElBQWU7O0FBQUE7QUFRekI7QUFDRDtBQVZ1RjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVd2Rix1QkFBTyxNQUFNLElBQU4sQ0FBVyxJQUFJLEtBQUosQ0FBVSxPQUFWLENBQVgsRUFBK0I7QUFBQSwyQkFBTSxnQkFBTSxLQUFOLENBQVksT0FBbEI7QUFBQSxpQkFBL0IsQ0FBUDtBQUNILGFBWm1CLEVBWWpCLElBWmlCLENBQXBCOztBQWNBLGdCQUFJLEtBQUssQ0FBVCxFQUFZO0FBQ1Isb0JBQUksS0FBSyxJQUFJLGVBQWUsU0FBbkIsRUFBVDtBQUNBLG1CQUFHLFlBQUgsQ0FBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkI7O0FBRUEscUJBQUssS0FBTCxDQUFXLEtBQVgsRUFBa0IsTUFBbEIsQ0FBeUIsT0FBekIsQ0FBaUMsRUFBQyxhQUFhLEdBQUcsR0FBSCxFQUFkLEVBQWpDO0FBQ0g7O0FBRUQsaUJBQUssYUFBTCxDQUFtQixLQUFLLEtBQUwsQ0FBVyxLQUFYLENBQW5CLEVBQXNDLE9BQXRDOztBQUVBLG1CQUFPLEtBQUssS0FBTCxDQUFXLEtBQVgsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7OztvQ0FLWSxNLEVBQVE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFDaEIsdUNBQW1CLEtBQUssS0FBeEIsd0lBQStCO0FBQUEsd0JBQXBCLElBQW9COztBQUMzQix3QkFBSSxLQUFLLE1BQUwsQ0FBWSxFQUFaLEtBQW1CLE1BQXZCLEVBQStCO0FBQzNCLCtCQUFPLElBQVA7QUFDSDtBQUNKO0FBTGU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFPaEIsbUJBQU8sS0FBUDtBQUNIOztBQUVEOzs7Ozs7Ozs4Q0FLc0IsVyxFQUFhO0FBQy9CLGdCQUFJLFlBQVksS0FBSyxnQkFBTCxDQUFzQixXQUF0QixDQUFoQjtBQUNBLG1CQUFPLFVBQVUsT0FBakI7QUFDSDs7QUFFRDs7Ozs7Ozt1Q0FJZSxNLEVBQVE7QUFDbkIsaUJBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxLQUFLLEtBQUwsQ0FBVyxNQUEvQixFQUF1QyxFQUFFLENBQXpDLEVBQTRDO0FBQ3hDLG9CQUFJLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxNQUFkLENBQXFCLEVBQXJCLEtBQTRCLE1BQWhDLEVBQXdDO0FBQUEsd0JBRS9CLFVBRitCLEdBRWpCLEtBQUssS0FBTCxDQUFXLENBQVgsQ0FGaUIsQ0FFL0IsVUFGK0I7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBSXBDLCtDQUFzQixVQUF0Qix3SUFBa0M7QUFBQSxnQ0FBekIsU0FBeUI7O0FBQzlCLHNDQUFVLHFCQUFWLENBQWdDLE1BQWhDO0FBQ0g7O0FBRUQ7QUFDQTtBQVRvQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVdwQyx3QkFBSSxpQkFBaUIsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLFVBQWQsQ0FBeUIsRUFBekIsQ0FBNEIsU0FBakQ7QUFDQSx5QkFBSyxrQkFBTCxDQUF3QixjQUF4QixFQUF3QyxlQUFlLEtBQXZEOztBQUVBLHlCQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsTUFBZCxDQUFxQixHQUFyQixDQUF5QixNQUF6QjtBQUNBLHlCQUFLLEtBQUwsQ0FBVyxNQUFYLENBQWtCLENBQWxCLEVBQXFCLENBQXJCOztBQUVBO0FBQ0g7QUFDSjtBQUNKOztBQUVEOzs7Ozs7O2lEQUl5QixXLEVBQWE7QUFBQTs7QUFDbEMsZ0JBQUksWUFBWSxLQUFLLGdCQUFMLENBQXNCLFdBQXRCLENBQWhCOztBQUVBLHNCQUFVLE9BQVYsQ0FBa0IsT0FBbEIsQ0FBMEIsa0JBQVU7QUFDaEMsb0JBQUksT0FBTyxPQUFLLFdBQUwsQ0FBaUIsTUFBakIsQ0FBWDs7QUFEZ0MsdUNBR2YsS0FBSyxVQUhVO0FBQUEsb0JBRzNCLElBSDJCLG9CQUczQixJQUgyQjtBQUFBLG9CQUdyQixFQUhxQixvQkFHckIsRUFIcUI7O0FBS2hDOztBQUNBLG9CQUFJLGlCQUFpQixnQkFBZ0IsS0FBSyxFQUFyQixHQUNmLEdBQUcsU0FEWSxHQUVmLEtBQUssU0FGWDs7QUFJQTtBQUNBLCtCQUFlLE9BQWYsQ0FBdUIsTUFBdkIsQ0FBOEIsTUFBOUI7O0FBRUE7QUFDQSxrQkFBRSxNQUFNLE1BQVIsRUFBZ0IsTUFBaEI7O0FBRUE7QUFDQSxvQkFBSSxlQUFlLGdCQUFuQixFQUFxQztBQUNqQyxtQ0FBZSxRQUFmLENBQXdCLGdCQUFNLEtBQU4sQ0FBWSxPQUFwQztBQUNBLDJCQUFLLGtCQUFMLENBQXdCLGNBQXhCLEVBQXdDLGdCQUFNLEtBQU4sQ0FBWSxPQUFwRDtBQUNIO0FBQ0osYUFyQkQ7O0FBdUJBO0FBQ0Esc0JBQVUsT0FBVixDQUFrQixLQUFsQjtBQUNBO0FBQ0EsZ0JBQUksVUFBVSxnQkFBZCxFQUFnQztBQUM1QiwwQkFBVSxRQUFWLENBQW1CLGdCQUFNLEtBQU4sQ0FBWSxPQUEvQjtBQUNBLHFCQUFLLGtCQUFMLENBQXdCLFNBQXhCLEVBQW1DLGdCQUFNLEtBQU4sQ0FBWSxPQUEvQztBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7O21DQUtXLEssRUFBTztBQUNkLGlCQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksS0FBSyxLQUFMLENBQVcsTUFBL0IsRUFBdUMsR0FBdkMsRUFBNEM7QUFDeEMsb0JBQUksS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLE1BQWQsQ0FBcUIsRUFBckIsS0FBNEIsS0FBaEMsRUFBdUM7QUFDbkMsMkJBQU8sS0FBSyxLQUFMLENBQVcsQ0FBWCxDQUFQO0FBQ0g7QUFDSjtBQUNELG1CQUFPLFNBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7NENBS29CLFcsRUFBYTtBQUM3QixpQkFBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLEtBQUssS0FBTCxDQUFXLE1BQS9CLEVBQXVDLEdBQXZDLEVBQTRDO0FBQ3hDLG9CQUFJLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxnQkFBZCxDQUErQixXQUEvQixNQUFnRCxTQUFwRCxFQUErRDtBQUMzRCwyQkFBTyxLQUFLLEtBQUwsQ0FBVyxDQUFYLENBQVA7QUFDSDtBQUNKO0FBQ0QsbUJBQU8sS0FBUDtBQUNIOztBQUVEOzs7Ozs7Ozs7Ozs7eUNBU2lCLFcsRUFBK0I7QUFBQSxnQkFBbEIsSUFBa0IsdUVBQVgsU0FBVzs7O0FBRTVDLGdCQUFJLFNBQVMsU0FBYixFQUF3QjtBQUNwQjtBQURvQix3Q0FFRCxLQUFLLFVBRko7QUFBQSxvQkFFYixJQUZhLHFCQUViLElBRmE7QUFBQSxvQkFFUCxFQUZPLHFCQUVQLEVBRk87OztBQUlwQixvQkFBSSxLQUFLLEVBQUwsS0FBWSxXQUFoQixFQUNJLE9BQU8sS0FBSyxTQUFaOztBQUVKLG9CQUFJLEdBQUcsRUFBSCxLQUFVLFdBQWQsRUFDSSxPQUFPLEdBQUcsU0FBVjtBQUVILGFBVkwsTUFXSztBQUNEO0FBREM7QUFBQTtBQUFBOztBQUFBO0FBRUQsMkNBQWtCLEtBQUssS0FBdkIsd0lBQThCO0FBQUEsNEJBQW5CLElBQW1COztBQUMxQiw0QkFBTSxZQUFZLEtBQUksZ0JBQUosQ0FBcUIsV0FBckIsQ0FBbEI7QUFDQSw0QkFBSSxTQUFKLEVBQWU7QUFDWCxtQ0FBTyxTQUFQO0FBQ0g7QUFDSjtBQVBBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFRSjs7QUFFRCxtQkFBTyxTQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7OzRDQVFvQixNLEVBQVE7QUFDeEIsZ0JBQUksVUFBVSxFQUFFLE1BQUYsQ0FBZDtBQUNBLGdCQUFJLENBQUMsUUFBUSxRQUFSLENBQWlCLFdBQWpCLENBQUQsSUFBa0MsUUFBUSxPQUFSLENBQWdCLEdBQWhCLEVBQXFCLE1BQXJCLEdBQThCLENBQXBFLEVBQXVFO0FBQ25FLDBCQUFVLFFBQVEsTUFBUixFQUFWO0FBQ0EsdUJBQU8sUUFBUSxJQUFSLENBQWEsU0FBYixNQUE0QixHQUE1QixJQUFtQyxRQUFRLElBQVIsQ0FBYSxTQUFiLE1BQTRCLEdBQXRFLEVBQTJFO0FBQ3ZFLDhCQUFVLFFBQVEsTUFBUixFQUFWO0FBQ0g7QUFDSjtBQUNELG1CQUFPLE9BQVA7QUFDSDs7QUFFRDtBQUNBOzs7Ozs7OztzQ0FLYyxNLEVBQVE7QUFDbEIsZ0JBQUksV0FBVyxTQUFmLEVBQTBCO0FBQ3RCLHVCQUFPLFNBQVA7QUFDSDs7QUFFRDtBQUNBLGdCQUFJLFVBQVUsRUFBRSxNQUFGLENBQWQ7O0FBRUEsZ0JBQUksUUFBUSxRQUFSLENBQWlCLFdBQWpCLENBQUosRUFBbUM7QUFDL0I7QUFDQSx1QkFBTyxLQUFLLGdCQUFMLENBQXNCLFFBQVEsSUFBUixDQUFhLElBQWIsQ0FBdEIsQ0FBUDtBQUNILGFBSEQsTUFHTyxJQUFJLFFBQVEsT0FBUixDQUFnQixHQUFoQixFQUFxQixNQUFyQixHQUE4QixDQUFsQyxFQUFxQztBQUN4Qzs7QUFFQTtBQUNBLG9CQUFJLGVBQWUsUUFBUSxNQUFSLEVBQW5CO0FBQ0EsdUJBQU8sYUFBYSxJQUFiLENBQWtCLFNBQWxCLE1BQWlDLEdBQWpDLElBQXdDLGFBQWEsSUFBYixDQUFrQixTQUFsQixNQUFpQyxHQUFoRixFQUFxRjtBQUNqRixtQ0FBZSxhQUFhLE1BQWIsRUFBZjtBQUNIOztBQUVEOztBQUVBLG9CQUFJLGFBQWEsUUFBYixDQUFzQixLQUF0QixDQUFKLEVBQWtDO0FBQzlCO0FBQ0EsMkJBQU8sS0FBSyxVQUFMLENBQWdCLGFBQWEsSUFBYixDQUFrQixJQUFsQixDQUFoQixDQUFQO0FBQ0gsaUJBSEQsTUFHTyxJQUFJLGFBQWEsUUFBYixDQUFzQixNQUF0QixDQUFKLEVBQW1DO0FBQ3RDO0FBQ0EsMkJBQU8sS0FBSyxXQUFMLENBQWlCLGFBQWEsSUFBYixDQUFrQixJQUFsQixDQUFqQixDQUFQO0FBQ0gsaUJBSE0sTUFHQTtBQUNIO0FBQ0EsMkJBQU8sU0FBUDtBQUNIO0FBQ0osYUFyQk0sTUFxQkE7QUFDSDtBQUNBLHVCQUFPLFNBQVA7QUFDSDtBQUNKOztBQUVEOzs7Ozs7OztzQ0FLYyxPLEVBQXlCO0FBQUEsZ0JBQWhCLE9BQWdCLHVFQUFOLElBQU07O0FBQ25DLGlCQUFLLGtCQUFMLENBQXdCLFFBQVEsR0FBUixFQUF4QixFQUF1QyxPQUF2QztBQUNIOztBQUVEOzs7Ozs7OzsyQ0FLbUIsTSxFQUF3QjtBQUFBLGdCQUFoQixPQUFnQix1RUFBTixJQUFNOztBQUN2QyxpQkFBSyxJQUFMLENBQVUsTUFBVixDQUFpQixNQUFqQjtBQUNBLGdCQUFJLE9BQUosRUFDSSxLQUFLLE9BQUw7QUFDSDs7QUFFTDs7Ozs7OzttQ0FJVyxPLEVBQVM7QUFDaEIsaUJBQUssS0FBTCxDQUFXLE1BQVgsQ0FBa0IsT0FBbEI7QUFDQSxpQkFBSyxPQUFMO0FBQ0g7O0FBRUQ7Ozs7OztrQ0FHVTtBQUNOLGlCQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUsS0FBSyxJQUFMLENBQVUsSUFBVixFQUFmO0FBQ0Esb0JBQVEsR0FBUixDQUFZLGlDQUFaO0FBQ0g7O0FBRUQ7Ozs7Ozs7OzsyQ0FNbUIsQyxFQUFHLEMsRUFBRyxPLEVBQVM7QUFDOUIsaUJBQUssV0FBTCxDQUFpQixPQUFqQixDQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQixPQUEvQjs7QUFFQTtBQUNBLGdCQUFJLEtBQUssUUFBVCxFQUFtQjtBQUNmLHFCQUFLLFFBQUwsQ0FBYyxtQkFBZDtBQUNIO0FBQ0o7O0FBRUQ7Ozs7OzswQ0FHa0I7QUFDZCxpQkFBSyxXQUFMLENBQWlCLElBQWpCO0FBQ0g7O0FBRUQ7Ozs7Ozs7O21DQUtXLEssRUFBTztBQUNkLG1CQUFPLEtBQUssS0FBTCxDQUFXLFFBQVEsS0FBSyxRQUF4QixJQUFvQyxLQUFLLFFBQWhEO0FBQ0g7O0FBRUQ7Ozs7Ozs7O2tDQUtVLEssRUFBTztBQUNiLG1CQUFPLFFBQVEsS0FBSyxRQUFwQjtBQUNIOztBQUVEOzs7Ozs7OztrQ0FLVSxLLEVBQU87QUFDYixtQkFBTyxRQUFRLEtBQUssUUFBcEI7QUFDSDs7QUFFRDs7Ozs7Ozs7Ozs7QUFVQTs7Ozt3Q0FJZ0IsSyxFQUFPO0FBQ25CLGlCQUFLLElBQUwsQ0FBVSxNQUFWLENBQWlCLEVBQUUsTUFBTSxLQUFSLENBQWpCO0FBQ0g7O0FBRUQ7Ozs7Ozs7dUNBSWUsSyxFQUFPO0FBQ2xCLGNBQUUsTUFBTSxLQUFLLFVBQUwsQ0FBZ0IsRUFBeEIsRUFBNEIsS0FBNUIsQ0FBa0MsRUFBRSxNQUFNLEtBQVIsQ0FBbEM7QUFDSDs7QUFFRDs7Ozs7Ozs4Q0FJc0I7QUFDbEIsZ0JBQUksZUFBZSxJQUFJLEdBQUosRUFBbkI7QUFDQTtBQUZrQjtBQUFBO0FBQUE7O0FBQUE7QUFHbEIsdUNBQWtCLEtBQUssS0FBdkIsd0lBQThCO0FBQUEsd0JBQW5CLEtBQW1COztBQUMxQix3QkFBTSxZQUFZLE1BQUkscUJBQUosR0FBNEIsWUFBNUIsRUFBbEI7O0FBRUE7QUFDQTtBQUNBO0FBTDBCO0FBQUE7QUFBQTs7QUFBQTtBQU0xQiwrQ0FBbUIsTUFBSSxZQUF2Qix3SUFBcUM7QUFBQSxnQ0FBMUIsSUFBMEI7O0FBQ2pDLHlDQUFhLEdBQWIsQ0FBaUI7QUFDYixtQ0FBRyxVQUFVLENBQVYsR0FBYyxLQUFLLENBRFQ7QUFFYixtQ0FBRyxVQUFVLENBQVYsR0FBYyxLQUFLO0FBRlQsNkJBQWpCO0FBSUg7QUFYeUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVk3Qjs7QUFFRDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQTs7QUFFQTtBQWpEa0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFrRGxCLG1CQUFPLFlBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs2Q0FJcUIsWSxFQUFjO0FBQy9CLGdCQUFJLG9CQUFvQixJQUFJLEdBQUosRUFBeEI7QUFDQTs7QUFGK0I7QUFBQTtBQUFBOztBQUFBO0FBSS9CLHVDQUFtQixLQUFLLEtBQXhCLHdJQUErQjtBQUFBLHdCQUFwQixJQUFvQjs7QUFDM0Isd0JBQUksaUJBQWlCLFNBQWpCLElBQThCLGlCQUFpQixLQUFLLEVBQXhELEVBQTREO0FBQ3hELDRCQUFJLEtBQUssaUJBQVQsRUFBNEI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFDeEIsdURBQW1CLEtBQUssaUJBQXhCLHdJQUEyQztBQUFBLHdDQUFoQyxJQUFnQzs7QUFDdkMsc0RBQWtCLEdBQWxCLENBQXNCLElBQXRCO0FBQ0g7QUFIdUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUkzQjtBQUNKO0FBQ0o7O0FBRUQ7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBOztBQUVBO0FBMUMrQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQTJDL0IsbUJBQU8saUJBQVA7QUFDSDs7OzRCQXRxQ1c7QUFDUixtQkFBTyxLQUFLLElBQUwsQ0FBVSxLQUFWLEVBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs0QkFJYTtBQUNULG1CQUFPLEtBQUssSUFBTCxDQUFVLE1BQVYsRUFBUDtBQUNIOzs7NEJBMkZVO0FBQ1AsbUJBQU8sS0FBSyxPQUFMLENBQWEsSUFBcEI7QUFDSDs7QUFFRDs7Ozs7OzBCQUtTLEssRUFBTztBQUNaLGlCQUFLLE9BQUwsQ0FBYSxJQUFiLEdBQW9CLEtBQXBCO0FBQ0EsaUJBQUssWUFBTDs7QUFFQTtBQUNBLGdCQUFJLEtBQUssUUFBVCxFQUFtQjtBQUNmLHFCQUFLLFFBQUwsQ0FBYyxjQUFkO0FBQ0g7QUFDSjs7OzRCQXlCZ0I7QUFDYixpQkFBSyxlQUFMLEdBQXVCLElBQUksR0FBSixFQUF2QjtBQUNBLGlCQUFLLFlBQUwsR0FBb0IsQ0FBcEI7O0FBRUEsZ0JBQUksT0FBTztBQUNQLHVCQUFPO0FBREEsYUFBWDs7QUFKYTtBQUFBO0FBQUE7O0FBQUE7QUFRYix1Q0FBa0IsS0FBSyxLQUF2Qix3SUFBOEI7QUFBQSx3QkFBbkIsS0FBbUI7O0FBQzFCLHlCQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCLE1BQUksVUFBcEI7QUFDSDtBQVZZO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBWWIsbUJBQU8sSUFBUDtBQUNIOzs7bUNBNjRCaUIsSyxFQUFPLFEsRUFBVTtBQUMvQixtQkFBTyxLQUFLLEtBQUwsQ0FBVyxRQUFRLFFBQW5CLElBQStCLFFBQXRDO0FBQ0g7Ozs7OztrQkE5c0NnQixNOzs7Ozs7Ozs7Ozs7O0FDaENyQjtBQUNBOzs7SUFHcUIsSzs7Ozs7Ozs7O0FBcUNqQjs7Ozs7OzRCQU1XLEMsRUFBRyxDLEVBQUc7QUFDYixtQkFBTyxNQUFNLGlCQUFOLENBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCLENBQ2pDLENBQUMsTUFBTSxLQUFOLENBQVksRUFBYixFQUFpQixNQUFNLEtBQU4sQ0FBWSxFQUE3QixFQUFpQyxNQUFNLEtBQU4sQ0FBWSxFQUE3QyxDQURpQyxFQUVqQyxDQUFDLE1BQU0sS0FBTixDQUFZLEVBQWIsRUFBaUIsTUFBTSxLQUFOLENBQVksR0FBN0IsRUFBa0MsTUFBTSxLQUFOLENBQVksR0FBOUMsQ0FGaUMsRUFHakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxFQUFiLEVBQWlCLE1BQU0sS0FBTixDQUFZLE9BQTdCLEVBQXNDLE1BQU0sS0FBTixDQUFZLE9BQWxELENBSGlDLEVBSWpDLENBQUMsTUFBTSxLQUFOLENBQVksRUFBYixFQUFpQixNQUFNLEtBQU4sQ0FBWSxXQUE3QixFQUEwQyxNQUFNLEtBQU4sQ0FBWSxXQUF0RCxDQUppQyxFQU1qQyxDQUFDLE1BQU0sS0FBTixDQUFZLEdBQWIsRUFBa0IsTUFBTSxLQUFOLENBQVksR0FBOUIsRUFBbUMsTUFBTSxLQUFOLENBQVksR0FBL0MsQ0FOaUMsRUFPakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxHQUFiLEVBQWtCLE1BQU0sS0FBTixDQUFZLE9BQTlCLEVBQXVDLE1BQU0sS0FBTixDQUFZLEdBQW5ELENBUGlDLEVBUWpDLENBQUMsTUFBTSxLQUFOLENBQVksR0FBYixFQUFrQixNQUFNLEtBQU4sQ0FBWSxXQUE5QixFQUEyQyxNQUFNLEtBQU4sQ0FBWSxHQUF2RCxDQVJpQyxFQVVqQyxDQUFDLE1BQU0sS0FBTixDQUFZLE9BQWIsRUFBc0IsTUFBTSxLQUFOLENBQVksT0FBbEMsRUFBMkMsTUFBTSxLQUFOLENBQVksT0FBdkQsQ0FWaUMsRUFXakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxPQUFiLEVBQXNCLE1BQU0sS0FBTixDQUFZLFdBQWxDLEVBQStDLE1BQU0sS0FBTixDQUFZLE9BQTNELENBWGlDLEVBYWpDLENBQUMsTUFBTSxLQUFOLENBQVksV0FBYixFQUEwQixNQUFNLEtBQU4sQ0FBWSxXQUF0QyxFQUFtRCxNQUFNLEtBQU4sQ0FBWSxXQUEvRCxDQWJpQyxDQUE5QixDQUFQO0FBZUg7QUFDRDs7Ozs7Ozs7OzZCQU1ZLEMsRUFBRyxDLEVBQUc7QUFDZCxtQkFBTyxNQUFNLEdBQU4sQ0FBVSxNQUFNLEdBQU4sQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUFWLENBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7OzRCQU1XLEMsRUFBRyxDLEVBQUc7QUFDYixtQkFBTyxNQUFNLEdBQU4sQ0FBVSxNQUFNLEVBQU4sQ0FBUyxDQUFULEVBQVksQ0FBWixDQUFWLENBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7NEJBS1csQyxFQUFHO0FBQ1YsZ0JBQUcsTUFBTSxNQUFNLEtBQU4sQ0FBWSxFQUFyQixFQUF5QjtBQUNyQix1QkFBTyxNQUFNLEtBQU4sQ0FBWSxHQUFuQjtBQUNILGFBRkQsTUFFTyxJQUFJLE1BQU0sTUFBTSxLQUFOLENBQVksR0FBdEIsRUFBMkI7QUFDOUIsdUJBQU8sTUFBTSxLQUFOLENBQVksRUFBbkI7QUFDSCxhQUZNLE1BRUE7QUFDSCx1QkFBTyxDQUFQO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7Ozs7OzJCQU1VLEMsRUFBRyxDLEVBQUc7QUFDWixtQkFBTyxNQUFNLGlCQUFOLENBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCLENBQ2pDLENBQUMsTUFBTSxLQUFOLENBQVksRUFBYixFQUFpQixNQUFNLEtBQU4sQ0FBWSxFQUE3QixFQUFpQyxNQUFNLEtBQU4sQ0FBWSxFQUE3QyxDQURpQyxFQUVqQyxDQUFDLE1BQU0sS0FBTixDQUFZLEVBQWIsRUFBaUIsTUFBTSxLQUFOLENBQVksR0FBN0IsRUFBa0MsTUFBTSxLQUFOLENBQVksRUFBOUMsQ0FGaUMsRUFHakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxFQUFiLEVBQWlCLE1BQU0sS0FBTixDQUFZLE9BQTdCLEVBQXNDLE1BQU0sS0FBTixDQUFZLEVBQWxELENBSGlDLEVBSWpDLENBQUMsTUFBTSxLQUFOLENBQVksRUFBYixFQUFpQixNQUFNLEtBQU4sQ0FBWSxXQUE3QixFQUEwQyxNQUFNLEtBQU4sQ0FBWSxFQUF0RCxDQUppQyxFQU1qQyxDQUFDLE1BQU0sS0FBTixDQUFZLEdBQWIsRUFBa0IsTUFBTSxLQUFOLENBQVksR0FBOUIsRUFBbUMsTUFBTSxLQUFOLENBQVksR0FBL0MsQ0FOaUMsRUFPakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxHQUFiLEVBQWtCLE1BQU0sS0FBTixDQUFZLE9BQTlCLEVBQXVDLE1BQU0sS0FBTixDQUFZLE9BQW5ELENBUGlDLEVBUWpDLENBQUMsTUFBTSxLQUFOLENBQVksR0FBYixFQUFrQixNQUFNLEtBQU4sQ0FBWSxXQUE5QixFQUEyQyxNQUFNLEtBQU4sQ0FBWSxXQUF2RCxDQVJpQyxFQVVqQyxDQUFDLE1BQU0sS0FBTixDQUFZLE9BQWIsRUFBc0IsTUFBTSxLQUFOLENBQVksT0FBbEMsRUFBMkMsTUFBTSxLQUFOLENBQVksT0FBdkQsQ0FWaUMsRUFXakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxPQUFiLEVBQXNCLE1BQU0sS0FBTixDQUFZLFdBQWxDLEVBQStDLE1BQU0sS0FBTixDQUFZLE9BQTNELENBWGlDLEVBYWpDLENBQUMsTUFBTSxLQUFOLENBQVksV0FBYixFQUEwQixNQUFNLEtBQU4sQ0FBWSxXQUF0QyxFQUFtRCxNQUFNLEtBQU4sQ0FBWSxXQUEvRCxDQWJpQyxDQUE5QixDQUFQO0FBZUg7O0FBRUQ7Ozs7Ozs7Ozs2QkFNWSxDLEVBQUcsQyxFQUFHO0FBQ2QsbUJBQU8sTUFBTSxHQUFOLENBQVUsTUFBTSxHQUFOLENBQVUsQ0FBVixFQUFhLENBQWIsQ0FBVixDQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs0QkFNVyxDLEVBQUcsQyxFQUFHO0FBQ2IsbUJBQU8sTUFBTSxpQkFBTixDQUF3QixDQUF4QixFQUEyQixDQUEzQixFQUE4QixDQUNqQyxDQUFDLE1BQU0sS0FBTixDQUFZLEVBQWIsRUFBaUIsTUFBTSxLQUFOLENBQVksRUFBN0IsRUFBaUMsTUFBTSxLQUFOLENBQVksR0FBN0MsQ0FEaUMsRUFFakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxFQUFiLEVBQWlCLE1BQU0sS0FBTixDQUFZLEdBQTdCLEVBQWtDLE1BQU0sS0FBTixDQUFZLEVBQTlDLENBRmlDLEVBR2pDLENBQUMsTUFBTSxLQUFOLENBQVksRUFBYixFQUFpQixNQUFNLEtBQU4sQ0FBWSxPQUE3QixFQUFzQyxNQUFNLEtBQU4sQ0FBWSxPQUFsRCxDQUhpQyxFQUlqQyxDQUFDLE1BQU0sS0FBTixDQUFZLEVBQWIsRUFBaUIsTUFBTSxLQUFOLENBQVksV0FBN0IsRUFBMEMsTUFBTSxLQUFOLENBQVksV0FBdEQsQ0FKaUMsRUFNakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxHQUFiLEVBQWtCLE1BQU0sS0FBTixDQUFZLEdBQTlCLEVBQW1DLE1BQU0sS0FBTixDQUFZLEdBQS9DLENBTmlDLEVBT2pDLENBQUMsTUFBTSxLQUFOLENBQVksR0FBYixFQUFrQixNQUFNLEtBQU4sQ0FBWSxPQUE5QixFQUF1QyxNQUFNLEtBQU4sQ0FBWSxPQUFuRCxDQVBpQyxFQVFqQyxDQUFDLE1BQU0sS0FBTixDQUFZLEdBQWIsRUFBa0IsTUFBTSxLQUFOLENBQVksV0FBOUIsRUFBMkMsTUFBTSxLQUFOLENBQVksV0FBdkQsQ0FSaUMsRUFVakMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxPQUFiLEVBQXNCLE1BQU0sS0FBTixDQUFZLE9BQWxDLEVBQTJDLE1BQU0sS0FBTixDQUFZLE9BQXZELENBVmlDLEVBV2pDLENBQUMsTUFBTSxLQUFOLENBQVksT0FBYixFQUFzQixNQUFNLEtBQU4sQ0FBWSxXQUFsQyxFQUErQyxNQUFNLEtBQU4sQ0FBWSxPQUEzRCxDQVhpQyxFQWFqQyxDQUFDLE1BQU0sS0FBTixDQUFZLFdBQWIsRUFBMEIsTUFBTSxLQUFOLENBQVksV0FBdEMsRUFBbUQsTUFBTSxLQUFOLENBQVksV0FBL0QsQ0FiaUMsQ0FBOUIsQ0FBUDtBQWVIOztBQUVEOzs7Ozs7Ozs7Ozs7OzswQ0FXeUIsQyxFQUFHLEMsRUFBRyxLLEVBQU87QUFDbEM7QUFEa0M7QUFBQTtBQUFBOztBQUFBO0FBRWxDLHFDQUFtQixLQUFuQiw4SEFBMEI7QUFBQSx3QkFBZixJQUFlOztBQUN0Qix3QkFBSyxLQUFLLENBQUwsTUFBWSxDQUFaLElBQWlCLEtBQUssQ0FBTCxNQUFZLENBQTlCLElBQXFDLEtBQUssQ0FBTCxNQUFZLENBQVosSUFBaUIsS0FBSyxDQUFMLE1BQVksQ0FBdEUsRUFBMEU7QUFDdEUsK0JBQU8sS0FBSyxDQUFMLENBQVA7QUFDSDtBQUNKOztBQUVEO0FBUmtDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBU2xDLG1CQUFPLE1BQU0sS0FBTixDQUFZLE9BQW5CO0FBQ0g7Ozs7QUE3S0Q7Ozs7Ozs7Ozs7NEJBVW1CO0FBQ2YsbUJBQU87QUFDSCx5QkFBUyxDQUROO0FBRUgsb0JBQUksQ0FGRDtBQUdILHFCQUFLLENBSEY7QUFJSCw2QkFBYTtBQUpWLGFBQVA7QUFNSDs7QUFFRDs7Ozs7Ozs7OzRCQU11QjtBQUNuQixnQkFBSSxTQUFTLEVBQWI7O0FBRUE7QUFDQSxtQkFBTyxJQUFQLENBQVksTUFBTSxLQUFsQixFQUF5QixPQUF6QixDQUFpQyxlQUFPO0FBQ3BDLHVCQUFPLElBQVAsQ0FBWSxNQUFNLEtBQU4sQ0FBWSxHQUFaLENBQVo7QUFDSCxhQUZEOztBQUlBLG1CQUFPLE1BQVA7QUFDSDs7Ozs7O2tCQW5DZ0IsSzs7Ozs7Ozs7Ozs7QUNKckI7Ozs7Ozs7O0FBRUE7Ozs7SUFLTSxXLEdBQ0YscUJBQVksV0FBWixFQUF5QixLQUF6QixFQUFnQyxXQUFoQyxFQUE2QztBQUFBOztBQUN6QyxTQUFLLFdBQUwsR0FBbUIsV0FBbkI7QUFDQSxTQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsU0FBSyxXQUFMLEdBQW1CLFdBQW5CO0FBQ0gsQzs7QUFHTDs7Ozs7OztJQUtxQixVO0FBQ2pCOzs7QUFHQSx3QkFBWSxTQUFaLEVBQXVCO0FBQUE7O0FBQ25COzs7O0FBSUEsYUFBSyxTQUFMLEdBQWlCLFNBQWpCOztBQUVBOzs7O0FBSUEsYUFBSyxZQUFMLEdBQW9CLElBQUksR0FBSixFQUFwQjs7QUFFQTs7OztBQUlBLGFBQUssS0FBTCxHQUFhLElBQUksR0FBSixFQUFiO0FBQ0EsYUFBSyxJQUFMLEdBQVksQ0FBWjs7QUFFQTs7OztBQUlBLGFBQUssZ0JBQUwsR0FBd0IsSUFBSSxHQUFKLEVBQXhCOztBQUVBOzs7O0FBSUEsYUFBSyx3QkFBTCxHQUFnQyxJQUFJLEdBQUosRUFBaEM7QUFFSDs7QUFFRDs7Ozs7Ozs4QkFHTTtBQUNGLGlCQUFLLElBQUw7QUFDQSxtQkFBTSxLQUFLLEtBQUwsQ0FBVyxHQUFYLENBQWUsS0FBSyxJQUFwQixDQUFOLEVBQWlDO0FBQzdCLHFCQUFLLElBQUw7QUFDQSxxQkFBSyxLQUFMLENBQVcsTUFBWCxDQUFrQixLQUFLLElBQXZCLEVBRjZCLENBRUE7QUFDN0IscUJBQUssSUFBTDtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7OytCQUtPO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ0gscUNBQThDLEtBQUssS0FBTCxDQUFXLEdBQVgsQ0FBZSxLQUFLLElBQXBCLENBQTlDLDhIQUF5RTtBQUFBO0FBQUEsd0JBQS9ELFdBQStELFFBQS9ELFdBQStEO0FBQUEsd0JBQWxELEtBQWtELFFBQWxELEtBQWtEO0FBQUEsd0JBQTNDLFdBQTJDLFFBQTNDLFdBQTJDOztBQUNyRTtBQUNBLHdCQUFHLEtBQUssd0JBQUwsQ0FBOEIsR0FBOUIsQ0FBa0MsV0FBbEMsQ0FBSCxFQUFtRDtBQUMvQztBQUNIOztBQUVEO0FBQ0Esd0JBQUksS0FBSyxnQkFBTCxDQUFzQixHQUF0QixDQUEwQixXQUExQixDQUFKLEVBQTRDO0FBQ3hDO0FBQ0EsNEJBQUksU0FBUyxLQUFLLGdCQUFMLENBQXNCLEdBQXRCLENBQTBCLFdBQTFCLENBQWI7O0FBRUE7QUFDQSw0QkFBRyxPQUFPLEdBQVAsQ0FBVyxLQUFYLENBQUgsRUFBc0I7O0FBRWxCO0FBQ0E7QUFDQSxnQ0FBRyxPQUFPLElBQVAsR0FBYyxDQUFqQixFQUFvQjtBQUNoQix3Q0FBUSxnQkFBTSxLQUFOLENBQVksV0FBcEI7QUFDSDs7QUFFRDtBQUNBLGlDQUFLLHdCQUFMLENBQThCLEdBQTlCLENBQWtDLFdBQWxDOztBQUVKO0FBQ0MseUJBWkQsTUFZTztBQUNILG1DQUFPLEdBQVAsQ0FBVyxLQUFYO0FBQ0g7O0FBRUQ7QUFDQSw2QkFBSyxnQkFBTCxDQUFzQixHQUF0QixDQUEwQixXQUExQixFQUF1QyxNQUF2QztBQUNIOztBQUVELHlCQUFLLFdBQUwsR0FBbUIsV0FBbkI7QUFDQTs7Ozs7Ozs7O0FBVUEsd0JBQUcsV0FBSCxFQUFnQjtBQUNaLDZCQUFLLGNBQUwsQ0FBb0IsV0FBcEIsRUFBaUMsV0FBakM7QUFDSDs7QUFFRCx3QkFBSSxDQUFDLEtBQUssZ0JBQUwsQ0FBc0IsR0FBdEIsQ0FBMEIsV0FBMUIsQ0FBRCxJQUEyQyxLQUFLLGtCQUFMLENBQXdCLFdBQXhCLEVBQXFDLEdBQXJDLENBQXlDLFdBQXpDLENBQS9DLEVBQXNHO0FBQ2xHLDZCQUFLLGdCQUFMLENBQXNCLEdBQXRCLENBQTBCLFdBQTFCLEVBQXVDLElBQUksR0FBSixDQUFRLENBQUMsS0FBRCxDQUFSLENBQXZDO0FBQ0g7O0FBR0Q7QUFDQSx3QkFBSSxZQUFZLEtBQUssU0FBTCxDQUFlLGdCQUFmLENBQWdDLFdBQWhDLENBQWhCO0FBQ0Esd0JBQUcsU0FBSCxFQUFjO0FBQ1Ysa0NBQVUsUUFBVixDQUFtQixLQUFuQjtBQUNIO0FBQ0o7QUExREU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUEyREgsaUJBQUssV0FBTCxHQUFtQixTQUFuQjtBQUNIOztBQUVEOzs7Ozs7Ozt1Q0FLZSxXLEVBQWEsc0IsRUFBd0I7QUFDaEQsZ0JBQUcsQ0FBQyxLQUFLLFlBQUwsQ0FBa0IsR0FBbEIsQ0FBc0IsV0FBdEIsQ0FBSixFQUF3QztBQUNwQyxxQkFBSyxZQUFMLENBQWtCLEdBQWxCLENBQXNCLFdBQXRCLEVBQW1DLElBQUksR0FBSixFQUFuQztBQUNIOztBQUVELGlCQUFLLFlBQUwsQ0FBa0IsR0FBbEIsQ0FBc0IsV0FBdEIsRUFBbUMsR0FBbkMsQ0FBdUMsc0JBQXZDO0FBQ0g7O0FBRUQ7Ozs7Ozs7OzJDQUttQixXLEVBQWE7QUFDNUIsZ0JBQUcsQ0FBQyxLQUFLLFlBQUwsQ0FBa0IsR0FBbEIsQ0FBc0IsV0FBdEIsQ0FBSixFQUF3QztBQUNwQyxxQkFBSyxZQUFMLENBQWtCLEdBQWxCLENBQXNCLFdBQXRCLEVBQW1DLElBQUksR0FBSixFQUFuQztBQUNIOztBQUVELGdCQUFJLE1BQU0sSUFBSSxHQUFKLEVBQVY7O0FBRUEsaUJBQUssWUFBTCxDQUFrQixHQUFsQixDQUFzQixXQUF0QixFQUFtQyxPQUFuQyxDQUEyQyxJQUFJLEdBQS9DLEVBQW9ELEdBQXBEOztBQUVBLGdCQUFJLFdBQVcsQ0FBZjtBQUNBLGdCQUFJLE9BQU8sSUFBSSxJQUFmO0FBQ0EsbUJBQU0sV0FBVyxJQUFqQixFQUF1QjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNuQiwwQ0FBc0IsR0FBdEIsbUlBQTJCO0FBQUEsNEJBQWxCLFNBQWtCOztBQUN2Qiw0QkFBSSxLQUFLLFlBQUwsQ0FBa0IsR0FBbEIsQ0FBc0IsU0FBdEIsQ0FBSixFQUFzQztBQUNsQyxpQ0FBSyxZQUFMLENBQWtCLEdBQWxCLENBQXNCLFNBQXRCLEVBQWlDLE9BQWpDLENBQXlDLElBQUksR0FBN0MsRUFBa0QsR0FBbEQ7QUFDSDtBQUNKO0FBTGtCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTW5CLDJCQUFXLElBQVg7QUFDQSx1QkFBTyxJQUFJLElBQVg7QUFDSDs7QUFFRCxtQkFBTyxHQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7O3FDQUthLFcsRUFBYSxLLEVBQU87QUFDN0IsZ0JBQUksU0FBUyxLQUFLLElBQUwsR0FBWSxDQUF6Qjs7QUFFQSxnQkFBRyxDQUFDLEtBQUssS0FBTCxDQUFXLEdBQVgsQ0FBZSxNQUFmLENBQUosRUFBNEI7QUFDeEIscUJBQUssS0FBTCxDQUFXLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLEVBQXZCO0FBQ0g7O0FBRUQsaUJBQUssS0FBTCxDQUFXLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLElBQXZCLENBQTRCLElBQUksV0FBSixDQUFnQixXQUFoQixFQUE2QixLQUE3QixFQUFvQyxLQUFLLFdBQXpDLENBQTVCO0FBQ0g7Ozs7OztrQkE1S2dCLFU7Ozs7Ozs7Ozs7Ozs7OzhDQ2pCWixPOzs7Ozs7Ozs7bURBR0EsTzs7Ozs7Ozs7O29EQUNBLE87Ozs7Ozs7Ozs2Q0FHQSxPOzs7Ozs7Ozs7OENBQ0EsTzs7Ozs7Ozs7O3lDQUNBLE87Ozs7Ozs7Ozs2Q0FDQSxPOzs7Ozs7Ozs7K0NBR0EsTzs7Ozs7Ozs7O3lDQUdBLE87Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkJUOztBQUNBOzs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUE7Ozs7SUFJcUIsUTs7O0FBQ2pCOzs7Ozs7OztBQVFBLHNCQUFZLFNBQVosRUFBdUIsZUFBdkIsRUFBd0MsZ0JBQXhDLEVBQTBELFlBQTFELEVBQW1GO0FBQUEsWUFBWCxJQUFXLHVFQUFKLEVBQUk7O0FBQUE7O0FBQy9FLFlBQU0sUUFBUSxFQUFkO0FBQ0EsWUFBTSxTQUFTLEtBQUssR0FBTCxDQUFTLGVBQVQsRUFBMEIsZ0JBQTFCLElBQThDLENBQTdEOztBQUYrRSx3SEFJekUsU0FKeUUsRUFJOUQsSUFKOEQsRUFJeEQsVUFKd0QsRUFJNUMsS0FKNEMsRUFJckMsTUFKcUM7O0FBTS9FLFlBQU0scUJBQXFCLE1BQU0sTUFBSyxRQUF0Qzs7QUFFQTtBQUNBLGNBQUssTUFBTCxHQUFjLHVCQUFkOztBQUVBO0FBQ0EsWUFBSSxTQUFTLDBCQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsTUFBSyxLQUF6QixFQUFnQyxNQUFLLE1BQXJDLEVBQTZDLE1BQTdDLEVBQXFELE1BQXJELENBQWI7QUFDQSxlQUFPLEdBQVAsQ0FBVyxRQUFYLENBQW9CLE1BQXBCOztBQUVBLGNBQUssTUFBTCxDQUFZLFFBQVosQ0FBcUIsTUFBckI7O0FBRUE7QUFDQSxZQUFNLFlBQVksTUFBSyxLQUFMLEdBQWEsSUFBSSxrQkFBbkM7O0FBRUEsWUFBSSxZQUFZLDBCQUFjLGtCQUFkLEVBQWtDLENBQWxDLEVBQXFDLFNBQXJDLEVBQWdELE1BQUssTUFBckQsRUFBNkQsT0FBN0QsRUFBc0UsT0FBdEUsQ0FBaEI7QUFDQSxrQkFBVSxPQUFWLENBQWtCLEVBQUMsZ0JBQWdCLEtBQWpCLEVBQWxCO0FBQ0Esa0JBQVUsR0FBVixDQUFjLFFBQWQsQ0FBdUIsTUFBdkI7O0FBRUEsY0FBSyxNQUFMLENBQVksUUFBWixDQUFxQixTQUFyQjs7QUFFQTtBQUNBLFlBQU0sWUFBWSxZQUFZLE1BQUssUUFBbkM7QUFDQSxZQUFNLGFBQWEsTUFBSyxNQUFMLEdBQWMsTUFBSyxRQUF0QztBQUNBLFlBQUksT0FBTyw4QkFDUCxDQUFDLE1BQUssS0FBTCxHQUFhLFNBQWQsSUFBMkIsQ0FEcEIsRUFDdUI7QUFDOUIsU0FBQyxNQUFLLE1BQUwsR0FBYyxVQUFmLElBQTZCLENBRnRCLEVBRXlCO0FBQ2hDLGlCQUhPLEVBSVAsVUFKTyxFQUtQLEtBQUssV0FBTCxFQUxPLEVBTVAsTUFBSyxRQUFMLEdBQWdCLEdBTlQsQ0FBWDtBQVFBLGNBQUssTUFBTCxDQUFZLFFBQVosQ0FBcUIsSUFBckI7O0FBRUE7QUFDQSxhQUFLLElBQUksSUFBSSxDQUFiLEVBQWlCLElBQUksZUFBckIsRUFBdUMsRUFBRSxDQUF6QyxFQUE0QztBQUN4QyxnQkFBTSxlQUFnQixJQUFJLENBQUwsR0FBVSxDQUEvQjtBQUNBLGdCQUFNLGdCQUFnQixlQUFlLE1BQUssUUFBMUM7O0FBRUEsZ0JBQUksTUFBTSx5QkFDTiwrQkFBbUIsQ0FDZiw4QkFBa0IsQ0FBbEIsRUFBcUIsYUFBckIsQ0FEZSxFQUVmLDhCQUFrQixrQkFBbEIsRUFBc0MsYUFBdEMsQ0FGZSxDQUFuQixDQURNLEVBS04sQ0FMTSxFQU1OLE9BTk0sQ0FBVjs7QUFTQSxrQkFBSyxNQUFMLENBQVksUUFBWixDQUFxQixHQUFyQjs7QUFFQTtBQUNBLGtCQUFLLGlCQUFMLENBQXVCLENBQXZCLEVBQTBCLFlBQTFCO0FBQ0g7O0FBRUQ7QUFDQSxhQUFLLElBQUksS0FBSSxDQUFiLEVBQWlCLEtBQUksZ0JBQXJCLEVBQXdDLEVBQUUsRUFBMUMsRUFBNkM7QUFDekMsZ0JBQU0sZ0JBQWdCLEtBQUksQ0FBTCxHQUFVLENBQS9CO0FBQ0EsZ0JBQU0saUJBQWdCLGdCQUFlLE1BQUssUUFBMUM7O0FBRUEsZ0JBQUksT0FBTSx5QkFDTiwrQkFBbUIsQ0FDZiw4QkFBa0IsTUFBSyxLQUFMLEdBQWEsa0JBQS9CLEVBQW1ELGNBQW5ELENBRGUsRUFFZiw4QkFBa0IsTUFBSyxLQUF2QixFQUE4QixjQUE5QixDQUZlLENBQW5CLENBRE0sRUFLTixDQUxNLEVBTU4sT0FOTSxDQUFWOztBQVNBLGtCQUFLLE1BQUwsQ0FBWSxRQUFaLENBQXFCLElBQXJCOztBQUVBLGtCQUFLLGtCQUFMLENBQXdCLEtBQXhCLEVBQStCLGFBQS9CO0FBQ0g7O0FBRUQsY0FBSyxNQUFMLENBQVksR0FBWixDQUFnQixRQUFoQixDQUF5QixLQUF6Qjs7QUFFQTs7OztBQUlBLGNBQUssWUFBTCxHQUFvQixZQUFwQjs7QUFFQTtBQUNBLGNBQUssa0JBQUw7QUF2RitFO0FBd0ZsRjs7QUFFRDs7Ozs7Ozs7OztBQXNEQTs7Ozt1Q0FJZTtBQUNYLGdCQUFNLGNBQWMsS0FBSyxlQUFMLENBQXFCLEdBQXJCLENBQXlCO0FBQUEsdUJBQVEsS0FBSyxLQUFiO0FBQUEsYUFBekIsQ0FBcEI7QUFDQTtBQUNBLGdCQUFNLGVBQWUsS0FBSyxZQUFMLGdDQUFxQixXQUFyQixFQUFyQjs7QUFFQTtBQUNBLGlCQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksYUFBYSxNQUFqQyxFQUEwQyxFQUFFLENBQTVDLEVBQStDO0FBQzNDLHFCQUFLLGdCQUFMLENBQXNCLENBQXRCLEVBQXlCLFFBQXpCLENBQWtDLGFBQWEsQ0FBYixDQUFsQztBQUNIO0FBQ0o7Ozs2Q0FFb0I7QUFBQTs7QUFDakI7O0FBRUEsZ0JBQUksZUFBZSxFQUFuQjtBQUNBLGlCQUFLLElBQUksSUFBSSxDQUFiLEVBQWlCLElBQUksS0FBSyxlQUFMLENBQXFCLE1BQXJCLEdBQThCLENBQW5ELEVBQXVELEVBQUUsQ0FBekQsRUFBNEQ7QUFDeEQsNkJBQWEsSUFBYixDQUFrQjtBQUNkLHVCQUFHLENBRFc7QUFFZCx1QkFBRztBQUZXLGlCQUFsQjtBQUlIO0FBQ0QsaUJBQUssSUFBSSxNQUFJLENBQWIsRUFBaUIsTUFBSSxLQUFLLGdCQUFMLENBQXNCLE1BQXRCLEdBQStCLENBQXBELEVBQXdELEVBQUUsR0FBMUQsRUFBNkQ7QUFDekQsNkJBQWEsSUFBYixDQUFrQjtBQUNkLHVCQUFHLEtBQUssU0FETTtBQUVkLHVCQUFHO0FBRlcsaUJBQWxCO0FBSUg7O0FBRUQsMkpBQXlCLENBQXpCLEVBQTRCLENBQTVCLEVBQStCLENBQS9CLEVBQWtDLENBQWxDLFNBQXdDLFlBQXhDO0FBQ0g7Ozs0QkFuRmdCO0FBQ2IsZ0JBQUksMEdBQUo7QUFDQSxpQkFBSyxNQUFMLEdBQWMsS0FBSyxlQUFMLENBQXFCLE1BQW5DO0FBQ0EsaUJBQUssT0FBTCxHQUFlLEtBQUssZ0JBQUwsQ0FBc0IsTUFBckM7O0FBRUE7O0FBRUEsaUJBQUssS0FBTCxHQUFhLEVBQWI7O0FBRUE7QUFDQSxnQkFBTSxZQUFZLGdCQUFNLFNBQXhCOztBQUVBO0FBQ0EsZ0JBQU0sa0JBQWtCLFNBQWxCLGVBQWtCLENBQUMsTUFBRCxFQUFZO0FBQ2hDLG9CQUFJLGVBQWUsRUFBbkI7QUFDQSx3QkFBUSxNQUFSO0FBQ0kseUJBQUssQ0FBTDtBQUNJLCtCQUFPLEVBQVA7QUFDSix5QkFBSyxDQUFMO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ0ksaURBQW9CLFNBQXBCLDhIQUErQjtBQUFBLG9DQUFwQixLQUFvQjs7QUFDM0IsNkNBQWEsSUFBYixDQUFrQixDQUFDLEtBQUQsQ0FBbEI7QUFDSDtBQUhMO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBSUksK0JBQU8sWUFBUDtBQUNKO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ0ksa0RBQW9CLFNBQXBCLG1JQUErQjtBQUFBLG9DQUFwQixNQUFvQjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUMzQiwwREFBa0IsZ0JBQWdCLFNBQVMsQ0FBekIsQ0FBbEIsbUlBQStDO0FBQUEsNENBQXJDLElBQXFDOztBQUMzQyxxREFBYSxJQUFiLEVBQW1CLE1BQW5CLDRCQUE2QixJQUE3QjtBQUNIO0FBSDBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJOUI7QUFMTDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1JLCtCQUFPLFlBQVA7QUFkUjtBQWdCSCxhQWxCRDs7QUFvQkE7QUFqQ2E7QUFBQTtBQUFBOztBQUFBO0FBa0NiLHNDQUEwQixnQkFBZ0IsS0FBSyxNQUFyQixDQUExQixtSUFBd0Q7QUFBQSx3QkFBN0MsV0FBNkM7O0FBQ3BELHdCQUFNLGVBQWUsS0FBSyxZQUFMLGdDQUFxQixXQUFyQixFQUFyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBSSxhQUFhLE1BQWIsQ0FBb0IsVUFBQyxXQUFELEVBQWMsT0FBZCxFQUEwQjtBQUM5QywrQkFBTyxlQUFlLFlBQVksZ0JBQU0sS0FBTixDQUFZLE9BQTlDO0FBQ0gscUJBRkcsQ0FBSixFQUVJO0FBQ0EsNkJBQUssS0FBTCxDQUFXLElBQVgsOEJBQW9CLFdBQXBCLHNCQUFvQyxZQUFwQztBQUNIO0FBQ0o7QUE3Q1k7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUErQ2IsbUJBQU8sSUFBUDtBQUNIOzs7Ozs7a0JBdkpnQixROzs7Ozs7Ozs7OztBQ1hyQjs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUE7Ozs7O0lBS3FCLEc7OztBQUNqQjs7Ozs7OztBQU9BLGlCQUFZLFNBQVosRUFBdUIsSUFBdkIsRUFBNkIsUUFBN0IsRUFBdUMsU0FBdkMsRUFBa0QsVUFBbEQsRUFBOEQ7QUFBQTs7QUFHMUQ7Ozs7QUFIMEQsOEdBQ3BELFNBRG9EOztBQU8xRCxjQUFLLElBQUwsR0FBWSxJQUFaOztBQUVBOzs7O0FBSUEsY0FBSyxRQUFMLEdBQWdCLFFBQWhCOztBQUVBOzs7O0FBSUEsY0FBSyxRQUFMLEdBQWdCLE1BQUssU0FBTCxDQUFlLFFBQS9COztBQUVBOzs7O0FBSUEsY0FBSyxVQUFMLEdBQWtCLEVBQWxCOztBQUVBOzs7O0FBSUEsY0FBSyxNQUFMLEdBQWMsdUJBQWQ7O0FBRUE7Ozs7QUFJQSxjQUFLLEtBQUwsR0FBYSxZQUFZLE1BQUssUUFBOUI7QUFDQTs7OztBQUlBLGNBQUssTUFBTCxHQUFjLGFBQWEsTUFBSyxRQUFoQzs7QUFFQTs7OztBQUlBLGNBQUssU0FBTCxHQUFpQixTQUFqQjtBQUNBOzs7O0FBSUEsY0FBSyxVQUFMLEdBQWtCLFVBQWxCOztBQUVBO0FBQ0EsWUFBSSxZQUFZLDBCQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsTUFBSyxLQUF6QixFQUFnQyxNQUFLLE1BQXJDLEVBQTZDLE1BQTdDLEVBQXFELE1BQXJELENBQWhCO0FBQ0Esa0JBQVUsR0FBVixDQUFjLFFBQWQsQ0FBdUIsTUFBdkI7O0FBRUEsY0FBSyxNQUFMLENBQVksUUFBWixDQUFxQixTQUFyQjs7QUFFQTtBQUNBLGNBQUssS0FBTCxHQUFhLHlCQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsTUFBSyxLQUF4QixFQUErQixNQUFLLE1BQXBDLEVBQTRDLE1BQUssR0FBakQsQ0FBYjtBQUNBLGNBQUssTUFBTCxDQUFZLFFBQVosQ0FBcUIsTUFBSyxLQUExQjs7QUFFQTtBQUNBLGNBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsRUFBQyxRQUFRLFFBQVQsRUFBcEI7O0FBRUEsY0FBSyxNQUFMLENBQVksR0FBWixDQUFnQixRQUFoQixDQUF5QixLQUF6QjtBQUNBLGNBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsUUFBaEIsQ0FBeUIsUUFBekI7QUFyRTBEO0FBc0U3RDs7QUFFRDs7Ozs7Ozs7OztBQXVFQTs7Ozs7Ozs7OzZDQVNzRztBQUFBLGdCQUFuRixTQUFtRix1RUFBdkUsQ0FBdUU7QUFBQSxnQkFBcEUsV0FBb0UsdUVBQXRELENBQXNEO0FBQUEsZ0JBQW5ELFlBQW1ELHVFQUFwQyxDQUFvQztBQUFBLGdCQUFqQyxVQUFpQyx1RUFBcEIsQ0FBb0I7O0FBQ2xHLGlCQUFLLFlBQUwsR0FBb0IsSUFBSSxHQUFKLEVBQXBCO0FBQ0EsaUJBQUksSUFBSSxJQUFJLFVBQVosRUFBeUIsS0FBSyxLQUFLLFNBQUwsR0FBaUIsV0FBL0MsRUFBNkQsR0FBN0QsRUFBa0U7QUFDOUQscUJBQUksSUFBSSxJQUFJLFNBQVosRUFBd0IsS0FBSyxLQUFLLFVBQUwsR0FBa0IsWUFBL0MsRUFBOEQsR0FBOUQsRUFBbUU7QUFDL0QseUJBQUssWUFBTCxDQUFrQixHQUFsQixDQUFzQjtBQUNsQiwyQkFBRyxDQURlO0FBRWxCLDJCQUFHO0FBRmUscUJBQXRCO0FBSUg7QUFDSjs7QUFUaUcsOENBQWQsWUFBYztBQUFkLDRCQUFjO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBV2xHLHFDQUFpQixZQUFqQiw4SEFBK0I7QUFBQSx3QkFBdEIsSUFBc0I7O0FBQzNCLHlCQUFLLFlBQUwsQ0FBa0IsR0FBbEIsQ0FBc0IsSUFBdEI7QUFDSDtBQWJpRztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBY3JHOztBQUVEOzs7Ozs7O3VDQUllO0FBQ1gsb0JBQVEsSUFBUixDQUFhLDBEQUFiO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7b0NBT1ksTSxFQUFRO0FBQ2hCLGdCQUFHLFdBQVcsU0FBWCxJQUF3QixXQUFXLEVBQXRDLEVBQTBDO0FBQ3RDLHFCQUFLLFNBQUwsR0FBaUIsRUFBakI7QUFDSCxhQUZELE1BRU87QUFDSCxxQkFBSyxTQUFMLEdBQWlCLE1BQU0sTUFBdkI7QUFDSDs7QUFFRCxpQkFBSyxLQUFMLENBQVcsU0FBWCxDQUFxQixLQUFLLEdBQTFCO0FBQ0g7O0FBRUQ7Ozs7Ozs7OEJBSU07QUFDRixtQkFBTyxLQUFLLE1BQUwsQ0FBWSxHQUFaLEVBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7OzJDQU1tQixNLEVBQVEsSyxFQUFPO0FBQzlCLGdCQUFHLEtBQUssY0FBTCxLQUFzQixTQUF6QixFQUFvQztBQUNoQyxxQkFBSyxjQUFMLEdBQXNCLEtBQXRCO0FBQ0g7O0FBRUQsaUJBQUssY0FBTCxHQUFzQixDQUFDLEtBQUssY0FBNUI7O0FBRUEsZ0JBQUksa0JBQWtCLElBQUksR0FBSixFQUF0Qjs7QUFFQTs7QUFUOEI7QUFBQTtBQUFBOztBQUFBO0FBVzlCLHNDQUFtQixLQUFLLFlBQXhCLG1JQUFzQztBQUFBLHdCQUEzQixJQUEyQjs7QUFDbEMsd0JBQUksZ0JBQUo7O0FBRUEsd0JBQU0sZUFBaUIsS0FBSyxjQUFMLEdBQXNCLENBQXRCLEdBQTBCLENBQUMsQ0FBbEQ7O0FBRUEsd0JBQUcsS0FBSCxFQUFVO0FBQ04sa0NBQVU7QUFDTiwrQkFBRyxDQUFFLEtBQUssQ0FBUCxHQUFXLEtBQUssVUFBaEIsR0FBNkIsQ0FBQyxPQUFPLENBQVAsR0FBVyxPQUFPLENBQW5CLElBQXdCLFlBRGxEO0FBRU4sK0JBQUcsS0FBSyxDQUFMLEdBQVMsQ0FBQyxPQUFPLENBQVAsR0FBVyxPQUFPLENBQW5CLElBQXdCO0FBRjlCLHlCQUFWO0FBSUgscUJBTEQsTUFLTztBQUNILGtDQUFVO0FBQ04sK0JBQUcsS0FBSyxDQUFMLEdBQVMsQ0FBQyxPQUFPLENBQVAsR0FBVyxPQUFPLENBQW5CLElBQXdCO0FBRDlCLHlCQUFWOztBQUlBLDRCQUFHLEtBQUssY0FBUixFQUF3QjtBQUNwQixvQ0FBUSxDQUFSLEdBQVksQ0FBRSxLQUFLLENBQVAsR0FBVyxLQUFLLFNBQWhCLElBQThCLEtBQUssVUFBTCxHQUFrQixPQUFPLENBQTFCLElBQWdDLEtBQUssU0FBTCxHQUFpQixPQUFPLENBQXhELENBQTdCLENBQVo7QUFDSCx5QkFGRCxNQUVPO0FBQ0gsb0NBQVEsQ0FBUixHQUFZLENBQUUsS0FBSyxDQUFQLEdBQVcsS0FBSyxVQUFoQixJQUE4QixPQUFPLENBQVAsR0FBVyxPQUFPLENBQWhELENBQVo7QUFDSDtBQUNKOztBQUVELG9DQUFnQixHQUFoQixDQUFvQixPQUFwQjtBQUNIO0FBbEM2QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQW9DOUIsaUJBQUssWUFBTCxHQUFvQixlQUFwQjtBQUNIOztBQUVEOzs7Ozs7OztnREFLd0IsTSxFQUFRO0FBQzVCLGlCQUFLLGtCQUFMLENBQXdCLE1BQXhCLEVBQWdDLElBQWhDO0FBQ0g7O0FBRUQ7Ozs7Ozs7OytDQUt1QixNLEVBQVE7QUFDM0IsaUJBQUssa0JBQUwsQ0FBd0IsTUFBeEIsRUFBZ0MsS0FBaEM7QUFDSDs7OytCQUVNLFMsRUFBVztBQUNkO0FBQ0EsZ0JBQUksWUFBWSxLQUFLLFlBQUwsRUFBaEI7O0FBRUE7QUFDQSxnQkFBSSxPQUFPLEtBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsQ0FBaEIsRUFBbUIscUJBQW5CLEVBQVg7O0FBRUE7QUFDQSxnQkFBTSxTQUFTO0FBQ1gsbUJBQUcsS0FBSyxLQUFMLENBQVcsS0FBSyxLQUFMLEdBQWEsQ0FBeEIsQ0FEUTtBQUVYLG1CQUFHLEtBQUssS0FBTCxDQUFXLEtBQUssTUFBTCxHQUFjLENBQXpCO0FBRlEsYUFBZjs7QUFLQSxtQkFBTyxDQUFQLElBQVksT0FBTyxDQUFQLEdBQVcsS0FBSyxRQUE1QjtBQUNBLG1CQUFPLENBQVAsSUFBWSxPQUFPLENBQVAsR0FBVyxLQUFLLFFBQTVCOztBQUVBO0FBQ0EsZ0JBQUcsU0FBSCxFQUFjO0FBQ1YsMEJBQVUsV0FBVixDQUFzQixPQUFPLENBQTdCLEVBQWdDLE9BQU8sQ0FBdkM7QUFDSCxhQUZELE1BRU87QUFDSCwwQkFBVSxVQUFWLENBQXFCLE9BQU8sQ0FBNUIsRUFBK0IsT0FBTyxDQUF0QztBQUNIOztBQUdEO0FBQ0EsaUJBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsRUFBQyxhQUFhLFVBQVUsR0FBVixFQUFkLEVBQXBCOztBQUVBLGdCQUFNLGFBQWE7QUFDZixtQkFBRyxPQUFPLENBQVAsR0FBVyxLQUFLLFFBREo7QUFFZixtQkFBRyxPQUFPLENBQVAsR0FBVyxLQUFLO0FBRkosYUFBbkI7O0FBS0E7QUFDQSxnQkFBRyxTQUFILEVBQWM7QUFDVixxQkFBSyx1QkFBTCxDQUE2QixVQUE3QjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLLHNCQUFMLENBQTRCLFVBQTVCO0FBQ0g7O0FBRUQ7QUFDQSxpQkFBSyxXQUFMOztBQUVBO0FBQ0EsZ0JBQUcsS0FBSyxTQUFMLENBQWUsUUFBbEIsRUFBNEI7QUFDeEIscUJBQUssU0FBTCxDQUFlLFFBQWYsQ0FBd0IsWUFBeEI7QUFDSDtBQUNKOztBQUVEOzs7Ozs7Ozs7cUNBTWEsSSxFQUFNLEcsRUFBSyxnQixFQUFrQjtBQUN0QyxnQkFBSSxRQUFRLEtBQUssVUFBTCxDQUFnQixNQUE1QjtBQUNBLGdCQUFHLGdCQUFILEVBQXFCO0FBQ2pCLHFCQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsSUFBeUIsNkJBQW1CLEtBQUssU0FBeEIsRUFBbUMsSUFBbkMsRUFBeUMsR0FBekMsQ0FBekI7QUFDSCxhQUZELE1BRU87QUFDSCxxQkFBSyxVQUFMLENBQWdCLEtBQWhCLElBQXlCLDhCQUFvQixLQUFLLFNBQXpCLEVBQW9DLElBQXBDLEVBQTBDLEdBQTFDLENBQXpCO0FBQ0g7QUFDRCxpQkFBSyxNQUFMLENBQVksUUFBWixDQUFxQixLQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsRUFBdUIsR0FBdkIsRUFBckI7QUFDSDs7QUFFRDs7Ozs7Ozs7MENBS2tCLEksRUFBTSxHLEVBQUs7QUFDekIsbUJBQU8sS0FBSyxZQUFMLENBQWtCLElBQWxCLEVBQXdCLEdBQXhCLEVBQTZCLElBQTdCLENBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7MkNBS21CLEksRUFBTSxHLEVBQUs7QUFDMUIsbUJBQU8sS0FBSyxZQUFMLENBQWtCLElBQWxCLEVBQXdCLEdBQXhCLEVBQTZCLEtBQTdCLENBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7eUNBS2lCLFcsRUFBYTtBQUMxQixpQkFBSSxJQUFJLElBQUksQ0FBWixFQUFnQixJQUFJLEtBQUssVUFBTCxDQUFnQixNQUFwQyxFQUE2QyxHQUE3QyxFQUFrRDtBQUM5QyxvQkFBRyxLQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUIsRUFBbkIsS0FBd0IsV0FBM0IsRUFBd0M7QUFDcEMsMkJBQU8sS0FBSyxVQUFMLENBQWdCLENBQWhCLENBQVA7QUFDSDtBQUNKO0FBQ0Q7QUFDQSxtQkFBTyxTQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7O3VDQUtpQztBQUFBLGdCQUFwQixVQUFvQix1RUFBUCxLQUFPOztBQUM3QixnQkFBSSxrQkFBSjtBQUNBLGdCQUFJLENBQUMsS0FBSyxNQUFMLENBQVksR0FBWixDQUFnQixJQUFoQixDQUFxQixXQUFyQixDQUFMLEVBQXdDO0FBQ3BDO0FBQ0EsNEJBQVkseUJBQVo7QUFDQSwwQkFBVSxZQUFWLENBQXVCLENBQXZCLEVBQTBCLENBQTFCO0FBQ0EscUJBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsRUFBQyxhQUFhLFVBQVUsR0FBVixFQUFkLEVBQXBCO0FBQ0gsYUFMRCxNQUtPO0FBQ0g7QUFDQSw0QkFBWSx3QkFBYyxLQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCLElBQWhCLENBQXFCLFdBQXJCLENBQWQsQ0FBWjtBQUNIOztBQUVEO0FBQ0EsZ0JBQUcsVUFBSCxFQUFlO0FBQ1gsMEJBQVUsWUFBVixDQUF1QixLQUFLLFNBQTVCO0FBQ0g7O0FBRUQsbUJBQU8sU0FBUDtBQUNIOztBQUVEOzs7Ozs7O2dEQUl3QjtBQUNwQixtQkFBTyxLQUFLLFlBQUwsQ0FBa0IsSUFBbEIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7O3FDQUlhLFMsRUFBVztBQUNwQixpQkFBSyxNQUFMLENBQVksT0FBWixDQUFvQixFQUFDLGFBQWEsVUFBVSxHQUFWLEVBQWQsRUFBcEI7QUFDSDs7QUFFRDs7Ozs7Ozs7O29DQU1ZLEssRUFBTztBQUNmLGlCQUFLLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxnQkFBRyxNQUFNLEtBQU4sS0FBZ0IsQ0FBbkIsRUFBc0I7QUFDbEIscUJBQUssU0FBTCxHQUFpQixJQUFqQjtBQUNBLHFCQUFLLGVBQUwsQ0FBcUIsS0FBckI7O0FBRUE7QUFDQSxxQkFBSyxTQUFMLENBQWUsZUFBZixDQUErQixLQUFLLE1BQUwsQ0FBWSxFQUEzQztBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7Ozt3Q0FNZ0IsSyxFQUFPO0FBQ25CLGlCQUFLLFVBQUwsR0FBa0IsS0FBbEI7O0FBRUEsZ0JBQUksWUFBWSxLQUFLLFlBQUwsRUFBaEI7O0FBRUE7QUFDQSxnQkFBSSxrQkFBa0IsVUFBVSxZQUFWLEVBQXRCOztBQU5tQix3Q0FRRSxLQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLGNBQXZCLENBQXNDLEtBQXRDLENBUkY7QUFBQSxnQkFRZCxLQVJjLHlCQVFkLEtBUmM7QUFBQSxnQkFRUCxLQVJPLHlCQVFQLEtBUk87O0FBVW5COzs7QUFDQSxpQkFBSyxNQUFMLEdBQWM7QUFDVixtQkFBRyxRQUFRLGdCQUFnQixDQURqQjtBQUVWLG1CQUFHLFFBQVEsZ0JBQWdCO0FBRmpCLGFBQWQ7QUFJSDs7QUFFRDs7Ozs7Ozs7b0NBS1ksSyxFQUFPO0FBQ2YsZ0JBQUcsS0FBSyxTQUFSLEVBQW1CO0FBQ2YscUJBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsUUFBaEIsQ0FBeUIsU0FBekI7O0FBRUEscUJBQUssVUFBTCxHQUFrQixJQUFsQjs7QUFIZSw2Q0FLTSxLQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLGNBQXZCLENBQXNDLEtBQXRDLENBTE47QUFBQSxvQkFLVixLQUxVLDBCQUtWLEtBTFU7QUFBQSxvQkFLSCxLQUxHLDBCQUtILEtBTEc7O0FBT2Ysb0JBQU0sT0FBTyxRQUFRLEtBQUssTUFBTCxDQUFZLENBQWpDO0FBQ0Esb0JBQU0sTUFBTSxRQUFRLEtBQUssTUFBTCxDQUFZLENBQWhDOztBQUVBLG9CQUFJLFlBQVksS0FBSyxZQUFMLEVBQWhCO0FBQ0EsMEJBQVUsWUFBVixDQUF1QixJQUF2QixFQUE2QixHQUE3Qjs7QUFFQSxxQkFBSyxZQUFMLENBQWtCLFNBQWxCOztBQUVBLHFCQUFLLFdBQUwsQ0FBaUIsSUFBakI7QUFDSDtBQUNKOztBQUVEOzs7Ozs7OztrQ0FLVSxLLEVBQU87QUFDYixnQkFBRyxNQUFNLEtBQU4sS0FBZ0IsQ0FBbkIsRUFBc0I7QUFDbEIsb0JBQUcsS0FBSyxVQUFSLEVBQW9CO0FBQ2hCLHlCQUFLLE1BQUwsQ0FBWSxLQUFaO0FBQ0gsaUJBRkQsTUFFTztBQUNILHlCQUFLLE9BQUw7QUFDSDtBQUNKLGFBTkQsTUFNTyxJQUFJLE1BQU0sS0FBTixLQUFnQixDQUFwQixFQUF3QjtBQUMzQixxQkFBSyxhQUFMLENBQW1CLEtBQW5CO0FBQ0g7O0FBRUQsaUJBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsV0FBaEIsQ0FBNEIsU0FBNUI7QUFDSDs7QUFFRDs7Ozs7Ozs7OytCQU1PLEssRUFBTztBQUFBLHlDQUNXLEtBQUssU0FBTCxDQUFlLE9BQWYsQ0FBdUIsY0FBdkIsQ0FBc0MsS0FBdEMsQ0FEWDtBQUFBLGdCQUNMLEtBREssMEJBQ0wsS0FESztBQUFBLGdCQUNFLEtBREYsMEJBQ0UsS0FERjs7QUFHVixnQkFBSSxPQUFPLFFBQVEsS0FBSyxNQUFMLENBQVksQ0FBL0I7QUFDQSxnQkFBSSxNQUFNLFFBQVEsS0FBSyxNQUFMLENBQVksQ0FBOUI7O0FBRUEsbUJBQU8sS0FBSyxTQUFMLENBQWUsVUFBZixDQUEwQixJQUExQixDQUFQO0FBQ0Esa0JBQU0sS0FBSyxTQUFMLENBQWUsVUFBZixDQUEwQixHQUExQixDQUFOOztBQUVBLGdCQUFJLFlBQVksS0FBSyxZQUFMLEVBQWhCO0FBQ0Esc0JBQVUsWUFBVixDQUF1QixJQUF2QixFQUE2QixHQUE3Qjs7QUFFQSxpQkFBSyxZQUFMLENBQWtCLFNBQWxCOztBQUVBLGlCQUFLLFdBQUw7O0FBRUE7QUFDQSxnQkFBRyxLQUFLLFNBQUwsQ0FBZSxRQUFsQixFQUE0QjtBQUN4QixxQkFBSyxTQUFMLENBQWUsUUFBZixDQUF3QixVQUF4QjtBQUNIO0FBQ0o7O0FBRUQ7Ozs7OztrQ0FHVSxDQUFFOztBQUVaOzs7Ozs7c0NBR2MsSyxFQUFPO0FBQ2pCLGdCQUFHLE1BQU0sT0FBVCxFQUFrQjtBQUNkLHFCQUFLLE1BQUwsQ0FBWSxLQUFaO0FBQ0gsYUFGRCxNQUVPO0FBQ0gscUJBQUssTUFBTCxDQUFZLElBQVo7QUFDSDtBQUNKOztBQUVEOzs7Ozs7OztzQ0FLK0I7QUFBQTs7QUFBQSxnQkFBbkIsU0FBbUIsdUVBQVAsS0FBTzs7QUFDM0IsaUJBQUssVUFBTCxDQUFnQixPQUFoQixDQUF3QixnQkFBUTtBQUM1QixxQkFBSyxPQUFMLENBQWEsT0FBYixDQUFxQixrQkFBVTtBQUMzQix3QkFBSSxPQUFPLE9BQUssU0FBTCxDQUFlLFdBQWYsQ0FBMkIsTUFBM0IsQ0FBWDtBQUNBLHdCQUFHLFNBQUgsRUFBYztBQUNWLDZCQUFLLGFBQUw7QUFDSCxxQkFGRCxNQUVPO0FBQ0gsNkJBQUssU0FBTDtBQUNIO0FBQ0osaUJBUEQ7QUFRSCxhQVREO0FBVUg7Ozs0QkF0ZFM7QUFDTixnQkFDSSxXQUFXLEtBQUssUUFBTCxJQUFpQixFQURoQztBQUFBLGdCQUVJLE9BQU8sS0FBSyxJQUFMLElBQWEsRUFGeEI7QUFBQSxnQkFHSSxTQUFTLEtBQUssU0FBTCxJQUFrQixFQUgvQjs7QUFLQSxnQ0FBa0IsUUFBbEIsU0FBOEIsSUFBOUIsR0FBcUMsTUFBckM7QUFDSDs7QUFFRDs7Ozs7Ozs0QkFJc0I7QUFDbEIsbUJBQU8sS0FBSyxVQUFMLENBQWdCLE1BQWhCLENBQXVCO0FBQUEsdUJBQVEsS0FBSyxnQkFBYjtBQUFBLGFBQXZCLENBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs0QkFJdUI7QUFDbkIsbUJBQU8sS0FBSyxVQUFMLENBQWdCLE1BQWhCLENBQXVCO0FBQUEsdUJBQVEsS0FBSyxpQkFBYjtBQUFBLGFBQXZCLENBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs0QkFJaUI7QUFDYixnQkFBSSxjQUFjLEVBQWxCOztBQUVBO0FBQ0EsZ0JBQUksVUFBVSxDQUFkO0FBSmE7QUFBQTtBQUFBOztBQUFBO0FBS2Isc0NBQW1CLEtBQUssVUFBeEIsbUlBQW9DO0FBQUEsd0JBQXpCLElBQXlCOztBQUNoQztBQURnQztBQUFBO0FBQUE7O0FBQUE7QUFFaEMsOENBQW1CLEtBQUssT0FBeEIsbUlBQWlDO0FBQUEsZ0NBQXRCLElBQXNCOztBQUM3QixnQ0FBSSxtQkFBSjtBQUNBLGdDQUFHLENBQUMsS0FBSyxTQUFMLENBQWUsZUFBZixDQUErQixHQUEvQixDQUFtQyxJQUFuQyxDQUFKLEVBQThDO0FBQzFDO0FBQ0EscUNBQUssU0FBTCxDQUFlLGVBQWYsQ0FBK0IsR0FBL0IsQ0FBbUMsSUFBbkMsRUFBeUMsS0FBSyxTQUFMLENBQWUsWUFBeEQ7QUFDQSw2Q0FBYSxLQUFLLFNBQUwsQ0FBZSxZQUE1QjtBQUNBLHFDQUFLLFNBQUwsQ0FBZSxZQUFmO0FBQ0gsNkJBTEQsTUFLTztBQUNIO0FBQ0EsNkNBQWEsS0FBSyxTQUFMLENBQWUsZUFBZixDQUErQixHQUEvQixDQUFtQyxJQUFuQyxDQUFiO0FBQ0g7O0FBR0Q7QUFDQSx3Q0FBWSxZQUFZLE1BQXhCLElBQWtDO0FBQzlCLHVDQUFPLE9BRHVCO0FBRTlCLHNDQUFNLEtBQUssSUFGbUI7QUFHOUIsd0NBQVE7QUFIc0IsNkJBQWxDO0FBS0g7QUFyQitCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBc0JoQztBQUNIO0FBNUJZO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBOEJiLG1CQUFPO0FBQ0gsc0JBQU0sS0FBSyxJQURSO0FBRUgsMEJBQVUsS0FBSyxRQUZaO0FBR0gsMkJBQVcsS0FBSyxZQUFMLENBQWtCLElBQWxCLENBSFI7QUFJSCw2QkFBYTtBQUpWLGFBQVA7QUFNSDs7Ozs7O2tCQXJKZ0IsRzs7Ozs7Ozs7Ozs7QUNkckI7Ozs7QUFDQTs7QUFDQTs7OztBQUVBOzs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBOzs7O0lBSXFCLFM7OztBQUNqQjs7Ozs7O0FBTUEscUJBQVksU0FBWixFQUF1QixJQUF2QixFQUE2QixHQUE3QixFQUFrQztBQUFBOztBQUc5Qjs7OztBQUg4QixzSEFDeEIsU0FEd0I7O0FBTzlCLFVBQUssUUFBTCxHQUFnQixVQUFVLFFBQTFCO0FBQ0E7Ozs7QUFJQSxVQUFLLGFBQUwsR0FBcUIsVUFBVSxRQUEvQjtBQUNBOzs7O0FBSUEsVUFBSyxlQUFMLEdBQXVCLE1BQUssYUFBTCxHQUFxQixDQUE1Qzs7QUFFQTs7OztBQUlBLFVBQUssTUFBTCxHQUFjLDBCQUNWLE9BQU8sTUFBSyxRQUFaLEdBQXVCLE1BQUssZUFEbEIsRUFFVixNQUFNLE1BQUssUUFBWCxHQUFzQixNQUFLLGVBRmpCLEVBR1YsTUFBSyxhQUhLLEVBSVYsTUFBSyxhQUpLLEVBS1YsTUFMVSxFQU1WLE9BTlUsQ0FBZDs7QUFTQSxVQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCLFFBQWhCLENBQXlCLFdBQXpCOztBQUVBOzs7O0FBSUEsVUFBSyxnQkFBTCxHQUF3QixLQUF4Qjs7QUFFQTs7OztBQUlBLFVBQUssWUFBTCxHQUFvQixnQkFBTSxLQUFOLENBQVksT0FBaEM7QUFDQSxVQUFLLE1BQUwsQ0FBWSxRQUFaLENBQXFCLHVCQUFhLGdCQUFNLEtBQU4sQ0FBWSxPQUF6QixDQUFyQjs7QUFFQTs7OztBQUlBLFVBQUssT0FBTCxHQUFlLElBQUksR0FBSixFQUFmO0FBbkQ4QjtBQW9EakM7O0FBRUQ7Ozs7Ozs7Ozs7QUFnQkE7Ozs7OEJBSVUsTSxFQUFRO0FBQ2QsV0FBSyxPQUFMLENBQWEsR0FBYixDQUFpQixNQUFqQjtBQUNIOztBQUVEOzs7Ozs7O2lDQUlhLE0sRUFBUTtBQUNqQixXQUFLLE9BQUwsQ0FBYSxNQUFiLENBQW9CLE1BQXBCO0FBQ0g7O0FBRUQ7Ozs7Ozs7MENBSXNCLE0sRUFBUTtBQUMxQixXQUFLLFlBQUwsQ0FBa0IsTUFBbEI7QUFDSDs7QUFFRDs7Ozs7Ozs2QkFJUyxLLEVBQU87QUFBQTs7QUFDWixzQkFBSyxNQUFMLEVBQVksYUFBWjtBQUNBLFdBQUssTUFBTCxDQUFZLFFBQVosQ0FBcUIsdUJBQWEsS0FBYixDQUFyQjs7QUFFQSxXQUFLLFlBQUwsR0FBb0IsS0FBcEI7QUFDSDs7QUFFRDs7Ozs7Ozs7O0FBUUE7Ozs7MEJBSU07QUFDRixhQUFPLEtBQUssTUFBWjtBQUNIOztBQUVEOzs7Ozs7OEJBR1UsSyxFQUFPO0FBQ2I7QUFDQSxVQUFHLE1BQU0sS0FBTixLQUFnQixDQUFuQixFQUFzQjtBQUNsQixnQkFBUSxLQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLGNBQXZCLENBQXNDLEtBQXRDLENBQVI7O0FBRUEsWUFBTSxnQkFBZ0I7QUFDbEIsYUFBRyxNQUFNLEtBRFM7QUFFbEIsYUFBRyxNQUFNO0FBRlMsU0FBdEI7O0FBS0EsYUFBSyxTQUFMLENBQWUsa0JBQWYsQ0FBa0MsS0FBSyxNQUFMLENBQVksRUFBOUMsRUFBa0QsYUFBbEQ7QUFDSDtBQUNKOzs7d0JBOUV1QjtBQUNwQixhQUFPLENBQUMsS0FBSyxnQkFBYjtBQUNIOztBQUVEOzs7OztzQkFJc0IsSyxFQUFPO0FBQ3pCLFdBQUssZ0JBQUwsR0FBd0IsQ0FBQyxLQUF6QjtBQUNIOzs7d0JBeUNXO0FBQ1IsYUFBTyxLQUFLLFlBQVo7QUFDSDs7Ozs7O2tCQXRIZ0IsUzs7Ozs7Ozs7Ozs7OztBQ1pyQjs7OztBQUVBOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7OztJQUlxQixJOzs7QUFDakI7Ozs7QUFJQSxrQkFBWSxTQUFaLEVBQXVCLElBQXZCLEVBQTZCO0FBQUE7O0FBQ3pCLFlBQU0sUUFBUSxDQUFkO0FBQ0EsWUFBTSxTQUFTLENBQWY7O0FBSUE7O0FBTnlCLGdIQUluQixTQUptQixFQUlSLElBSlEsRUFJRixNQUpFLEVBSU0sS0FKTixFQUlhLE1BSmI7O0FBUXpCLFlBQUksZUFBZSxFQUFuQjs7QUFFQTtBQUNBLGNBQUssWUFBTCxDQUFrQixLQUFsQixFQUF5QixTQUFTLENBQWxDLEVBQXFDLEtBQXJDOztBQUVBO0FBQ0EscUJBQWEsSUFBYixDQUFrQjtBQUNkLGVBQUcsS0FEVztBQUVkLGVBQUcsU0FBUztBQUZFLFNBQWxCOztBQUtBLFlBQUcsTUFBSyxJQUFMLEtBQVksS0FBWixJQUFxQixNQUFLLElBQUwsS0FBWSxVQUFwQyxFQUFnRDtBQUM1QztBQUNBLGtCQUFLLFlBQUwsQ0FBa0IsQ0FBbEIsRUFBcUIsU0FBUyxDQUE5QixFQUFpQyxJQUFqQztBQUNBO0FBQ0EseUJBQWEsSUFBYixDQUFrQjtBQUNkLG1CQUFHLENBRFc7QUFFZCxtQkFBRyxTQUFTO0FBRkUsYUFBbEI7QUFJSCxTQVJELE1BUU87QUFDSDtBQUNBLGtCQUFLLFlBQUwsQ0FBa0IsQ0FBbEIsRUFBcUIsU0FBUyxDQUE5QixFQUFpQyxJQUFqQztBQUNBLGtCQUFLLFlBQUwsQ0FBa0IsQ0FBbEIsRUFBcUIsVUFBVSxJQUFFLENBQVosQ0FBckIsRUFBcUMsSUFBckM7O0FBRUE7QUFDQSx5QkFBYSxJQUFiLENBQWtCO0FBQ2QsbUJBQUcsQ0FEVztBQUVkLG1CQUFHLFNBQVM7QUFGRSxhQUFsQjtBQUlBLHlCQUFhLElBQWIsQ0FBa0I7QUFDZCxtQkFBRyxDQURXO0FBRWQsbUJBQUcsVUFBVSxJQUFFLENBQVo7QUFGVyxhQUFsQjs7QUFLQTtBQUNBLHlCQUFhLElBQWIsQ0FBa0I7QUFDZCxtQkFBRyxDQURXO0FBRWQsbUJBQUcsU0FBUztBQUZFLGFBQWxCO0FBSUg7O0FBRUQsY0FBSyxrQkFBTCxjQUEyQixZQUEzQjs7QUFFQSxjQUFLLFlBQUw7QUFuRHlCO0FBb0Q1Qjs7QUFFRDs7Ozs7Ozs7NkNBUW9DO0FBQUEsOENBQWQsWUFBYztBQUFkLDRCQUFjO0FBQUE7O0FBQ2hDLGdCQUFHLGlCQUFlLFNBQWxCLEVBQTZCO0FBQUE7O0FBQ3pCLHVKQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQixDQUEvQixFQUFrQyxDQUFsQyxTQUF3QyxZQUF4QztBQUNILGFBRkQsTUFFTztBQUNILCtIQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQixDQUEvQixFQUFrQyxDQUFsQztBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7dUNBSWU7QUFBQTs7QUFDWDtBQUNBLGdCQUFNLFdBQVc7QUFDYix1QkFBTztBQUFBLDJCQUFNLGdCQUFNLEdBQU4sQ0FBVSxPQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUIsS0FBN0IsRUFBb0MsT0FBSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CLEtBQXZELENBQU47QUFBQSxpQkFETTtBQUViLHdCQUFRO0FBQUEsMkJBQU0sZ0JBQU0sSUFBTixDQUFXLE9BQUssVUFBTCxDQUFnQixDQUFoQixFQUFtQixLQUE5QixFQUFxQyxPQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUIsS0FBeEQsQ0FBTjtBQUFBLGlCQUZLO0FBR2IsdUJBQU87QUFBQSwyQkFBTSxnQkFBTSxHQUFOLENBQVUsT0FBSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CLEtBQTdCLEVBQW9DLE9BQUssVUFBTCxDQUFnQixDQUFoQixFQUFtQixLQUF2RCxDQUFOO0FBQUEsaUJBSE07QUFJYix1QkFBTztBQUFBLDJCQUFNLGdCQUFNLEdBQU4sQ0FBVSxPQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUIsS0FBN0IsQ0FBTjtBQUFBLGlCQUpNO0FBS2Isc0JBQU07QUFBQSwyQkFBTSxnQkFBTSxFQUFOLENBQVMsT0FBSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CLEtBQTVCLEVBQW1DLE9BQUssVUFBTCxDQUFnQixDQUFoQixFQUFtQixLQUF0RCxDQUFOO0FBQUEsaUJBTE87QUFNYix3QkFBUTtBQUFBLDJCQUFNLGdCQUFNLElBQU4sQ0FBVyxPQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUIsS0FBOUIsRUFBcUMsT0FBSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CLEtBQXhELENBQU47QUFBQSxpQkFOSztBQU9iLHVCQUFPO0FBQUEsMkJBQU0sZ0JBQU0sR0FBTixDQUFVLE9BQUssVUFBTCxDQUFnQixDQUFoQixFQUFtQixLQUE3QixFQUFvQyxPQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUIsS0FBdkQsQ0FBTjtBQUFBLGlCQVBNO0FBUWIsNEJBQVk7QUFBQSwyQkFBTSxPQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUIsS0FBekI7QUFBQTtBQVJDLGFBQWpCOztBQVdBLGdCQUFJLFFBQVEsZ0JBQU0sS0FBTixDQUFZLE9BQXhCOztBQUVBLGdCQUFHLFNBQVMsS0FBSyxJQUFkLENBQUgsRUFBd0I7QUFDcEIsd0JBQVEsU0FBUyxLQUFLLElBQWQsR0FBUjtBQUNIOztBQUVEO0FBQ0EsaUJBQUssU0FBTCxDQUFlLFVBQWYsQ0FBMEIsWUFBMUIsQ0FBdUMsS0FBSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CLEVBQTFELEVBQThELEtBQTlEO0FBQ0g7Ozs0QkFyQ3VCO0FBQ3BCLG1CQUFPLElBQUksR0FBSixDQUFRLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxJQUFmLEVBQXFCLE1BQXJCLEVBQTZCLEtBQTdCLEVBQW9DLEtBQXBDLEVBQTJDLE1BQTNDLEVBQW1ELFVBQW5ELENBQVIsQ0FBUDtBQUNIOzs7Ozs7a0JBakVnQixJOzs7Ozs7Ozs7OztBQ1ZyQjs7QUFFQTs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUE7Ozs7SUFJcUIsVTs7O0FBQ2pCLHdCQUFZLFNBQVosRUFBdUIsTUFBdkIsRUFBK0IsYUFBL0IsRUFBOEM7QUFBQTs7QUFBQSw0SEFDcEMsU0FEb0M7O0FBRzFDLFlBQU0sWUFBWSxNQUFLLFNBQUwsQ0FBZSxnQkFBZixDQUFnQyxNQUFoQyxDQUFsQjtBQUNBLGNBQUssaUJBQUwsR0FBeUIsTUFBSyxTQUFMLENBQWUsb0JBQWYsQ0FBb0MsU0FBcEMsRUFBK0MsSUFBL0MsQ0FBekI7O0FBRUEsWUFBTSxPQUFPLDhCQUFrQixNQUFLLGlCQUFMLENBQXVCLENBQXpDLEVBQTRDLE1BQUssaUJBQUwsQ0FBdUIsQ0FBbkUsQ0FBYjtBQUNBLFlBQU0sS0FBSyw4QkFBa0IsY0FBYyxDQUFoQyxFQUFtQyxjQUFjLENBQWpELENBQVg7O0FBRUEsWUFBTSxTQUFTLCtCQUFtQixDQUFDLElBQUQsRUFBTyxFQUFQLENBQW5CLENBQWY7O0FBRUEsY0FBSyxNQUFMLEdBQWMseUJBQWEsTUFBYixFQUFxQixDQUFyQixFQUF3QixTQUF4QixDQUFkO0FBWDBDO0FBWTdDOzs7OzRDQUVtQixhLEVBQWU7QUFDL0IsZ0JBQU0sT0FBTyw4QkFBa0IsS0FBSyxpQkFBTCxDQUF1QixDQUF6QyxFQUE0QyxLQUFLLGlCQUFMLENBQXVCLENBQW5FLENBQWI7QUFDQSxnQkFBTSxLQUFLLDhCQUFrQixjQUFjLENBQWhDLEVBQW1DLGNBQWMsQ0FBakQsQ0FBWDs7QUFFQSxnQkFBTSxTQUFTLCtCQUFtQixDQUFDLElBQUQsRUFBTyxFQUFQLENBQW5CLENBQWY7O0FBRUEsaUJBQUssTUFBTCxDQUFZLFlBQVosQ0FBeUIsTUFBekI7QUFDSDs7QUFFRDs7Ozs7Ozs4QkFJTTtBQUNGLG1CQUFPLEtBQUssTUFBTCxDQUFZLEdBQVosRUFBUDtBQUNIOzs7Ozs7a0JBOUJnQixVOzs7Ozs7Ozs7Ozs7O0FDVnJCOzs7O0FBRUE7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBOzs7O0lBSXFCLFE7OztBQUNqQjs7OztBQUlBLHNCQUFZLFNBQVosRUFBcUM7QUFBQSxZQUFkLElBQWMsdUVBQVAsS0FBTzs7QUFBQTs7QUFDakMsWUFBTSxZQUFZLENBQWxCO0FBQ0EsWUFBTSxhQUFhLENBQW5COztBQUZpQyx3SEFJM0IsU0FKMkIsRUFJaEIsT0FKZ0IsRUFJUCxPQUpPLEVBSUUsU0FKRixFQUlhLFVBSmI7O0FBTWpDLGNBQUssWUFBTCxDQUFrQixTQUFsQixFQUE2QixhQUFhLENBQTFDLEVBQTZDLEtBQTdDOztBQUVBLGNBQUssRUFBTCxHQUFVLElBQVY7O0FBRUEsY0FBSyxrQkFBTDtBQVZpQztBQVdwQzs7QUFFRDs7Ozs7Ozs7NkNBV3FCO0FBQ2pCO0FBQ0EsZ0JBQU0sY0FBYztBQUNoQixtQkFBRyxLQUFLLFNBRFE7QUFFaEIsbUJBQUcsS0FBSyxVQUFMLEdBQWtCO0FBRkwsYUFBcEI7QUFJQSxtSUFBeUIsQ0FBekIsRUFBNEIsQ0FBNUIsRUFBK0IsQ0FBL0IsRUFBa0MsQ0FBbEMsRUFBcUMsV0FBckM7QUFDSDs7QUFFRDs7Ozs7O3VDQUdlO0FBQ1gsaUJBQUssU0FBTCxDQUFlLGtCQUFmLENBQWtDLEtBQUssVUFBTCxDQUFnQixDQUFoQixDQUFsQyxFQUFzRCxLQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUIsS0FBekU7QUFDSDs7QUFFRDs7Ozs7Ozs7O0FBNEJBOzs7a0NBR1U7QUFDTixpQkFBSyxFQUFMLEdBQVUsQ0FBQyxLQUFLLEVBQWhCOztBQUVBLGdCQUFHLEtBQUssU0FBTCxDQUFlLFFBQWxCLEVBQTRCO0FBQ3hCLHFCQUFLLFNBQUwsQ0FBZSxRQUFmLENBQXdCLHFCQUF4QjtBQUNIO0FBQ0o7Ozs0QkE1RGdCO0FBQ2IsZ0JBQUksMEdBQUo7QUFDQSxpQkFBSyxJQUFMLEdBQVksS0FBSyxJQUFqQjs7QUFFQSxtQkFBTyxJQUFQO0FBQ0g7OzswQkFzQk0sSSxFQUFNO0FBQ1QsZ0JBQUksSUFBSixFQUFVO0FBQ047QUFDQSxxQkFBSyxXQUFMLENBQWlCLElBQWpCO0FBQ0EscUJBQUssVUFBTCxDQUFnQixDQUFoQixFQUFtQixRQUFuQixDQUE0QixnQkFBTSxLQUFOLENBQVksRUFBeEM7QUFDQSxxQkFBSyxZQUFMO0FBQ0gsYUFMRCxNQUtPO0FBQ0g7QUFDQSxxQkFBSyxXQUFMO0FBQ0EscUJBQUssVUFBTCxDQUFnQixDQUFoQixFQUFtQixRQUFuQixDQUE0QixnQkFBTSxLQUFOLENBQVksR0FBeEM7QUFDQSxxQkFBSyxZQUFMO0FBQ0g7O0FBRUQsaUJBQUssSUFBTCxHQUFZLElBQVo7QUFDSDs7QUFFRDs7Ozs7NEJBSVM7QUFDTCxtQkFBTyxLQUFLLElBQVo7QUFDSDs7Ozs7O2tCQXZFZ0IsUTs7Ozs7Ozs7Ozs7OztBQ1ZyQjs7OztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7OztJQUlxQixjOzs7QUFDakI7Ozs7OztBQU1BLDBCQUFZLFNBQVosRUFBdUIsSUFBdkIsRUFBNkIsR0FBN0IsRUFBa0M7QUFBQTs7QUFBQSxnSUFDeEIsU0FEd0IsRUFDYixJQURhLEVBQ1AsR0FETzs7QUFHOUIsVUFBSyxnQkFBTCxHQUF3QixJQUF4QjtBQUg4QjtBQUlqQzs7QUFFRDs7Ozs7Ozs7NkJBSVMsSyxFQUFPO0FBQ1osK0hBQWUsS0FBZjtBQUNBOztBQUVBLFVBQUksTUFBTSxLQUFLLFNBQUwsQ0FBZSxtQkFBZixDQUFtQyxLQUFLLE1BQUwsQ0FBWSxFQUEvQyxDQUFWO0FBQ0EsVUFBSSxZQUFKO0FBQ0g7O0FBRUQ7Ozs7Ozs7OzBDQUtzQixNLEVBQVE7QUFDMUIsNElBQTRCLE1BQTVCO0FBQ0EsV0FBSyxRQUFMLENBQWMsZ0JBQU0sS0FBTixDQUFZLE9BQTFCO0FBQ0g7Ozs7OztrQkFqQ2dCLGM7Ozs7Ozs7Ozs7Ozs7QUNUckI7O0FBRUE7OztJQUdxQixjO0FBQ2pCOzs7O0FBSUEsMEJBQVksU0FBWixFQUF1QjtBQUFBOztBQUNuQixRQUFHLENBQUMsU0FBSixFQUFlO0FBQ1gsY0FBUSxLQUFSLENBQWMsdUNBQWQ7QUFDSDtBQUNELFNBQUssU0FBTCxHQUFpQixTQUFqQjs7QUFFQTtBQUNBLFNBQUssTUFBTCxHQUFjLFNBQWQ7QUFDSDs7QUFFRDs7Ozs7Ozs7OztBQVFBOzs7a0NBR2MsQ0FBRTs7QUFFaEI7Ozs7OztnQ0FHWSxDQUFFOztBQUVkOzs7Ozs7a0NBR2MsQ0FBRTs7QUFFaEI7Ozs7Ozt3QkFuQlM7QUFDTCxhQUFPLEtBQUssTUFBTCxDQUFZLEVBQW5CO0FBQ0g7Ozt3QkFvQmdCO0FBQ2IsY0FBUSxLQUFSLENBQWMscURBQWQsRUFBcUUsSUFBckU7QUFDQSxhQUFPLFNBQVA7QUFDSDs7Ozs7O2tCQTVDZ0IsYzs7Ozs7Ozs7Ozs7OztBQ0xyQjs7OztBQUVBOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7OztJQUlxQixTOzs7QUFDakI7OztBQUdBLHVCQUFZLFNBQVosRUFBdUI7QUFBQTs7QUFDbkIsWUFBTSxhQUFhLENBQW5CO0FBQ0EsWUFBTSxZQUFZLENBQWxCOztBQUZtQiwwSEFJYixTQUphLEVBSUYsUUFKRSxFQUlRLE9BSlIsRUFJaUIsU0FKakIsRUFJNEIsVUFKNUI7O0FBTW5CLGNBQUssWUFBTCxDQUFrQixDQUFsQixFQUFxQixhQUFhLENBQWxDLEVBQXFDLElBQXJDOztBQUVBLGNBQUssa0JBQUw7QUFSbUI7QUFTdEI7O0FBRUQ7Ozs7Ozs7dUNBR2U7QUFDWCxpQkFBSyxRQUFMLENBQWMsS0FBSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CLEtBQWpDO0FBQ0g7O0FBRUQ7Ozs7Ozs7O2lDQUtTLEssRUFBTztBQUNaLGdCQUFHLFVBQVEsZ0JBQU0sS0FBTixDQUFZLEVBQXZCLEVBQTBCO0FBQ3RCLG9CQUFHLEtBQUssU0FBTCxDQUFlLFFBQWxCLEVBQTRCO0FBQ3hCLHlCQUFLLFNBQUwsQ0FBZSxRQUFmLENBQXdCLGVBQXhCO0FBQ0g7QUFDSjs7QUFFRCxnQkFBSSxXQUFXLEVBQWY7QUFDQSxxQkFBUyxnQkFBTSxLQUFOLENBQVksRUFBckIsSUFBMkIsSUFBM0I7QUFDQSxxQkFBUyxnQkFBTSxLQUFOLENBQVksR0FBckIsSUFBNEIsS0FBNUI7QUFDQSxxQkFBUyxnQkFBTSxLQUFOLENBQVksT0FBckIsSUFBZ0MsRUFBaEM7QUFDQSxxQkFBUyxnQkFBTSxLQUFOLENBQVksV0FBckIsSUFBb0MsS0FBcEM7O0FBRUEsaUJBQUssV0FBTCxDQUFpQixTQUFTLEtBQVQsQ0FBakI7QUFDSDs7OzZDQUVvQjtBQUNqQjtBQUNBLGdCQUFNLGNBQWM7QUFDaEIsbUJBQUcsQ0FEYTtBQUVoQixtQkFBRyxLQUFLLFVBQUwsR0FBa0I7QUFGTCxhQUFwQjtBQUlBLHFJQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQixDQUEvQixFQUFrQyxDQUFsQyxFQUFxQyxXQUFyQztBQUNIOzs7Ozs7a0JBbERnQixTOzs7Ozs7Ozs7Ozs7O0FDVnJCOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7OztJQUlxQixlOzs7QUFDakI7Ozs7OztBQU1BLDZCQUFZLFNBQVosRUFBdUIsSUFBdkIsRUFBNkIsR0FBN0IsRUFBa0M7QUFBQTs7QUFBQSxzSUFDeEIsU0FEd0IsRUFDYixJQURhLEVBQ1AsR0FETzs7QUFHOUIsY0FBSyxpQkFBTCxHQUF5QixJQUF6QjtBQUg4QjtBQUlqQzs7QUFFRDs7Ozs7Ozs7aUNBSVMsSyxFQUFPO0FBQ1osdUlBQWUsS0FBZjs7QUFEWTtBQUFBO0FBQUE7O0FBQUE7QUFHWixxQ0FBcUIsS0FBSyxPQUExQiw4SEFBbUM7QUFBQSx3QkFBeEIsTUFBd0I7O0FBQy9CLHlCQUFLLFNBQUwsQ0FBZSxXQUFmLENBQTJCLE1BQTNCLEVBQW1DLFFBQW5DLENBQTRDLEtBQTVDO0FBQ0g7QUFMVztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTWY7Ozs7OztrQkF2QmdCLGU7Ozs7Ozs7Ozs7Ozs7QUNSckI7O0FBRUE7Ozs7OztJQU1NLFE7QUFDRjs7OztBQUlBLHNCQUFZLE1BQVosRUFBb0I7QUFBQTs7QUFDaEIsWUFBRyxXQUFTLFNBQVosRUFBdUI7QUFDbkIsaUJBQUssSUFBTCxHQUFZLE9BQU8sT0FBUCxDQUFlLGdCQUFmLEVBQWlDLElBQWpDLENBQVo7QUFDQSxpQkFBSyxJQUFMLEdBQVksT0FBTyxPQUFQLENBQWUsZ0JBQWYsRUFBaUMsSUFBakMsRUFBdUMsS0FBdkMsQ0FBNkMsR0FBN0MsQ0FBWjtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7O2dDQUlRLEksRUFBTTtBQUNWLGlCQUFLLElBQUwsR0FBWSxJQUFaO0FBQ0g7O0FBRUQ7Ozs7Ozs7cUNBSWEsSSxFQUFNO0FBQ2YsaUJBQUssSUFBTCxHQUFZLElBQVo7QUFDSDs7QUFFRDs7Ozs7Ozs4QkFJTTtBQUNGLG1CQUFPLEtBQUssSUFBTCxHQUFZLEdBQVosR0FBa0IsS0FBSyxJQUFMLENBQVUsSUFBVixDQUFlLEdBQWYsQ0FBbEIsR0FBd0MsR0FBL0M7QUFDSDs7Ozs7O0FBR0w7Ozs7O0lBR3FCLFM7QUFDakI7Ozs7QUFJQSx1QkFBWSxNQUFaLEVBQW9CO0FBQUE7O0FBQ2hCOzs7O0FBSUEsYUFBSyxLQUFMLEdBQWEsRUFBYjs7QUFFQSxZQUFHLFdBQVMsU0FBWixFQUF1QjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNuQixxQ0FBbUIsT0FBTyxLQUFQLENBQWEsR0FBYixDQUFuQiw4SEFBc0M7QUFBQSx3QkFBM0IsSUFBMkI7O0FBQ2xDLHdCQUFHLElBQUgsRUFBUztBQUFFO0FBQ1AsNkJBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsSUFBSSxRQUFKLENBQWEsT0FBTyxHQUFwQixDQUFoQjtBQUNIO0FBQ0o7QUFMa0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU10QjtBQUNKOztBQUVEOzs7Ozs7OztxQ0FJYSxTLEVBQVc7QUFDcEIsaUJBQUssZUFBTCxDQUFxQixVQUFDLEdBQUQ7QUFBQSx1QkFBUyxVQUFVLFNBQVYsQ0FBb0IsR0FBcEIsQ0FBVDtBQUFBLGFBQXJCO0FBQ0g7O0FBRUQ7Ozs7Ozs7b0NBSVksUyxFQUFXO0FBQ25CLGlCQUFLLGVBQUwsQ0FBcUIsVUFBQyxHQUFEO0FBQUEsdUJBQVMsVUFBVSxTQUFWLENBQW9CLEdBQXBCLENBQVQ7QUFBQSxhQUFyQjtBQUNIOztBQUVEOzs7Ozs7O3dDQUlnQixTLEVBQVc7QUFDdkIsZ0JBQU0sY0FBYztBQUNoQiw2QkFBYSxtQkFBQyxJQUFELEVBQVU7QUFDbkIseUJBQUssSUFBTCxHQUFZLEtBQUssSUFBTCxDQUFVLEdBQVYsQ0FBYztBQUFBLCtCQUFPLFVBQVUsR0FBVixDQUFQO0FBQUEscUJBQWQsQ0FBWjtBQUNBLDJCQUFPLElBQVA7QUFDSCxpQkFKZTtBQUtoQiwwQkFBVSxnQkFBQyxJQUFELEVBQVU7QUFDaEIseUJBQUssSUFBTCxHQUFZLENBQ1IsS0FBSyxJQUFMLENBQVUsQ0FBVixDQURRLEVBRVIsVUFBVSxLQUFLLElBQUwsQ0FBVSxDQUFWLENBQVYsQ0FGUSxFQUdSLFVBQVUsS0FBSyxJQUFMLENBQVUsQ0FBVixDQUFWLENBSFEsQ0FBWjtBQUtBLDJCQUFPLElBQVA7QUFDSDtBQVplLGFBQXBCOztBQWVBLGlCQUFLLEtBQUwsR0FBYSxLQUFLLEtBQUwsQ0FBVyxHQUFYLENBQWUsVUFBQyxJQUFELEVBQVU7QUFDbEMsdUJBQU8sWUFBWSxLQUFLLElBQWpCLElBQXlCLFlBQVksS0FBSyxJQUFqQixFQUF1QixJQUF2QixDQUF6QixHQUF3RCxJQUEvRDtBQUNILGFBRlksQ0FBYjtBQUdIOztBQUVEOzs7Ozs7OztpQ0FLUyxJLEVBQU07QUFDWCxpQkFBSSxJQUFJLElBQUksQ0FBWixFQUFnQixJQUFJLEtBQUssS0FBTCxDQUFXLE1BQS9CLEVBQXVDLEdBQXZDLEVBQTRDO0FBQ3hDLG9CQUFHLFNBQVMsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLElBQTFCLEVBQWdDO0FBQzVCLDJCQUFPLENBQVA7QUFDSDtBQUNKOztBQUVELG1CQUFPLENBQUMsQ0FBUjtBQUNIOztBQUVEOzs7Ozs7O3VDQUllO0FBQ1gsZ0JBQUksT0FBTyxLQUFLLFlBQUwsQ0FBa0IsS0FBSyxRQUFMLENBQWMsV0FBZCxDQUFsQixDQUFYOztBQUVBLG1CQUFPO0FBQ0gsbUJBQUcsT0FBTyxLQUFLLENBQUwsQ0FBUCxDQURBO0FBRUgsbUJBQUcsT0FBTyxLQUFLLENBQUwsQ0FBUDtBQUZBLGFBQVA7QUFJSDs7QUFFRDs7Ozs7OztvQ0FJWTtBQUNSLGdCQUFJLE9BQU8sS0FBSyxZQUFMLENBQWtCLEtBQUssUUFBTCxDQUFjLFFBQWQsQ0FBbEIsQ0FBWDs7QUFFQSxtQkFBTztBQUNILHFCQUFLLE9BQU8sS0FBSyxDQUFMLENBQVAsQ0FERjtBQUVILHlCQUFTLE9BQU8sS0FBSyxDQUFMLENBQVAsQ0FGTjtBQUdILHlCQUFTLE9BQU8sS0FBSyxDQUFMLENBQVA7QUFITixhQUFQO0FBS0g7O0FBRUQ7Ozs7Ozs7O3FDQUthLEMsRUFBRyxDLEVBQUc7QUFDZixpQkFBSyxZQUFMLENBQWtCLFdBQWxCLEVBQStCLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBL0I7QUFDSDs7QUFFRDs7Ozs7Ozs7O2tDQU1VLEcsRUFBSyxPLEVBQVMsTyxFQUFTO0FBQzdCLGlCQUFLLFlBQUwsQ0FBa0IsUUFBbEIsRUFBNEIsQ0FBQyxHQUFELEVBQU0sT0FBTixFQUFlLE9BQWYsQ0FBNUI7QUFDSDs7QUFFRDs7Ozs7Ozs7O3lDQU1pQixPLEVBQVMsTyxFQUFTLEssRUFBTztBQUN0QyxnQkFBTSxTQUFTLFFBQVEsRUFBUixHQUFhLEdBQTVCOztBQUVBLGdCQUFHLEtBQUssUUFBTCxDQUFjLFFBQWQsTUFBMEIsQ0FBQyxDQUE5QixFQUFpQztBQUM3QixxQkFBSyxTQUFMLENBQWUsTUFBZixFQUF1QixPQUF2QixFQUFnQyxPQUFoQztBQUNILGFBRkQsTUFFTztBQUNILG9CQUFJLGNBQWMsQ0FBQyxTQUFTLEtBQUssU0FBTCxHQUFpQixHQUExQixJQUFpQyxNQUFsQyxJQUE0QyxHQUE5RDs7QUFFQSxvQkFBRyxnQkFBYyxHQUFqQixFQUFzQjtBQUNsQjtBQUNBO0FBQ0Esd0JBQUksSUFBSSxPQUFSO0FBQ0EsOEJBQVUsT0FBVjtBQUNBLDhCQUFVLENBQVY7QUFDSDs7QUFFRCxxQkFBSyxTQUFMLENBQ0ksV0FESixFQUVJLE9BRkosRUFHSSxPQUhKO0FBS0g7QUFDSjs7QUFFRDs7Ozs7Ozs7b0NBS1ksTyxFQUFTLE8sRUFBUztBQUMxQixpQkFBSyxnQkFBTCxDQUFzQixPQUF0QixFQUErQixPQUEvQixFQUF3QyxJQUF4QztBQUNIOztBQUVEOzs7Ozs7OzttQ0FLVyxPLEVBQVMsTyxFQUFTO0FBQ3pCLGlCQUFLLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLE9BQS9CLEVBQXdDLEtBQXhDO0FBQ0g7O0FBRUQ7Ozs7Ozs7OEJBSU07QUFDRixnQkFBSSxlQUFKO0FBREU7QUFBQTtBQUFBOztBQUFBO0FBRUYsc0NBQWtCLEtBQUssS0FBdkIsbUlBQThCO0FBQUEsd0JBQXBCLElBQW9COztBQUMxQix3QkFBRyxNQUFILEVBQVc7QUFDUCxrQ0FBVSxNQUFNLEtBQUssR0FBTCxFQUFoQjtBQUNILHFCQUZELE1BRU87QUFDSCxpQ0FBUyxLQUFLLEdBQUwsRUFBVDtBQUNIO0FBQ0o7QUFSQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVNGLG1CQUFPLE1BQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7cUNBS2EsSyxFQUFPO0FBQ2hCLG1CQUFPLEtBQUssS0FBTCxDQUFXLEtBQVgsRUFBa0IsSUFBekI7QUFDSDs7QUFFRDs7Ozs7Ozs7cUNBS2EsSSxFQUFNLEksRUFBTTtBQUNyQjtBQUNBLGdCQUFJLFFBQVEsS0FBSyxRQUFMLENBQWMsSUFBZCxDQUFaOztBQUVBO0FBQ0E7QUFDQSxnQkFBRyxVQUFRLENBQUMsQ0FBWixFQUFlO0FBQ1gsd0JBQVEsS0FBSyxLQUFMLENBQVcsTUFBbkI7QUFDQSxxQkFBSyxLQUFMLENBQVcsS0FBWCxJQUFvQixJQUFJLFFBQUosRUFBcEI7QUFDQSxxQkFBSyxLQUFMLENBQVcsS0FBWCxFQUFrQixPQUFsQixDQUEwQixJQUExQjtBQUNIOztBQUVEO0FBQ0EsaUJBQUssS0FBTCxDQUFXLEtBQVgsRUFBa0IsWUFBbEIsQ0FBK0IsSUFBL0I7QUFDSDs7Ozs7O2tCQXZOZ0IsUzs7Ozs7Ozs7Ozs7QUM5Q3JCOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7Ozs7Ozs7K2VBUEE7O0FBU0E7Ozs7SUFJcUIsSTs7O0FBQ2pCOzs7Ozs7QUFNQSxrQkFBWSxTQUFaLEVBQXVCLE1BQXZCLEVBQStCLElBQS9CLEVBQW1FO0FBQUEsWUFBOUIsT0FBOEIsdUVBQXBCLElBQW9CO0FBQUEsWUFBZCxLQUFjLHVFQUFOLElBQU07O0FBQUE7O0FBQUEsZ0hBQ3pELFNBRHlEOztBQUcvRCxjQUFLLFFBQUwsR0FBZ0IsVUFBVSxRQUExQjs7QUFFQSxjQUFLLFVBQUwsR0FBa0I7QUFDZCxrQkFBTTtBQUNGLG9CQUFJLE1BREY7QUFFRixxQkFBSyxNQUFLLFNBQUwsQ0FBZSxtQkFBZixDQUFtQyxNQUFuQyxDQUZIO0FBR0YsMkJBQVcsTUFBSyxTQUFMLENBQWUsZ0JBQWYsQ0FBZ0MsTUFBaEM7QUFIVCxhQURRO0FBTWQsZ0JBQUk7QUFDQSxvQkFBSSxJQURKO0FBRUEscUJBQUssTUFBSyxTQUFMLENBQWUsbUJBQWYsQ0FBbUMsSUFBbkMsQ0FGTDtBQUdBLDJCQUFXLE1BQUssU0FBTCxDQUFlLGdCQUFmLENBQWdDLElBQWhDO0FBSFg7QUFOVSxTQUFsQjs7QUFhQSxZQUFHLE1BQUssVUFBTCxDQUFnQixJQUFoQixDQUFxQixTQUFyQixDQUErQixpQkFBbEMsRUFBcUQ7QUFDakQsZ0JBQUcsTUFBSyxVQUFMLENBQWdCLEVBQWhCLENBQW1CLFNBQW5CLENBQTZCLGdCQUFoQyxFQUFrRDtBQUM5QztBQUNILGFBRkQsTUFFTztBQUNIO0FBQ0Esc0JBQU0sa0RBQU47QUFDSDtBQUNKLFNBUEQsTUFPTztBQUNILGdCQUFHLE1BQUssVUFBTCxDQUFnQixFQUFoQixDQUFtQixTQUFuQixDQUE2QixnQkFBaEMsRUFBa0Q7QUFDOUM7QUFDQSxzQkFBTSxpREFBTjtBQUNILGFBSEQsTUFHTztBQUFBLDJCQUU0QyxDQUFFLE1BQUssVUFBTCxDQUFnQixFQUFsQixFQUFzQixNQUFLLFVBQUwsQ0FBZ0IsSUFBdEMsQ0FGNUM7QUFDSDs7QUFDRSxzQkFBSyxVQUFMLENBQWdCLElBRmY7QUFFcUIsc0JBQUssVUFBTCxDQUFnQixFQUZyQztBQUdOO0FBQ0o7O0FBRUQsWUFBRyxLQUFILEVBQVU7QUFDTixrQkFBSyxTQUFMLENBQWUsSUFBZixFQUFxQixPQUFyQjtBQUNILFNBRkQsTUFFTztBQUNILGtCQUFLLGFBQUw7QUFDSDs7QUFFRCxjQUFLLFlBQUwsR0FBb0IsZ0JBQU0sS0FBTixDQUFZLE9BQWhDOztBQUVBLGNBQUssUUFBTCxDQUFjLE1BQUssVUFBTCxDQUFnQixJQUFoQixDQUFxQixTQUFyQixDQUErQixLQUE3Qzs7QUFFQSxZQUFHLE9BQUgsRUFBWTtBQUFBLGdCQUNELFNBREMsR0FDWSxNQUFLLFVBQUwsQ0FBZ0IsRUFENUIsQ0FDRCxTQURDOztBQUVSLGtCQUFLLFNBQUwsQ0FBZSxrQkFBZixDQUFrQyxTQUFsQyxFQUE2QyxVQUFVLEtBQXZEO0FBQ0g7O0FBRUQsY0FBSyxNQUFMLENBQVksR0FBWixDQUFnQixRQUFoQixDQUF5QixNQUF6QjtBQWxEK0Q7QUFtRGxFOzs7Ozs7QUFxQkQ7Ozs7aUNBSVMsSyxFQUFPO0FBQUE7O0FBQ1osNEJBQUssTUFBTCxFQUFZLGFBQVo7QUFDQSxpQkFBSyxNQUFMLENBQVksUUFBWixDQUFxQix1QkFBYSxLQUFiLENBQXJCOztBQUVBLGlCQUFLLFVBQUwsQ0FBZ0IsRUFBaEIsQ0FBbUIsU0FBbkIsQ0FBNkIsUUFBN0IsQ0FBc0MsS0FBdEM7O0FBRUEsaUJBQUssWUFBTCxHQUFvQixLQUFwQjtBQUNIOztBQUVEOzs7Ozs7Ozs7QUFRQTs7OzBDQUdrQjtBQUNkO0FBRGM7QUFBQTtBQUFBOztBQUFBO0FBRWQscUNBQWtCLEtBQUssS0FBdkIsOEhBQThCO0FBQUEsd0JBQW5CLEdBQW1COztBQUMxQix3QkFBSSxZQUFKO0FBQ0g7QUFKYTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS2pCOztBQUVEOzs7Ozs7OzhCQUlNO0FBQ0YsbUJBQU8sS0FBSyxNQUFMLENBQVksR0FBWixFQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7aURBSXlCO0FBQ3JCLGdCQUFJLFNBQVMsZ0NBQWI7QUFDQSxtQkFBTyxNQUFQLENBQWMsOEJBQWtCLEtBQUssU0FBTCxDQUFlLENBQWpDLEVBQW9DLEtBQUssU0FBTCxDQUFlLENBQW5ELENBQWQ7QUFDQSxtQkFBTyxNQUFQLENBQWMsOEJBQWtCLEtBQUssT0FBTCxDQUFhLENBQS9CLEVBQWtDLEtBQUssT0FBTCxDQUFhLENBQS9DLENBQWQ7QUFDQSxtQkFBTyxNQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozt3Q0FHZ0I7QUFDWixpQkFBSyxTQUFMLEdBQWlCLEtBQUssU0FBTCxDQUFlLG9CQUFmLENBQW9DLEtBQUssVUFBTCxDQUFnQixJQUFoQixDQUFxQixTQUF6RCxFQUFvRSxLQUFwRSxDQUFqQjtBQUNBLGlCQUFLLE9BQUwsR0FBZSxLQUFLLFNBQUwsQ0FBZSxvQkFBZixDQUFvQyxLQUFLLFVBQUwsQ0FBZ0IsRUFBaEIsQ0FBbUIsU0FBdkQsRUFBa0UsS0FBbEUsQ0FBZjs7QUFFQSxpQkFBSyxXQUFMLENBQWlCLEtBQUssc0JBQUwsRUFBakI7QUFDSDs7QUFFRDs7Ozs7O29DQUc2QztBQUFBLGdCQUFuQyxVQUFtQyx1RUFBdEIsSUFBc0I7QUFBQSxnQkFBaEIsT0FBZ0IsdUVBQU4sSUFBTTs7QUFDekMsaUJBQUssU0FBTCxHQUFpQixLQUFLLFNBQUwsQ0FBZSxvQkFBZixDQUFvQyxLQUFLLFVBQUwsQ0FBZ0IsSUFBaEIsQ0FBcUIsU0FBekQsRUFBb0UsVUFBcEUsQ0FBakI7QUFDQSxpQkFBSyxPQUFMLEdBQWUsS0FBSyxTQUFMLENBQWUsb0JBQWYsQ0FBb0MsS0FBSyxVQUFMLENBQWdCLEVBQWhCLENBQW1CLFNBQXZELEVBQWtFLFVBQWxFLENBQWY7O0FBRUEsaUJBQUssTUFBTCxHQUFjLEtBQUssU0FBTCxDQUNWO0FBQ0ksbUJBQUcsS0FBSyxTQUFMLENBQWUsQ0FBZixHQUFtQixLQUFLLFFBRC9CO0FBRUksbUJBQUcsS0FBSyxTQUFMLENBQWUsQ0FBZixHQUFtQixLQUFLO0FBRi9CLGFBRFUsRUFLVjtBQUNJLG1CQUFHLEtBQUssT0FBTCxDQUFhLENBQWIsR0FBaUIsS0FBSyxRQUQ3QjtBQUVJLG1CQUFHLEtBQUssT0FBTCxDQUFhLENBQWIsR0FBaUIsS0FBSztBQUY3QixhQUxVLENBQWQ7O0FBVUEsaUJBQUssV0FBTCxDQUFpQixLQUFLLE1BQXRCOztBQUVBLGdCQUFJLE9BQUosRUFDSSxLQUFLLGVBQUw7O0FBRUo7QUFDQSxpQkFBSyx5QkFBTDtBQUNIOztBQUVEOzs7Ozs7O29DQUlZLE0sRUFBUTtBQUNoQjtBQUNBLGdCQUFHLEtBQUssTUFBTCxLQUFjLFNBQWpCLEVBQTRCO0FBQ3hCO0FBRHdCO0FBQUE7QUFBQTs7QUFBQTtBQUV4QiwwQ0FBa0IsS0FBSyxNQUFMLENBQVksUUFBOUIsbUlBQXdDO0FBQUEsNEJBQS9CLEtBQStCOztBQUNwQyw4QkFBTSxZQUFOLENBQW1CLE1BQW5CO0FBQ0g7QUFKdUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUszQixhQUxELE1BS087QUFDSCxxQkFBSyxNQUFMLEdBQWMsdUJBQWQ7O0FBRUEsb0JBQUksU0FBUyx5QkFBYSxNQUFiLEVBQXFCLEVBQXJCLEVBQXlCLE9BQXpCLENBQWI7QUFDQSx1QkFBTyxRQUFQLENBQWdCLFFBQWhCO0FBQ0EsdUJBQU8sT0FBUCxDQUFlLEVBQUMsU0FBUyxDQUFWLEVBQWY7QUFDQSxxQkFBSyxNQUFMLENBQVksUUFBWixDQUFxQixNQUFyQjs7QUFFQSxvQkFBSSxXQUFXLHlCQUFhLE1BQWIsRUFBcUIsQ0FBckIsQ0FBZjtBQUNBLHlCQUFTLFFBQVQsQ0FBa0IsTUFBbEIsRUFBMEIsY0FBMUI7QUFDQSxxQkFBSyxNQUFMLENBQVksUUFBWixDQUFxQixRQUFyQjtBQUNIO0FBQ0o7Ozt1Q0FFYyxJLEVBQU07QUFDakIsZ0JBQUksWUFBWSxnQ0FBaEI7QUFEaUI7QUFBQTtBQUFBOztBQUFBO0FBRWpCLHNDQUFvQixJQUFwQixtSUFBMEI7QUFBQSx3QkFBZixLQUFlOztBQUN0Qiw4QkFBVSxNQUFWLENBQWlCLDhCQUFrQixNQUFNLENBQU4sR0FBVSxLQUFLLFFBQWpDLEVBQTJDLE1BQU0sQ0FBTixHQUFVLEtBQUssUUFBMUQsQ0FBakI7QUFDSDtBQUpnQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUtqQixtQkFBTyxTQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7OztrQ0FNVSxLLEVBQU8sRyxFQUFLO0FBQ2xCLGdCQUFJLGNBQWMsS0FBSyxTQUFMLENBQWUsbUJBQWYsRUFBbEI7O0FBRUEsZ0JBQUksNEJBQUo7QUFDQSxnQkFBRyxLQUFLLE1BQUwsS0FBYyxTQUFqQixFQUE0QjtBQUN4QixzQ0FBc0IsS0FBSyxTQUFMLENBQWUsb0JBQWYsRUFBdEI7QUFDSCxhQUZELE1BRU87QUFDSCxzQ0FBc0IsS0FBSyxTQUFMLENBQWUsb0JBQWYsQ0FBb0MsS0FBSyxNQUFMLENBQVksRUFBaEQsQ0FBdEI7QUFDSDs7QUFFRCxnQkFBSSxPQUFPLHdCQUFTLEtBQVQsRUFBZ0IsR0FBaEIsRUFBcUIsV0FBckIsRUFBa0MsbUJBQWxDLEVBQXVELEtBQUssUUFBNUQsQ0FBWDs7QUFFQSxnQkFBRyxJQUFILEVBQVM7QUFDTCx1QkFBTyxLQUFLLGNBQUwsQ0FBb0IsSUFBcEIsQ0FBUDtBQUNIOztBQUdEO0FBQ0EsbUJBQU8sd0JBQVMsS0FBVCxFQUFnQixHQUFoQixFQUFxQixJQUFJLEdBQUosRUFBckIsRUFBZ0MsSUFBSSxHQUFKLEVBQWhDLEVBQTJDLEtBQUssUUFBaEQsQ0FBUDs7QUFFQSxnQkFBRyxJQUFILEVBQVM7QUFDTCx1QkFBTyxLQUFLLGNBQUwsQ0FBb0IsSUFBcEIsQ0FBUDtBQUNIOztBQUVEO0FBQ0EsbUJBQU8sS0FBSyxzQkFBTCxFQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7b0RBSTRCO0FBQUE7O0FBQ3hCLGlCQUFLLGlCQUFMLEdBQXlCLElBQUksR0FBSixFQUF6Qjs7QUFFQSxnQkFBSSxrQkFBSjs7QUFFQSxpQkFBSyxNQUFMLENBQVksT0FBWixDQUFvQixpQkFBUztBQUN6QixvQkFDSSxJQUFJLE9BQUssU0FBTCxDQUFlLFNBQWYsQ0FBeUIsTUFBTSxDQUEvQixDQURSO0FBQUEsb0JBRUksSUFBSSxPQUFLLFNBQUwsQ0FBZSxTQUFmLENBQXlCLE1BQU0sQ0FBL0IsQ0FGUjs7QUFJQSxvQkFBSSxjQUFjLFNBQWxCLEVBQTZCO0FBQ3pCO0FBQ0EsMkJBQUssaUJBQUwsQ0FBdUIsR0FBdkIsQ0FBMkIsRUFBQyxJQUFELEVBQUksSUFBSixFQUEzQjtBQUNILGlCQUhELE1BR087QUFDSDs7QUFFQSx3QkFBRyxVQUFVLENBQVYsS0FBZ0IsQ0FBbkIsRUFBc0I7QUFDbEI7QUFDQSw0QkFBSSxPQUFPLEtBQUssR0FBTCxDQUFTLFVBQVUsQ0FBbkIsRUFBc0IsQ0FBdEIsQ0FBWDtBQUNBLDRCQUFJLEtBQUssS0FBSyxHQUFMLENBQVMsVUFBVSxDQUFuQixFQUFzQixDQUF0QixDQUFUOztBQUVBLCtCQUFNLFFBQVEsRUFBZCxFQUFrQjtBQUNkLG1DQUFLLGlCQUFMLENBQXVCLEdBQXZCLENBQTJCLEVBQUMsR0FBRyxDQUFKLEVBQU8sR0FBRyxJQUFWLEVBQTNCO0FBQ0E7QUFDSDtBQUNKLHFCQVRELE1BU08sSUFBRyxVQUFVLENBQVYsS0FBZ0IsQ0FBbkIsRUFBc0I7QUFDekI7QUFDQSw0QkFBSSxRQUFPLEtBQUssR0FBTCxDQUFTLFVBQVUsQ0FBbkIsRUFBc0IsQ0FBdEIsQ0FBWDtBQUNBLDRCQUFJLE1BQUssS0FBSyxHQUFMLENBQVMsVUFBVSxDQUFuQixFQUFzQixDQUF0QixDQUFUOztBQUVBLCtCQUFNLFNBQVEsR0FBZCxFQUFrQjtBQUNkLG1DQUFLLGlCQUFMLENBQXVCLEdBQXZCLENBQTJCLEVBQUMsR0FBRyxLQUFKLEVBQVUsR0FBRyxDQUFiLEVBQTNCO0FBQ0E7QUFDSDtBQUNKLHFCQVRNLE1BU0E7QUFDSDtBQUNBO0FBQ0g7QUFDSjs7QUFFRDtBQUNBLDRCQUFZLEVBQUMsSUFBRCxFQUFJLElBQUosRUFBWjtBQUNILGFBckNEO0FBc0NIOzs7NEJBM05XO0FBQ1IsbUJBQU8sQ0FBQyxLQUFLLFVBQUwsQ0FBZ0IsSUFBaEIsQ0FBcUIsR0FBdEIsRUFBMkIsS0FBSyxVQUFMLENBQWdCLEVBQWhCLENBQW1CLEdBQTlDLENBQVA7QUFDSDs7OzRCQUVnQjtBQUNiLG1CQUFPLENBQUMsS0FBSyxVQUFMLENBQWdCLElBQWhCLENBQXFCLFNBQXRCLEVBQWlDLEtBQUssVUFBTCxDQUFnQixFQUFoQixDQUFtQixTQUFwRCxDQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7NEJBSWlCO0FBQ2IsbUJBQU87QUFDSCx3QkFBUSxLQUFLLFVBQUwsQ0FBZ0IsSUFBaEIsQ0FBcUIsRUFEMUI7QUFFSCxzQkFBTSxLQUFLLFVBQUwsQ0FBZ0IsRUFBaEIsQ0FBbUI7QUFGdEIsYUFBUDtBQUlIOzs7NEJBbUJXO0FBQ1IsbUJBQU8sS0FBSyxZQUFaO0FBQ0g7Ozs7OztrQkFsR2dCLEk7Ozs7Ozs7OztBQ2JyQjs7Ozs7O0FBRUE7Ozs7O0FBS0EsSUFBSSxNQUFNLEVBQVYsQyxDQUFjOztBQUVkLElBQUksZ0JBQU0sS0FBTixDQUFZLEVBQWhCLElBQXNCLFNBQXRCO0FBQ0EsSUFBSSxnQkFBTSxLQUFOLENBQVksR0FBaEIsSUFBdUIsVUFBdkI7QUFDQSxJQUFJLGdCQUFNLEtBQU4sQ0FBWSxPQUFoQixJQUEyQixjQUEzQjtBQUNBLElBQUksZ0JBQU0sS0FBTixDQUFZLFdBQWhCLElBQStCLGtCQUEvQjs7a0JBRWUsRzs7Ozs7Ozs7a0JDQ1MsUTs7QUFmeEI7O0FBQ0E7Ozs7QUFFQTs7OztBQUF3Qzs7QUFFeEM7O0FBRUE7Ozs7Ozs7O0FBUWUsU0FBUyxRQUFULENBQWtCLEtBQWxCLEVBQXlCLEdBQXpCLEVBQThCLFdBQTlCLEVBQTJDLG1CQUEzQyxFQUFnRTtBQUMzRSxRQUFNLHFEQUFOOztBQUVBLFFBQU0sc0JBQXNCLENBQTVCO0FBQ0EsUUFBTSxxQkFBcUIsQ0FBM0I7O0FBRUE7QUFDQTtBQUNBLFFBQU0sZUFBZSxNQUFyQjs7QUFFQSxRQUFJLGNBQWMsSUFBSSxHQUFKLEVBQWxCO0FBQ0EsUUFBSSxZQUFZLElBQUksR0FBSixFQUFoQjtBQUNBLFFBQUksZ0JBQWdCLDJCQUFwQjs7QUFFQTs7QUFFQTs7Ozs7QUFLQSxRQUFNLGNBQWMsU0FBZCxXQUFjLENBQUMsSUFBRCxFQUFPLE1BQVAsRUFBa0I7QUFDbEMsa0JBQVUsR0FBVixDQUFjLElBQWQ7QUFDQTtBQUNBLHNCQUFjLE9BQWQsQ0FBc0IsSUFBdEIsRUFBNEIsSUFBSSxNQUFoQztBQUNILEtBSkQ7O0FBTUE7Ozs7QUFJQSxRQUFNLGNBQWMsU0FBZCxXQUFjLEdBQU07QUFDdEIsWUFBTSxPQUFPLGNBQWMsT0FBZCxFQUFiO0FBQ0Esa0JBQVUsTUFBVixDQUFpQixJQUFqQjtBQUNBLGVBQU8sSUFBUDtBQUNILEtBSkQ7O0FBTUEsUUFBSSxXQUFXLElBQUksR0FBSixFQUFmOztBQUVBO0FBQ0EsUUFBSSxTQUFTLGtDQUF3QixRQUF4QixDQUFiO0FBQ0EsV0FBTyxHQUFQLENBQVcsS0FBWCxFQUFrQixDQUFsQjs7QUFFQSxRQUFJLGNBQWMsaUJBQWlCLEtBQWpCLEVBQXdCLEdBQXhCLENBQWxCOztBQUVBLGdCQUFZLEtBQVosRUFBbUIsV0FBbkI7O0FBRUEsY0FBVSxHQUFWLENBQWMsS0FBZDtBQUNBLGtCQUFjLE9BQWQsQ0FBc0IsS0FBdEIsRUFBNkIsSUFBSSxXQUFqQzs7QUFFQSxXQUFPLFVBQVUsSUFBVixHQUFpQixDQUF4QixFQUEyQjtBQUN2QjtBQUNBLFlBQU0sY0FBYyxhQUFwQjs7QUFFQTtBQUNBLFlBQUksWUFBWSxDQUFaLElBQWlCLElBQUksQ0FBckIsSUFBMEIsWUFBWSxDQUFaLElBQWlCLElBQUksQ0FBbkQsRUFBc0Q7QUFDbEQsbUJBQU8sZ0JBQWdCLFFBQWhCLEVBQTBCLFdBQTFCLENBQVA7QUFDSDs7QUFFRDtBQUNBLG9CQUFZLEdBQVosQ0FBZ0IsV0FBaEI7O0FBRUE7QUFDQTtBQUNBLGFBQUssSUFBSSxZQUFZLENBQXJCLEVBQXdCLFlBQVksQ0FBcEMsRUFBdUMsV0FBdkMsRUFBb0Q7QUFDaEQsZ0JBQUksV0FBVyxVQUFVLFdBQVYsRUFBdUIsU0FBdkIsQ0FBZjs7QUFFQSxnQkFBSSxlQUFlLENBQW5COztBQUVBLGlCQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksRUFBcEIsRUFBd0IsR0FBeEIsRUFBNkI7QUFDekI7QUFDQTtBQUNBLG9CQUFJLGdCQUFnQixXQUFoQixFQUE2QixRQUE3QixDQUFKLEVBQTRDO0FBQ3hDO0FBQ0Esd0JBQUksRUFBRSxTQUFTLENBQVQsS0FBZSxJQUFJLENBQW5CLElBQXdCLFNBQVMsQ0FBVCxLQUFlLElBQUksQ0FBN0MsS0FDQSxFQUFFLFNBQVMsQ0FBVCxLQUFlLE1BQU0sQ0FBckIsSUFBMEIsU0FBUyxDQUFULEtBQWUsTUFBTSxDQUFqRCxDQURKLEVBQ3lEO0FBQ2pEO0FBQ1A7QUFDSjs7QUFFRDtBQUNBO0FBQ0Esb0JBQUksWUFBWSxHQUFaLENBQWdCLFFBQWhCLENBQUosRUFBK0I7QUFDM0I7QUFDSDs7QUFFRDtBQUNBLG9CQUFJLFlBQVkscUJBQXFCLE9BQU8sY0FBUCxDQUFzQixXQUF0QixDQUFyQzs7QUFFQSxvQkFBSSxnQkFBZ0IsbUJBQWhCLEVBQXFDLFFBQXJDLENBQUosRUFBb0Q7QUFDaEQ7QUFDQTtBQUNIOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQWEsZUFBZSxtQkFBNUI7O0FBRUE7QUFDQSxvQkFBSSxhQUFhLE9BQU8sY0FBUCxDQUFzQixRQUF0QixDQUFqQixFQUFrRDtBQUM5QztBQUNIOztBQUVELHlCQUFTLEdBQVQsQ0FBYSxRQUFiLEVBQXVCLFdBQXZCO0FBQ0EsdUJBQU8sR0FBUCxDQUFXLFFBQVgsRUFBcUIsU0FBckI7O0FBRUEsb0JBQU0sWUFBWSxZQUFZLGlCQUFpQixRQUFqQixFQUEyQixHQUEzQixDQUE5Qjs7QUFFQSxvQkFBSSxDQUFDLFVBQVUsR0FBVixDQUFjLFFBQWQsQ0FBTCxFQUE4QjtBQUMxQjtBQUNBLGdDQUFZLFFBQVosRUFBc0IsU0FBdEI7QUFDSDs7QUFFRDtBQUNBLDJCQUFXLFVBQVUsUUFBVixFQUFvQixTQUFwQixDQUFYO0FBQ0g7QUFDSjs7QUFFRCxZQUFJLFVBQVUsSUFBVixHQUFpQixZQUFyQixFQUFtQztBQUMvQixvQkFBUSxHQUFSLG1DQUE0QyxVQUFVLElBQXRELDZDQUFrRyxZQUFsRztBQUNBO0FBQ0g7QUFDSjtBQUNEOztBQUVBLFdBQU8sU0FBUDtBQUNIOztBQUVEOzs7OztBQUtBLFNBQVMsZUFBVCxDQUF5QixHQUF6QixFQUE4QixLQUE5QixFQUFxQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNqQyw2QkFBaUIsR0FBakIsOEhBQXNCO0FBQUEsZ0JBQWIsSUFBYTs7QUFDbEIsZ0JBQUksS0FBSyxDQUFMLEtBQVcsTUFBTSxDQUFqQixJQUFzQixLQUFLLENBQUwsS0FBVyxNQUFNLENBQTNDLEVBQThDO0FBQzFDLHVCQUFPLElBQVA7QUFDSDtBQUNKO0FBTGdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTWpDLFdBQU8sS0FBUDtBQUNIOztBQUVEOzs7Ozs7Ozs7O0FBVUEsU0FBUyxTQUFULE9BQTJCLFNBQTNCLEVBQXNDO0FBQUEsUUFBbEIsQ0FBa0IsUUFBbEIsQ0FBa0I7QUFBQSxRQUFmLENBQWUsUUFBZixDQUFlOztBQUNsQztBQUNBLFFBQU0sU0FBUztBQUNYLFdBQUcsYUFBTTtBQUNMLGlCQUFLLENBQUw7QUFDSCxTQUhVO0FBSVgsV0FBRyxhQUFNO0FBQ0wsaUJBQUssQ0FBTDtBQUNILFNBTlU7QUFPWCxXQUFHLGFBQU07QUFDTCxpQkFBSyxDQUFMO0FBQ0gsU0FUVTtBQVVYLFdBQUcsYUFBTTtBQUNMLGlCQUFLLENBQUw7QUFDSDtBQVpVLEtBQWY7O0FBZUEsV0FBTyxTQUFQOztBQUVBLFdBQU8sRUFBQyxJQUFELEVBQUksSUFBSixFQUFQO0FBQ0g7O0FBRUQ7Ozs7OztBQU1BLFNBQVMsZUFBVCxDQUF5QixRQUF6QixFQUFtQyxXQUFuQyxFQUFnRDtBQUM1QyxRQUFJLE9BQU8sRUFBWDs7QUFFQSxTQUFLLElBQUwsQ0FBVTtBQUNOLFdBQUcsWUFBWSxDQURUO0FBRU4sV0FBRyxZQUFZO0FBRlQsS0FBVjs7QUFLQSxXQUFPLFNBQVMsR0FBVCxDQUFhLFdBQWIsQ0FBUCxFQUFrQztBQUM5QixzQkFBYyxTQUFTLEdBQVQsQ0FBYSxXQUFiLENBQWQ7QUFDQSxhQUFLLElBQUwsQ0FBVTtBQUNOLGVBQUcsWUFBWSxDQURUO0FBRU4sZUFBRyxZQUFZO0FBRlQsU0FBVjtBQUlIOztBQUVELFdBQU8sSUFBUDtBQUNIOzs7Ozs7OztRQzNNZSwyQixHQUFBLDJCO1FBMENBLGEsR0FBQSxhO1FBa0JBLGlCLEdBQUEsaUI7O0FBbkVoQjs7Ozs7O0FBQXVEOztBQUV2RDs7Ozs7QUFLTyxTQUFTLDJCQUFULENBQXFDLEtBQXJDLEVBQTRDLElBQTVDLEVBQWtEO0FBQ3JELFFBQUksb0JBQW9CLFNBQXBCLGlCQUFvQixRQUFTO0FBQzdCO0FBQ0EsWUFBSSxRQUFRLE9BQU8sS0FBUCxJQUFnQixLQUE1QixDQUY2QixDQUVNOztBQUVuQyxjQUFNLEtBQU4sR0FBYyxLQUFLLEdBQUwsQ0FBUyxDQUFDLENBQVYsRUFBYSxLQUFLLEdBQUwsQ0FBUyxDQUFULEVBQWEsTUFBTSxVQUFOLElBQW9CLENBQUMsTUFBTSxNQUF4QyxDQUFiLENBQWQ7O0FBRUEsYUFBSyxLQUFMOztBQUVBLGVBQU8sS0FBUDtBQUNILEtBVEQ7O0FBV0EsUUFBSSxtQkFBSjs7QUFFQTtBQUNBLFFBQUcsTUFBTSxLQUFOLENBQVksUUFBWixDQUFILEVBQTBCO0FBQ3RCLHFCQUFhLFNBQVMsY0FBVCxDQUF3QixNQUFNLE1BQU4sQ0FBYSxDQUFiLENBQXhCLENBQWI7QUFDSCxLQUZELE1BRU87QUFDSCxxQkFBYSxTQUFTLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBYjtBQUNIOztBQUVELFFBQUksV0FBVyxnQkFBZixFQUFpQztBQUM3QjtBQUNBLG1CQUFXLGdCQUFYLENBQTRCLFlBQTVCLEVBQTBDLGlCQUExQyxFQUE2RCxLQUE3RDtBQUNBO0FBQ0EsbUJBQVcsZ0JBQVgsQ0FBNEIsZ0JBQTVCLEVBQThDLGlCQUE5QyxFQUFpRSxLQUFqRTtBQUNILEtBTEQsTUFLUTtBQUNKO0FBQ0EsbUJBQVcsV0FBWCxDQUF1QixjQUF2QixFQUF1QyxpQkFBdkM7QUFDSDtBQUNELGVBQVcsZ0JBQVgsQ0FBNEIsWUFBNUIsRUFBMEMsVUFBUyxDQUFULEVBQVk7QUFDbEQsZ0JBQVEsR0FBUixDQUFZLE9BQVosRUFBcUIsQ0FBckI7QUFDSCxLQUZELEVBRUcsS0FGSDtBQUdIOztBQUVEOzs7Ozs7O0FBOUNBOzs7O0FBcURPLFNBQVMsYUFBVCxDQUF1QixJQUF2QixFQUE4RDtBQUFBLFFBQWpDLE1BQWlDLHVFQUF4QixLQUF3QjtBQUFBLFFBQWpCLE9BQWlCLHVFQUFQLEtBQU87O0FBQ2pFLFFBQUcsT0FBSCxFQUFZO0FBQ1IsZUFBTyx5Q0FDRCxtQkFBbUIsY0FBYyxJQUFkLEVBQW9CLE1BQXBCLENBQW5CLENBRE47QUFFSCxLQUhELE1BR087QUFDSCxZQUFJLE1BQUosRUFDSSxPQUFPLDBDQUFVLElBQVYsRUFBZ0IsRUFBQyxXQUFXLEVBQVosRUFBaEIsQ0FBUDs7QUFFSixlQUFPLEtBQUssU0FBTCxDQUFlLElBQWYsQ0FBUDtBQUNIO0FBQ0o7O0FBRUQ7Ozs7OztBQU1PLFNBQVMsaUJBQVQsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsRUFBaUM7QUFDcEMsV0FBTyxLQUFLLEdBQUwsQ0FBUyxFQUFFLENBQUYsR0FBTSxFQUFFLENBQWpCLElBQXNCLEtBQUssR0FBTCxDQUFTLEVBQUUsQ0FBRixHQUFNLEVBQUUsQ0FBakIsQ0FBN0I7QUFDSDs7Ozs7Ozs7Ozs7OztBQ3pFRDs7QUFFQTs7OztBQUlBLElBQUksMkJBQUo7O0FBRUE7Ozs7OztJQUtxQixFO0FBQ2pCLGdCQUFjO0FBQUE7O0FBQ1YsUUFBRyxDQUFDLGtCQUFKLEVBQXVCO0FBQ25CLDJCQUFxQixJQUFyQjtBQUNIOztBQUVEOzs7O0FBSUEsU0FBSyxNQUFMLEdBQWMsSUFBZDs7QUFFQTs7OztBQUlBLFNBQUssTUFBTCxHQUFjLENBQWQ7O0FBRUEsV0FBTyxrQkFBUDtBQUNIOztBQUVEOzs7Ozs7Ozt3QkFJYTtBQUNULFVBQUksU0FBUyxLQUFLLE1BQUwsR0FBYyxLQUFLLE1BQWhDOztBQUVBO0FBQ0E7QUFDQSxhQUFNLEVBQUUsTUFBSSxNQUFOLEVBQWMsTUFBcEIsRUFBNEI7QUFDeEIsYUFBSyxNQUFMO0FBQ0EsaUJBQVMsS0FBSyxRQUFMLEVBQVQ7QUFDSDtBQUNEO0FBQ0EsV0FBSyxNQUFMOztBQUVBLGFBQU8sTUFBUDtBQUNIOzs7Ozs7a0JBdENnQixFOzs7Ozs7Ozs7a0JDb0JOLFVBQVMsWUFBVCxFQUF1QjtBQUNsQyxRQUFJLE1BQU0sSUFBSSxHQUFKLEVBQVY7QUFDQTs7OztBQUlBLFFBQUksY0FBSixHQUFxQixVQUFDLEdBQUQsRUFBUztBQUMxQixlQUFPLElBQUksR0FBSixDQUFRLEdBQVIsSUFDRCxJQUFJLEdBQUosQ0FBUSxHQUFSLENBREMsR0FFRCxZQUZOO0FBR0gsS0FKRDtBQUtBLFdBQU8sR0FBUDtBQUNILEM7Ozs7Ozs7Ozs7Ozs7O2tEQzFDUSxPOzs7Ozs7Ozs7bURBQ0EsTzs7Ozs7Ozs7OzRDQUdBLE87Ozs7Ozs7OzswQ0FDQSxPOzs7Ozs7Ozs7OENBR0EsTzs7Ozs7Ozs7OzZDQUNBLE87Ozs7Ozs7Ozs2Q0FDQSxPOzs7Ozs7Ozs7eUNBRUEsTzs7Ozs7Ozs7O2tEQUNBLE87Ozs7Ozs7Ozs7Ozs7OztBQ2hCVDs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUE7Ozs7O0lBS3FCLEs7OztBQUNqQixxQkFBYztBQUFBOztBQUFBLGtIQUNKLEdBREk7O0FBR1YsY0FBSyxRQUFMLEdBQWdCLEVBQWhCO0FBSFU7QUFJYjs7QUFFRDs7Ozs7Ozs7aUNBSVMsRSxFQUFJO0FBQ1QsaUJBQUssUUFBTCxDQUFjLElBQWQsQ0FBbUIsRUFBbkI7O0FBRUEsaUJBQUssR0FBTCxDQUFTLE1BQVQsQ0FBZ0IsR0FBRyxHQUFuQjtBQUNBLG1CQUFPLEVBQVAsQ0FKUyxDQUlFO0FBQ2Q7Ozs7OztrQkFoQmdCLEs7Ozs7Ozs7OztBQ1RyQjs7OztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7O0lBZXFCLGE7OztBQUNqQjs7Ozs7Ozs7OztBQVVBLDJCQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQXFEO0FBQUEsWUFBakIsS0FBaUIsdUVBQVQsT0FBUzs7QUFBQTs7QUFBQSxrSUFDM0MsUUFEMkM7O0FBR2pELFlBQUksZ0JBQWdCLGtCQUFRLGVBQVIsQ0FBcEI7QUFDQSxZQUFJLGtCQUFrQixtQkFBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUIsSUFBckIsRUFBMkIsSUFBM0IsRUFBaUMsS0FBakMsQ0FBdEI7O0FBRUEsc0JBQWMsT0FBZCxDQUFzQjtBQUNsQixnQkFEa0I7QUFFbEIsZ0JBRmtCO0FBR2xCLG1CQUFPLENBSFc7QUFJbEIsb0JBQVE7QUFKVSxTQUF0Qjs7QUFPQSxZQUFJLFdBQVcsRUFBRSxPQUFGLEVBQ1YsSUFEVSxDQUNMLE9BREssRUFDSSw4QkFESixFQUVWLFFBRlUsQ0FFRCxlQUZDLEVBR1YsR0FIVSxDQUdOLFFBSE0sRUFHSSxDQUhKLENBQWY7O0FBS0EsWUFBSSxhQUFhLEVBQUUsS0FBRixFQUNaLElBRFksQ0FDUCxPQURPLEVBQ0UsOEJBREYsRUFFWixHQUZZLENBRVIsV0FGUSxFQUVLLElBRkwsRUFHWixNQUhZLENBR0wsSUFISyxDQUFqQjs7QUFLQSxpQkFBUyxNQUFULENBQWdCLFVBQWhCO0FBQ0Esc0JBQWMsR0FBZCxDQUFrQixNQUFsQixDQUF5QixRQUF6Qjs7QUFFQSxjQUFLLEdBQUwsQ0FBUyxNQUFULENBQ0ksY0FBYyxHQURsQixFQUVFLE1BRkYsQ0FHSSxnQkFBZ0IsR0FIcEI7QUExQmlEO0FBK0JwRDs7Ozs7a0JBMUNnQixhOzs7Ozs7Ozs7OztBQ3BCckI7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBOzs7O0lBSXFCLE87OztBQUNqQjs7Ozs7QUFLQSxxQkFBWSxFQUFaLEVBQWdCLEtBQWhCLEVBQXVCLE1BQXZCLEVBQStCO0FBQUE7O0FBQUEsc0hBQ3JCLFNBRHFCOztBQUczQixjQUFLLE9BQUwsQ0FBYTtBQUNULGdCQUFJLEVBREs7QUFFVCxlQUFHLENBRk07QUFHVCxlQUFHLENBSE07QUFJVCxtQkFBTyxLQUpFO0FBS1Qsb0JBQVEsTUFMQztBQU1ULDBCQUFjLGdCQU5MO0FBT1QscUJBQVMsU0FBTyxLQUFQLEdBQWEsR0FBYixHQUFpQjtBQVBqQixTQUFiO0FBSDJCO0FBWTlCOztBQUVEOzs7Ozs7Ozs7OztpQ0FPUyxFLEVBQUk7QUFDVCxpQkFBSyxHQUFMLENBQVMsTUFBVCxDQUFnQixHQUFHLEdBQW5CO0FBQ0EsbUJBQU8sRUFBUDtBQUNIOzs7Ozs7a0JBOUJnQixPOzs7Ozs7Ozs7OztBQ1JyQjs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUE7Ozs7SUFJcUIsUTs7O0FBQ2pCOzs7OztBQUtBLHNCQUFZLE1BQVosRUFBb0IsV0FBcEIsRUFBaUMsS0FBakMsRUFBd0M7QUFBQTs7QUFBQSx3SEFDOUIsVUFEOEI7O0FBR3BDLFlBQUksYUFBYTtBQUNiLG9CQUFRLE9BQU8sTUFERjtBQUViLGtCQUFNLE1BRk87QUFHYiw0QkFBZ0I7QUFISCxTQUFqQjs7QUFNQSxZQUFHLFVBQVEsU0FBWCxFQUFzQjtBQUNsQix1QkFBVyxNQUFYLEdBQW9CLEtBQXBCO0FBQ0g7O0FBRUQsY0FBSyxPQUFMLENBQWEsVUFBYjtBQWJvQztBQWN2Qzs7QUFFRDs7Ozs7Ozs7cUNBSWEsTSxFQUFRO0FBQ2pCLGlCQUFLLE9BQUwsQ0FBYTtBQUNULHdCQUFRLE9BQU87QUFETixhQUFiO0FBR0g7Ozs7OztrQkE5QmdCLFE7Ozs7Ozs7Ozs7Ozs7QUNSckI7O0FBRUE7OztJQUdxQixhO0FBQ2pCOzs7O0FBSUEsMkJBQVksQ0FBWixFQUFlLENBQWYsRUFBa0I7QUFBQTs7QUFDZCxhQUFLLENBQUwsR0FBUyxDQUFUO0FBQ0EsYUFBSyxDQUFMLEdBQVMsQ0FBVDtBQUNBLFlBQUcsTUFBTSxTQUFOLElBQW1CLE1BQU0sU0FBNUIsRUFBdUM7QUFDbkMsaUJBQUssQ0FBTCxHQUFTLENBQVQ7QUFDQSxpQkFBSyxDQUFMLEdBQVMsQ0FBVDtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7Ozs0QkFLSSxDLEVBQUcsQyxFQUFHO0FBQ04saUJBQUssQ0FBTCxHQUFTLENBQVQ7QUFDQSxpQkFBSyxDQUFMLEdBQVMsQ0FBVDtBQUNIOztBQUVEOzs7Ozs7Ozs7O0FBVUE7Ozs7NEJBSWE7QUFDVCxtQkFBTyxLQUFLLENBQUwsR0FBUyxHQUFULEdBQWUsS0FBSyxDQUEzQjtBQUNIOztBQUVEOzs7Ozs7Ozs7d0NBYnVCLE0sRUFBUTtBQUMzQixnQkFBSSxNQUFNLE9BQU8sS0FBUCxDQUFhLEdBQWIsQ0FBVjtBQUNBLG1CQUFPLElBQUksYUFBSixDQUFrQixJQUFJLENBQUosQ0FBbEIsRUFBMEIsSUFBSSxDQUFKLENBQTFCLENBQVA7QUFDSDs7OytCQWdCYSxDLEVBQUcsQyxFQUFHO0FBQ2hCLG1CQUFPLEVBQUUsQ0FBRixLQUFRLEVBQUUsQ0FBVixJQUFlLEVBQUUsQ0FBRixLQUFRLEVBQUUsQ0FBaEM7QUFDSDs7Ozs7O2tCQWxEZ0IsYTs7Ozs7Ozs7Ozs7OztBQ0xyQjs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUE7OztJQUdNLFU7QUFDRjs7O0FBR0Esd0JBQVksR0FBWixFQUFpQjtBQUFBOztBQUNiLFlBQUcsUUFBUSxTQUFYLEVBQXNCO0FBQ2xCLGlCQUFLLEdBQUwsR0FBVyxHQUFYO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsaUJBQUssR0FBTCxHQUFXLEVBQVg7QUFDSDtBQUNKOztBQUVEOzs7Ozs7OzsrQkFJTztBQUNILG1CQUFPLFdBQVcsRUFBRSxNQUFGLENBQVMsSUFBVCxFQUFlLEVBQWYsRUFBbUIsS0FBSyxHQUF4QixDQUFYLENBQVA7QUFDSDs7QUFFRDs7Ozs7OzsrQkFJTyxJLEVBQU07QUFDVCxtQkFBTyxLQUFLLFlBQUwsQ0FBa0IsSUFBbEIsRUFBd0IsS0FBSyxHQUFMLENBQVMsTUFBakMsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7O2dDQUlRLEksRUFBTTtBQUNWLG1CQUFPLEtBQUssWUFBTCxDQUFrQixJQUFsQixFQUF3QixDQUF4QixDQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7O3FDQUthLEksRUFBTSxLLEVBQU87QUFDdEIsaUJBQUksSUFBSSxJQUFJLEtBQUssR0FBTCxDQUFTLE1BQXJCLEVBQThCLElBQUksS0FBbEMsRUFBMEMsRUFBRSxDQUE1QyxFQUErQztBQUMzQyxxQkFBSyxHQUFMLENBQVMsQ0FBVCxJQUFjLEtBQUssR0FBTCxDQUFTLElBQUUsQ0FBWCxDQUFkO0FBQ0g7QUFDRCxpQkFBSyxHQUFMLENBQVMsS0FBVCxJQUFrQixJQUFsQjtBQUNBLG1CQUFPLElBQVAsQ0FMc0IsQ0FLVDtBQUNoQjs7QUFFRDs7Ozs7Ozs7O0FBUUE7Ozs7O2dDQUtRLEssRUFBTztBQUNYLG1CQUFPLEtBQUssR0FBTCxDQUFTLEtBQVQsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7OztBQXNCQTs7OzsrQkFJTyxLLEVBQU87QUFDVixnQkFBSSxTQUFTLEtBQUssTUFBbEI7O0FBRUEsaUJBQUksSUFBSSxJQUFJLEtBQVosRUFBb0IsSUFBSSxNQUF4QixFQUFpQyxFQUFFLENBQW5DLEVBQXNDO0FBQ2xDLHFCQUFLLEdBQUwsQ0FBUyxDQUFULElBQWMsS0FBSyxHQUFMLENBQVMsSUFBSSxDQUFiLENBQWQ7QUFDSDtBQUNELGlCQUFLLEdBQUwsQ0FBUyxHQUFUO0FBQ0g7Ozs0QkE5Q1k7QUFDVCxtQkFBTyxLQUFLLEdBQUwsQ0FBUyxNQUFoQjtBQUNIOzs7NEJBY1U7QUFDUCxnQkFBRyxLQUFLLE1BQUwsS0FBYyxDQUFqQixFQUFvQjtBQUNoQix1QkFBTyxLQUFLLEdBQUwsQ0FBUyxLQUFLLE1BQUwsR0FBYyxDQUF2QixDQUFQO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsdUJBQU8sS0FBUDtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs0QkFHWTtBQUNSLGdCQUFHLEtBQUssTUFBTCxLQUFjLENBQWpCLEVBQW9CO0FBQ2hCLHVCQUFPLEtBQUssR0FBTCxDQUFTLENBQVQsQ0FBUDtBQUNILGFBRkQsTUFFTztBQUNILHVCQUFPLEtBQVA7QUFDSDtBQUNKOzs7Ozs7QUFnQkw7Ozs7OztJQUlxQixjOzs7QUFDakI7OztBQUdBLDRCQUFZLEdBQVosRUFBaUI7QUFBQTs7QUFBQSwrSEFDUCxHQURPO0FBRWhCOztBQUVEOzs7Ozs7OzsrQkFJTztBQUNILG1CQUFPLElBQUksY0FBSixDQUFtQixFQUFFLE1BQUYsQ0FBUyxJQUFULEVBQWUsRUFBZixFQUFtQixLQUFLLEdBQXhCLENBQW5CLENBQVA7QUFDSDs7QUFFRDs7Ozs7OzsrQkFJTyxLLEVBQU87QUFDVjtBQUNBLG1JQUFhLEtBQWI7O0FBRUE7QUFDQSxnQkFBSSxTQUFTLEtBQUssTUFBbEI7QUFDQSxnQkFBSyxVQUFVLENBQVYsS0FDYSxLQUFLLE9BQUwsQ0FBYSxTQUFTLENBQXRCLEVBQXlCLENBQXpCLEtBQStCLEtBQUssT0FBTCxDQUFhLFNBQVMsQ0FBdEIsRUFBeUIsQ0FBeEQsSUFDQSxLQUFLLE9BQUwsQ0FBYSxTQUFTLENBQXRCLEVBQXlCLENBQXpCLEtBQStCLEtBQUssT0FBTCxDQUFhLFNBQVMsQ0FBdEIsRUFBeUIsQ0FEMUQsSUFFRSxLQUFLLE9BQUwsQ0FBYSxTQUFTLENBQXRCLEVBQXlCLENBQXpCLEtBQStCLEtBQUssT0FBTCxDQUFhLFNBQVMsQ0FBdEIsRUFBeUIsQ0FBeEQsSUFDQSxLQUFLLE9BQUwsQ0FBYSxTQUFTLENBQXRCLEVBQXlCLENBQXpCLEtBQStCLEtBQUssT0FBTCxDQUFhLFNBQVMsQ0FBdEIsRUFBeUIsQ0FKckUsQ0FBTCxFQU9BO0FBQ0kscUJBQUssTUFBTCxDQUFZLFNBQVMsQ0FBckI7QUFDSDs7QUFFRDtBQUNBLG1CQUFPLElBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7OztBQStCQTs7OztnQ0FJUSxJLEVBQU07QUFDVixpQkFBSSxJQUFJLElBQUksQ0FBWixFQUFnQixJQUFJLEtBQUssR0FBTCxDQUFTLE1BQTdCLEVBQXNDLEVBQUUsQ0FBeEMsRUFBMkM7QUFDdkMscUJBQUssS0FBSyxHQUFMLENBQVMsQ0FBVCxDQUFMO0FBQ0g7QUFDSjs7Ozs7QUF2QkQ7Ozs7NEJBSWE7QUFDVCxnQkFBSSxTQUFTLEVBQWI7QUFDQSxpQkFBSSxJQUFJLElBQUksQ0FBWixFQUFnQixJQUFJLEtBQUssTUFBekIsRUFBa0MsRUFBRSxDQUFwQyxFQUF1QztBQUNuQyxvQkFBRyxNQUFNLENBQVQsRUFBWTtBQUNSLDhCQUFVLEdBQVY7QUFDSDtBQUNELDBCQUFVLEtBQUssR0FBTCxDQUFTLENBQVQsRUFBWSxNQUF0QjtBQUNIO0FBQ0QsbUJBQU8sTUFBUDtBQUNIOzs7d0NBeEJzQixNLEVBQVE7QUFDM0IsZ0JBQUksZUFBZSxPQUFPLEtBQVAsQ0FBYSxHQUFiLENBQW5CO0FBQ0EsZ0JBQUksU0FBUyxJQUFJLGNBQUosRUFBYjs7QUFFQSxpQkFBSSxJQUFJLElBQUksQ0FBWixFQUFnQixJQUFJLGFBQWEsTUFBakMsRUFBMEMsRUFBRSxDQUE1QyxFQUErQztBQUMzQyx1QkFBTyxNQUFQLENBQWMsd0JBQWMsZUFBZCxDQUE4QixhQUFhLENBQWIsQ0FBOUIsQ0FBZDtBQUNIOztBQUVELG1CQUFPLE1BQVA7QUFDSDs7OztFQXZEdUMsVTs7a0JBQXZCLGM7Ozs7Ozs7OztBQ2pIckI7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBOzs7O0lBSXFCLFM7OztBQUNqQjs7Ozs7Ozs7QUFRQSx1QkFBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixJQUF4QixFQUE4QixNQUE5QixFQUFzQztBQUFBOztBQUFBLDBIQUM1QixDQUQ0QixFQUN6QixDQUR5QixFQUN0QixDQURzQixFQUNuQixDQURtQixFQUNoQixNQURnQjs7QUFFbEMsY0FBSyxPQUFMLENBQWE7QUFDVCxrQkFBTSxJQURHO0FBRVQsb0JBQVEsTUFGQztBQUdULDRCQUFnQixHQUhQO0FBSVQsOEJBQWtCLEtBSlQsQ0FJZTtBQUpmLFNBQWI7QUFGa0M7QUFRckM7Ozs7O2tCQWpCZ0IsUzs7Ozs7Ozs7O0FDUnJCOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7OztJQUlxQixVOzs7QUFDakI7Ozs7Ozs7QUFPQSx3QkFBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixPQUF4QixFQUFpQztBQUFBOztBQUFBLDRIQUN2QixPQUR1Qjs7QUFHN0IsY0FBSyxPQUFMLENBQWE7QUFDVCxlQUFHLENBRE07QUFFVCxlQUFHLENBRk07QUFHVCxtQkFBTyxDQUhFO0FBSVQsb0JBQVE7QUFKQyxTQUFiO0FBSDZCO0FBU2hDOzs7OztrQkFqQmdCLFU7Ozs7Ozs7Ozs7O0FDUnJCOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7OztJQUlxQixROzs7QUFDakIsc0JBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsR0FBeEIsRUFBNkI7QUFBQTs7QUFBQSx3SEFDbkIsQ0FEbUIsRUFDaEIsQ0FEZ0IsRUFDYixDQURhLEVBQ1YsQ0FEVSxFQUNQLE9BRE87O0FBRXpCLGNBQUssT0FBTCxDQUFhO0FBQ1QsMEJBQWM7QUFETCxTQUFiO0FBRnlCO0FBSzVCOztBQUVEOzs7Ozs7OztrQ0FJVSxHLEVBQUs7QUFDWCxpQkFBSyxPQUFMLENBQWE7QUFDVCw4QkFBYztBQURMLGFBQWI7QUFHSDs7Ozs7O2tCQWhCZ0IsUTs7Ozs7Ozs7Ozs7QUNSckI7Ozs7Ozs7O0FBRUE7O0FBRUE7OztJQUdxQixHO0FBQ2pCOzs7QUFHQSxlQUFZLE9BQVosRUFBcUI7QUFBQTs7QUFDakI7Ozs7QUFJQSxTQUFLLE9BQUwsR0FBZSxPQUFmOztBQUVBOzs7O0FBSUEsU0FBSyxHQUFMLEdBQVcsRUFBRSxNQUFJLEtBQUssT0FBVCxHQUFpQixHQUFuQixDQUFYOztBQUVBOzs7O0FBSUEsU0FBSyxFQUFMLEdBQVUsbUJBQVMsTUFBbkI7QUFDSDs7QUFFRDs7Ozs7Ozs7NkJBSVMsSSxFQUFNO0FBQ1gsV0FBSyxHQUFMLENBQVMsUUFBVCxDQUFrQixJQUFsQjtBQUNIOztBQUVEOzs7Ozs7O29DQUkwQjtBQUFBLHdDQUFULE9BQVM7QUFBVCxlQUFTO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ3RCLDZCQUFnQixPQUFoQiw4SEFBeUI7QUFBQSxjQUFqQixJQUFpQjs7QUFDckIsZUFBSyxHQUFMLENBQVMsV0FBVCxDQUFxQixJQUFyQjtBQUNIO0FBSHFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJekI7O0FBRUQ7Ozs7Ozs7NEJBSVEsSyxFQUFPO0FBQ1gsV0FBSyx5QkFBTDs7QUFFQTtBQUNBLFdBQUssR0FBTCxDQUFTLElBQVQsQ0FBYyxLQUFkO0FBQ0g7O0FBRUQ7Ozs7Ozs7OzRCQUtRLEksRUFBTTtBQUNWLFdBQUsseUJBQUw7O0FBRUEsYUFBTyxLQUFLLEdBQUwsQ0FBUyxJQUFULENBQWMsSUFBZCxDQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7K0JBSVcsSSxFQUFNO0FBQ2IsV0FBSyx5QkFBTDs7QUFFQSxXQUFLLEdBQUwsQ0FBUyxVQUFULENBQW9CLElBQXBCO0FBQ0g7O0FBRUQ7Ozs7Ozs7OztBQWdCQTs7OzswQkFJTTtBQUNGLFdBQUsseUJBQUw7QUFDQSxhQUFPLEtBQUssR0FBWjtBQUNIOztBQUVEOzs7Ozs7Z0RBRzRCO0FBQ3hCLFVBQUksYUFBYSxFQUFFLE1BQUksS0FBSyxHQUFMLENBQVMsSUFBVCxDQUFjLElBQWQsQ0FBTixDQUFqQjtBQUNBLFVBQUcsV0FBVyxNQUFkLEVBQXNCO0FBQ2xCLGFBQUssR0FBTCxHQUFXLFVBQVg7QUFDSDtBQUNKOzs7c0JBN0JNLEUsRUFBSTtBQUNQLFdBQUssT0FBTCxDQUFhLEVBQUMsTUFBTSxFQUFQLEVBQWI7QUFDSDs7QUFFRDs7Ozs7d0JBSVM7QUFDTCxhQUFPLEtBQUssT0FBTCxDQUFhLElBQWIsQ0FBUDtBQUNIOzs7Ozs7a0JBeEZnQixHOzs7Ozs7Ozs7QUNQckI7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBOzs7O0lBSXFCLEk7OztBQUNqQjs7Ozs7Ozs7OztBQVVBLGtCQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQXFEO0FBQUEsWUFBakIsS0FBaUIsdUVBQVQsT0FBUzs7QUFBQTs7QUFBQSxnSEFDM0MsTUFEMkM7O0FBRWpELGNBQUssT0FBTCxDQUFhO0FBQ1QsZUFBRyxDQURNO0FBRVQsZUFBRyxDQUZNO0FBR1QsbUJBQU8sQ0FIRTtBQUlULG9CQUFRLENBSkM7QUFLVCxrQkFBTTtBQUxHLFNBQWI7O0FBUUEsWUFBRyxJQUFILEVBQVM7QUFDTCxrQkFBSyxPQUFMLENBQWE7QUFDVCw2QkFBYTtBQURKLGFBQWI7QUFHSDs7QUFFRCxjQUFLLEdBQUwsQ0FBUyxNQUFULENBQWdCLElBQWhCO0FBaEJpRDtBQWlCcEQ7Ozs7O2tCQTVCZ0IsSTs7Ozs7Ozs7Ozs7QUNSckI7O0FBS0E7Ozs7Ozs7O0FBRUE7OztJQUdNLGU7QUFDRjs7Ozs7QUFLQSw2QkFBWSxJQUFaLEVBQWtCLFdBQWxCLEVBQStCLGFBQS9CLEVBQThDO0FBQUE7O0FBQUE7O0FBQzFDOzs7O0FBSUEsYUFBSyxJQUFMLEdBQVksSUFBWjs7QUFFQTs7OztBQUlBLGFBQUssV0FBTCxHQUFtQixXQUFuQjs7QUFFQTs7OztBQUlBLGFBQUssR0FBTCxHQUFXLEVBQUUsTUFBRixFQUFVLElBQVYsQ0FBZSxJQUFmLENBQVg7O0FBRUE7QUFDQSxZQUFHLGtCQUFnQixTQUFuQixFQUE4QjtBQUMxQixjQUFFLEtBQUssR0FBUCxFQUFZLEtBQVosQ0FDSSxVQUFDLEtBQUQsRUFBVztBQUNQO0FBQ0EsNEJBQVksSUFBWjs7QUFFQSxzQkFBTSxlQUFOO0FBQ0gsYUFOTDtBQVFIOztBQUVEOzs7O0FBSUEsYUFBSyxRQUFMLEdBQWdCLFNBQWhCOztBQUVBOzs7O0FBSUEsYUFBSyxTQUFMLEdBQWlCLENBQWpCOztBQUVBO0FBQ0EsVUFBRSxLQUFLLEdBQVAsRUFBWSxLQUFaLENBQWtCLFVBQUMsS0FBRCxFQUFXO0FBQ3pCOztBQUVBLGdCQUFHLE1BQUssTUFBTCxHQUFjLENBQWpCLEVBQW9CO0FBQ2hCLHNCQUFLLFFBQUwsQ0FBYyxHQUFkLENBQWtCO0FBQ2QsNkJBQVMsT0FESztBQUVkLHlCQUFLLE1BQUssR0FBTCxDQUFTLE1BQVQsR0FBa0IsR0FGVDtBQUdkLDBCQUFNLE1BQUssR0FBTCxDQUFTLE1BQVQsR0FBa0IsTUFBbEIsR0FBMkIsSUFBM0IsR0FBa0MsTUFBSyxHQUFMLENBQVMsTUFBVCxHQUFrQixLQUFsQjtBQUgxQixpQkFBbEI7O0FBTUEsc0JBQUssV0FBTCxDQUFpQixHQUFqQixDQUFxQixLQUFyQixDQUEyQixNQUFLLFFBQWhDOztBQUVBLHNCQUFNLGVBQU47QUFDSDtBQUNKLFNBZEQsRUFjRyxZQUFNO0FBQ0w7QUFDQSxnQkFBRyxNQUFLLFFBQVIsRUFBa0I7QUFDZCxzQkFBSyxRQUFMLENBQWMsR0FBZCxDQUFrQjtBQUNkLDZCQUFTO0FBREssaUJBQWxCO0FBR0g7O0FBRUQ7QUFDQTtBQUNILFNBeEJEO0FBeUJIOztBQUVEOzs7Ozs7Ozs7O0FBZ0JBOzs7O2lDQUlTLEcsRUFBSztBQUNWLGlCQUFLLEdBQUwsQ0FBUyxRQUFULENBQWtCLEdBQWxCO0FBQ0EsbUJBQU8sSUFBUDtBQUNIOztBQUVEOzs7Ozs7O21DQUlXLEksRUFBTTtBQUFBOztBQUNiLGdCQUFHLENBQUMsS0FBSyxRQUFULEVBQW1CO0FBQ2YscUJBQUssUUFBTCxHQUFnQixFQUFFLE1BQUYsRUFBVSxRQUFWLENBQW1CLFNBQW5CLENBQWhCO0FBQ0EscUJBQUssUUFBTCxDQUFjLEtBQWQsQ0FBb0IsWUFBTTtBQUN0QiwyQkFBSyxRQUFMLENBQWMsR0FBZCxDQUFrQixTQUFsQixFQUE2QixPQUE3QjtBQUNILGlCQUZELEVBRUcsWUFBTTtBQUNMLDJCQUFLLFFBQUwsQ0FBYyxHQUFkLENBQWtCLFNBQWxCLEVBQTZCLE1BQTdCO0FBQ0gsaUJBSkQ7QUFLSDtBQUNELGlCQUFLLFFBQUwsQ0FBYyxNQUFkLENBQXFCLEtBQUssR0FBMUI7O0FBRUEsaUJBQUssU0FBTDs7QUFFQSxtQkFBTyxJQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7NEJBekNnQjtBQUNaLG1CQUFPLEtBQUssV0FBTCxDQUFpQixTQUF4QjtBQUNIOztBQUVEOzs7Ozs7OzRCQUlhO0FBQ1QsbUJBQU8sS0FBSyxTQUFaO0FBQ0g7Ozs0QkFtQ1k7QUFDVCxtQkFBTyxLQUFLLEdBQVo7QUFDSDs7OzRCQUVtQjtBQUNoQixtQkFBTyxLQUFLLFFBQVo7QUFDSDs7Ozs7O0FBR0w7Ozs7OztJQUlNLFk7OztBQUNGOzs7O0FBSUEsMEJBQVksSUFBWixFQUFrQixXQUFsQixFQUErQjtBQUFBOztBQUFBOztBQUFBLG9JQUVwQixLQUFLLFdBQUwsRUFGb0IsWUFHdkIsV0FIdUIsRUFJdkIsWUFBTTtBQUNGLG1CQUFLLFNBQUwsQ0FBZSxPQUFmLENBQ0ksSUFESixFQUVJLE9BQUssU0FBTCxDQUFlLFVBQWYsQ0FBMEIsT0FBSyxTQUFMLENBQWUsT0FBZixDQUF1QixVQUF2QixDQUFrQyxZQUFZLFFBQVosQ0FBcUIsQ0FBdkQsQ0FBMUIsQ0FGSixFQUdJLE9BQUssU0FBTCxDQUFlLFVBQWYsQ0FBMEIsT0FBSyxTQUFMLENBQWUsT0FBZixDQUF1QixVQUF2QixDQUFrQyxZQUFZLFFBQVosQ0FBcUIsQ0FBdkQsQ0FBMUIsQ0FISjtBQUtILFNBVnNCO0FBWTlCOzs7RUFqQnNCLGU7O0FBb0IzQjs7Ozs7O0lBSU0sZ0I7OztBQUNGLDhCQUFZLElBQVosRUFBa0IsSUFBbEIsRUFBd0IsV0FBeEIsRUFBcUM7QUFBQTs7QUFBQTs7QUFBQSw0SUFFN0IsSUFGNkIsRUFHN0IsV0FINkIsRUFJN0IsWUFBTTtBQUNGLHVEQUFzQixJQUF0QixFQUE0QixJQUE1QixDQUFpQyxnQkFBc0I7QUFBQSxvQkFBcEIsUUFBb0IsUUFBcEIsUUFBb0I7QUFBQSxvQkFBVixJQUFVLFFBQVYsSUFBVTtBQUFBLG9CQUM1QyxNQUQ0QyxHQUNsQixRQURrQixDQUM1QyxNQUQ0QztBQUFBLG9CQUNwQyxPQURvQyxHQUNsQixRQURrQixDQUNwQyxPQURvQztBQUFBLG9CQUMzQixLQUQyQixHQUNsQixRQURrQixDQUMzQixLQUQyQjs7QUFHbkQ7O0FBQ0Esb0JBQUksV0FBVyxTQUFTLElBQVQsSUFBaUIsSUFBaEM7O0FBRUEsdUJBQUssU0FBTCxDQUFlLFdBQWYsQ0FDSSxNQURKLEVBRUksT0FGSixFQUdJLEtBSEosRUFJSSxRQUpKLEVBS0ksT0FBSyxTQUFMLENBQWUsVUFBZixDQUEwQixPQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLFVBQXZCLENBQWtDLFlBQVksUUFBWixDQUFxQixDQUF2RCxDQUExQixDQUxKLEVBTUksT0FBSyxTQUFMLENBQWUsVUFBZixDQUEwQixPQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLFVBQXZCLENBQWtDLFlBQVksUUFBWixDQUFxQixDQUF2RCxDQUExQixDQU5KO0FBUUgsYUFkRCxFQWNHLEtBZEgsQ0FjUyxpQkFBUztBQUNkLHdCQUFRLEtBQVIsQ0FBYyxLQUFkO0FBQ0gsYUFoQkQ7QUFpQkgsU0F0QjRCO0FBd0JwQzs7O0VBekIwQixlOztBQTRCL0I7Ozs7OztJQUlNLGU7OztBQUNGLDZCQUFZLElBQVosRUFBa0IsSUFBbEIsRUFBd0IsV0FBeEIsRUFBcUM7QUFBQTs7QUFBQTs7QUFBQSwwSUFFN0IsSUFGNkIsRUFHN0IsV0FINkIsRUFJN0IsWUFBTTtBQUNGLHVEQUFzQixJQUF0QixFQUE0QixJQUE1QixDQUFpQyxnQkFBUTtBQUNyQyx1QkFBSyxTQUFMLENBQWUsVUFBZixDQUNJLElBREosRUFFSSxLQUFLLEtBQUwsQ0FBVyxPQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLFVBQXZCLENBQWtDLFlBQVksUUFBWixDQUFxQixDQUF2RCxJQUE0RCxPQUFLLFNBQUwsQ0FBZSxRQUF0RixDQUZKLEVBR0ksS0FBSyxLQUFMLENBQVcsT0FBSyxTQUFMLENBQWUsT0FBZixDQUF1QixVQUF2QixDQUFrQyxZQUFZLFFBQVosQ0FBcUIsQ0FBdkQsSUFBNEQsT0FBSyxTQUFMLENBQWUsUUFBdEYsQ0FISixFQUlFLElBSkYsQ0FJTyxvQkFBWTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNmLDZDQUFzQixRQUF0Qiw4SEFBZ0M7QUFBQSxnQ0FBckIsT0FBcUI7O0FBQzVCLG1DQUFLLFNBQUwsQ0FBZSxRQUFmLENBQXdCLGlCQUF4QixDQUEwQyxPQUExQztBQUNIO0FBSGM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUlsQixpQkFSRDtBQVNILGFBVkQsRUFVRyxLQVZILENBVVMsaUJBQVM7QUFDZCx1QkFBSyxTQUFMLENBQWUsUUFBZixDQUF3QixlQUF4QixDQUF3QyxLQUF4QztBQUNILGFBWkQ7QUFhSCxTQWxCNEI7QUFvQnBDOzs7RUFyQnlCLGU7O0FBd0I5QjtBQUNBOzs7Ozs7O0lBS3FCLFc7QUFDakI7OztBQUdBLHlCQUFZLFNBQVosRUFBdUI7QUFBQTs7QUFBQTs7QUFDbkI7Ozs7QUFJQSxhQUFLLFNBQUwsR0FBaUIsU0FBakI7O0FBRUE7Ozs7QUFJQSxhQUFLLFFBQUwsR0FBZ0I7QUFDWixlQUFHLENBRFMsRUFDTixHQUFHO0FBREcsU0FBaEI7O0FBSUE7Ozs7QUFJQSxhQUFLLEdBQUwsR0FBVyxFQUFFLE1BQUYsQ0FBWDtBQUNBLGFBQUssR0FBTCxDQUFTLElBQVQsQ0FBYyxJQUFkLEVBQW9CLGFBQXBCOztBQUVBLFlBQUksVUFBVSxJQUFJLGVBQUosQ0FBb0Isa0JBQXBCLEVBQXdDLElBQXhDLENBQWQ7O0FBRUE7QUFDQSxnQkFBUSxVQUFSLENBQ0ksSUFBSSxlQUFKLENBQW9CLFdBQXBCLEVBQWlDLElBQWpDLEVBQ0ksWUFBTTtBQUNGLGdCQUFJLFdBQVc7QUFDWCxzQkFBTSxPQUFLLFNBQUwsQ0FBZSxVQUFmLENBQTBCLFVBQVUsT0FBVixDQUFrQixVQUFsQixDQUE2QixPQUFLLFFBQUwsQ0FBYyxDQUEzQyxDQUExQixDQURLO0FBRVgscUJBQUssT0FBSyxTQUFMLENBQWUsVUFBZixDQUEwQixVQUFVLE9BQVYsQ0FBa0IsVUFBbEIsQ0FBNkIsT0FBSyxRQUFMLENBQWMsQ0FBM0MsQ0FBMUI7QUFGTSxhQUFmOztBQUtBLHNCQUFVLFFBQVYsQ0FBbUIsU0FBUyxJQUE1QixFQUFrQyxTQUFTLEdBQTNDO0FBQ0gsU0FSTCxDQURKOztBQWFBO0FBQ0EsZ0JBQVEsVUFBUixDQUFtQixJQUFJLGVBQUosQ0FBb0IsWUFBcEIsRUFBa0MsSUFBbEMsRUFBd0MsWUFBTTtBQUM3RCxnQkFBSSxXQUFXO0FBQ1gsc0JBQU0sT0FBSyxTQUFMLENBQWUsVUFBZixDQUEwQixVQUFVLE9BQVYsQ0FBa0IsVUFBbEIsQ0FBNkIsT0FBSyxRQUFMLENBQWMsQ0FBM0MsQ0FBMUIsQ0FESztBQUVYLHFCQUFLLE9BQUssU0FBTCxDQUFlLFVBQWYsQ0FBMEIsVUFBVSxPQUFWLENBQWtCLFVBQWxCLENBQTZCLE9BQUssUUFBTCxDQUFjLENBQTNDLENBQTFCO0FBRk0sYUFBZjs7QUFLQSxzQkFBVSxTQUFWLENBQW9CLFNBQVMsSUFBN0IsRUFBbUMsU0FBUyxHQUE1QztBQUNILFNBUGtCLENBQW5COztBQVNBLGFBQUssVUFBTCxDQUFnQixPQUFoQjs7QUFFQTtBQUNBLFlBQU0sUUFBUSxxQkFBSyxVQUFuQjtBQUNBLFlBQUksV0FBVyxJQUFJLGVBQUosQ0FBb0IsVUFBcEIsRUFBZ0MsSUFBaEMsRUFBc0MsU0FBdEMsQ0FBZjtBQXBEbUI7QUFBQTtBQUFBOztBQUFBO0FBcURuQixrQ0FBbUIsS0FBbkIsbUlBQTBCO0FBQUEsb0JBQWYsSUFBZTs7QUFDdEIseUJBQVMsVUFBVCxDQUNJLElBQUksWUFBSixDQUFpQixJQUFqQixFQUF1QixJQUF2QixDQURKO0FBR0g7QUF6RGtCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBMERuQixhQUFLLFVBQUwsQ0FBZ0IsUUFBaEI7O0FBRUE7QUFDQSxZQUFJLGNBQWMsSUFBSSxlQUFKLENBQW9CLGVBQXBCLEVBQXFDLElBQXJDLENBQWxCO0FBQ0Esb0JBQVksVUFBWixDQUF1QixJQUFJLGVBQUosQ0FBb0IsaUJBQXBCLEVBQXVDLElBQXZDLEVBQTZDLFlBQU07QUFDdEUsbUJBQUssbUJBQUw7QUFDSCxTQUZzQixDQUF2QjtBQUdBLGFBQUssVUFBTCxDQUFnQixXQUFoQixFQWpFbUIsQ0FpRVc7O0FBRTlCLFlBQUksZUFBZSxJQUFJLGVBQUosQ0FBb0IsZ0JBQXBCLEVBQXNDLElBQXRDLENBQW5CLENBbkVtQixDQW1FNkM7O0FBRWhFO0FBQ0EsMENBQWEsSUFBYixDQUFrQixvQkFBWTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFFMUIsc0NBQWlELFFBQWpELG1JQUEyRDtBQUFBO0FBQUEsd0JBQS9DLEtBQStDLFNBQS9DLElBQStDO0FBQUEsd0JBQXpDLElBQXlDLFNBQXpDLElBQXlDO0FBQUEsd0JBQW5DLFFBQW1DLFNBQW5DLFFBQW1DO0FBQUEsd0JBQXpCLFVBQXlCLFNBQXpCLFVBQXlCOztBQUN2RDtBQUNBLHdCQUFHLFFBQUgsRUFBYTtBQUNULHFDQUFhLFVBQWIsQ0FDSSxJQUFJLGdCQUFKLENBQXFCLEtBQXJCLEVBQTJCLElBQTNCLFNBREo7QUFHSDs7QUFFRDtBQUNBLHdCQUFHLFVBQUgsRUFBZTtBQUNYLG9DQUFZLFVBQVosQ0FDSSxJQUFJLGVBQUosQ0FBb0IsS0FBcEIsRUFBMEIsSUFBMUIsU0FESjtBQUdIO0FBQ0o7QUFoQnlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBa0IxQixnQkFBRyxhQUFhLE1BQWIsR0FBc0IsQ0FBekIsRUFBNEI7QUFDeEIsdUJBQUssVUFBTCxDQUFnQixZQUFoQjtBQUNIO0FBQ0osU0FyQkQsRUFxQkcsS0FyQkgsQ0FxQlMsaUJBQVM7QUFDZCxvQkFBUSxLQUFSLENBQWMsS0FBZDtBQUNILFNBdkJEOztBQXlCQTtBQUNBLGFBQUsscUJBQUwsQ0FBMkIsS0FBM0IsRUFBa0Msa0JBQWxDLEVBQXNELGNBQU07QUFBQyxtQkFBSyxTQUFMLENBQWUsU0FBZixDQUF5QixFQUF6QjtBQUE2QixTQUExRjtBQUNBLGFBQUsscUJBQUwsQ0FBMkIsTUFBM0IsRUFBbUMsa0JBQW5DLEVBQXVELGNBQU07QUFBQyxtQkFBSyxTQUFMLENBQWUsY0FBZixDQUE4QixFQUE5QjtBQUFrQyxTQUFoRzs7QUFFQTtBQUNBLGtCQUFVLElBQVYsQ0FBZSxNQUFmLENBQXNCLEtBQUssR0FBM0I7O0FBRUE7Ozs7QUFJQSxhQUFLLFNBQUwsR0FBaUIsQ0FBakI7QUFDSDs7Ozs7O0FBTUQ7Ozs7bUNBSVcsSSxFQUFNO0FBQ2IsaUJBQUssR0FBTCxDQUFTLE1BQVQsQ0FBZ0IsS0FBSyxNQUFyQjs7QUFFQSxpQkFBSyxTQUFMOztBQUVBLG1CQUFPLElBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7OzhDQU1zQixTLEVBQVcsSSxFQUFNLGEsRUFBZTtBQUNsRCxnQkFBRyxDQUFDLEtBQUssZ0JBQVQsRUFBMkI7QUFDdkIscUJBQUssZ0JBQUwsR0FBd0IsRUFBeEI7QUFDSDs7QUFFRCxpQkFBSyxnQkFBTCxDQUFzQixLQUFLLGdCQUFMLENBQXNCLE1BQTVDLElBQXNEO0FBQ2xELDJCQUFXLFNBRHVDO0FBRWxELHNCQUFNLElBRjRDO0FBR2xELCtCQUFlO0FBSG1DLGFBQXREO0FBS0g7O0FBRUQ7Ozs7Ozs4Q0FHc0I7QUFBQTs7QUFDbEIsZ0JBQUksU0FBUyxFQUFFLE9BQUYsRUFDUixRQURRLENBQ0MsY0FERCxFQUVSLFFBRlEsQ0FFQyxRQUZELENBQWI7O0FBSUEsZ0JBQUksYUFBYSxZQUFqQjtBQUNBLGdCQUFJLGFBQWEsRUFBRSxZQUFGLEVBQWdCLElBQWhCLENBQXFCLElBQXJCLEVBQTJCLFVBQTNCLENBQWpCOztBQUVBLGdCQUFJLHFCQUFKOztBQUVBLG1CQUFPLE1BQVAsQ0FDSSxVQURKLEVBRUUsTUFGRixDQUdJLEVBQUUsS0FBRixFQUFTLElBQVQsQ0FBYztBQUNWLHdCQUFRLEdBREU7QUFFVix5QkFBUztBQUZDLGFBQWQsRUFJQyxNQUpELENBS0ksRUFBRSxPQUFGLEVBQVcsSUFBWCxDQUFnQixLQUFoQixFQUF1QixvQkFBdkIsQ0FMSixFQU9DLE1BUEQsQ0FPUSxtQkFQUixFQVFDLEVBUkQsQ0FRSSxPQVJKLEVBUWEsWUFBTTtBQUNmLG9CQUFJLGFBQUo7O0FBRUEsb0JBQUk7QUFDQSwyQkFBTyxLQUFLLEtBQUwsQ0FBVyxFQUFFLE1BQU0sVUFBUixFQUFvQixHQUFwQixFQUFYLENBQVA7QUFDSCxpQkFGRCxDQUVFLE9BQU0sQ0FBTixFQUFTO0FBQ1AsMkJBQUssU0FBTCxDQUFlLFFBQWYsQ0FBd0IsZUFBeEIsQ0FBd0MsNkNBQXhDO0FBQ0EsaUNBQWEsS0FBYjtBQUNIOztBQUVELG9CQUFHLElBQUgsRUFBUztBQUNMO0FBQ0EsMkJBQUssU0FBTCxDQUFlLFVBQWYsQ0FDSSxJQURKLEVBRUksS0FBSyxLQUFMLENBQVcsT0FBSyxTQUFMLENBQWUsT0FBZixDQUF1QixVQUF2QixDQUFrQyxPQUFLLFFBQUwsQ0FBYyxDQUFoRCxJQUFxRCxPQUFLLFNBQUwsQ0FBZSxRQUEvRSxDQUZKLEVBR0ksS0FBSyxLQUFMLENBQVcsT0FBSyxTQUFMLENBQWUsT0FBZixDQUF1QixVQUF2QixDQUFrQyxPQUFLLFFBQUwsQ0FBYyxDQUFoRCxJQUFxRCxPQUFLLFNBQUwsQ0FBZSxRQUEvRSxDQUhKLEVBSUUsSUFKRixDQUlPLG9CQUFZO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ2Ysa0RBQXNCLFFBQXRCLG1JQUFnQztBQUFBLG9DQUFyQixPQUFxQjs7QUFDNUIsdUNBQUssU0FBTCxDQUFlLFFBQWYsQ0FBd0IsaUJBQXhCLENBQTBDLE9BQTFDO0FBQ0g7QUFIYztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSWxCLHFCQVJELEVBUUcsT0FSSCxDQVFXLFlBQU07QUFDYixxQ0FBYSxLQUFiO0FBQ0gscUJBVkQ7QUFXSDtBQUNKLGFBaENELENBSEo7O0FBc0NBLDJCQUFlLEtBQUssTUFBTCxDQUFmOztBQUVBO0FBQ0EsdUJBQVcsS0FBWDtBQUNIOztBQUVEOzs7Ozs7O2dEQUl3QixPLEVBQVM7QUFBQTs7QUFBQSx1Q0FDckIsSUFEcUI7QUFFekIsb0JBQUcsUUFBUSxRQUFSLENBQWlCLEtBQUssU0FBdEIsQ0FBSCxFQUFxQztBQUNqQywyQkFBSyxVQUFMLENBQ0ksSUFBSSxlQUFKLENBQ0ksS0FBSyxJQURULFVBRUksWUFBTTtBQUNGLDZCQUFLLGFBQUwsQ0FBbUIsUUFBUSxJQUFSLENBQWEsSUFBYixDQUFuQjtBQUNILHFCQUpMLENBREosRUFPRSxRQVBGLENBT1csYUFQWDtBQVFIO0FBWHdCOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUM3QixzQ0FBZ0IsS0FBSyxnQkFBckIsbUlBQXVDO0FBQUEsd0JBQS9CLElBQStCOztBQUFBLDBCQUEvQixJQUErQjtBQVd0QztBQVo0QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBYWhDOztBQUVEOzs7Ozs7a0RBRzBCO0FBQ3RCLGlCQUFLLEdBQUwsQ0FBUyxRQUFULENBQWtCLGNBQWxCLEVBQWtDLE1BQWxDO0FBQ0g7O0FBRUQ7Ozs7Ozs7OztnQ0FNUSxDLEVBQUcsQyxFQUFHLE8sRUFBUztBQUNuQixpQkFBSyxRQUFMLEdBQWdCO0FBQ1osbUJBQUcsQ0FEUztBQUVaLG1CQUFHO0FBRlMsYUFBaEI7O0FBS0EsaUJBQUssdUJBQUwsQ0FBNkIsT0FBN0I7O0FBRUEsaUJBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYTtBQUNULHlCQUFTLE9BREE7QUFFVCxxQkFBSyxDQUZJO0FBR1Qsc0JBQU07QUFIRyxhQUFiO0FBS0E7QUFDQTtBQU5BLGFBT0MsR0FQRCxDQU9LLE9BUEwsRUFPYyxNQVBkLEVBUUMsR0FSRCxDQVFLLE9BUkwsRUFRYyxLQUFLLEdBQUwsQ0FBUyxVQUFULEtBQXdCLENBUnRDO0FBU0g7O0FBRUQ7Ozs7OzsrQkFHTztBQUNILGlCQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsRUFBQyxTQUFTLE1BQVYsRUFBYjtBQUNBLGNBQUUsVUFBRixFQUFjLEdBQWQsQ0FBa0IsRUFBQyxTQUFTLE1BQVYsRUFBbEI7QUFDQSxpQkFBSyx1QkFBTDtBQUNIOzs7NEJBckpZO0FBQ1QsbUJBQU8sS0FBSyxTQUFaO0FBQ0g7Ozs7OztrQkFuSGdCLFc7Ozs7Ozs7Ozs7O0FDM09yQjs7OztBQUVBOzs7O0lBSU0sYztBQUNGOzs7Ozs7QUFNQSx3QkFBWSxXQUFaLEVBQXlCLE9BQXpCLEVBQWtDLFVBQWxDLEVBQThDLFNBQTlDLEVBQXlEO0FBQUE7O0FBQUE7O0FBQ3JEOzs7O0FBSUEsU0FBSyxHQUFMLEdBQVcsRUFBRSxLQUFGLENBQVg7O0FBRUE7QUFDQSxTQUFLLEdBQUwsQ0FBUyxRQUFULENBQWtCLFFBQWxCO0FBQ0EsU0FBSyxHQUFMLENBQVMsUUFBVCxDQUFrQixXQUFsQjs7QUFFQTtBQUNBLFNBQUssR0FBTCxDQUFTLE1BQVQsQ0FDSSxFQUFFLE9BQUYsRUFDQyxJQURELENBQ00sS0FETixlQUN3QixXQUR4QixXQUVDLElBRkQsQ0FFTSxLQUZOLEVBRWEsT0FGYixDQURKOztBQU1BO0FBQ0EsUUFBSSxPQUFKLEVBQWE7QUFDVDs7OztBQUlBLGFBQUssUUFBTCxHQUFnQixFQUFFLE9BQUYsQ0FBaEI7QUFDQSxhQUFLLFFBQUwsQ0FDSyxRQURMLENBQ2MsU0FEZCxFQUVLLElBRkwsQ0FFVSxPQUZWOztBQUlBLGtCQUFVLElBQVYsQ0FBZSxLQUFmLENBQXFCLEtBQUssUUFBMUI7O0FBRUEsYUFBSyxHQUFMLENBQVMsS0FBVCxDQUFlLFlBQU07QUFDakIsa0JBQUssUUFBTCxDQUFjLE1BQWQsQ0FBcUIsR0FBckI7QUFDSCxTQUZELEVBRUcsWUFBTTtBQUNMLGtCQUFLLFFBQUwsQ0FBYyxPQUFkLENBQXNCLEdBQXRCO0FBQ0gsU0FKRDtBQUtIOztBQUVEO0FBQ0EsUUFBSSxVQUFKLEVBQWdCO0FBQ1osYUFBSyxHQUFMLENBQVMsRUFBVCxDQUFZLE9BQVosRUFBcUIsVUFBckI7QUFDSDtBQUNKLEM7O0FBR0w7QUFDQTs7Ozs7O0lBSXFCLFk7QUFDakI7OztBQUdBLDBCQUFZLFNBQVosRUFBdUI7QUFBQTs7QUFDbkI7Ozs7QUFJQSxhQUFLLEdBQUwsR0FBVyxFQUFFLE9BQUYsQ0FBWDs7QUFFQSxZQUFNLEtBQUssY0FBWDs7QUFFQSxhQUFLLEdBQUwsQ0FBUyxJQUFULENBQWMsSUFBZCxFQUFvQixFQUFwQjs7QUFFQTs7O0FBR0E7QUFDQSxhQUFLLE1BQUwsQ0FDSSxJQUFJLGNBQUosQ0FBbUIsUUFBbkIsRUFBNkIsMkJBQTdCLEVBQTBELFlBQU07QUFDNUQ7QUFDQSxnQkFBSSxTQUFTLEVBQUUsT0FBRixFQUNSLFFBRFEsQ0FDQyxjQURELEVBRVIsUUFGUSxDQUVDLFFBRkQsQ0FBYjs7QUFJQTtBQUNBLGdCQUFNLGFBQWEsRUFBRSxZQUFGLEVBQWdCLElBQWhCLENBQ2Ysb0NBQWMsVUFBVSxVQUF4QixFQUFvQyxJQUFwQyxDQURlLENBQW5COztBQUlBLG1CQUFPLE1BQVAsQ0FBYyxVQUFkOztBQUVBO0FBQ0EsbUJBQU8sTUFBUCxDQUNJLEVBQUUsS0FBRixFQUFTLElBQVQsQ0FBYztBQUNWLHdCQUFRLG9DQUFjLFVBQVUsVUFBeEIsRUFBb0MsSUFBcEMsRUFBMEMsSUFBMUMsQ0FERTtBQUVWLHlCQUFTLFVBRkM7QUFHViw0QkFBWTtBQUhGLGFBQWQsRUFJRyxNQUpILENBS0ksRUFBRSxPQUFGLEVBQVcsSUFBWCxDQUFnQixLQUFoQixFQUF1QixvQkFBdkIsQ0FMSixFQU1FLE1BTkYsQ0FNUyxnQkFOVCxDQURKO0FBU0EsbUJBQU8sTUFBUCxDQUNJLEVBQUUsS0FBRixFQUFTLElBQVQsQ0FBYztBQUNWLHdCQUFRLG9DQUFjLFVBQVUsVUFBeEIsRUFBb0MsS0FBcEMsRUFBMkMsSUFBM0MsQ0FERTtBQUVWLHlCQUFTLFVBRkM7QUFHViw0QkFBWTtBQUhGLGFBQWQsRUFJRyxNQUpILENBS0ksRUFBRSxPQUFGLEVBQVcsSUFBWCxDQUFnQixLQUFoQixFQUF1QixvQkFBdkIsQ0FMSixFQU1FLE1BTkYsQ0FNUyxlQU5ULENBREo7O0FBVUEsaUJBQUssTUFBTDs7QUFFQTtBQUNBLHVCQUFXLE1BQVg7QUFDSCxTQXJDRCxFQXFDRyxTQXJDSCxDQURKOztBQXlDQTtBQUNBLGFBQUssTUFBTCxDQUNJLElBQUksY0FBSixDQUFtQixVQUFuQixFQUErQixvQkFBL0IsRUFBcUQsWUFBTTtBQUN2RCxzQkFBVSxhQUFWO0FBQ0gsU0FGRCxFQUVHLFNBRkgsQ0FESjs7QUFNQSxrQkFBVSxJQUFWLENBQWUsS0FBZixDQUFxQixLQUFLLEdBQTFCOztBQUVBOztBQUVBLFlBQUksT0FBTyxJQUFJLGNBQUosQ0FBbUIsTUFBbkIsRUFBMkIscUJBQTNCLEVBQWtELEtBQWxELEVBQXlELFNBQXpELENBQVg7QUFDQSxhQUFLLEdBQUwsQ0FBUyxJQUFULENBQWM7QUFDVixvQkFBUSxrQkFERTtBQUVWLHlCQUFhO0FBRkgsU0FBZDtBQUlBLGFBQUssTUFBTCxDQUFZLElBQVo7O0FBRUEsa0JBQVUsSUFBVixDQUFlLEtBQWYsQ0FBcUIsS0FBSyxHQUExQjtBQUNIOztBQUVEOzs7Ozs7OzsrQkFJTyxRLEVBQVU7QUFDYixpQkFBSyxHQUFMLENBQVMsTUFBVCxDQUFnQixTQUFTLEdBQXpCO0FBQ0g7Ozs7OztrQkF2RmdCLFk7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0RyQjs7QUFFQTs7O0lBR00sTztBQUNGOzs7O0FBSUEscUJBQVksSUFBWixFQUFrQixNQUFsQixFQUEwQjtBQUFBOztBQUN0QixhQUFLLEdBQUwsR0FBVyxFQUFFLE9BQUYsRUFBVyxRQUFYLENBQW9CLFNBQXBCLEVBQStCLElBQS9CLENBQW9DLElBQXBDLENBQVg7O0FBRUE7Ozs7QUFJQSxhQUFLLE1BQUwsR0FBYyxNQUFkO0FBQ0g7O0FBRUQ7Ozs7Ozs7K0JBR087QUFDSCxpQkFBSyxHQUFMLENBQVMsTUFBVDs7QUFFQSxnQkFBRyxLQUFLLE1BQVIsRUFBZ0I7QUFDWixxQkFBSyxNQUFMO0FBQ0g7QUFDSjs7Ozs7O0FBR0w7Ozs7OztJQUlNLGM7OztBQUNGLDRCQUFZLElBQVosRUFBc0M7QUFBQSxZQUFwQixNQUFvQix1RUFBWCxTQUFXOztBQUFBOztBQUFBLG9JQUM1QixJQUQ0QixFQUN0QixNQURzQjs7QUFHbEMsY0FBSyxHQUFMLENBQVMsUUFBVCxDQUFrQixTQUFsQjtBQUhrQztBQUlyQzs7O0VBTHdCLE87O0FBUTdCOzs7Ozs7SUFJTSxlOzs7QUFDRiw2QkFBWSxJQUFaLEVBQXNDO0FBQUEsWUFBcEIsTUFBb0IsdUVBQVgsU0FBVzs7QUFBQTs7QUFBQSx1SUFDNUIsSUFENEIsRUFDdEIsTUFEc0I7O0FBR2xDLGVBQUssR0FBTCxDQUFTLE1BQVQsQ0FDSSxFQUFFLFFBQUYsRUFBWSxRQUFaLENBQXFCLE9BQXJCLEVBQThCLEtBQTlCLENBQW9DLFlBQU07QUFDdEMsbUJBQUssSUFBTDtBQUNILFNBRkQsQ0FESjtBQUhrQztBQVFyQzs7O0VBVHlCLE87O0FBWTlCOzs7Ozs7SUFJTSxZOzs7QUFDRiwwQkFBWSxJQUFaLEVBQXNDO0FBQUEsWUFBcEIsTUFBb0IsdUVBQVgsU0FBVzs7QUFBQTs7QUFBQSxpSUFDNUIsSUFENEIsRUFDdEIsTUFEc0I7O0FBR2xDLGVBQUssR0FBTCxDQUFTLFFBQVQsQ0FBa0IsT0FBbEI7QUFIa0M7QUFJckM7OztFQUxzQixlOztBQVEzQjs7Ozs7O0lBSU0sYzs7O0FBQ0YsNEJBQVksSUFBWixFQUFzQztBQUFBLFlBQXBCLE1BQW9CLHVFQUFYLFNBQVc7O0FBQUE7O0FBQUEscUlBQzVCLElBRDRCLEVBQ3RCLE1BRHNCOztBQUdsQyxlQUFLLEdBQUwsQ0FBUyxRQUFULENBQWtCLFNBQWxCO0FBSGtDO0FBSXJDOzs7RUFMd0IsZTs7QUFRN0I7Ozs7O0lBR3FCLFE7QUFDakIsd0JBQWM7QUFBQTs7QUFDVjs7OztBQUlBLGFBQUssR0FBTCxHQUFXLEVBQUUsT0FBRixFQUFXLFFBQVgsQ0FBb0IsVUFBcEIsQ0FBWDs7QUFFQTs7OztBQUlBLGFBQUssS0FBTCxHQUFhLENBQWI7O0FBRUE7QUFDQSxVQUFFLE1BQUYsRUFBVSxNQUFWLENBQWlCLEtBQUssR0FBdEI7QUFDSDs7QUFFRDs7Ozs7Ozs7OztBQXlCQTs7OytCQUdPO0FBQ0gsaUJBQUssR0FBTCxDQUFTLFFBQVQsQ0FBa0IsUUFBbEI7QUFDSDs7QUFFRDs7Ozs7O2tDQUdVO0FBQ04saUJBQUssR0FBTCxDQUFTLFdBQVQsQ0FBcUIsUUFBckI7QUFDSDs7QUFFRDs7Ozs7Ozs7O21DQU1XLEksRUFBd0I7QUFBQTs7QUFBQSxnQkFBbEIsTUFBa0IsdUVBQVQsT0FBUzs7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsZ0JBQUksVUFBVSxJQUFJLE1BQUosQ0FBVyxJQUFYLEVBQWlCLFlBQU07QUFDakMsdUJBQUssS0FBTDtBQUNILGFBRmEsQ0FBZDs7QUFJQSxpQkFBSyxHQUFMLENBQVMsTUFBVCxDQUFnQixRQUFRLEdBQXhCO0FBQ0EsaUJBQUssS0FBTDs7QUFFQSxtQkFBTyxPQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7OzBDQUtrQixJLEVBQU07QUFDcEIsbUJBQU8sS0FBSyxVQUFMLENBQWdCLElBQWhCLEVBQXNCLGNBQXRCLENBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7d0NBS2dCLEksRUFBTTtBQUNsQixtQkFBTyxLQUFLLFVBQUwsQ0FBZ0IsSUFBaEIsRUFBc0IsWUFBdEIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7OzswQ0FLa0IsSSxFQUFNO0FBQ3BCLG1CQUFPLEtBQUssVUFBTCxDQUFnQixJQUFoQixFQUFzQixjQUF0QixDQUFQO0FBQ0g7Ozs0QkFoRlc7QUFDUixtQkFBTyxLQUFLLFlBQVo7QUFDSDs7QUFFRDs7Ozs7Ozs7MEJBT1UsSyxFQUFPO0FBQ2IsaUJBQUssWUFBTCxHQUFvQixLQUFwQjs7QUFFQSxnQkFBRyxLQUFLLFlBQUwsR0FBb0IsQ0FBdkIsRUFBMEI7QUFDdEIscUJBQUssSUFBTDtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLLE9BQUw7QUFDSDtBQUNKOzs7Ozs7a0JBekNnQixROzs7Ozs7Ozs7Ozs7O0FDdkZyQjtBQUNBOzs7SUFHcUIsUTtBQUNqQjs7OztBQUlBLHNCQUFZLFNBQVosRUFBdUIsZ0JBQXZCLEVBQXlDO0FBQUE7O0FBQUE7O0FBQ3JDOzs7O0FBSUEsYUFBSyxTQUFMLEdBQWlCLFNBQWpCOztBQUVBOzs7O0FBSUEsYUFBSyxXQUFMLEdBQW1CLENBQW5COztBQUVBOzs7O0FBSUEsYUFBSyxlQUFMO0FBQ0E7Ozs7O0FBS0EsYUFBSyxnQkFBTDs7QUFFQTs7Ozs7QUFLQSxhQUFLLEtBQUwsR0FBYSxDQUFDLFlBQU07QUFBRSxrQkFBSyxXQUFMLENBQWlCLGdCQUFqQjtBQUFvQyxTQUE3QyxDQUFiOztBQUVBO0FBQ0EsYUFBSyxhQUFMO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7O0FBNkJBOzs7cUNBR2E7QUFDVDs7O0FBR0EsaUJBQUssbUJBQUwsR0FBMkIsWUFBTSxDQUFFLENBQW5DOztBQUVBOzs7QUFHQSxpQkFBSyxjQUFMLEdBQXNCLFlBQU0sQ0FBRSxDQUE5Qjs7QUFFQTs7O0FBR0EsaUJBQUssVUFBTCxHQUFrQixZQUFNLENBQUUsQ0FBMUI7O0FBRUE7OztBQUdBLGlCQUFLLFlBQUwsR0FBb0IsWUFBTSxDQUFFLENBQTVCOztBQUVBOzs7QUFHQSxpQkFBSyxlQUFMLEdBQXVCLFlBQU0sQ0FBRSxDQUEvQjs7QUFFQTs7O0FBR0EsaUJBQUssYUFBTCxHQUFxQixZQUFNLENBQUUsQ0FBN0I7O0FBRUE7OztBQUdBLGlCQUFLLGNBQUwsR0FBc0IsWUFBTSxDQUFFLENBQTlCOztBQUVBOzs7QUFHQSxpQkFBSyxnQkFBTCxHQUF3QixZQUFNLENBQUUsQ0FBaEM7O0FBRUE7OztBQUdBLGlCQUFLLHFCQUFMLEdBQTZCLFlBQU0sQ0FBRSxDQUFyQztBQUNIOztBQUVEOzs7Ozs7d0NBR2dCO0FBQUE7O0FBQ1osaUJBQUssVUFBTDs7QUFFQSxpQkFBSyxLQUFMLENBQVcsSUFBWCxDQUNJLFlBQU07QUFBRSx1QkFBSyxXQUFMO0FBQW9CLGFBRGhDLEVBRUksWUFBTTtBQUFFLHVCQUFLLFlBQUw7QUFBcUIsYUFGakMsRUFHSSxZQUFNO0FBQUUsdUJBQUssY0FBTDtBQUF1QixhQUhuQyxFQUlJLFlBQU07QUFBRSx1QkFBSyxjQUFMO0FBQXVCLGFBSm5DLEVBS0ksWUFBTTtBQUFFLHVCQUFLLGFBQUw7QUFBc0IsYUFMbEMsRUFNSSxZQUFNO0FBQUUsdUJBQUssVUFBTDtBQUFtQixhQU4vQixFQU9JLFlBQU07QUFBRSx1QkFBSyxjQUFMO0FBQXVCLGFBUG5DLEVBUUksWUFBTTtBQUFFLHVCQUFLLGFBQUw7QUFBc0IsYUFSbEMsRUFTSSxZQUFNO0FBQUUsdUJBQUssVUFBTDtBQUFtQixhQVQvQjtBQVdIOztBQUVEOzs7Ozs7c0NBR2M7QUFBQTs7QUFDVixpQkFBSyxhQUFMOztBQUlBLGlCQUFLLG1CQUFMLEdBQTJCLFlBQU07QUFDN0IsdUJBQUssSUFBTDtBQUNILGFBRkQ7QUFHSDs7QUFFRDs7Ozs7O3VDQUdlO0FBQUE7O0FBQ1gsaUJBQUssYUFBTDs7QUFLQSxnQkFBSSxnQkFBZ0I7QUFDaEIsMEJBQVUsS0FETTtBQUVoQiwyQkFBVyxLQUZLO0FBR2hCLHlCQUFTO0FBSE8sYUFBcEI7O0FBTUEsaUJBQUssY0FBTCxHQUFzQixVQUFDLElBQUQsRUFBVTtBQUM1Qix3QkFBUSxJQUFSO0FBQ0kseUJBQUssT0FBTDtBQUNJLHNDQUFjLFFBQWQsR0FBeUIsSUFBekI7QUFDQTtBQUNKLHlCQUFLLFFBQUw7QUFDSSxzQ0FBYyxTQUFkLEdBQTBCLElBQTFCO0FBQ0E7QUFDSix5QkFBSyxLQUFMO0FBQ0ksc0NBQWMsT0FBZCxHQUF3QixJQUF4QjtBQUNBO0FBQ0o7QUFDSTtBQUNBO0FBWlI7O0FBZUEsb0JBQUcsY0FBYyxRQUFkLElBQTBCLGNBQWMsU0FBeEMsSUFBcUQsY0FBYyxPQUF0RSxFQUErRTtBQUMzRTtBQUNBLDJCQUFLLElBQUw7QUFDSDtBQUNKLGFBcEJEO0FBcUJIOztBQUVEOzs7Ozs7eUNBR2lCO0FBQUE7O0FBQ2IsaUJBQUssYUFBTDs7QUFLQSxpQkFBSyxhQUFMLEdBQXFCLFlBQU07QUFDdkIsdUJBQUssSUFBTDtBQUNILGFBRkQ7QUFHSDs7QUFFRDs7Ozs7O3lDQUdpQjtBQUFBOztBQUNiLGlCQUFLLGFBQUw7O0FBS0EsaUJBQUssY0FBTCxHQUFzQixZQUFNO0FBQ3hCLHVCQUFLLElBQUw7QUFDSCxhQUZEO0FBR0g7O0FBRUQ7Ozs7Ozt3Q0FHZ0I7QUFBQTs7QUFDWixpQkFBSyxhQUFMOztBQUdBLGdCQUFJLFdBQVcsS0FBZjtBQUNBLGdCQUFJLGFBQWEsS0FBakI7O0FBRUEsZ0JBQUkscUJBQXFCLFNBQXJCLGtCQUFxQixHQUFNO0FBQzNCLG9CQUFHLFlBQVksVUFBZixFQUEyQjtBQUN2QiwyQkFBSyxJQUFMO0FBQ0g7QUFDSixhQUpEOztBQU1BLGlCQUFLLFVBQUwsR0FBa0IsWUFBTTtBQUNwQiwyQkFBVyxJQUFYO0FBQ0E7QUFDSCxhQUhEOztBQUtBLGlCQUFLLFlBQUwsR0FBb0IsWUFBTTtBQUN0Qiw2QkFBYSxJQUFiO0FBQ0E7QUFDSCxhQUhEO0FBSUg7O0FBRUQ7Ozs7OztxQ0FHYTtBQUFBOztBQUNULGlCQUFLLGFBQUw7O0FBTUEsaUJBQUssZUFBTCxHQUF1QixZQUFNO0FBQ3pCLHVCQUFLLElBQUw7QUFDSCxhQUZEO0FBR0g7O0FBRUQ7Ozs7Ozt5Q0FHaUI7QUFBQTs7QUFDYixpQkFBSyxhQUFMOztBQU1BLGlCQUFLLHFCQUFMLEdBQTZCLFlBQU07QUFDL0IsdUJBQUssSUFBTDtBQUNILGFBRkQ7QUFHSDs7QUFFRDs7Ozs7O3dDQUdnQjtBQUFBOztBQUNaLGlCQUFLLGFBQUw7O0FBTUEsaUJBQUssZ0JBQUwsR0FBd0IsWUFBTTtBQUMxQix3QkFBSyxJQUFMO0FBQ0gsYUFGRDtBQUdIOztBQUVEOzs7Ozs7cUNBR2E7QUFBQTs7QUFDVCxpQkFBSyxhQUFMO0FBRUEsaUJBQUssWUFBTCxDQUNJO0FBQ0ksc0JBQU0sdUJBRFY7QUFFSSxzQkFBTSxnQkFBTTtBQUNSLDRCQUFLLFNBQUwsQ0FBZSxXQUFmO0FBQ0EsNEJBQUssSUFBTDtBQUNIO0FBTEwsYUFESixFQVFJO0FBQ0ksc0JBQU0sOEJBRFY7QUFFSSxzQkFBTSxnQkFBTTtBQUNSLDRCQUFLLElBQUw7QUFDSDtBQUpMLGFBUko7QUFlSDs7QUFFRDs7Ozs7O3dDQUdnQjtBQUNaLGlCQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CLEtBQXBCLENBQTBCLEtBQUssZUFBL0I7QUFDSDs7QUFFRDs7Ozs7OztvQ0FJWSxnQixFQUFrQjtBQUMxQixpQkFBSyxlQUFMLENBQXFCLE1BQXJCOztBQUVBLGdCQUFHLHFCQUFtQixTQUF0QixFQUFpQztBQUM3QjtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7d0NBSXVCO0FBQUE7O0FBQ25CLGdCQUFHLENBQUMsS0FBSyxlQUFULEVBQTBCO0FBQ3RCLHFCQUFLLGVBQUwsR0FBdUIsRUFBRSxPQUFGLEVBQVcsSUFBWCxDQUFnQixJQUFoQixFQUFzQixVQUF0QixDQUF2Qjs7QUFFQSxxQkFBSyxlQUFMLEdBQXVCLEVBQUUsT0FBRixFQUFXLFFBQVgsQ0FBb0IsTUFBcEIsQ0FBdkI7O0FBRUEscUJBQUssZUFBTCxDQUFxQixNQUFyQixDQUNJLEVBQUUsT0FBRixFQUFXLFFBQVgsQ0FBb0IsWUFBcEIsRUFDSyxNQURMLENBQ1ksS0FBSyxlQURqQixFQUVLLE1BRkwsRUFFYTtBQUNMLGtCQUFFLE9BQUYsRUFBVyxRQUFYLENBQW9CLE9BQXBCLEVBQ0MsTUFERCxDQUVJLEVBQUUsS0FBRixFQUFTLElBQVQsQ0FBYztBQUNWLDBCQUFNLEdBREk7QUFFViwyQkFBTztBQUZHLGlCQUFkLEVBR0csUUFISCxDQUdZLGNBSFosRUFJQyxLQUpELENBSU8sWUFBTTtBQUNULDRCQUFLLElBQUw7QUFDSCxpQkFORCxDQUZKLENBSFIsQ0FESjs7QUFpQkEscUJBQUssZUFBTCxDQUFxQixNQUFyQixDQUE0QixLQUFLLFdBQWpDOztBQUVBLHFCQUFLLGdCQUFMLEdBQXdCLEVBQUUsT0FBRixFQUFXLFFBQVgsQ0FBb0IsU0FBcEIsQ0FBeEI7QUFDQSxxQkFBSyxlQUFMLENBQXFCLE1BQXJCLENBQTRCLEtBQUssZ0JBQWpDO0FBQ0g7O0FBRUQsaUJBQUssZUFBTCxDQUFxQixJQUFyQixDQUEwQixFQUExQjs7QUFFQSxnQkFBSSxRQUFRLEVBQUUsS0FBRixFQUFTLElBQVQsQ0FBYztBQUN0QixzQkFBTSxHQURnQjtBQUV0Qix1QkFBTztBQUZlLGFBQWQsRUFHVCxRQUhTLENBR0EsYUFIQSxDQUFaOztBQUtBLGdCQUFHLEtBQUssSUFBTCxHQUFVLENBQWIsRUFBZ0I7QUFDWixzQkFBTSxLQUFOLENBQVksWUFBTTtBQUNkLDRCQUFLLElBQUw7QUFDSCxpQkFGRDtBQUdILGFBSkQsTUFJTztBQUNILHNCQUFNLFFBQU4sQ0FBZSxVQUFmO0FBQ0g7O0FBRUQsZ0JBQUksUUFBUSxFQUFFLEtBQUYsRUFBUyxJQUFULENBQWM7QUFDdEIsc0JBQU0sR0FEZ0I7QUFFdEIsdUJBQU87QUFGZSxhQUFkLEVBR1QsUUFIUyxDQUdBLGFBSEEsQ0FBWjs7QUFLQSxnQkFBRyxLQUFLLElBQUwsR0FBWSxLQUFLLEtBQUwsQ0FBVyxNQUFYLEdBQW9CLENBQW5DLEVBQXNDO0FBQ2xDLHNCQUFNLEtBQU4sQ0FBWSxZQUFNO0FBQ2QsNEJBQUssSUFBTDtBQUNILGlCQUZEO0FBR0gsYUFKRCxNQUlPO0FBQ0gsc0JBQU0sUUFBTixDQUFlLFVBQWY7QUFDSDs7QUFFRCxpQkFBSyxlQUFMLENBQXFCLE1BQXJCLENBQTRCLEtBQTVCLEVBQW1DLE1BQW5DLENBQTBDLEtBQTFDOztBQUVBOztBQUVBLGlCQUFLLGdCQUFMLENBQXNCLElBQXRCLENBQTJCLEVBQTNCOztBQTdEbUIsOENBQU4sSUFBTTtBQUFOLG9CQUFNO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBOERuQixxQ0FBd0IsSUFBeEIsOEhBQThCO0FBQUEsd0JBQW5CLFNBQW1COztBQUMxQix5QkFBSyxnQkFBTCxDQUFzQixNQUF0QixDQUNJLEVBQUUsS0FBRixFQUFTLElBQVQsQ0FBYyxTQUFkLENBREo7QUFHSDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaEdtQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBaUd0Qjs7QUFFRDs7Ozs7Ozt1Q0FJeUI7QUFDckIsZ0JBQUksV0FBVyxFQUFFLE1BQUYsRUFBVSxRQUFWLENBQW1CLFNBQW5CLENBQWY7O0FBRHFCLCtDQUFULE9BQVM7QUFBVCx1QkFBUztBQUFBOztBQUFBLHVDQUVWLE1BRlU7QUFHakIseUJBQVMsTUFBVCxDQUNJLEVBQUUsTUFBRixFQUFVLE1BQVYsQ0FDSSxFQUFFLEtBQUYsRUFBUyxJQUFULENBQWMsTUFBZCxFQUFzQixHQUF0QixFQUEyQixLQUEzQixDQUFpQyxZQUFNO0FBQ25DLDJCQUFPLElBQVA7QUFDSCxpQkFGRCxFQUVHLElBRkgsQ0FFUSxPQUFPLElBRmYsQ0FESixDQURKO0FBSGlCOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUVyQixzQ0FBcUIsT0FBckIsbUlBQThCO0FBQUEsd0JBQW5CLE1BQW1COztBQUFBLDBCQUFuQixNQUFtQjtBQVE3QjtBQVZvQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVdyQixpQkFBSyxnQkFBTCxDQUFzQixNQUF0QixDQUE2QixRQUE3QjtBQUNIOztBQUVEOzs7Ozs7Z0NBR1E7QUFBRSxpQkFBSyxJQUFMLEdBQVksQ0FBWjtBQUFnQjs7QUFFMUI7Ozs7OzsrQkFHTztBQUFFLGlCQUFLLElBQUw7QUFBYzs7QUFFdkI7Ozs7OzsrQkFHTztBQUFFLGlCQUFLLElBQUw7QUFBYzs7QUFFdkI7Ozs7OzsrQkFHTztBQUFFLGlCQUFLLElBQUwsR0FBWSxDQUFaO0FBQWU7Ozs0QkF6YWI7QUFDUCxtQkFBTyxLQUFLLFdBQVo7QUFDSDs7QUFFRDs7Ozs7MEJBSVMsSyxFQUFPO0FBQ1o7QUFDQSxpQkFBSyxVQUFMOztBQUVBLGlCQUFLLFdBQUwsR0FBbUIsS0FBbkI7O0FBRUEsZ0JBQUcsS0FBSyxJQUFMLEdBQVksS0FBSyxLQUFMLENBQVcsTUFBMUIsRUFBa0M7QUFDOUIscUJBQUssS0FBTCxDQUFXLEtBQUssSUFBaEI7O0FBRUEsb0JBQUcsS0FBSyxJQUFMLEtBQWMsQ0FBakIsRUFDSSxLQUFLLGFBQUw7QUFDUCxhQUxELE1BS087QUFDSCxxQkFBSyxJQUFMLEdBQVksQ0FBWjtBQUNIO0FBQ0o7Ozs7OztrQkFwRWdCLFE7Ozs7Ozs7Ozs7Ozs7QUNKckI7QUFDQTs7O0lBR3FCLE87QUFDakI7Ozs7Ozs7QUFPQSxtQkFBWSxJQUFaLEVBQWtCLEdBQWxCLEVBQXVCLEtBQXZCLEVBQThCLE1BQTlCLEVBQXNDO0FBQUE7O0FBQ2xDOzs7O0FBSUEsU0FBSyxJQUFMLEdBQVksRUFBRSxVQUFGLEVBQVEsUUFBUixFQUFhLFlBQWIsRUFBb0I7O0FBRWhDOzs7O0FBRlksS0FBWixDQU1BLEtBQUssT0FBTCxHQUFlLENBQWY7QUFDQTs7OztBQUlBLFNBQUssT0FBTCxHQUFlLEdBQWY7O0FBRUE7Ozs7QUFJQSxTQUFLLFFBQUwsR0FBZ0IsQ0FBaEI7O0FBRUE7Ozs7QUFJQSxTQUFLLFNBQUwsR0FBaUIsQ0FBakI7QUFDQTs7OztBQUlBLFNBQUssUUFBTCxHQUFnQixDQUFoQjtBQUNIOztBQUVEOzs7Ozs7Ozs7a0NBS2MsSyxFQUFPLE0sRUFBUTtBQUN6QjtBQUNBLFdBQUssSUFBTCxDQUFVLElBQVYsSUFBa0IsQ0FBQyxLQUFLLElBQUwsQ0FBVSxLQUFWLEdBQWtCLEtBQW5CLElBQTBCLENBQTVDO0FBQ0EsV0FBSyxJQUFMLENBQVUsR0FBVixJQUFpQixDQUFDLEtBQUssSUFBTCxDQUFVLE1BQVYsR0FBbUIsTUFBcEIsSUFBNEIsQ0FBN0M7O0FBRUE7QUFDQSxXQUFLLElBQUwsQ0FBVSxLQUFWLEdBQWtCLEtBQWxCO0FBQ0EsV0FBSyxJQUFMLENBQVUsTUFBVixHQUFtQixNQUFuQjtBQUNIOztBQUVEOzs7Ozs7Ozs7QUF5REE7Ozs7OytCQUtXLEMsRUFBRztBQUNWLGFBQU8sS0FBSyxJQUFMLEdBQWEsSUFBSSxLQUFLLElBQTdCO0FBQ0g7O0FBRUQ7Ozs7Ozs7OytCQUtXLEMsRUFBRztBQUNWLGFBQU8sS0FBSyxHQUFMLEdBQVksSUFBSSxLQUFLLElBQTVCO0FBQ0g7O0FBRUQ7Ozs7Ozs7O21DQUtlLEssRUFBTztBQUNsQixZQUFNLEtBQU4sR0FBYyxLQUFLLFVBQUwsQ0FBZ0IsTUFBTSxLQUF0QixDQUFkO0FBQ0EsWUFBTSxLQUFOLEdBQWMsS0FBSyxVQUFMLENBQWdCLE1BQU0sS0FBdEIsQ0FBZDs7QUFFQSxhQUFPLEtBQVA7QUFDSDs7O3dCQWpGVTtBQUNQLGFBQU8sS0FBSyxRQUFaO0FBQ0g7O0FBRUQ7Ozs7O3NCQUlTLEssRUFBTztBQUNaO0FBQ0EsV0FBSyxRQUFMLEdBQWdCLEtBQUssR0FBTCxDQUFTLEtBQUssR0FBTCxDQUFTLEtBQVQsRUFBZ0IsS0FBSyxPQUFyQixDQUFULEVBQXdDLEtBQUssT0FBN0MsQ0FBaEI7QUFDSDs7QUFFRDs7Ozs7Ozt3QkFJWTtBQUNSLGFBQU8sS0FBSyxJQUFMLENBQVUsS0FBVixHQUFrQixLQUFLLElBQTlCO0FBQ0g7O0FBRUQ7Ozs7Ozs7d0JBSWE7QUFDVCxhQUFPLEtBQUssSUFBTCxDQUFVLE1BQVYsR0FBbUIsS0FBSyxJQUEvQjtBQUNIOztBQUVEOzs7Ozs7O3dCQUlXO0FBQ1AsYUFBTyxLQUFLLElBQUwsQ0FBVSxJQUFWLEdBQWtCLEtBQUssU0FBTCxHQUFpQixLQUFLLElBQXhDLEdBQWlELENBQUMsS0FBSyxJQUFMLENBQVUsS0FBVixHQUFrQixLQUFLLEtBQXhCLElBQWlDLENBQXpGO0FBQ0g7O0FBRUQ7Ozs7Ozs7d0JBSVU7QUFDTixhQUFPLEtBQUssSUFBTCxDQUFVLEdBQVYsR0FBaUIsS0FBSyxRQUFMLEdBQWdCLEtBQUssSUFBdEMsR0FBK0MsQ0FBQyxLQUFLLElBQUwsQ0FBVSxNQUFWLEdBQW1CLEtBQUssTUFBekIsSUFBbUMsQ0FBekY7QUFDSDs7QUFFRDs7Ozs7Ozt3QkFJVTtBQUNOLGFBQVUsS0FBSyxJQUFmLFNBQXVCLEtBQUssR0FBNUIsU0FBbUMsS0FBSyxLQUF4QyxTQUFpRCxLQUFLLE1BQXREO0FBQ0g7Ozs7OztrQkFsSGdCLE87Ozs7Ozs7O1FDTUwsVSxHQUFBLFU7UUEyQkEscUIsR0FBQSxxQjtBQXJDaEI7Ozs7QUFJQSxJQUFNLGFBQWEsWUFBbkI7O0FBRUE7Ozs7QUFJTyxTQUFTLFVBQVQsR0FBc0I7QUFDekIsV0FBTyxJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQXFCO0FBQ3BDLFlBQU0sY0FBYyxhQUFhLGtCQUFqQzs7QUFFQSxZQUFJLFVBQVUsSUFBSSxjQUFKLEVBQWQ7O0FBRUEsZ0JBQVEsZ0JBQVIsQ0FBeUIsTUFBekIsRUFBaUMsWUFBVztBQUN4QyxnQkFBRyxLQUFLLFFBQVIsRUFBa0I7QUFDZCx3QkFBUSxLQUFLLFFBQUwsQ0FBYyxRQUF0QjtBQUNIO0FBQ0osU0FKRDs7QUFNQSxnQkFBUSxnQkFBUixDQUF5QixDQUFDLE9BQUQsRUFBVSxPQUFWLENBQXpCLEVBQTZDLFlBQU07QUFDL0MsbUJBQU8sMkJBQVA7QUFDSCxTQUZEOztBQUlBLGdCQUFRLElBQVIsQ0FBYSxLQUFiLEVBQW9CLFdBQXBCLEVBQWlDLElBQWpDO0FBQ0EsZ0JBQVEsWUFBUixHQUF1QixNQUF2QjtBQUNBLGdCQUFRLElBQVI7QUFDSCxLQWxCTSxDQUFQO0FBbUJIOztBQUVEOzs7OztBQUtPLFNBQVMscUJBQVQsQ0FBK0IsV0FBL0IsRUFBNEM7QUFDL0MsV0FBTyxJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQXFCO0FBQ3BDLFlBQUksVUFBVSxJQUFJLGNBQUosRUFBZDs7QUFFQSxnQkFBUSxnQkFBUixDQUF5QixNQUF6QixFQUFpQyxZQUFXO0FBQ3hDLGdCQUFHLEtBQUssUUFBUixFQUFrQjtBQUNkLHdCQUFRLEtBQUssUUFBYjtBQUNIO0FBQ0osU0FKRDs7QUFNQSxnQkFBUSxnQkFBUixDQUF5QixDQUFDLE9BQUQsRUFBVSxPQUFWLENBQXpCLEVBQTZDLFlBQU07QUFDL0MsK0NBQWlDLFdBQWpDO0FBQ0gsU0FGRDs7QUFJQSxnQkFBUSxJQUFSLENBQWEsS0FBYixFQUFvQixhQUFhLFdBQWIsR0FBMkIsT0FBL0MsRUFBd0QsSUFBeEQ7QUFDQSxnQkFBUSxZQUFSLEdBQXVCLE1BQXZCO0FBQ0EsZ0JBQVEsSUFBUjtBQUNILEtBaEJNLENBQVA7QUFpQkgiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfXJldHVybiBlfSkoKSIsImZ1bmN0aW9uIHN0cmluZ2lmeSAob2JqLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBpbmRlbnQgPSBKU09OLnN0cmluZ2lmeShbMV0sIG51bGwsIGdldChvcHRpb25zLCAnaW5kZW50JywgMikpLnNsaWNlKDIsIC0zKVxuICB2YXIgYWRkTWFyZ2luID0gZ2V0KG9wdGlvbnMsICdtYXJnaW5zJywgZmFsc2UpXG4gIHZhciBtYXhMZW5ndGggPSAoaW5kZW50ID09PSAnJyA/IEluZmluaXR5IDogZ2V0KG9wdGlvbnMsICdtYXhMZW5ndGgnLCA4MCkpXG5cbiAgcmV0dXJuIChmdW5jdGlvbiBfc3RyaW5naWZ5IChvYmosIGN1cnJlbnRJbmRlbnQsIHJlc2VydmVkKSB7XG4gICAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb2JqID0gb2JqLnRvSlNPTigpXG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KG9iailcblxuICAgIGlmIChzdHJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHN0cmluZ1xuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSBtYXhMZW5ndGggLSBjdXJyZW50SW5kZW50Lmxlbmd0aCAtIHJlc2VydmVkXG5cbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA8PSBsZW5ndGgpIHtcbiAgICAgIHZhciBwcmV0dGlmaWVkID0gcHJldHRpZnkoc3RyaW5nLCBhZGRNYXJnaW4pXG4gICAgICBpZiAocHJldHRpZmllZC5sZW5ndGggPD0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBwcmV0dGlmaWVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkge1xuICAgICAgdmFyIG5leHRJbmRlbnQgPSBjdXJyZW50SW5kZW50ICsgaW5kZW50XG4gICAgICB2YXIgaXRlbXMgPSBbXVxuICAgICAgdmFyIGRlbGltaXRlcnNcbiAgICAgIHZhciBjb21tYSA9IGZ1bmN0aW9uIChhcnJheSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIChpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMSA/IDAgOiAxKVxuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBvYmoubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaXRlbXMucHVzaChcbiAgICAgICAgICAgIF9zdHJpbmdpZnkob2JqW2luZGV4XSwgbmV4dEluZGVudCwgY29tbWEob2JqLCBpbmRleCkpIHx8ICdudWxsJ1xuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBkZWxpbWl0ZXJzID0gJ1tdJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgIHZhciBrZXlQYXJ0ID0gSlNPTi5zdHJpbmdpZnkoa2V5KSArICc6ICdcbiAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RyaW5naWZ5KG9ialtrZXldLCBuZXh0SW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5UGFydC5sZW5ndGggKyBjb21tYShhcnJheSwgaW5kZXgpKVxuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKGtleVBhcnQgKyB2YWx1ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGRlbGltaXRlcnMgPSAne30nXG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgZGVsaW1pdGVyc1swXSxcbiAgICAgICAgICBpbmRlbnQgKyBpdGVtcy5qb2luKCcsXFxuJyArIG5leHRJbmRlbnQpLFxuICAgICAgICAgIGRlbGltaXRlcnNbMV1cbiAgICAgICAgXS5qb2luKCdcXG4nICsgY3VycmVudEluZGVudClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nXG4gIH0ob2JqLCAnJywgMCkpXG59XG5cbi8vIE5vdGU6IFRoaXMgcmVnZXggbWF0Y2hlcyBldmVuIGludmFsaWQgSlNPTiBzdHJpbmdzLCBidXQgc2luY2Ugd2XigJlyZVxuLy8gd29ya2luZyBvbiB0aGUgb3V0cHV0IG9mIGBKU09OLnN0cmluZ2lmeWAgd2Uga25vdyB0aGF0IG9ubHkgdmFsaWQgc3RyaW5nc1xuLy8gYXJlIHByZXNlbnQgKHVubGVzcyB0aGUgdXNlciBzdXBwbGllZCBhIHdlaXJkIGBvcHRpb25zLmluZGVudGAgYnV0IGluXG4vLyB0aGF0IGNhc2Ugd2UgZG9u4oCZdCBjYXJlIHNpbmNlIHRoZSBvdXRwdXQgd291bGQgYmUgaW52YWxpZCBhbnl3YXkpLlxudmFyIHN0cmluZ09yQ2hhciA9IC8oXCIoPzpbXlxcXFxcIl18XFxcXC4pKlwiKXxbOixcXF1bfXtdL2dcblxuZnVuY3Rpb24gcHJldHRpZnkgKHN0cmluZywgYWRkTWFyZ2luKSB7XG4gIHZhciBtID0gYWRkTWFyZ2luID8gJyAnIDogJydcbiAgdmFyIHRva2VucyA9IHtcbiAgICAneyc6ICd7JyArIG0sXG4gICAgJ1snOiAnWycgKyBtLFxuICAgICd9JzogbSArICd9JyxcbiAgICAnXSc6IG0gKyAnXScsXG4gICAgJywnOiAnLCAnLFxuICAgICc6JzogJzogJ1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShzdHJpbmdPckNoYXIsIGZ1bmN0aW9uIChtYXRjaCwgc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZyA/IG1hdGNoIDogdG9rZW5zW21hdGNoXVxuICB9KVxufVxuXG5mdW5jdGlvbiBnZXQgKG9wdGlvbnMsIG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gKG5hbWUgaW4gb3B0aW9ucyA/IG9wdGlvbnNbbmFtZV0gOiBkZWZhdWx0VmFsdWUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5naWZ5XG4iLCIvKipcbiAqIFRoZSBEb3VibHlMaW5rZWRMaXN0IGNsYXNzIHByb3ZpZGVzIHRoZSBtYWluIGZ1bmN0aW9uYWxpdHkgb2YgYSBkb3VibHkgbGlua2VkIGxpc3QuXG4gKlxuICogQGNsYXNzIERvdWJseUxpbmtlZExpc3RcbiAqL1xudmFyIERvdWJseUxpbmtlZExpc3QgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvdWJseUxpbmtlZExpc3QoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb3VudCBvZiBlbGVtZW50cyBpbiBsaXN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm9wZXJ0eSBfbGVuZ3RoXG4gICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEl0ZXJhdGlvbiBwb2ludGVyXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm9wZXJ0eSBfa2V5XG4gICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fa2V5ID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byBoZWFkKGZpcnN0KSBlbGVtZW50IGluIGxpc3RcbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3BlcnR5IF9oZWFkXG4gICAgICAgICAqIEB0eXBlIERvdWJseUxpbmtlZExpc3ROb2RlXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9oZWFkID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0YWlsKGxhc3QpIGVsZW1lbnQgaW4gbGlzdFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkgX3RhaWxcbiAgICAgICAgICogQHR5cGUgRG91Ymx5TGlua2VkTGlzdE5vZGVcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3RhaWwgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVmZXJlbmNlIHRvIGl0ZXJhdGVkIGVsZW1lbnQgaW4gbGlzdFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkgX2N1cnJlbnRcbiAgICAgICAgICogQHR5cGUgRG91Ymx5TGlua2VkTGlzdE5vZGVcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgYSBuZXcgdmFsdWUgYXQgdGhlIHNwZWNpZmllZCBpbmRleFxuICAgICAqXG4gICAgICogQG1ldGhvZCBhZGRcbiAgICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IHdoZXJlIHRoZSBuZXcgdmFsdWUgaXMgdG8gYmUgaW5zZXJ0ZWQuXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBuZXcgdmFsdWUgZm9yIHRoZSBpbmRleC5cbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBEb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5fbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPdXQgb2YgYm91bmRzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICB3aGlsZSAoaSA8IGluZGV4KSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQudmFsdWUgPSB2YWx1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBvcHMgYSBub2RlIGZyb20gdGhlIGVuZCBvZiB0aGUgZG91Ymx5IGxpbmtlZCBsaXN0XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHBvcFxuICAgICAqIEByZXR1cm4gYW55ICBUaGUgdmFsdWUgb2YgdGhlIHBvcHBlZCBub2RlLlxuICAgICAqL1xuICAgIERvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgcG9wIGZyb20gYW4gZW1wdHkgZGF0YSBzdHJ1Y3R1cmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fdGFpbC52YWx1ZTtcbiAgICAgICAgdGhpcy5fdGFpbCA9IHRoaXMuX3RhaWwucHJldjtcbiAgICAgICAgaWYgKHRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl90YWlsLm5leHQ7XG4gICAgICAgICAgICB0aGlzLl90YWlsLm5leHQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xlbmd0aC0tO1xuICAgICAgICBpZiAodGhpcy5fbGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faGVhZDtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNoaWZ0cyBhIG5vZGUgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkb3VibHkgbGlua2VkIGxpc3RcbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2hpZnRcbiAgICAgKiBAcmV0dXJuIGFueSAgVGhlIHZhbHVlIG9mIHRoZSBzaGlmdGVkIG5vZGUuXG4gICAgICovXG4gICAgRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHNoaWZ0IGZyb20gYW4gZW1wdHkgZGF0YSBzdHJ1Y3R1cmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5faGVhZC52YWx1ZTtcbiAgICAgICAgdGhpcy5faGVhZCA9IHRoaXMuX2hlYWQubmV4dDtcbiAgICAgICAgaWYgKHRoaXMuX2hlYWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9oZWFkLnByZXY7XG4gICAgICAgICAgICB0aGlzLl9oZWFkLnByZXYgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xlbmd0aC0tO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQdXNoZXMgYW4gZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBkb3VibHkgbGlua2VkIGxpc3RcbiAgICAgKlxuICAgICAqIEBtZXRob2QgcHVzaFxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHVzaC5cbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBEb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIGFsbG9jYXRlIG5ldyBub2RlXG4gICAgICAgIHZhciBub2RlID0ge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgcHJldjogdGhpcy5fdGFpbCxcbiAgICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuX2xlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IHRoaXMuX3RhaWwgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdGFpbC5uZXh0ID0gbm9kZTtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSB0aGlzLl90YWlsLm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGVuZ3RoKys7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcmVwZW5kcyB0aGUgZG91Ymx5IGxpbmtlZCBsaXN0IHdpdGggYW4gZWxlbWVudFxuICAgICAqXG4gICAgICogQG1ldGhvZCB1bnNoaWZ0XG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byB1bnNoaWZ0LlxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIERvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gYWxsb2NhdGUgbmV3IG5vZGVcbiAgICAgICAgdmFyIG5vZGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBwcmV2OiBudWxsLFxuICAgICAgICAgICAgbmV4dDogdGhpcy5faGVhZFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5fbGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gdGhpcy5fdGFpbCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkLnByZXYgPSBub2RlO1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IHRoaXMuX2hlYWQucHJldjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sZW5ndGgrKztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBlZWtzIGF0IHRoZSBub2RlIGZyb20gdGhlIGVuZCBvZiB0aGUgZG91Ymx5IGxpbmtlZCBsaXN0XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHRvcFxuICAgICAqIEByZXR1cm4gYW55ICBUaGUgdmFsdWUgb2YgdGhlIGxhc3Qgbm9kZS5cbiAgICAgKi9cbiAgICBEb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS50b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90YWlsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhaWwudmFsdWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQZWVrcyBhdCB0aGUgbm9kZSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGRvdWJseSBsaW5rZWQgbGlzdFxuICAgICAqXG4gICAgICogQG1ldGhvZCBib3R0b21cbiAgICAgKiBAcmV0dXJuIGFueSAgVGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBub2RlLlxuICAgICAqL1xuICAgIERvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLmJvdHRvbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hlYWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGVhZC52YWx1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvdW50cyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBkb3VibHkgbGlua2VkIGxpc3RcbiAgICAgKlxuICAgICAqIEBtZXRob2QgY291bnRcbiAgICAgKiBAcmV0dXJuIG51bWJlciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBkb3VibHkgbGlua2VkIGxpc3QuXG4gICAgICovXG4gICAgRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZG91Ymx5IGxpbmtlZCBsaXN0IGlzIGVtcHR5XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGlzRW1wdHlcbiAgICAgKiBAcmV0dXJuIGJvb2xlYW4gd2hldGhlciB0aGUgZG91Ymx5IGxpbmtlZCBsaXN0IGlzIGVtcHR5LlxuICAgICAqL1xuICAgIERvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fbGVuZ3RoID09PSAwKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJld2luZCBpdGVyYXRvciBiYWNrIHRvIHRoZSBzdGFydFxuICAgICAqXG4gICAgICogQG1ldGhvZCByZXdpbmRcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBEb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5yZXdpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2tleSA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGN1cnJlbnQgbGlzdCBlbnRyeVxuICAgICAqXG4gICAgICogQG1ldGhvZCBjdXJyZW50XG4gICAgICogQHJldHVybiBhbnkgIFRoZSBjdXJyZW50IG5vZGUgdmFsdWUuXG4gICAgICovXG4gICAgRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGN1cnJlbnQgbm9kZSBpbmRleFxuICAgICAqXG4gICAgICogQG1ldGhvZCBrZXlcbiAgICAgKiBAcmV0dXJuIGFueSAgVGhlIGN1cnJlbnQgbm9kZSBpbmRleC5cbiAgICAgKi9cbiAgICBEb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNb3ZlIHRvIG5leHQgZW50cnlcbiAgICAgKlxuICAgICAqIEBtZXRob2QgbmV4dFxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIERvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9jdXJyZW50Lm5leHQ7XG4gICAgICAgIHRoaXMuX2tleSsrO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTW92ZSB0byBwcmV2aW91cyBlbnRyeVxuICAgICAqXG4gICAgICogQG1ldGhvZCBwcmV2XG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudCA9IHRoaXMuX2N1cnJlbnQucHJldjtcbiAgICAgICAgdGhpcy5fa2V5LS07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBkb3VibHkgbGlua2VkIGxpc3QgY29udGFpbnMgbW9yZSBub2Rlc1xuICAgICAqXG4gICAgICogQG1ldGhvZCB2YWxpZFxuICAgICAqIEByZXR1cm4gYm9vbGVhbiB0cnVlIGlmIHRoZSBkb3VibHkgbGlua2VkIGxpc3QgY29udGFpbnMgYW55IG1vcmUgbm9kZXMsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBEb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS52YWxpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9rZXkgPj0gMCAmJiB0aGlzLl9rZXkgPCB0aGlzLl9sZW5ndGgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRXhwb3J0IHRoZSBsaXN0IHRvIGFycmF5XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHRvQXJyYXlcbiAgICAgKiBAcmV0dXJuIEFycmF5ICAgVGhlIGV4cG9ydGVkIGFycmF5XG4gICAgICovXG4gICAgRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgICAgbGlzdC5wdXNoKGN1cnJlbnQudmFsdWUpO1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGxpc3QgdG8gc3RyaW5nXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHRvU3RyaW5nXG4gICAgICogQHJldHVybiBzdHJpbmcgICBUaGUgc2VyaWFsaXplZCBzdHJpbmcuXG4gICAgICovXG4gICAgRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIntcIiArIHRoaXMudG9BcnJheSgpLmpvaW4oXCItPlwiKSArIFwifVwiO1xuICAgIH07XG4gICAgcmV0dXJuIERvdWJseUxpbmtlZExpc3Q7XG59KSgpO1xubW9kdWxlLmV4cG9ydHMgPSBEb3VibHlMaW5rZWRMaXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RG91Ymx5TGlua2VkTGlzdC5qcy5tYXAiLCIvKipcbiAqIFRoZSBIZWFwIGNsYXNzIHByb3ZpZGVzIHRoZSBtYWluIGZ1bmN0aW9uYWxpdHkgb2YgYSBIZWFwLlxuICpcbiAqIEBjbGFzcyBIZWFwXG4gKi9cbnZhciBIZWFwID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIZWFwKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQmluYXJ5IHRyZWUgc3RvcmFnZSBhcnJheVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkgX3RyZWVcbiAgICAgICAgICogQHR5cGUgQXJyYXlcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3RyZWUgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhlYXAgdHlwZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkgX3R5cGVcbiAgICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl90eXBlID0gSGVhcC5NQVg7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJdGVyYXRpb24gcG9pbnRlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkgX2tleVxuICAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2tleSA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBsZWZ0IGNoaWxkIGVsZW1lbnQgaW4gYmluYXJ5IHRyZWUgc3RvcmVkIGluIGFycmF5XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9jaGlsZFxuICAgICAqIEBwYXJhbSBuXG4gICAgICogQHJldHVybiBudW1iZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEhlYXAucHJvdG90eXBlLl9jaGlsZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiAyICogbiArIDE7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgaW5kZXggb2YgcGFyZW50IGVsZW1lbnQgaW4gYmluYXJ5IHRyZWUgc3RvcmVkIGluIGFycmF5XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9wYXJlbnRcbiAgICAgKiBAcGFyYW0gblxuICAgICAqIEByZXR1cm4gbnVtYmVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBIZWFwLnByb3RvdHlwZS5fcGFyZW50ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnbj0nLCBuLCBNYXRoLmZsb29yKG4gLyAyKSk7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG4gLyAyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN3YXAgMiBlbGVtZW50cyBpbiBiaW5hcnkgdHJlZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBfc3dhcFxuICAgICAqIEBwYXJhbSBmaXJzdFxuICAgICAqIEBwYXJhbSBzZWNvbmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEhlYXAucHJvdG90eXBlLl9zd2FwID0gZnVuY3Rpb24gKGZpcnN0LCBzZWNvbmQpIHtcbiAgICAgICAgdmFyIHN3YXAgPSB0aGlzLl90cmVlW2ZpcnN0XTtcbiAgICAgICAgdGhpcy5fdHJlZVtmaXJzdF0gPSB0aGlzLl90cmVlW3NlY29uZF07XG4gICAgICAgIHRoaXMuX3RyZWVbc2Vjb25kXSA9IHN3YXA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaWZ0IGVsZW1lbnRzIGluIGJpbmFyeSB0cmVlXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9zaWZ0VXBcbiAgICAgKiBAcGFyYW0gaVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgSGVhcC5wcm90b3R5cGUuX3NpZnRVcCA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHdoaWxlIChpID4gMCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuX3BhcmVudChpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBhcmUodGhpcy5fdHJlZVtpXSwgdGhpcy5fdHJlZVtwYXJlbnRdKSAqIHRoaXMuX3R5cGUgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3dhcChpLCBwYXJlbnQpO1xuICAgICAgICAgICAgICAgIGkgPSBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2lmdCBkb3duIGVsZW1lbnRzIGluIGJpbmFyeSB0cmVlXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9zaWZ0RG93blxuICAgICAqIEBwYXJhbSBpXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBIZWFwLnByb3RvdHlwZS5fc2lmdERvd24gPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuX3RyZWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMuX2NoaWxkKGkpO1xuICAgICAgICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIDE7XG4gICAgICAgICAgICBpZiAoKGxlZnQgPCB0aGlzLl90cmVlLmxlbmd0aCkgJiYgKHJpZ2h0IDwgdGhpcy5fdHJlZS5sZW5ndGgpICYmXG4gICAgICAgICAgICAgICAgKHRoaXMuY29tcGFyZSh0aGlzLl90cmVlW2ldLCB0aGlzLl90cmVlW2xlZnRdKSAqIHRoaXMuX3R5cGUgPCAwIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGFyZSh0aGlzLl90cmVlW2ldLCB0aGlzLl90cmVlW3JpZ2h0XSkgKiB0aGlzLl90eXBlIDwgMCkpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyAyIGNoaWxkcmVuIGFuZCBvbmUgb2YgdGhlbSBtdXN0IGJlIHN3YXBwZWRcbiAgICAgICAgICAgICAgICAvLyBnZXQgY29ycmVjdCBlbGVtZW50IHRvIHNpZnQgZG93blxuICAgICAgICAgICAgICAgIHZhciBzaWZ0ID0gbGVmdDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb21wYXJlKHRoaXMuX3RyZWVbbGVmdF0sIHRoaXMuX3RyZWVbcmlnaHRdKSAqIHRoaXMuX3R5cGUgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZnQgPSByaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fc3dhcChpLCBzaWZ0KTtcbiAgICAgICAgICAgICAgICBpID0gc2lmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxlZnQgPCB0aGlzLl90cmVlLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuY29tcGFyZSh0aGlzLl90cmVlW2ldLCB0aGlzLl90cmVlW2xlZnRdKSAqIHRoaXMuX3R5cGUgPCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gb25seSBvbmUgY2hpbGQgZXhpc3RzXG4gICAgICAgICAgICAgICAgdGhpcy5fc3dhcChpLCBsZWZ0KTtcbiAgICAgICAgICAgICAgICBpID0gbGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBhIG5vZGUgZnJvbSB0b3Agb2YgdGhlIGhlYXAgYW5kIHNpZnQgdXBcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZXh0cmFjdFxuICAgICAqIEByZXR1cm4gYW55IFRoZSB2YWx1ZSBvZiB0aGUgZXh0cmFjdGVkIG5vZGUuXG4gICAgICovXG4gICAgSGVhcC5wcm90b3R5cGUuZXh0cmFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyZWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBleHRyYWN0IGZyb20gYW4gZW1wdHkgZGF0YSBzdHJ1Y3R1cmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV4dHJhY3RlZCA9IHRoaXMuX3RyZWVbMF07XG4gICAgICAgIGlmICh0aGlzLl90cmVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5fdHJlZSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdHJlZVswXSA9IHRoaXMuX3RyZWUucG9wKCk7XG4gICAgICAgICAgICB0aGlzLl9zaWZ0RG93bigwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0cmFjdGVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyBhbiBlbGVtZW50IGluIHRoZSBoZWFwIGJ5IHNpZnRpbmcgaXQgdXBcbiAgICAgKlxuICAgICAqIEBtZXRob2QgaW5zZXJ0XG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNlcnQuXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgSGVhcC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3RyZWUucHVzaCh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX3NpZnRVcCh0aGlzLl90cmVlLmxlbmd0aCAtIDEpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGVla3MgYXQgdGhlIG5vZGUgZnJvbSB0aGUgdG9wIG9mIHRoZSBoZWFwXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHRvcFxuICAgICAqIEByZXR1cm4gYW55IFRoZSB2YWx1ZSBvZiB0aGUgbm9kZSBvbiB0aGUgdG9wLlxuICAgICAqL1xuICAgIEhlYXAucHJvdG90eXBlLnRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyZWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBwZWVrIGF0IGFuIGVtcHR5IGhlYXBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyZWVbMF07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb3VudHMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgaGVhcFxuICAgICAqXG4gICAgICogQG1ldGhvZCBjb3VudFxuICAgICAqIEByZXR1cm4gbnVtYmVyIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGhlYXAuXG4gICAgICovXG4gICAgSGVhcC5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmVlLmxlbmd0aDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBoZWFwIGlzIGVtcHR5XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGlzRW1wdHlcbiAgICAgKiBAcmV0dXJuIGJvb2xlYW4gd2hldGhlciB0aGUgaGVhcCBpcyBlbXB0eS5cbiAgICAgKi9cbiAgICBIZWFwLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3RyZWUubGVuZ3RoID09PSAwKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJld2luZCBpdGVyYXRvciBiYWNrIHRvIHRoZSBzdGFydCAobm8tb3ApXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHJld2luZFxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIEhlYXAucHJvdG90eXBlLnJld2luZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fa2V5ID0gMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiBjdXJyZW50IG5vZGUgcG9pbnRlZCBieSB0aGUgaXRlcmF0b3JcbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3VycmVudFxuICAgICAqIEByZXR1cm4gYW55IFRoZSBjdXJyZW50IG5vZGUgdmFsdWUuXG4gICAgICovXG4gICAgSGVhcC5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyZWVbdGhpcy5fa2V5XTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiBjdXJyZW50IG5vZGUgaW5kZXhcbiAgICAgKlxuICAgICAqIEBtZXRob2Qga2V5XG4gICAgICogQHJldHVybiBhbnkgVGhlIGN1cnJlbnQgbm9kZSBpbmRleC5cbiAgICAgKi9cbiAgICBIZWFwLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNb3ZlIHRvIHRoZSBuZXh0IG5vZGVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgbmV4dFxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIEhlYXAucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2tleSsrO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTW92ZSB0byBwcmV2aW91cyBlbnRyeVxuICAgICAqXG4gICAgICogQG1ldGhvZCBwcmV2XG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgSGVhcC5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fa2V5LS07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBoZWFwIGNvbnRhaW5zIG1vcmUgbm9kZXNcbiAgICAgKlxuICAgICAqIEBtZXRob2QgdmFsaWRcbiAgICAgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiB0aGUgaGVhcCBjb250YWlucyBhbnkgbW9yZSBub2RlcywgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIEhlYXAucHJvdG90eXBlLnZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2tleSA+PSAwICYmIHRoaXMuX2tleSA8IHRoaXMuX3RyZWUubGVuZ3RoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbXBhcmUgZWxlbWVudHMgaW4gb3JkZXIgdG8gcGxhY2UgdGhlbSBjb3JyZWN0bHkgaW4gdGhlIGhlYXAgd2hpbGUgc2lmdGluZyB1cC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY29tcGFyZVxuICAgICAqIEBwYXJhbSBmaXJzdCBUaGUgdmFsdWUgb2YgdGhlIGZpcnN0IG5vZGUgYmVpbmcgY29tcGFyZWQuXG4gICAgICogQHBhcmFtIHNlY29uZCBUaGUgdmFsdWUgb2YgdGhlIHNlY29uZCBub2RlIGJlaW5nIGNvbXBhcmVkLlxuICAgICAqIEByZXR1cm4gbnVtYmVyIFJlc3VsdCBvZiB0aGUgY29tcGFyaXNvbiwgcG9zaXRpdmUgaW50ZWdlciBpZiBmaXJzdCBpcyBncmVhdGVyIHRoYW4gc2Vjb25kLCAwIGlmIHRoZXkgYXJlIGVxdWFsLCBuZWdhdGl2ZSBpbnRlZ2VyIG90aGVyd2lzZS5cbiAgICAgKiBIYXZpbmcgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0aGUgc2FtZSB2YWx1ZSBpbiBhIEhlYXAgaXMgbm90IHJlY29tbWVuZGVkLiBUaGV5IHdpbGwgZW5kIHVwIGluIGFuIGFyYml0cmFyeSByZWxhdGl2ZSBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICBIZWFwLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGZpcnN0LCBzZWNvbmQpIHtcbiAgICAgICAgaWYgKGZpcnN0ID4gc2Vjb25kKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmaXJzdCA9PSBzZWNvbmQpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBWaXN1YWxseSBkaXNwbGF5IGhlYXAgdHJlZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBfZGlzcGxheU5vZGVcbiAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAqIEBwYXJhbSBwcmVmaXhcbiAgICAgKiBAcGFyYW0gbGFzdFxuICAgICAqIEByZXR1cm4gU3RyaW5nXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBIZWFwLnByb3RvdHlwZS5fZGlzcGxheU5vZGUgPSBmdW5jdGlvbiAobm9kZSwgcHJlZml4LCBsYXN0KSB7XG4gICAgICAgIGlmIChwcmVmaXggPT09IHZvaWQgMCkgeyBwcmVmaXggPSAnJzsgfVxuICAgICAgICBpZiAobGFzdCA9PT0gdm9pZCAwKSB7IGxhc3QgPSB0cnVlOyB9XG4gICAgICAgIHZhciBsaW5lID0gcHJlZml4O1xuICAgICAgICAvLyBnZXQgY2hpbGQgaW5kZXhlc1xuICAgICAgICB2YXIgbGVmdCA9IHRoaXMuX2NoaWxkKG5vZGUpO1xuICAgICAgICB2YXIgcmlnaHQgPSBsZWZ0ICsgMTtcbiAgICAgICAgaWYgKGxhc3QpIHtcbiAgICAgICAgICAgIGxpbmUgKz0gKHByZWZpeCA/ICfilJTilIAnIDogJyAgJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsaW5lICs9ICfilJzilIAnO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUgKz0gdGhpcy5fdHJlZVtub2RlXTtcbiAgICAgICAgcHJlZml4ICs9IChsYXN0ID8gJyAgJyA6ICfilIIgJyk7XG4gICAgICAgIGlmIChsZWZ0IDwgdGhpcy5fdHJlZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxpbmUgKz0gJ1xcbicgKyB0aGlzLl9kaXNwbGF5Tm9kZShsZWZ0LCBwcmVmaXgsICh0aGlzLl90cmVlW3JpZ2h0XSA9PSB1bmRlZmluZWQgPyB0cnVlIDogZmFsc2UpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmlnaHQgPCB0aGlzLl90cmVlLmxlbmd0aCkge1xuICAgICAgICAgICAgbGluZSArPSAnXFxuJyArIHRoaXMuX2Rpc3BsYXlOb2RlKHJpZ2h0LCBwcmVmaXgsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgaGVhcCB0byBzdHJpbmdcbiAgICAgKlxuICAgICAqIEBtZXRob2QgdG9TdHJpbmdcbiAgICAgKiBAcmV0dXJuIHN0cmluZyAgIFRoZSBzZXJpYWxpemVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBIZWFwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gc3RhcnQgd2l0aCByb290IGFuZCByZWN1cnNpdmVseSBnb2VzIHRvIGVhY2ggbm9kZVxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheU5vZGUoMCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBoZWFwIHRvIGFycmF5XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHRvQXJyYXlcbiAgICAgKiBAcmV0dXJuIEFycmF5ICAgVGhlIHNlcmlhbGl6ZWQgYXJyYXkuXG4gICAgICovXG4gICAgSGVhcC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyZWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYXggaGVhcCBmbGFnXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgTUFYXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIEhlYXAuTUFYID0gMTtcbiAgICAvKipcbiAgICAgKiBNaW4gaGVhcCBmbGFnXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgTUlOXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIEhlYXAuTUlOID0gLTE7XG4gICAgcmV0dXJuIEhlYXA7XG59KSgpO1xubW9kdWxlLmV4cG9ydHMgPSBIZWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SGVhcC5qcy5tYXAiLCJ2YXIgX19leHRlbmRzID0gdGhpcy5fX2V4dGVuZHMgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgICBkLnByb3RvdHlwZSA9IG5ldyBfXygpO1xufTtcbnZhciBIZWFwID0gcmVxdWlyZSgnLi9IZWFwJyk7XG4vKipcbiAqIFRoZSBNYXhIZWFwIGNsYXNzIHByb3ZpZGVzIHRoZSBtYWluIGZ1bmN0aW9uYWxpdHkgb2YgYSBoZWFwLCBrZWVwaW5nIHRoZSBtYXhpbXVtIG9uIHRoZSB0b3AuXG4gKlxuICogQGNsYXNzIE1heEhlYXBcbiAqIEBleHRlbmRzIEhlYXBcbiAqL1xudmFyIE1heEhlYXAgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYXhIZWFwLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1heEhlYXAoKSB7XG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl90eXBlID0gSGVhcC5NQVg7XG4gICAgfVxuICAgIHJldHVybiBNYXhIZWFwO1xufSkoSGVhcCk7XG5tb2R1bGUuZXhwb3J0cyA9IE1heEhlYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYXhIZWFwLmpzLm1hcCIsInZhciBfX2V4dGVuZHMgPSB0aGlzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICAgIGQucHJvdG90eXBlID0gbmV3IF9fKCk7XG59O1xudmFyIEhlYXAgPSByZXF1aXJlKCcuL0hlYXAnKTtcbi8qKlxuICogVGhlIE1pbkhlYXAgY2xhc3MgcHJvdmlkZXMgdGhlIG1haW4gZnVuY3Rpb25hbGl0eSBvZiBhIGhlYXAsIGtlZXBpbmcgdGhlIG1pbmltdW0gb24gdGhlIHRvcC5cbiAqXG4gKiBAY2xhc3MgTWluSGVhcFxuICogQGV4dGVuZHMgSGVhcFxuICovXG52YXIgTWluSGVhcCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1pbkhlYXAsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWluSGVhcCgpIHtcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX3R5cGUgPSBIZWFwLk1JTjtcbiAgICB9XG4gICAgcmV0dXJuIE1pbkhlYXA7XG59KShIZWFwKTtcbm1vZHVsZS5leHBvcnRzID0gTWluSGVhcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1pbkhlYXAuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgSGVhcCA9IHJlcXVpcmUoJy4vSGVhcCcpO1xuLyoqXG4gKiBUaGUgUHJpb3JpdHlRdWV1ZSBjbGFzcyBwcm92aWRlcyB0aGUgbWFpbiBmdW5jdGlvbmFsaXR5IG9mIGFuIHByaW9yaXRpemVkIHF1ZXVlLCBpbXBsZW1lbnRlZCB1c2luZyBhIG1heCBoZWFwLlxuICpcbiAqIEBjbGFzcyBQcmlvcml0eVF1ZXVlXG4gKiBAZXh0ZW5kcyBIZWFwXG4gKi9cbnZhciBQcmlvcml0eVF1ZXVlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJpb3JpdHlRdWV1ZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQcmlvcml0eVF1ZXVlKCkge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fdHlwZSA9IEhlYXAuTUFYO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGVsZW1lbnQgdG8gdGhlIHF1ZXVlXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGVucXVldWVcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGVucXVldWUuXG4gICAgICogQHBhcmFtIHByaW9yaXR5IFRoZSBwcmlvcml0eSBvZiB2YWx1ZS5cbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24gKHZhbHVlLCBwcmlvcml0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnQobmV3IFByaW9yaXR5UXVldWVOb2RlKHZhbHVlLCBwcmlvcml0eSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVxdWV1ZXMgYSBub2RlIGZyb20gdGhlIHF1ZXVlXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlcXVldWVcbiAgICAgKiBAcmV0dXJuIGFueSAgVGhlIHZhbHVlIG9mIHRoZSBkZXF1ZXVlZCBub2RlLlxuICAgICAqL1xuICAgIFByaW9yaXR5UXVldWUucHJvdG90eXBlLmRlcXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhY3QoKS52YWx1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBlZWtzIGF0IHRoZSBub2RlIGZyb20gdGhlIHRvcCBvZiB0aGUgaGVhcFxuICAgICAqXG4gICAgICogQG1ldGhvZCB0b3BcbiAgICAgKiBAcmV0dXJuIGFueSBUaGUgdmFsdWUgb2YgdGhlIG5vZGUgb24gdGhlIHRvcC5cbiAgICAgKi9cbiAgICBQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS50b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnRvcC5jYWxsKHRoaXMpLnZhbHVlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tcGFyZSBlbGVtZW50cyBpbiBvcmRlciB0byBwbGFjZSB0aGVtIGNvcnJlY3RseSBpbiB0aGUgaGVhcCB3aGlsZSBzaWZ0aW5nIHVwLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjb21wYXJlXG4gICAgICogQHBhcmFtIGZpcnN0IFRoZSB2YWx1ZSBvZiB0aGUgZmlyc3Qgbm9kZSBiZWluZyBjb21wYXJlZC5cbiAgICAgKiBAcGFyYW0gc2Vjb25kIFRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIG5vZGUgYmVpbmcgY29tcGFyZWQuXG4gICAgICogQHJldHVybiBudW1iZXIgUmVzdWx0IG9mIHRoZSBjb21wYXJpc29uLCBwb3NpdGl2ZSBpbnRlZ2VyIGlmIGZpcnN0IGlzIGdyZWF0ZXIgdGhhbiBzZWNvbmQsIDAgaWYgdGhleSBhcmUgZXF1YWwsIG5lZ2F0aXZlIGludGVnZXIgb3RoZXJ3aXNlLlxuICAgICAqIEhhdmluZyBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSBzYW1lIHZhbHVlIGluIGEgSGVhcCBpcyBub3QgcmVjb21tZW5kZWQuIFRoZXkgd2lsbCBlbmQgdXAgaW4gYW4gYXJiaXRyYXJ5IHJlbGF0aXZlIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIFByaW9yaXR5UXVldWUucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoZmlyc3QsIHNlY29uZCkge1xuICAgICAgICBpZiAoZmlyc3QucHJpb3JpdHkgPiBzZWNvbmQucHJpb3JpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZpcnN0LnByaW9yaXR5ID09IHNlY29uZC5wcmlvcml0eSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBQcmlvcml0eVF1ZXVlO1xufSkoSGVhcCk7XG4vKipcbiAqIFByaW9yaXR5UXVldWUgTm9kZVxuICpcbiAqIEBjbGFzcyBQcmlvcml0eVF1ZXVlTm9kZVxuICovXG52YXIgUHJpb3JpdHlRdWV1ZU5vZGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQHBhcmFtIHByaW9yaXR5XG4gICAgICovXG4gICAgZnVuY3Rpb24gUHJpb3JpdHlRdWV1ZU5vZGUodmFsdWUsIHByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBub2RlIHRvIHN0cmluZ1xuICAgICAqXG4gICAgICogQG1ldGhvZCB0b1N0cmluZ1xuICAgICAqIEByZXR1cm4gc3RyaW5nICAgVGhlIHNlcmlhbGl6ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIFByaW9yaXR5UXVldWVOb2RlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgKyBcIiBbXCIgKyB0aGlzLnByaW9yaXR5ICsgXCJdXCI7XG4gICAgfTtcbiAgICByZXR1cm4gUHJpb3JpdHlRdWV1ZU5vZGU7XG59KSgpO1xubW9kdWxlLmV4cG9ydHMgPSBQcmlvcml0eVF1ZXVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJpb3JpdHlRdWV1ZS5qcy5tYXAiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBEb3VibHlMaW5rZWRMaXN0ID0gcmVxdWlyZSgnLi9Eb3VibHlMaW5rZWRMaXN0Jyk7XG4vKipcbiAqIFRoZSBRdWV1ZSBjbGFzcyBwcm92aWRlcyB0aGUgbWFpbiBmdW5jdGlvbmFsaXR5IG9mIGEgcXVldWUgaW1wbGVtZW50ZWQgdXNpbmcgYSBkb3VibHkgbGlua2VkIGxpc3QuXG4gKlxuICogQGNsYXNzIFF1ZXVlXG4gKiBAZXh0ZW5kcyBEb3VibHlMaW5rZWRMaXN0XG4gKi9cbnZhciBRdWV1ZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFF1ZXVlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFF1ZXVlKCkge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBlbGVtZW50IHRvIHRoZSBxdWV1ZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBlbnF1ZXVlXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBlbnF1ZXVlLlxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIFF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1c2godmFsdWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVxdWV1ZXMgYSBub2RlIGZyb20gdGhlIHF1ZXVlXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlcXVldWVcbiAgICAgKiBAcmV0dXJuIGFueSAgVGhlIHZhbHVlIG9mIHRoZSBkZXF1ZXVlZCBub2RlLlxuICAgICAqL1xuICAgIFF1ZXVlLnByb3RvdHlwZS5kZXF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGlmdCgpO1xuICAgIH07XG4gICAgcmV0dXJuIFF1ZXVlO1xufSkoRG91Ymx5TGlua2VkTGlzdCk7XG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVldWUuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgRG91Ymx5TGlua2VkTGlzdCA9IHJlcXVpcmUoJy4vRG91Ymx5TGlua2VkTGlzdCcpO1xuLyoqXG4gKiBUaGUgU3RhY2sgY2xhc3MgcHJvdmlkZXMgdGhlIG1haW4gZnVuY3Rpb25hbGl0eSBvZiBhIHN0YWNrIGltcGxlbWVudGVkIHVzaW5nIGEgZG91Ymx5IGxpbmtlZCBsaXN0LlxuICpcbiAqIEBjbGFzcyBTdGFja1xuICogQGV4dGVuZHMgRG91Ymx5TGlua2VkTGlzdFxuICovXG52YXIgU3RhY2sgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdGFjaywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdGFjaygpIHtcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIHJldHVybiBTdGFjaztcbn0pKERvdWJseUxpbmtlZExpc3QpO1xubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YWNrLmpzLm1hcCIsIi8qKlxuICogU1RMXG4gKiBAdHlwZSB7e0RvdWJseUxpbmtlZExpc3Q6IGV4cG9ydHMsIFN0YWNrOiBleHBvcnRzLCBRdWV1ZTogZXhwb3J0cywgSGVhcDogZXhwb3J0cywgTWF4SGVhcDogZXhwb3J0cywgTWluSGVhcDogZXhwb3J0cywgUHJpb3JpdHlRdWV1ZTogZXhwb3J0c319XG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXHREb3VibHlMaW5rZWRMaXN0OiByZXF1aXJlKCcuL0RhdGFzdHJ1Y3R1cmVzL0RvdWJseUxpbmtlZExpc3QnKSxcblx0U3RhY2s6IHJlcXVpcmUoJy4vRGF0YXN0cnVjdHVyZXMvU3RhY2snKSxcblx0UXVldWU6IHJlcXVpcmUoJy4vRGF0YXN0cnVjdHVyZXMvUXVldWUnKSxcblx0SGVhcDogcmVxdWlyZSgnLi9EYXRhc3RydWN0dXJlcy9IZWFwJyksXG5cdE1heEhlYXA6IHJlcXVpcmUoJy4vRGF0YXN0cnVjdHVyZXMvTWF4SGVhcCcpLFxuXHRNaW5IZWFwOiByZXF1aXJlKCcuL0RhdGFzdHJ1Y3R1cmVzL01pbkhlYXAnKSxcblx0UHJpb3JpdHlRdWV1ZTogcmVxdWlyZSgnLi9EYXRhc3RydWN0dXJlcy9Qcmlvcml0eVF1ZXVlJylcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBDYW52YXMgZnJvbSAnLi9tb2R1bGVzL0NhbnZhcyc7XG5cbi8qKlxuICogV2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHksIGluaXRpYWxpemUgdGhlIGFwcGxpY2F0aW9uXG4gKi9cbiQoKCkgPT4ge1xuICAgIG5ldyBDYW52YXMoXCIjY2FudmFzXCIsIDEwKTtcbn0pO1xuIiwiLy8gZWRpdG9yIGVsZW1lbnRzIChnYXRlcywgd2lyZXMuLi4pXG5pbXBvcnQgKiBhcyBlZGl0b3JFbGVtZW50cyBmcm9tICcuL2VkaXRvckVsZW1lbnRzJ1xuXG4vLyBzdmcgZWxlbWVudHNcbmltcG9ydCB7UGF0dGVybiwgUmVjdGFuZ2xlLCBQb2x5TGluZVBvaW50LCBQb2x5TGluZVBvaW50cywgUG9seUxpbmV9IGZyb20gJy4vc3ZnT2JqZWN0cydcblxuLy8gbmV0d29yayBsb2dpYyBhbmQgc2ltdWxhdGlvblxuaW1wb3J0IExvZ2ljIGZyb20gJy4vTG9naWMnXG5pbXBvcnQgU2ltdWxhdGlvbiBmcm9tICcuL1NpbXVsYXRpb24nXG5cbi8vIHVpIHN0dWZmXG5pbXBvcnQgQ29udGV4dE1lbnUgZnJvbSAnLi91aS9Db250ZXh0TWVudSdcbmltcG9ydCBGbG9hdGluZ01lbnUgZnJvbSAnLi91aS9GbG9hdGluZ01lbnUnXG5pbXBvcnQgVHV0b3JpYWwgZnJvbSAnLi91aS9UdXRvcmlhbCdcbmltcG9ydCBNZXNzYWdlcyBmcm9tICcuL3VpL01lc3NhZ2VzJ1xuaW1wb3J0IFZpZXdCb3ggZnJvbSAnLi91aS9WaWV3Qm94J1xuXG4vLyBtb3VzZSBzY3JvbGwgZXZlbnQgbGlzdGVyZXIgZm9yIHVpLCBtYW5oYXR0YW4gZGlzdGFuY2UgZm9yIGltcG9ydERhdGFcbmltcG9ydCB7YWRkTW91c2VTY3JvbGxFdmVudExpc3RlbmVyLCBtYW5oYXR0YW5EaXN0YW5jZX0gZnJvbSAnLi9vdGhlci9oZWxwZXJGdW5jdGlvbnMnXG5cbi8vIHVzZWQgaW4gaW1wb3J0RGF0YVxuLy8gbm90ZTogaW1wb3J0ZWQgZnJvbSBhIG5vZGUgbW9kdWxlXG5pbXBvcnQge1ByaW9yaXR5UXVldWV9IGZyb20gJ2xpYnN0bCdcblxuY29uc3QgY3RybEtleSA9IDE3LFxuICAgIGNtZEtleSA9IDkxO1xuXG4vKiogQG1vZHVsZSBDYW52YXMgKi9cbi8qKlxuICogTWFpbiBjbGFzcyBvZiB0aGUgYXBwbGljYXRpb24uIEl0IHJlcHJlc2VudHMgYW4gaW5zdGFuY2Ugb2YgdGhlIHdob2xlIGVkaXRvciBhbmQgaG9sZHNcbiAqIHJlZmVyZW5jZXMgdG8gYWxsIGl0cyBlbGVtZW50cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBTdmcgY2xhc3NcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FudmFzICAgcXVlcnkgc2VsZWN0b3Igb2YgdGhlIFNWRyBlbGVtZW50LCB0aGF0IHdpbGwgY29udGFpbiBhbGwgU1ZHIGNvbnRlbnQgb2YgdGhlIGFwcGxpY2F0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGdyaWRTaXplIGluaXRpYWwgc2l6ZSBvZiB0aGUgZ3JpZCBpbiBTVkcgcGl4ZWxzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBncmlkU2l6ZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogalF1ZXJ5IGVsZW1lbnQgZm9yIHRoZSBTVkcgZG9jdW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJHN2ZyA9ICQoY2FudmFzKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogc3BhY2UgYmV0d2VlbiBncmlkIGxpbmVzIGluIFNWRyBwaXhlbHNcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ3JpZFNpemUgPSBncmlkU2l6ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXJyYXkgb2YgYWxsIGJveGVzIChpbnN0YW5jZXMgb2Ygb2JqZWN0cyBkZXJpdmVkIGZyb20gZWRpdG9yRWxlbWVudHMuQm94KSB1c2VkIG9uIENhbnZhc1xuICAgICAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJveGVzID0gW107IC8vIHN0b3JlcyBhbGwgYm94ZXNcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXJyYXkgb2YgYWxsIHdpcmVzIChpbnN0YW5jZXMgb2YgZWRpdG9yRWxlbWVudHMuV2lyZSkgdXNlZCBvbiBDYW52YXNcbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53aXJlcyA9IFtdOyAvLyBzdG9yZXMgYWxsIHdpcmVzXG5cbiAgICAgICAgLy8gVE9ETyBkb2N1bWVudCB0aGlzXG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWVzc2FnZXMoKTtcblxuICAgICAgICB0aGlzLnNpbXVsYXRpb25FbmFibGVkID0gdHJ1ZVxuICAgICAgICB0aGlzLnNpbXVsYXRpb24gPSBuZXcgU2ltdWxhdGlvbih0aGlzKTsgLy8gZHVtbXksIHdpbGwgYmUgb3ZlcndyaXR0ZW4gb24gc3RhcnROZXdTaW11bGF0aW9uXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRpc3RhbmNlIGZyb20gdGhlIGxlZnQgdG9wIGNvcm5lciB0byB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgaW1wb3J0ZWQgbmV0d29ya1xuICAgICAgICAgKiBhbmQgZGlzdGFuY2UgZnJvbSB0aGUgbGVmdCB0b3AgY29ybmVyIHRvIHRoZSBpbXBvcnRlZCBibGFjayBib3ggX2luIGdyaWQgcGl4ZWxzX1xuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZWZ0VG9wUGFkZGluZyA9IDQ7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBkZWZzIGVsZW1lbnQsIHVzZWQgZm9yIHBhdHRlcm5zXG4gICAgICAgIHRoaXMuJGRlZnMgPSAkKFwiPGRlZnM+XCIpO1xuICAgICAgICB0aGlzLiRzdmcucHJlcGVuZCh0aGlzLiRkZWZzKTtcblxuICAgICAgICAvLyBCQUNLR1JPVU5EIFBBVFRFUk5cbiAgICAgICAgbGV0IHBhdHRlcm4gPSBuZXcgUGF0dGVybihcImdyaWRcIiwgdGhpcy5ncmlkU2l6ZSwgdGhpcy5ncmlkU2l6ZSk7XG5cbiAgICAgICAgbGV0IHBhdHRlcm5Qb2ludHMgPSBuZXcgUG9seUxpbmVQb2ludHMoKS5hcHBlbmQobmV3IFBvbHlMaW5lUG9pbnQoMCwgMCkpLmFwcGVuZChuZXcgUG9seUxpbmVQb2ludCh0aGlzLmdyaWRTaXplLCAwKSkuYXBwZW5kKG5ldyBQb2x5TGluZVBvaW50KHRoaXMuZ3JpZFNpemUsIHRoaXMuZ3JpZFNpemUpKTtcblxuICAgICAgICBwYXR0ZXJuLmFkZENoaWxkKG5ldyBQb2x5TGluZShwYXR0ZXJuUG9pbnRzLCAyLCBcIiNjMmMzZTRcIikpO1xuICAgICAgICB0aGlzLmFkZFBhdHRlcm4ocGF0dGVybi5nZXQoKSk7XG5cbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgXCJ1cmwoI2dyaWQpXCIsIFwibm9uZVwiKTtcbiAgICAgICAgdGhpcy5hcHBlbmRKUXVlcnlPYmplY3QodGhpcy5iYWNrZ3JvdW5kLmdldCgpKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG5cbiAgICAgICAgLy8gc2V0IHRoZSB2aWV3Ym94IGZvciBmdXR1cmUgem9vbWluZyBhbmQgbW92aW5nIG9mIHRoZSBjYW52YXNcbiAgICAgICAgdGhpcy4kc3ZnLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pbllNaW4gc2xpY2UnKVxuICAgICAgICB0aGlzLnZpZXdib3ggPSBuZXcgVmlld0JveCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodClcbiAgICAgICAgdGhpcy5hcHBseVZpZXdib3goKVxuXG4gICAgICAgIC8vIENPTlNUUlVDVCBDT05URVhUIE1FTlVcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudSA9IG5ldyBDb250ZXh0TWVudSh0aGlzKTtcblxuICAgICAgICAvLyBDT05TVFJVQ1QgRkxPQVRJTkcgTUVOVVxuICAgICAgICB0aGlzLmZsb2F0aW5nTWVudSA9IG5ldyBGbG9hdGluZ01lbnUodGhpcyk7XG5cbiAgICAgICAgbGV0IHRhcmdldDtcblxuICAgICAgICAvLyBBTEwgRVZFTlQgQ0FMTEJBQ0tTXG4gICAgICAgIHRoaXMuJHN2Zy5vbignbW91c2Vkb3duJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy5nZXRSZWFsVGFyZ2V0KGV2ZW50LnRhcmdldCk7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIHByb3BhZ2F0ZSBtb3VzZWRvd24gdG8gdGhlIHJlYWwgdGFyZ2V0XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lm9uTW91c2VEb3duKGV2ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbW91c2Vkb3duIGhhcHBlbmVkIGRpcmVjdGx5IG9uIHRoZSBzdmdcbiAgICAgICAgICAgICAgICB0aGlzLm9uTW91c2VEb3duKGV2ZW50KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmhpZGVDb250ZXh0TWVudSgpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSkub24oJ21vdXNlbW92ZScsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5vbk1vdXNlTW92ZShldmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG1vdXNlbW92ZSBoYXBwZW5lZCBkaXJlY3RseSBvbiB0aGUgc3ZnXG4gICAgICAgICAgICAgICAgdGhpcy5vbk1vdXNlTW92ZShldmVudClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSkub24oJ21vdXNldXAnLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQub25Nb3VzZVVwKGV2ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbW91c2V1cCBoYXBwZW5lZCBkaXJlY3RseSBvbiB0aGUgc3ZnXG4gICAgICAgICAgICAgICAgdGhpcy5vbk1vdXNlVXAoZXZlbnQpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhcmdldCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSkub24oXCJjb250ZXh0bWVudVwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlDb250ZXh0TWVudShldmVudC5wYWdlWCwgZXZlbnQucGFnZVksIHRoaXMuZ2V0UmVhbEpRdWVyeVRhcmdldChldmVudC50YXJnZXQpKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBldmVudCA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uS2V5RG93bihldmVudCk7XG4gICAgICAgIH0pLm9uKFwia2V5dXBcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbktleVVwKGV2ZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSB2aWV3Ym94IG9uIHdpbmRvdyByZXNpemVcbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdib3gubmV3RGltZW5zaW9ucyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLmFwcGx5Vmlld2JveCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBhZGRNb3VzZVNjcm9sbEV2ZW50TGlzdGVuZXIoY2FudmFzLCBldmVudCA9PiB7XG4gICAgICAgICAgICAvLyB6b29tIG9ubHkgaWYgdGhlIGN0cmwga2V5IGlzIG5vdCBwcmVzc2VkXG4gICAgICAgICAgICBpZiAoIWV2ZW50LmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnpvb20gKz0gZXZlbnQuZGVsdGEgKiAwLjE7XG5cbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25zID0ge1xuICAgICAgICAgICAgICAgICcrJzogMC4xLFxuICAgICAgICAgICAgICAgICctJzogLTAuMVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWN0aW9uc1tldmVudC5rZXldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy56b29tICs9IGFjdGlvbnNbZXZlbnQua2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICAvKipcbiAgICAgICAgICogcHJvcGVydHkgY29udGFpbmluZyBhbiBpbnN0YW5jZSBvZiBbVHV0b3JpYWxdKC4vbW9kdWxlLVR1dG9yaWFsLmh0bWwpLCBpZiB0aGVyZSBpcyBhbnlcbiAgICAgICAgICogQHR5cGUge1R1dG9yaWFsfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50dXRvcmlhbDtcblxuICAgICAgICAvLyBjaGVjayBpZiB0aGUgdXNlciB2aXNpdHMgZm9yIHRoZSBmaXJzdCB0aW1lLCBpZiBzbywgc3RhcnQgdGhlIHR1dG9yaWFsXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWxvY2FsU3RvcmFnZS51c2VySGFzVmlzaXRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRUdXRvcmlhbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHdpZHRoIG9mIHRoZSBtYWluIFNWRyBlbGVtZW50XG4gICAgICogQHJldHVybiB7bnVtYmVyfSB3aWR0aCBvZiB0aGUgU1ZHIGVsZW1lbnQgaW4gcGl4ZWxzXG4gICAgICovXG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kc3ZnLndpZHRoKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGhlaWdodCBvZiB0aGUgbWFpbiBTVkcgZWxlbWVudFxuICAgICAqIEByZXR1cm4ge251bWJlcn0gaGVpZ2h0IG9mIHRoZSBTVkcgZWxlbWVudCBpbiBwaXhlbHNcbiAgICAgKi9cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kc3ZnLmhlaWdodCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyBhbGwga2V5ZG93biBldmVudHMgdGhhdCBhcmUgY29ubmVjdGVkIHRvIENhbnZhc1xuICAgICAqIEBwYXJhbSAge2pxdWVyeS5LZXlib2FyZEV2ZW50fSBldmVudCBLZXlib2FyZEV2ZW50IGdlbmVyYXRlZCBieSBhIGxpc3RlbmVyXG4gICAgICovXG4gICAgb25LZXlEb3duKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBjdHJsS2V5IHx8IGV2ZW50LmtleUNvZGUgPT09IGNtZEtleSkge1xuICAgICAgICAgICAgdGhpcy4kc3ZnLmFkZENsYXNzKCdncmFiYmFibGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgYWxsIGtleXVwIGV2ZW50cyB0aGF0IGFyZSBjb25uZWN0ZWQgdG8gQ2FudmFzXG4gICAgICogQHBhcmFtICB7anF1ZXJ5LktleWJvYXJkRXZlbnR9IGV2ZW50IEtleWJvYXJkRXZlbnQgZ2VuZXJhdGVkIGJ5IGEgbGlzdGVuZXJcbiAgICAgKi9cbiAgICBvbktleVVwKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBjdHJsS2V5IHx8IGV2ZW50LmtleUNvZGUgPT09IGNtZEtleSkge1xuICAgICAgICAgICAgdGhpcy4kc3ZnLnJlbW92ZUNsYXNzKCdncmFiYmFibGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgYWxsIG1vdXNlZG93biBldmVudHMgdGhhdCBhcmUgaGFwcGVuaW5nIGRpcmVjdGx5IG9uIHRoZSBDYW52YXNcbiAgICAgKiBAcGFyYW0gIHtqcXVlcnkuTW91c2VFdmVudH0gZXZlbnQgTW91c2VFdmVudCBnZW5lcmF0ZWQgYnkgYSBsaXN0ZW5lclxuICAgICAqL1xuICAgIG9uTW91c2VEb3duKGV2ZW50KSB7XG4gICAgICAgIC8vIGFueSBjbGljayBvbiBjYW52YXMgY2FuY2VscyB0aGUgd2lyZSBjcmVhdGlvblxuICAgICAgICB0aGlzLmNhbmNlbFdpcmVDcmVhdGlvbigpO1xuXG4gICAgICAgIC8vIG1pZGRsZSBtb3VzZSBvciBsZWZ0IG1vdXNlICsgY3RybCBtb3ZlcyB0aGUgY2FudmFzXG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMiB8fCAoZXZlbnQud2hpY2ggPT09IDEgJiYgZXZlbnQuY3RybEtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuJHN2Zy5hZGRDbGFzcygnZ3JhYmJlZCcpO1xuICAgICAgICAgICAgdGhpcy5tb3ZlQ2FudmFzID0ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGV2ZW50LnBhZ2VYLFxuICAgICAgICAgICAgICAgIHRvcDogZXZlbnQucGFnZVlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgYWxsIG1vdXNlbW92ZSBldmVudHMgdGhhdCBhcmUgaGFwcGVuaW5nIGRpcmVjdGx5IG9uIHRoZSBDYW52YXNcbiAgICAgKiBAcGFyYW0gIHtqcXVlcnkuTW91c2VFdmVudH0gZXZlbnQgTW91c2VFdmVudCBnZW5lcmF0ZWQgYnkgYSBsaXN0ZW5lclxuICAgICAqL1xuICAgIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLm1vdmVDYW52YXMpIHtcbiAgICAgICAgICAgIGxldCBsZWZ0ID0gZXZlbnQucGFnZVggLSB0aGlzLm1vdmVDYW52YXMubGVmdFxuICAgICAgICAgICAgbGV0IHRvcCA9IGV2ZW50LnBhZ2VZIC0gdGhpcy5tb3ZlQ2FudmFzLnRvcFxuXG4gICAgICAgICAgICB0aGlzLnZpZXdib3gubGVmdFNoaWZ0ICs9IGxlZnRcbiAgICAgICAgICAgIHRoaXMudmlld2JveC50b3BTaGlmdCArPSB0b3BcbiAgICAgICAgICAgIHRoaXMuYXBwbHlWaWV3Ym94KClcblxuICAgICAgICAgICAgdGhpcy5tb3ZlQ2FudmFzID0ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGV2ZW50LnBhZ2VYLFxuICAgICAgICAgICAgICAgIHRvcDogZXZlbnQucGFnZVlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgYWxsIG1vdXNldXAgZXZlbnRzIHRoYXQgYXJlIGhhcHBlbmluZyBkaXJlY3RseSBvbiB0aGUgQ2FudmFzXG4gICAgICovXG4gICAgb25Nb3VzZVVwKCkge1xuICAgICAgICBpZiAodGhpcy5tb3ZlQ2FudmFzKSB7XG4gICAgICAgICAgICB0aGlzLiRzdmcucmVtb3ZlQ2xhc3MoJ2dyYWJiZWQnKTtcbiAgICAgICAgICAgIHRoaXMubW92ZUNhbnZhcyA9IHVuZGVmaW5lZFxuXG4gICAgICAgICAgICAvLyBpZiB0dXRvcmlhbCBleGlzdHMsIGNhbGwgdHV0b3JpYWwgY2FsbGJhY2tcbiAgICAgICAgICAgIGlmICh0aGlzLnR1dG9yaWFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50dXRvcmlhbC5vbkNhbnZhc01vdmVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZpZXdCb3ggYXR0cmlidXRlIG9mIHRoZSBTVkcgZWxlbWVudCBhbmQgc2l6ZSBhbmQgcG9zaXRpb24gYXR0cmlidXRlc1xuICAgICAqIG9mIHRoZSByZWN0YW5nbGUgd2l0aCB0aGUgYmFja2dyb3VuZCBncmlkIHRvIG1hdGNoIHRoZSB2YWx1ZXMgaW4gdGhpcy52aWV3Ym94XG4gICAgICovXG4gICAgYXBwbHlWaWV3Ym94KCkge1xuICAgICAgICAvLyBhZGp1c3QgYmFja2dyb3VuZFxuICAgICAgICB0aGlzLmJhY2tncm91bmQuYWRkQXR0cih7eDogdGhpcy52aWV3Ym94LmxlZnQsIHk6IHRoaXMudmlld2JveC50b3AsIHdpZHRoOiB0aGlzLnZpZXdib3gud2lkdGgsIGhlaWdodDogdGhpcy52aWV3Ym94LmhlaWdodH0pXG5cbiAgICAgICAgLy8gc2V0IHRoZSB2aWV3Qm94IGF0dHJpYnV0ZVxuICAgICAgICB0aGlzLiRzdmcuYXR0cigndmlld0JveCcsIHRoaXMudmlld2JveC5zdHIpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHpvb20gbXVsdGlwbGllciBvZiB0aGUgY2FudmFzXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCB6b29tKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Ym94Lnpvb21cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHpvb20gbXVsdGlwbGllciBvZiB0aGUgY2FudmFzLlxuICAgICAqIEkgc2V0cyB0aGUgdmlld2JveCB6b29tIGFuZCB0aGVuIGFwcGxpZXMgdGhlIG5ldyB2YWx1ZSBieSBjYWxsaW5nIHRoaXMuYXBwbHlWaWV3Ym94KClcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHZhbHVlIHNldCB0aGUgem9vbSB0byB0aGlzIHZhbHVlXG4gICAgICovXG4gICAgc2V0IHpvb20odmFsdWUpIHtcbiAgICAgICAgdGhpcy52aWV3Ym94Lnpvb20gPSB2YWx1ZVxuICAgICAgICB0aGlzLmFwcGx5Vmlld2JveCgpXG5cbiAgICAgICAgLy8gaWYgdHV0b3JpYWwgZXhpc3RzLCBjYWxsIHR1dG9yaWFsIGNhbGxiYWNrXG4gICAgICAgIGlmICh0aGlzLnR1dG9yaWFsKSB7XG4gICAgICAgICAgICB0aGlzLnR1dG9yaWFsLm9uQ2FudmFzWm9vbWVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzdGFydCB0aGUgdHV0b3JpYWxcbiAgICAgKi9cbiAgICBzdGFydFR1dG9yaWFsKCkge1xuICAgICAgICAvLyBpbnN0YW50aWF0ZSB0aGUgdHV0b3JpYWxcbiAgICAgICAgdGhpcy50dXRvcmlhbCA9IG5ldyBUdXRvcmlhbCh0aGlzLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBzZXQgdXNlckhhc1Zpc2l0ZWQgdG8gdHJ1ZSB3aGVuIHVzZXIgY2xvc2VzIChvciBmaW5pc2hlcykgdGhlIHR1dG9yaWFsXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UudXNlckhhc1Zpc2l0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyB1bnNldCB0aGUgdGhpcy50dXRvcmlhbCBwcm9wZXJ0eVxuICAgICAgICAgICAgdGhpcy50dXRvcmlhbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc3RhcnQgdGhlIHR1dG9yaWFsXG4gICAgICAgIHRoaXMudHV0b3JpYWwuc3RhcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhbiBvYmplY3QgY29udGFpbmluZyBleHBvcnQgZGF0YSBmb3IgdGhlIENhbnZhcyBhbmQgYWxsIGVsZW1lbnRzLlxuICAgICAqIERhdGEgZnJvbSB0aGlzIGZ1bmN0aW9uIHNob3VsZCBjb3ZlciBhbGwgaW1wb3J0YW50IGluZm9ybWF0aW9uIG5lZWRlZCB0byBpbXBvcnQgdGhlXG4gICAgICogbmV0d29yayBpbiBhIGRpZmZlcmVudCBzZXNzaW9uLlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgaW5mb21yYXRpb24gYWJvdXQgdGhlIG5ldHdvcmtcbiAgICAgKi9cbiAgICBnZXQgZXhwb3J0RGF0YSgpIHtcbiAgICAgICAgdGhpcy5leHBvcnRXaXJlSWRNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuZXhwb3J0V2lyZUlkID0gMDtcblxuICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgIGJveGVzOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAoY29uc3QgYm94IG9mIHRoaXMuYm94ZXMpIHtcbiAgICAgICAgICAgIGRhdGEuYm94ZXMucHVzaChib3guZXhwb3J0RGF0YSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3JlYXRlIGEgbG9naWMgbmV0d29yayBmcm9tIHRoZSBkYXRhIHByb3ZpZGVkXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBkYXRhIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbXBvcnRlZCBuZXR3b3JrXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSBbeF0gIGhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIGxlZnQgdG9wIGNvcm5lciBvZiB0aGUgbmV0d29yayBpbiBncmlkIHBpeGVsc1xuICAgICAqIEBwYXJhbSAge251bWJlcn0gW3ldICB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgbGVmdCB0b3AgY29ybmVyIG9mIHRoZSBuZXR3b3JrIGluIGdyaWQgcGl4ZWxzXG4gICAgICovXG4gICAgaW1wb3J0RGF0YShkYXRhLCB4LCB5KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGxldCB3YXJuaW5ncyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgeCBvciB5IGlzIHVuZGVmaW5lZCwgc2V0IGl0IHRvIGxlZnRUb3BQYWRkaW5nIGluc3RlYWRcbiAgICAgICAgICAgIC8vIChjYW5ub3QgdXNlIHggfHwgbGVmdFRvcFBhZGRpbmcgYmVjYXVzZSBvZiAwKVxuICAgICAgICAgICAgeCA9IHggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8geFxuICAgICAgICAgICAgICAgIDogdGhpcy5sZWZ0VG9wUGFkZGluZ1xuICAgICAgICAgICAgeSA9IHkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8geVxuICAgICAgICAgICAgICAgIDogdGhpcy5sZWZ0VG9wUGFkZGluZ1xuXG4gICAgICAgICAgICB0aGlzLnNpbXVsYXRpb25FbmFibGVkID0gZmFsc2VcblxuICAgICAgICAgICAgLy8gbGlzdCBvZiB3aXJlcyB0byBiZSBhZGRlZFxuICAgICAgICAgICAgbGV0IG5ld1dpcmVzID0gbmV3IE1hcCgpO1xuXG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBsZWZ0bW9zdCBhbmQgdG9wbW9zdCBjb29yZGluYXRlIG9mIGFueSBib3gsIHNhdmUgdGhlbSB0byBsZWZ0VG9wQ29ybmVyXG4gICAgICAgICAgICBsZXQgbGVmdFRvcENvcm5lciA9IHtcbiAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgYm94RGF0YSBvZiBkYXRhLmJveGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJveERhdGEudHJhbnNmb3JtICYmIGJveERhdGEudHJhbnNmb3JtLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNmb3JtSW5mbyBvZiBib3hEYXRhLnRyYW5zZm9ybS5pdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybUluZm8ubmFtZSA9PT0gXCJ0cmFuc2xhdGVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0VG9wQ29ybmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRUb3BDb3JuZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBNYXRoLm1pbihsZWZ0VG9wQ29ybmVyLngsIHRyYW5zZm9ybUluZm8uYXJnc1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBNYXRoLm1pbihsZWZ0VG9wQ29ybmVyLnksIHRyYW5zZm9ybUluZm8uYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRUb3BDb3JuZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB0cmFuc2Zvcm1JbmZvLmFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB0cmFuc2Zvcm1JbmZvLmFyZ3NbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgYm94RGF0YSBvZiBkYXRhLmJveGVzKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFwcGluZyBvZiBkYXRhQm94Lm5hbWUgb2YgdGhlIG9iamVjdHMgdGhhdCBoYXZlIGNhdGVnb3J5IFwib3RoZXJcIlxuICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyTWFwID0ge1xuICAgICAgICAgICAgICAgICAgICBcImlucHV0XCI6ICgpID0+IHRoaXMubmV3SW5wdXQoMCwgMCwgYm94RGF0YS5pc09uLCBmYWxzZSksXG4gICAgICAgICAgICAgICAgICAgIFwib3V0cHV0XCI6ICgpID0+IHRoaXMubmV3T3V0cHV0KDAsIDAsIGZhbHNlKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIG1hcHBpbmcgb2YgZGF0YUJveC5jYXRlZ29yeVxuICAgICAgICAgICAgICAgIGNvbnN0IGJveE1hcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJnYXRlXCI6ICgpID0+IHRoaXMubmV3R2F0ZShib3hEYXRhLm5hbWUsIDAsIDAsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgXCJibGFja2JveFwiOiAoKSA9PiB0aGlzLm5ld0JsYWNrYm94KGJveERhdGEuaW5wdXRzLCBib3hEYXRhLm91dHB1dHMsIGJveERhdGEudGFibGUsIGJveERhdGEubmFtZSwgMCwgMCwgZmFsc2UpLFxuICAgICAgICAgICAgICAgICAgICBcIm90aGVyXCI6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYm94RGF0YS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGBUaGlzIG5ldHdvcmsgY29udGFpbnMgYSBib3ggd2l0aG91dCBhIG5hbWUuYFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW90aGVyTWFwW2JveERhdGEubmFtZV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgYFRoaXMgbmV0d29yayBjb250YWlucyB1bmtub3duIGJveCBuYW1lcy4gKCR7Ym94RGF0YS5uYW1lfSlgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhlck1hcFtib3hEYXRhLm5hbWVdKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUJveCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFib3hEYXRhLmNhdGVnb3J5KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgYFRoaXMgbmV0d29yayBhIGJveCB3aXRob3V0IGEgY2F0ZWdvcnkuYDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJveE1hcFtib3hEYXRhLmNhdGVnb3J5XSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGBUaGlzIG5ldHdvcmsgY29udGFpbnMgdW5rbm93biBib3ggY2F0ZWdvcmllcy4gKCR7Ym94RGF0YS5jYXRlZ29yeX0pYDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm94TWFwW2JveERhdGEuY2F0ZWdvcnldKClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgYm94O1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYm94ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvY2Nlc3MgYm94IHRyYW5zZm9ybXMgKHRyYW5zbGF0aW9uIGFuZCByb3RhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyYW5zZm9ybSA9IG5ldyBlZGl0b3JFbGVtZW50cy5UcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvdGF0aW9uQ291bnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybUl0ZW1NYXAgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZVwiOiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybS5zZXRUcmFuc2xhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gbGVmdFRvcENvcm5lci54IC8vIG1ha2UgaXQgdGhlIHJlbGF0aXZlIGRpc3RhbmNlIGZyb20gdGhlIGxlZnRtb3N0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgeCAvLyBhcHBseSB0aGUgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1sxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBsZWZ0VG9wQ29ybmVyLnkgLy8gbWFrZSBpdCB0aGUgcmVsYXRpdmUgZGlzdGFuY2UgZnJvbSB0aGUgdG9wbW9zdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHkgLy8gYXBwbHkgdGhlIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyb3RhdGVcIjogKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbkNvdW50ID0gYXJnc1swXSAlIDM2MCAvIDkwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJveERhdGEudHJhbnNmb3JtICYmIGJveERhdGEudHJhbnNmb3JtLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYW5zZm9ybUl0ZW0gb2YgYm94RGF0YS50cmFuc2Zvcm0uaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7bmFtZSwgYXJnc30gPSB0cmFuc2Zvcm1JdGVtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goYFRoaXMgbmV0d29yayBjb250YWlucyB1bm5hbWVkIHRyYW5zZm9ybSBwcm9wZXJ0aWVzLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybUl0ZW1NYXBbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ3MucHVzaChgVGhpcyBuZXR3b3JrIGNvbnRhaW5zIHVua25vd24gdHJhbnNmb3JtIHByb3BlcnRpZXMuICgke3RyYW5zZm9ybUl0ZW0ubmFtZX0pYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUl0ZW1NYXBbbmFtZV0oYXJncylcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybS50b1NWR1BpeGVscyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LnNldFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm90YXRpb25Db3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gucm90YXRlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGFsbCB3aXJlcyB0byB0aGUgbGlzdCBvZiB3aXJlcyB0byBiZSBhZGRlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoYm94RGF0YS5jb25uZWN0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb25uZWN0aW9uIG9mIGJveERhdGEuY29ubmVjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIGFydGlmaWNpYWwgd2lyZSBpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aXJlSWQgPSBjb25uZWN0aW9uLndpcmVJZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgdGhlIHZhbHVlcyBnb3QgZnJvbSBqc29uIGludG8gYSB2YXJpYWJsZSB0aGF0IHdpbGwgYmUgYWRkZWQgaW50byB0aGUgbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogY29ubmVjdGlvbi5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94SWQ6IGJveC5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdGhlIHZhbHVlIHRvIHRoZSBtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3V2lyZXMuaGFzKHdpcmVJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgYWxyZWFkeSBpcyBhIHdpcmUgd2l0aCB0aGlzIGlkIGluIHRoZSBtYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgdmFsdWUgdG8gdGhlIGVuZCBvZiB0aGUgYXJyYXkgb2YgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXBWYWx1ZSA9IG5ld1dpcmVzLmdldCh3aXJlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3V2lyZXMuc2V0KHdpcmVJZCwgbWFwVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIHdpcmUgd2l0aCB0aGlzIGlkIGluIHRoZSBtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRoZSB3aXJlIGFuZCBzZXQgdGhlIHZhbHVlIHRvIGJlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdXaXJlcy5zZXQod2lyZUlkLCBbdmFsdWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlZnJlc2ggdGhlIFNWRyBkb2N1bWVudCAobmVlZGVkIGZvciB3aXJpbmcpXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgICAgICAgLy8gd2l0aCBhbGwgYm94ZXMgYWRkZWQsIHdlIGNhbiBub3cgY29ubmVjdCB0aGVtIHdpdGggd2lyZXNcblxuICAgICAgICAgICAgLy8gcHJpb3JpdHkgcXVldWUgZm9yIHRoZSBuZXcgd2lyZXMsIHByaW9yaXR5IGJlaW5nICgxIC8gbWFuaGF0dGFuRGlzdGFuY2UpIGJldHdlZW4gdGhlIGNvbmVuY3RvcnMsIGhpZ2hlciBpcyBiZXR0ZXJcbiAgICAgICAgICAgIGxldCB3aXJlUXVldWUgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuXG4gICAgICAgICAgICAvLyBnZXQgYWxsIGlkcyBmb3IgbGFsIHRoZVxuICAgICAgICAgICAgZm9yIChjb25zdCB3aXJlSW5mbyBvZiBuZXdXaXJlcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgIGxldCBjb25uZWN0b3JJZHMgPSBbXTtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBhcnJheSBbY29ubmVjdG9yMUlkLCBjb25uZWN0b3IySWRdXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7Ym94SWQsIGluZGV4fVxuICAgICAgICAgICAgICAgIG9mIHdpcmVJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rvcklkcy5wdXNoKHRoaXMuZ2V0Qm94QnlJZChib3hJZCkuY29ubmVjdG9yc1tpbmRleF0uaWQpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuZCBhcnJheSBbe3gsIHl9LCB7eCwgeX1dIGNvbnRhaW5pbmcgcG9zaXRpb25zIGZvciBjb25uZWN0b3JzIDEgYW5kIDJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0b3JzUG9zaXRpb25zID0gY29ubmVjdG9ySWRzLm1hcChjb25uZWN0b3JJZCA9PiB0aGlzLmdldENvbm5lY3RvclBvc2l0aW9uKHRoaXMuZ2V0Q29ubmVjdG9yQnlJZChjb25uZWN0b3JJZCksIHRydWUpKVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3RvcnNQb3NpdGlvbnMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB3aXJlID0gdGhpcy5uZXdXaXJlKC4uLmNvbm5lY3RvcklkcywgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIG1hbmhhdHRhbiBkaXN0YW5jZSBiZXR3ZWVuIHRoZXNlIHR3byBjb25uZWN0b3JzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbWFuaGF0dGFuRGlzdGFuY2UoLi4uY29ubmVjdG9yc1Bvc2l0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGNvbm5lY3RvcmlkcyB0byB0aGUgcHJpb3JpdHkgcXVldWVcbiAgICAgICAgICAgICAgICAgICAgd2lyZVF1ZXVlLmVucXVldWUod2lyZSwgMSAvIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncy5wdXNoKGBGb3VuZCBhIHdpcmUgdGhhdCBkb2VzIG5vdCBoYXZlIHR3byBlbmRpbmdzLiAoSXQgaGFkICR7Y29ubmVjdG9yc1Bvc2l0aW9ucy5sZW5ndGh9IGluc3RlYWQuKWApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAod2luZG93Lldvcmtlcikge1xuICAgICAgICAgICAgICAgIGxldCB3aXJlUG9pbnRzID0gW107XG4gICAgICAgICAgICAgICAgbGV0IHdpcmVSZWZlcmVuY2VzID0gW107XG5cbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRoZSBxdWV1ZSB0byBhbiBhcnJheSAodGhpcyBpcyBuZWVkZWQgYnkgdGhlIHdlYiB3b3JrZXIpXG4gICAgICAgICAgICAgICAgd2hpbGUgKCF3aXJlUXVldWUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpcmUgPSB3aXJlUXVldWUuZGVxdWV1ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCB3aXJlU3RhcnQgPSB0aGlzLmdldENvbm5lY3RvclBvc2l0aW9uKHdpcmUuY29ubmVjdGlvbi5mcm9tLmNvbm5lY3RvciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB3aXJlRW5kID0gdGhpcy5nZXRDb25uZWN0b3JQb3NpdGlvbih3aXJlLmNvbm5lY3Rpb24udG8uY29ubmVjdG9yLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICB3aXJlUG9pbnRzLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHdpcmVTdGFydC54IC8gdGhpcy5ncmlkU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB3aXJlU3RhcnQueSAvIHRoaXMuZ3JpZFNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB3aXJlRW5kLnggLyB0aGlzLmdyaWRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHdpcmVFbmQueSAvIHRoaXMuZ3JpZFNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSlcblxuICAgICAgICAgICAgICAgICAgICB3aXJlUmVmZXJlbmNlcy5wdXNoKHdpcmUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFtyb3V0ZVdvcmtlckZpbGVOYW1lXSByZXBsYWNlZCBpbiB0aGUgYnVpbGQgcHJvY2VzcyAoZGVmaW5lZCBpbiBndWxwZmlsZSkgZGVwZW5kaW5nIG9uIGRldmVsIC8gcHJvZCBidWlsZFxuICAgICAgICAgICAgICAgIGxldCBteVdvcmtlciA9IG5ldyBXb3JrZXIoXCJqcy9bcm91dGVXb3JrZXJGaWxlTmFtZV1cIik7XG5cbiAgICAgICAgICAgICAgICBsZXQgbG9hZGluZ01lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VzLm5ld0xvYWRpbmdNZXNzYWdlKFwibG9va2luZyBmb3IgdGhlIGJlc3Qgd2lyaW5n4oCmXCIpO1xuXG4gICAgICAgICAgICAgICAgbXlXb3JrZXIub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtwYXRoc30gPSBldmVudC5kYXRhXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgd2lyZVJlZmVyZW5jZXMgYW5kIHBhdGhzIHN5bmNocm9ub3VzbHlcbiAgICAgICAgICAgICAgICAgICAgd2lyZVJlZmVyZW5jZXMuZm9yRWFjaCgod2lyZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aXJlLnNldFdpcmVQYXRoKHdpcmUucGF0aFRvUG9seUxpbmUocGF0aHNba2V5XSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB3aXJlLnVwZGF0ZVdpcmVTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmdNZXNzYWdlLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICB3aXJlczogd2lyZVBvaW50cyxcbiAgICAgICAgICAgICAgICAgICAgbm9uUm91dGFibGVOb2RlczogdGhpcy5nZXROb25Sb3V0YWJsZU5vZGVzKCksXG4gICAgICAgICAgICAgICAgICAgIGluY29udmVuaWVudE5vZGVzOiB0aGlzLmdldEluY29udmVuaWVudE5vZGVzKClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBteVdvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlKVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHdlYiB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZDogdXNlIGFuIGludGVydmFsIHRvIG1ha2UgdGhlIGltcG9ydCBhIGJpdCBzbG93ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBkaXZpZGluZyBpdCBpbnRvIGNodW5rcywgc28gdGhlIGJyb3dzZXIgd2luZG93IGlzIG5vdCBlbnRpcmVseSBmcm96ZW4gd2hlbiB0aGUgd2lyaW5nIGlzIGhhcHBlbmluZ1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgd2lyZXNUb0JlUm91dGVkQXRPbmNlID0gMTA7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXlCZXR3ZWVuSXRlcmF0aW9ucyA9IDIwMDtcblxuICAgICAgICAgICAgICAgIC8vIGFkZCB3aXJlcyBpbiB0aGUgb3JkZXIgZnJvbSBzaG9ydCB0byBsb25nXG4gICAgICAgICAgICAgICAgbGV0IHdpcmVQbGFjaW5nSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXdpcmVRdWV1ZS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2lyZXNUb0JlUm91dGVkQXRPbmNlOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lyZVF1ZXVlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aXJlID0gd2lyZVF1ZXVlLmRlcXVldWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXJlLnJvdXRlV2lyZSh0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lyZS51cGRhdGVXaXJlU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmluaXNoZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHdpcmVQbGFjaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZGVsYXlCZXR3ZWVuSXRlcmF0aW9ucylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVmcmVzaCB0aGUgU1ZHIGRvY3VtZW50XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgICAgICAgdGhpcy5zaW11bGF0aW9uRW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHJlc29sdmUod2FybmluZ3MpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiB1c2VyIGNsaWNrcyBvbiBhIGNvbm5lY3RvciwgcmVtZW1iZXIgaXQgdW50aWwgdGhleSBjbGljayBvbiBzb21lIG90aGVyIGNvbm5lY3Rvci5cbiAgICAgKiBUaGFuIGNhbGwgbmV3V2lyZSB3aXRoIHRoZSBsYXN0IHR3byBjb25uZWN0b3JzIGlkcyBhcyBhcmd1bWVudHMuXG4gICAgICogVmlzdWFsaXplIHRoZSBwcm9jZXNzIGJ5IGRpc3BsYXlpbmcgYSBncmV5IHdpcmUgYmV0d2VlbiB0aGUgZmlyc3QgY29uZW5jdG9yIGFuZCB0aGUgbW91c2UgcG9pbnRlci5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNvbm5lY3RvcklkIGlkIG9mIHRoZSBjb25uZWN0b3IgdGhhdCB0aGUgdXNlciBjbGlja2VkIG9uXG4gICAgICovXG4gICAgd2lyZUNyZWF0aW9uSGVscGVyKGNvbm5lY3RvcklkLCBtb3VzZVBvc2l0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy53aXJlQ3JlYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMud2lyZUNyZWF0aW9uID0ge1xuICAgICAgICAgICAgICAgIGZyb21JZDogY29ubmVjdG9ySWRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5Q3JlYXRlZFdpcmUobW91c2VQb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aXJlQ3JlYXRpb24uZnJvbUlkICE9PSBjb25uZWN0b3JJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUNyZWF0ZWRXaXJlKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm5ld1dpcmUodGhpcy53aXJlQ3JlYXRpb24uZnJvbUlkLCBjb25uZWN0b3JJZCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLndpcmVDcmVhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGhlbHBlciBmb3Igd2lyZUNyZWF0aW9uSGVscGVyIHRoYXQgZGlzcGxheXMgYSBncmV5IHdpcmUgYmV0d2VlbiB0aGUgZmlyc3QgY29ubmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIG1vdXNlUG9zaXRpb25cbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG1vdXNlUG9zaXRpb24gb2JqZWN0IHdpdGggeCBhbmQgeSBjb29yZGluYXRlcyBpbiBTVkcgcGl4ZWxzXG4gICAgICovXG4gICAgZGlzcGxheUNyZWF0ZWRXaXJlKG1vdXNlUG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy53aXJlQ3JlYXRpb24udGVtcFdpcmUgPSBuZXcgZWRpdG9yRWxlbWVudHMuSGVscGVyV2lyZSh0aGlzLCB0aGlzLndpcmVDcmVhdGlvbi5mcm9tSWQsIG1vdXNlUG9zaXRpb24pO1xuXG4gICAgICAgICQod2luZG93KS5vbignbW91c2Vtb3ZlLndpcmVDcmVhdGlvbicsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGV2ZW50ID0gdGhpcy52aWV3Ym94LnRyYW5zZm9ybUV2ZW50KGV2ZW50KVxuXG4gICAgICAgICAgICBtb3VzZVBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgIHg6IGV2ZW50LnBhZ2VYLFxuICAgICAgICAgICAgICAgIHk6IGV2ZW50LnBhZ2VZXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMud2lyZUNyZWF0aW9uLnRlbXBXaXJlLnVwZGF0ZU1vdXNlUG9zaXRpb24obW91c2VQb3NpdGlvbik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5hcHBlbmRFbGVtZW50KHRoaXMud2lyZUNyZWF0aW9uLnRlbXBXaXJlKTtcbiAgICAgICAgdGhpcy5tb3ZlVG9CYWNrQnlJZCh0aGlzLndpcmVDcmVhdGlvbi50ZW1wV2lyZS5pZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaGVscGVyIGZvciB3aXJlQ3JlYXRpb25IZWxwZXIgdGhhdCBoaWRlcyB0aGUgdGVtcG9yYXJ5IHdpcmUgd2hlbiB3aXJlIGNyZWF0aW9uIGlzIGRvbmVcbiAgICAgKi9cbiAgICBoaWRlQ3JlYXRlZFdpcmUoKSB7XG4gICAgICAgICQod2luZG93KS5vZmYoJ21vdXNlbW92ZS53aXJlQ3JlYXRpb24nKTtcblxuICAgICAgICB0aGlzLndpcmVDcmVhdGlvbi50ZW1wV2lyZS5nZXQoKS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy53aXJlQ3JlYXRpb24udGVtcFdpcmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaGVscGVyIGZvciB3aXJlQ3JlYXRpb25IZWxwZXIgdGhhdCBjYW5jZWxzIHRoZSB3aXJlIGNyZWF0aW9uIHByb2Nlc3NcbiAgICAgKi9cbiAgICBjYW5jZWxXaXJlQ3JlYXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLndpcmVDcmVhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5oaWRlQ3JlYXRlZFdpcmUoKTtcbiAgICAgICAgICAgIHRoaXMud2lyZUNyZWF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVuIGEgbG9naWMgc2ltdWxhdGlvbiBmcm9tIHRoZSBzdGFydGluZ0Nvbm5lY3Rvci5cbiAgICAgKiBUaGlzIHJlZnJlc2hlcyB0aGUgc3RhdGVzIG9mIGFsbCBlbGVtZW50cyBpbiB0aGUgbmV0d29yayB3aG9zZSBpbnB1dHMgYXJlXG4gICAgICogZGlyZWN0bHkgKG9yIGJ5IHRyYW5zaXRpb24pIGNvbm5lY3RlZCB0byBzdGFydGluZ0Nvbm5lY3RvcidzIG91dHB1dFxuICAgICAqIEBwYXJhbSAge091dHB1dENvbm5lY3Rvcn0gc3RhcnRpbmdDb25uZWN0b3IgcnVuIHNpbXVsYXRpb24gZnJvbSB0aGlzIG91dHB1dCBjb25uZWN0b3JcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gc3RhdGUgbmV3IHN0YXRlIG9mIHRoZSBzdGFydGluZ0Nvbm5lY3RvclxuICAgICAqL1xuICAgIHN0YXJ0TmV3U2ltdWxhdGlvbihzdGFydGluZ0Nvbm5lY3Rvciwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2ltdWxhdGlvbiA9IG5ldyBTaW11bGF0aW9uKHRoaXMpXG4gICAgICAgICAgICB0aGlzLnNpbXVsYXRpb24ubm90aWZ5Q2hhbmdlKHN0YXJ0aW5nQ29ubmVjdG9yLmlkLCBzdGF0ZSlcbiAgICAgICAgICAgIHRoaXMuc2ltdWxhdGlvbi5ydW4oKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGdhdGUgb24gdGhlIHNwZWNpZmllZCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gIG5hbWUgICAgICAgICAgIHR5cGUgb2YgdGhlIGdhdGUgKGFuZCwgb3IgLi4uKVxuICAgICAqIEBwYXJhbSAge251bWJlcn0gIHggICAgICAgICAgICAgIGhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIGdhdGUgaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSAge251bWJlcn0gIHkgICAgICAgICAgICAgIHZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSBnYXRlIGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBbcmVmcmVzaD10cnVlXSBpZiB0cnVlLCB0aGlzLnJlZnJlc2goKSB3aWxsIGJlIGNhbGxlZCBhZnRlciBhZGRpbmcgdGhlIGdhdGVcbiAgICAgKiBAcmV0dXJuIHtlZGl0b3JFbGVtZW50cy5HYXRlfSAgICBpbnN0YW5jZSBvZiBHYXRlIHRoYXQgaGFzIGJlZW4gbmV3bHkgYWRkZWRcbiAgICAgKi9cbiAgICBuZXdHYXRlKG5hbWUsIHgsIHksIHJlZnJlc2ggPSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ld0JveCh4LCB5LCBuZXcgZWRpdG9yRWxlbWVudHMuR2F0ZSh0aGlzLCBuYW1lLCB4LCB5KSwgcmVmcmVzaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGlucHV0IGJveCBvbiB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSAgeCAgICAgICAgICAgICAgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgZ2F0ZSBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSAgeSAgICAgICAgICAgICAgdmVydGljYWwgcG9zaXRpb24gb2YgdGhlIGdhdGUgaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IFtpc09uPWZhbHNlXSAgIHN0YXRlIG9mIHRoZSBpbnB1dCBib3ggKGRlZmF1bHQgaXMgZmFsc2UgKG9mZikpXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gW3JlZnJlc2g9dHJ1ZV0gaWYgdHJ1ZSwgdGhpcy5yZWZyZXNoKCkgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgYWRkaW5nIHRoZSBpbnB1dCBib3hcbiAgICAgKiBAcmV0dXJuIHtlZGl0b3JFbGVtZW50cy5JbnB1dEJveH0gICAgaW5zdGFuY2Ugb2YgdGhlIElucHV0Qm94IHRoYXQgaGFzIGJlZW4gbmV3bHkgYWRkZWRcbiAgICAgKi9cbiAgICBuZXdJbnB1dCh4LCB5LCBpc09uID0gZmFsc2UsIHJlZnJlc2ggPSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ld0JveCh4LCB5LCBuZXcgZWRpdG9yRWxlbWVudHMuSW5wdXRCb3godGhpcywgaXNPbiksIHJlZnJlc2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBvdXRwdXQgYm94IG9uIHRoZSBzcGVjaWZpZWQgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9ICB4ICAgICAgICAgICAgICBob3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBnYXRlIGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9ICB5ICAgICAgICAgICAgICB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgZ2F0ZSBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gW3JlZnJlc2g9dHJ1ZV0gaWYgdHJ1ZSwgdGhpcy5yZWZyZXNoKCkgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgYWRkaW5nIHRoZSBvdXRwdXQgYm94XG4gICAgICogQHJldHVybiB7ZWRpdG9yRWxlbWVudHMuSW5wdXRCb3h9ICAgIGluc3RhbmNlIG9mIHRoZSBPdXRwdXRCb3ggdGhhdCBoYXMgYmVlbiBuZXdseSBhZGRlZFxuICAgICAqL1xuICAgIG5ld091dHB1dCh4LCB5LCByZWZyZXNoID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXdCb3goeCwgeSwgbmV3IGVkaXRvckVsZW1lbnRzLk91dHB1dEJveCh0aGlzKSwgcmVmcmVzaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgbmV3IEJveCB0byB0aGUgQ2FudmFzXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSAgeCAgICAgICAgICAgICAgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgYm94IGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9ICB5ICAgICAgICAgICAgICB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgYm94IGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcGFyYW0gIHtlZGl0b3JFbGVtZW50cy5Cb3h9ICBvYmplY3QgICAgICAgICBpbnN0YW5jZSBvZiBhbiBvYmplY3QgZGVyaXZlZCBmcm9tIHRoZSBlZGl0b3JFbGVtZW50cy5Cb3ggY2xhc3NcbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBbcmVmcmVzaD10cnVlXSBpZiB0cnVlLCB0aGlzLnJlZnJlc2goKSB3aWxsIGJlIGNhbGxlZCBhZnRlciBhZGRpbmcgdGhlIGJveFxuICAgICAqIEByZXR1cm4ge2VkaXRvckVsZW1lbnRzLkJveH0gICAgICAgICAgICAgICAgIHJldHVybiB0aGUgaW5zdGFuY2Ugb2YgdGhlIG5ld2x5IGFkZGVkIG9iamVjdFxuICAgICAqL1xuICAgIG5ld0JveCh4LCB5LCBvYmplY3QsIHJlZnJlc2ggPSB0cnVlKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuYm94ZXMubGVuZ3RoO1xuXG4gICAgICAgIHRoaXMuYm94ZXNbaW5kZXhdID0gb2JqZWN0O1xuXG4gICAgICAgIC8vIHRyYW5zbGF0ZSB0aGUgZ2F0ZSBpZiB4IGFuZCB5IGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAgICBpZiAoeCAmJiB5KSB7XG4gICAgICAgICAgICBsZXQgdHIgPSBuZXcgZWRpdG9yRWxlbWVudHMuVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICB0ci5zZXRUcmFuc2xhdGUoeCwgeSk7XG5cbiAgICAgICAgICAgIHRoaXMuYm94ZXNbaW5kZXhdLnN2Z09iai5hZGRBdHRyKHtcInRyYW5zZm9ybVwiOiB0ci5nZXQoKX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcHBlbmRFbGVtZW50KHRoaXMuYm94ZXNbaW5kZXhdLCByZWZyZXNoKTtcblxuICAgICAgICAvLyBpZiB0dXRvcmlhbCBleGlzdHMsIGNhbGwgdHV0b3JpYWwgY2FsbGJhY2tcbiAgICAgICAgaWYgKHRoaXMudHV0b3JpYWwpIHtcbiAgICAgICAgICAgIHRoaXMudHV0b3JpYWwub25FbGVtZW50QWRkZWQodGhpcy5ib3hlc1tpbmRleF0ubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5ib3hlc1tpbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgYm94IGZyb20gQ2FudmFzIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBJRFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBib3hJZCBpZCBvZiB0aGUgYm94IHRoYXQgc2hvdWxkIGJlIHJlbW92ZWRcbiAgICAgKi9cbiAgICByZW1vdmVCb3goYm94SWQpIHtcbiAgICAgICAgbGV0ICRnYXRlID0gJChcIiNcIiArIGJveElkKTtcblxuICAgICAgICAvLyBmaW5kIHRoZSBnYXRlIGluIHN2ZydzIGxpc3Qgb2YgZ2F0ZXNcbiAgICAgICAgbGV0IGdhdGVJbmRleCA9IC0xO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYm94ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJveGVzW2ldLnN2Z09iai5pZCA9PT0gYm94SWQpIHtcbiAgICAgICAgICAgICAgICBnYXRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdhdGVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgYWxsIHdpcmVzIGNvbm5lY3RlZCB0byB0aGlzIGdhdGVcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib3hlc1tnYXRlSW5kZXhdLmNvbm5lY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVdpcmVzQnlDb25uZWN0b3JJZCh0aGlzLmJveGVzW2dhdGVJbmRleF0uY29ubmVjdG9yc1tpXS5pZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZ2F0ZVxuICAgICAgICAgICAgdGhpcy5ib3hlcy5zcGxpY2UoZ2F0ZUluZGV4LCAxKTtcbiAgICAgICAgICAgICRnYXRlLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAvLyBpZiB0dXRvcmlhbCBleGlzdHMsIGNhbGwgdHV0b3JpYWwgY2FsbGJhY2tcbiAgICAgICAgICAgIGlmICh0aGlzLnR1dG9yaWFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50dXRvcmlhbC5vbkVsZW1lbnRSZW1vdmVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVHJ5aW5nIHRvIHJlbW92ZSBhbiBub25leGlzdGluZyBib3guIEJveCBpZDpcIiwgYm94SWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBib3hlcyBmcm9tIHRoZSBjYW52YXNcbiAgICAgKi9cbiAgICBjbGVhbkNhbnZhcygpIHtcbiAgICAgICAgLy8gY2Fubm90IHNpbXBseSBpdGVyYXRlIHRocm91Z2ggdGhlIGFycmF5IGJlY2F1c2UgcmVtb3ZlQm94IHdvcmtzIHdpdGggaXRcblxuICAgICAgICAvLyBjcmVhdGUgYW4gYXJyYXkgb2YgaWRzXG4gICAgICAgIGNvbnN0IGlkcyA9IHRoaXMuYm94ZXMubWFwKGJveCA9PiBib3guaWQpO1xuXG4gICAgICAgIC8vIHJlbW92ZSBhbGwgYm94ZXMgYnkgdGhlaXIgaWRzXG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgaWRzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUJveChpZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgd2lyZSBjb25uZWN0aW5nIHRoZSBwcm92aWRlZCBjb25uZWN0b3JzXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSAgZnJvbUlkICAgICAgICAgaWQgb2YgdGhlIGNvbm5lY3RvciB0aGF0IHRoZSB3aXJlIGlzIGF0dGFjaGVkIHRvXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSAgdG9JZCAgICAgICAgICAgaWQgb2YgdGhlIGNvbm5lY3RvciB0aGF0IHRoZSB3aXJlIGlzIGF0dGFjaGVkIHRvXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gW3JlZnJlc2g9dHJ1ZV0gaWYgcmVmcmVzaCBpcyBzZXQgdG8gdHJ1ZSwgdGhlIFNWRyBkb2N1bWVudCB3aWxsIGJlIHJlbG9hZGVkIGFmdGVyIGFkZGluZyB0aGUgd2lyZVxuICAgICAqIEByZXR1cm4ge2VkaXRvckVsZW1lbnRzLldpcmV9ICAgIGluc3RhbmNlIG9mIGVkaXRvckVsZW1lbnRzLldpcmUgdGhhdCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgQ2FudmFzXG4gICAgICovXG4gICAgbmV3V2lyZShmcm9tSWQsIHRvSWQsIHJlZnJlc2ggPSB0cnVlLCByb3V0ZSA9IHRydWUpIHtcbiAgICAgICAgLy8gd2lyZSBtdXN0IGNvbm5lY3QgdHdvIGRpc3RpbmN0IGNvbm5lY3RvcnNcbiAgICAgICAgaWYgKGZyb21JZCA9PT0gdG9JZClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcblxuICAgICAgICBsZXQgY29ubmVjdG9ycyA9IFt0aGlzLmdldENvbm5lY3RvckJ5SWQoZnJvbUlkKSwgdGhpcy5nZXRDb25uZWN0b3JCeUlkKHRvSWQpXVxuXG4gICAgICAgIC8vIGlucHV0IGNvbm5lY3RvcnMgY2FuIGJlIGNvbm5lY3RlZCB0byBvbmUgd2lyZSBtYXhcbiAgICAgICAgY29ubmVjdG9ycy5mb3JFYWNoKGNvbm4gPT4ge1xuICAgICAgICAgICAgaWYgKGNvbm4uaXNJbnB1dENvbm5lY3RvcilcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVdpcmVzQnlDb25uZWN0b3JJZChjb25uLmlkKVxuICAgICAgICB9KVxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLndpcmVzLmxlbmd0aDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53aXJlc1tpbmRleF0gPSBuZXcgZWRpdG9yRWxlbWVudHMuV2lyZSh0aGlzLCBmcm9tSWQsIHRvSWQsIHJlZnJlc2gsIHJvdXRlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlcy5uZXdFcnJvck1lc3NhZ2UoZSk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29ubmVjdG9ycy5mb3JFYWNoKGNvbm4gPT4ge1xuICAgICAgICAgICAgY29ubi5hZGRXaXJlSWQodGhpcy53aXJlc1tpbmRleF0uc3ZnT2JqLmlkKTtcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmFwcGVuZEVsZW1lbnQodGhpcy53aXJlc1tpbmRleF0sIHJlZnJlc2gpO1xuICAgICAgICB0aGlzLm1vdmVUb0JhY2tCeUlkKHRoaXMud2lyZXNbaW5kZXhdLnN2Z09iai5pZCk7XG5cbiAgICAgICAgaWYgKHJlZnJlc2gpXG4gICAgICAgICAgICB0aGlzLndpcmVzW2luZGV4XS51cGRhdGVXaXJlU3RhdGUoKVxuXG4gICAgICAgIHJldHVybiB0aGlzLndpcmVzW2luZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBzcGVjaWZpZWQgY29ubmVjdG9yXG4gICAgICogQHBhcmFtICB7Q29ubmVjdG9yfSAgY29ubmVjdG9yICAgICAgaW5zdGFuY2Ugb2Yge0BsaW5rIENvbm5lY3Rvcn1cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBbc25hcFRvR3JpZD10cnVlXSBpZiB0cnVlLCB0aGUgY29ubmVjdG9yIHBvc2l0aW9uIHdpbGwgYmUgc25hcHBlZCB0byB0aGUgZ3JpZFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgIHBvaW50IC0gb2JqZWN0IGNvbnRhaW5pbmcgbnVtZXJpYyBhdHRyaWJ1dGVzIGB4YCBhbmQgYHlgXG4gICAgICovXG4gICAgZ2V0Q29ubmVjdG9yUG9zaXRpb24oY29ubmVjdG9yLCBzbmFwVG9HcmlkID0gdHJ1ZSkge1xuICAgICAgICAvLyBjb25uZWN0b3Iuc3ZnT2JqLmlkIGhhcyB0byBiZSBjYWxsZWQsIGVsc2UgdGhlIGdldENvb3JkaW5hdGVzIGRvZXMgbm90IHdvcmsgb24gdGhlIGZpcnN0IGNhbGwgaW4gRmlyZWZveCA1NVxuICAgICAgICBjb25zdCBkdW1teSA9IGNvbm5lY3Rvci5zdmdPYmouaWQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgICAgICBsZXQgJGNvbm5lY3RvciA9IGNvbm5lY3Rvci5zdmdPYmouJGVsO1xuXG4gICAgICAgIGxldCBwb3NpdGlvbiA9ICRjb25uZWN0b3IucG9zaXRpb24oKTtcblxuICAgICAgICBwb3NpdGlvbi5sZWZ0ID0gdGhpcy52aWV3Ym94LnRyYW5zZm9ybVgocG9zaXRpb24ubGVmdClcbiAgICAgICAgcG9zaXRpb24udG9wID0gdGhpcy52aWV3Ym94LnRyYW5zZm9ybVkocG9zaXRpb24udG9wKVxuXG4gICAgICAgIGxldCB3aWR0aCA9ICRjb25uZWN0b3IuYXR0cihcIndpZHRoXCIpO1xuICAgICAgICBsZXQgaGVpZ2h0ID0gJGNvbm5lY3Rvci5hdHRyKFwiaGVpZ2h0XCIpO1xuXG4gICAgICAgIGxldCB4ID0gcG9zaXRpb24ubGVmdCArIHdpZHRoIC8gMjtcbiAgICAgICAgbGV0IHkgPSBwb3NpdGlvbi50b3AgKyBoZWlnaHQgLyAyO1xuICAgICAgICBpZiAoc25hcFRvR3JpZCkge1xuICAgICAgICAgICAgeCA9IHRoaXMuc25hcFRvR3JpZCh4KTtcbiAgICAgICAgICAgIHkgPSB0aGlzLnNuYXBUb0dyaWQoeSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge3g6IHgsIHk6IHl9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZXMgYSBuZXcgYmxhY2tib3hcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHggICAgICAgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgYmxhY2tib3ggaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSAge251bWJlcn0geSAgICAgICB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgZ2F0ZSBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSBpbnB1dHMgIG51bWJlciBvZiBpbnB1dCBwaW5zIG9mIHRoaXMgYmxhY2tib3hcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IG91dHB1dHMgbnVtYmVyIG9mIG91dHB1dCBwaW5zIG9mIHRoaXMgYmxhY2tib3hcbiAgICAgKiBAcGFyYW0gIHtBcnJheX0gdGFibGUgICBBcnJheSBvZiBhcnJheXMsIGVhY2ggaW5uZXIgYXJyYXkgY29udGFpbnMgbGlzdCBvZiBbTG9naWMuc3RhdGVdKC4vbW9kdWxlLUxvZ2ljLmh0bWwjLnN0YXRlKXMsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgZGVzY3JpYmUgdGhlIGNvbWJpbmF0aW9uIG9mIGlucHV0IHBpbiBhbmQgb3V0cHV0IHBpbiBzdGF0ZXMgaW4gdGhlIG9yZGVyIGZyb20gdGhlIHRvcCB0byBib3R0b20gZm9yIGJvdGggaW5wdXQgYW5kIG91dHB1dCBjb25uZWN0b3JzLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB3ZSBoYWQgYW4gQU5EIGFycmF5IGFzIGEgYmxhY2tib3gsIG9uZSBvZiB0aGUgc3RhdGVzIGNvdWxkIGJlIGBbTG9naWMuc3RhdGUub24sIExvZ2ljLnN0YXRlLm9mZiwgTG9naWMuc3RhdGUub2ZmXWBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggbWVhbnMgdGhhdCBpZiB0aGUgZmlyc3QgaW5wdXQgY29ubmVjdG9yIGlzIGluIHRoZSBgb25gIHN0YXRlIGFuZCB0aGUgc2Vjb25kIGNvbm5lY3RvciBpcyBpbiB0aGUgYG9mZmAgc3RhdGUsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZSBvZiB0aGUgb3V0cHV0IGNvbm5lY3RvciB3aWxsIGJlIGBvZmZgLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgYXJyYXkgY2FuIGJlIGRlc2NyaWJlZCBhcyBgW3N0YXRlIGZvciBpbnB1dCBjb25uIDEsIHN0YXRlIGZvciBpbnB1dCBjb25uIDIsIC4uLiwgc3RhdGUgZm9yIG91dHB1dCBjb25uIDEsIHN0YXRlIGZvciBvdXRwdXQgY29ubiAyIC4uLl1gLlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gIG5hbWUgICBhIG5hbWUgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBvbiB0aGUgYmxhY2tib3hcbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBbcmVmcmVzaD10cnVlXSBpZiB0cnVlLCB0aGlzLnJlZnJlc2goKSB3aWxsIGJlIGNhbGxlZCBhZnRlciBhZGRpbmcgdGhlIGdhdGVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2VkaXRvckVsZW1lbnRzLkJsYWNrYm94fSBpbnN0YW5jZSBvZiB7QGxpbmsgQmxhY2tib3h9IHRoYXQgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKVxuICAgICAqL1xuICAgIG5ld0JsYWNrYm94KGlucHV0cywgb3V0cHV0cywgdGFibGUsIG5hbWUsIHgsIHksIHJlZnJlc2ggPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5ib3hlcy5sZW5ndGg7XG5cbiAgICAgICAgdGhpcy5ib3hlc1tpbmRleF0gPSBuZXcgZWRpdG9yRWxlbWVudHMuQmxhY2tib3godGhpcywgaW5wdXRzLCBvdXRwdXRzLCAoLi4uaW5wdXRTdGF0ZXMpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiB0YWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVJbnB1dFN0YXRlcyA9IGxpbmUuc2xpY2UoMCwgaW5wdXRzKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIGV2ZXJ5IGlucHV0IHN0YXRlIG1hdGNoZXMgdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgc3RhdGUgaW4gdGhpcyBsaW5lIG9mIHRoZSB0cnV0aCB0YWJsZVxuICAgICAgICAgICAgICAgIGlmIChpbnB1dFN0YXRlcy5ldmVyeSgodmFsdWUsIGluZGV4KSA9PiB2YWx1ZSA9PT0gbGluZUlucHV0U3RhdGVzW2luZGV4XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSByZXN0IG9mIHRoZSBsaW5lIGFzIG91dHB1dFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZS5zbGljZShpbnB1dHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIG5vdGhpbmcgbWF0Y2hlcywgc2V0IGFsbCBvdXRwdXRzIHRvIHVuZGVmaW5lZFxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obmV3IEFycmF5KG91dHB1dHMpLCAoKSA9PiBMb2dpYy5zdGF0ZS51bmtub3duKVxuICAgICAgICB9LCBuYW1lKTtcblxuICAgICAgICBpZiAoeCAmJiB5KSB7XG4gICAgICAgICAgICBsZXQgdHIgPSBuZXcgZWRpdG9yRWxlbWVudHMuVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICB0ci5zZXRUcmFuc2xhdGUoeCwgeSk7XG5cbiAgICAgICAgICAgIHRoaXMuYm94ZXNbaW5kZXhdLnN2Z09iai5hZGRBdHRyKHtcInRyYW5zZm9ybVwiOiB0ci5nZXQoKX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcHBlbmRFbGVtZW50KHRoaXMuYm94ZXNbaW5kZXhdLCByZWZyZXNoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5ib3hlc1tpbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgY29ycmVjdCBpbnN0YW5jZSBvZiBlZGl0b3JFbGVtZW50cy5XaXJlIGluIHRoZSBDYW52YXMnIHdpcmVzIGJ5IHRoZSBwcm92aWRlZCBpZFxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gd2lyZUlkIGlkIG9mIHRoZSB3aXJlXG4gICAgICogQHJldHVybiB7ZWRpdG9yRWxlbWVudHMuV2lyZX0gaW5zdGFuY2Ugb2YgdGhlIHdpcmVcbiAgICAgKi9cbiAgICBnZXRXaXJlQnlJZCh3aXJlSWQpIHtcbiAgICAgICAgZm9yIChjb25zdCB3aXJlIG9mIHRoaXMud2lyZXMpIHtcbiAgICAgICAgICAgIGlmICh3aXJlLnN2Z09iai5pZCA9PT0gd2lyZUlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpcmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGFsbCB3aXJlcyB0aGF0IGFyZSBjb25uZWN0ZWQgdG8gdGhlIHNwZWNpZmllZCBjb25uZWN0b3JcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNvbm5lY3RvcklkIGlkIG9mIHRoZSBjb25uZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtTZXR9IHNldCBvZiBJRCdzIG9mIHRoZSB3aXJlcyBjb25uZWN0ZWQgdG8gdGhpcyBjb25uZWN0b3JcbiAgICAgKi9cbiAgICBnZXRXaXJlc0J5Q29ubmVjdG9ySWQoY29ubmVjdG9ySWQpIHtcbiAgICAgICAgbGV0IGNvbm5lY3RvciA9IHRoaXMuZ2V0Q29ubmVjdG9yQnlJZChjb25uZWN0b3JJZCk7XG4gICAgICAgIHJldHVybiBjb25uZWN0b3Iud2lyZUlkcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgd2lyZSB0aGF0IGhhcyB0aGUgcHJvdmlkZWQgSURcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHdpcmVJZCBJRCBvZiB0aGUgd2lyZSB0aGF0IHNob3VsZCBiZSByZW1vdmVkXG4gICAgICovXG4gICAgcmVtb3ZlV2lyZUJ5SWQod2lyZUlkKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53aXJlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXMud2lyZXNbaV0uc3ZnT2JqLmlkID09PSB3aXJlSWQpIHtcblxuICAgICAgICAgICAgICAgIGxldCB7Y29ubmVjdG9yc30gPSB0aGlzLndpcmVzW2ldO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY29ubmVjdG9yIG9mIGNvbm5lY3RvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yLnJlbW92ZVdpcmVJZEFuZFVwZGF0ZSh3aXJlSWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IHNpbXVsYXRpb24gZnJvbSB0aGUgaW5wdXQgY29ubmVjdG9yIHRvXG4gICAgICAgICAgICAgICAgLy8gcmVmcmVzaCB0aGUgbmV0d29yayBhZnRlciB0aGlzIHdpcmVcblxuICAgICAgICAgICAgICAgIGxldCBpbnB1dENvbm5lY3RvciA9IHRoaXMud2lyZXNbaV0uY29ubmVjdGlvbi50by5jb25uZWN0b3I7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydE5ld1NpbXVsYXRpb24oaW5wdXRDb25uZWN0b3IsIGlucHV0Q29ubmVjdG9yLnN0YXRlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMud2lyZXNbaV0uc3ZnT2JqLiRlbC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLndpcmVzLnNwbGljZShpLCAxKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCB3aXJlcyB0aGF0IGFyZSBjb25uZWN0ZWQgdG8gdGhlIGNvbm5lY3RvciBwcm92aWRlZCBieSBpdHMgSURcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNvbm5lY3RvcklkIElEIG9mIHRoZSBjb25uZWN0b3JcbiAgICAgKi9cbiAgICByZW1vdmVXaXJlc0J5Q29ubmVjdG9ySWQoY29ubmVjdG9ySWQpIHtcbiAgICAgICAgbGV0IGNvbm5lY3RvciA9IHRoaXMuZ2V0Q29ubmVjdG9yQnlJZChjb25uZWN0b3JJZCk7XG5cbiAgICAgICAgY29ubmVjdG9yLndpcmVJZHMuZm9yRWFjaCh3aXJlSWQgPT4ge1xuICAgICAgICAgICAgbGV0IHdpcmUgPSB0aGlzLmdldFdpcmVCeUlkKHdpcmVJZCk7XG5cbiAgICAgICAgICAgIGxldCB7ZnJvbSwgdG99ID0gd2lyZS5jb25uZWN0aW9uO1xuXG4gICAgICAgICAgICAvLyBnZXQgdGhlIG90aGVyIGNvbm5lY3RvciB0aGF0IGlzIHRoZSB3aXJlIGNvbm5lY3RlZCB0b1xuICAgICAgICAgICAgbGV0IG90aGVyQ29ubmVjdG9yID0gY29ubmVjdG9ySWQgPT09IGZyb20uaWRcbiAgICAgICAgICAgICAgICA/IHRvLmNvbm5lY3RvclxuICAgICAgICAgICAgICAgIDogZnJvbS5jb25uZWN0b3I7XG5cbiAgICAgICAgICAgIC8vIGRlbGV0ZSB0aGUgd2lyZSByZWNvcmQgZnJvbSB0aGUgb3RoZXIgY29ubmVjdG9yXG4gICAgICAgICAgICBvdGhlckNvbm5lY3Rvci53aXJlSWRzLmRlbGV0ZSh3aXJlSWQpO1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIHdpcmUgcmVwcmVzZW50YXRpb24gdXNpbmcgalF1ZXJ5XG4gICAgICAgICAgICAkKFwiI1wiICsgd2lyZUlkKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgLy8gaWYgb3RoZXJDb25uZWN0b3IgaXMgYW4gaW5wdXQgY29ubmVjdG9yLCBzZXQgaXRzIHN0YXRlIHRvIHVua25vd25cbiAgICAgICAgICAgIGlmIChvdGhlckNvbm5lY3Rvci5pc0lucHV0Q29ubmVjdG9yKSB7XG4gICAgICAgICAgICAgICAgb3RoZXJDb25uZWN0b3Iuc2V0U3RhdGUoTG9naWMuc3RhdGUudW5rbm93bilcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0TmV3U2ltdWxhdGlvbihvdGhlckNvbm5lY3RvciwgTG9naWMuc3RhdGUudW5rbm93bilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIGxpc3Qgb2Ygd2lyZSBJZHNcbiAgICAgICAgY29ubmVjdG9yLndpcmVJZHMuY2xlYXIoKTtcbiAgICAgICAgLy8gaWYgY29ubmVjdG9yIGlzIGFuIGlucHV0IGNvbm5lY3Rvciwgc2V0IGl0cyBzdGF0ZSB0byB1bmtub3duXG4gICAgICAgIGlmIChjb25uZWN0b3IuaXNJbnB1dENvbm5lY3Rvcikge1xuICAgICAgICAgICAgY29ubmVjdG9yLnNldFN0YXRlKExvZ2ljLnN0YXRlLnVua25vd24pXG4gICAgICAgICAgICB0aGlzLnN0YXJ0TmV3U2ltdWxhdGlvbihjb25uZWN0b3IsIExvZ2ljLnN0YXRlLnVua25vd24pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIHRoZSBjb3JyZWN0IGluc3RhbmNlIG9mIGVkaXRvckVsZW1lbnRzLkJveCBpbiB0aGUgQ2FudmFzJyBib3hlcyBieSB0aGUgcHJvdmlkZWQgaWRcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGJveElkIGlkIG9mIHRoZSBib3hcbiAgICAgKiBAcmV0dXJuIHtlZGl0b3JFbGVtZW50cy5Cb3h9IGluc3RhbmNlIG9mIHRoZSBib3hcbiAgICAgKi9cbiAgICBnZXRCb3hCeUlkKGJveElkKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib3hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYm94ZXNbaV0uc3ZnT2JqLmlkID09PSBib3hJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJveGVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgY29ycmVjdCBpbnN0YW5jZSBvZiBlZGl0b3JFbGVtZW50cy5Cb3ggaW4gdGhlIENhbnZhcycgYm94ZXMgYnkgSUQgb2YgYSBjb25uZWN0b3IgdGhhdCBiZWxvbmdzIHRvIHRoaXMgYm94XG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBib3hJZCBpZCBvZiB0aGUgY29ubmVjdG9yXG4gICAgICogQHJldHVybiB7ZWRpdG9yRWxlbWVudHMuQm94fSBpbnN0YW5jZSBvZiB0aGUgYm94XG4gICAgICovXG4gICAgZ2V0Qm94QnlDb25uZWN0b3JJZChjb25uZWN0b3JJZCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYm94ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJveGVzW2ldLmdldENvbm5lY3RvckJ5SWQoY29ubmVjdG9ySWQpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3hlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGluc3RhbmNlIG9mIGEgY29ubmVjdG9yIGJhc2VkIG9uIGl0J3MgSUQgKGFuZCBhbHNvIG9uIGFuIGluc3RhbmNlIG9mIGVkaXRvckVsZW1lbnRzLldpcmUgaWYgcHJvdmlkZWQpXG4gICAgICpcbiAgICAgKiBUaGUgd2lyZSB2YXJpYWJsZSBpcyB1c2VkIGFzIGhldXJpc3RpYzogV2hlbiB3ZSBrbm93IHRoZSB3aXJlLCB3ZSBoYXZlIHRvIGNoZWNrIG9ubHlcbiAgICAgKiB0d28gZ2F0ZXMgaW5zdGVhZCBvZiBhbGwgb2YgdGhlbVxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gY29ubmVjdG9ySWQgaWQgb2YgdGhlIGNvbm5lY3RvclxuICAgICAqIEBwYXJhbSAge2VkaXRvckVsZW1lbnRzLldpcmV9IFt3aXJlXSAgICAgIGluc3RhbmNlIG9mIHRoZSBXaXJlIHRoYXQgaXMgY29ubmVjdGVkIHRvIHRoaXMgY29ubmVjdG9yXG4gICAgICogQHJldHVybiB7ZWRpdG9yRWxlbWVudHMuQ29ubmVjdG9yfSAgICAgICAgaW5zdGFuY2Ugb2YgdGhlIGNvbm5lY3RvclxuICAgICAqL1xuICAgIGdldENvbm5lY3RvckJ5SWQoY29ubmVjdG9ySWQsIHdpcmUgPSB1bmRlZmluZWQpIHtcblxuICAgICAgICBpZiAod2lyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB3ZSBrbm93IHRoZSB3aXJlIC0tIHdlIGNhbiBjaGVjayBvbmx5IGdhdGVzIGF0IHRoZSBlbmRzIG9mIHRoaXMgd2lyZVxuICAgICAgICAgICAgY29uc3Qge2Zyb20sIHRvfSA9IHdpcmUuY29ubmVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKGZyb20uaWQgPT09IGNvbm5lY3RvcklkKVxuICAgICAgICAgICAgICAgIHJldHVybiBmcm9tLmNvbm5lY3RvcjtcblxuICAgICAgICAgICAgaWYgKHRvLmlkID09PSBjb25uZWN0b3JJZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdG8uY29ubmVjdG9yO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gd2UgZG8gbm90IGtub3cgdGhlIHdpcmUgLS0gd2UgaGF2ZSB0byBjaGVjayBhbGwgZ2F0ZXNcbiAgICAgICAgICAgIGZvciAoY29uc3QgYm94IG9mIHRoaXMuYm94ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0b3IgPSBib3guZ2V0Q29ubmVjdG9yQnlJZChjb25uZWN0b3JJZClcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0b3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBsb2dpY2FsIGpRdWVyeSB0YXJnZXQgYmFzZWQgb24gdGhlIGZhY3R1YWwgalF1ZXJ5IHRhcmdldC5cbiAgICAgKlxuICAgICAqIElmIHRoZSBvYmplY3QsIHRoYXQgdXNlciBpbnRlcmFjdGVkIHdpdGgsIGlzIG5vdCBhIGNvbm5lY3RvciBhbmQgaXMgaW4gYSBncm91cCxcbiAgICAgKiByZXR1cm4gdGhlIGdyb3VwIGpRdWVyeSBvYmplY3QgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgalF1ZXJ5IG9iamVjdC5cbiAgICAgKiBAcGFyYW0gIHt0YXJnZXR9IHRhcmdldCBqUXVlcnkgdGFyZ2V0IG9mIHRoZSBvYmplY3QgdXNlciBpbnRlcmFjdGVkIHdpdGhcbiAgICAgKiBAcmV0dXJuIHt0YXJnZXR9ICAgICAgICBqUXVlcnkgdGFyZ2V0IG9mIHRoZSBvYmplY3QgdXNlciB3YW50ZWQgdG8gaW50ZXJhY3Qgd2l0aFxuICAgICAqL1xuICAgIGdldFJlYWxKUXVlcnlUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIGxldCAkdGFyZ2V0ID0gJCh0YXJnZXQpO1xuICAgICAgICBpZiAoISR0YXJnZXQuaGFzQ2xhc3MoXCJjb25uZWN0b3JcIikgJiYgJHRhcmdldC5wYXJlbnRzKCdnJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQucGFyZW50KCk7XG4gICAgICAgICAgICB3aGlsZSAoJHRhcmdldC5wcm9wKFwidGFnTmFtZVwiKSAhPT0gXCJHXCIgJiYgJHRhcmdldC5wcm9wKFwidGFnTmFtZVwiKSAhPT0gXCJnXCIpIHtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0ID0gJHRhcmdldC5wYXJlbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJHRhcmdldDtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIHRoZSBlZGl0b3JFbGVtZW50IHRoYXQgdXNlciBpbnRlcmFjdGVkIHdpdGgsIHRoZSBcInRhcmdldFwiIGFyZ3VtZW50IGlzIGEgalF1ZXJ5IGVsZW1lbnRcbiAgICAvKipcbiAgICAgKiBHZXQgaW5zdGFuY2Ugb2Ygc29tZSBvYmplY3QgZnJvbSBlZGl0b3JFbGVtZW50IGJhc2VkIG9uIHRoZSBqUXVlcnkgdGFyZ2V0XG4gICAgICogQHBhcmFtICB7dGFyZ2V0fSB0YXJnZXQgalF1ZXJ5IHRhcmdldCB0aGF0IHVzZXIgaW50ZXJhY3RlZCB3aXRoXG4gICAgICogQHJldHVybiB7ZWRpdG9yRWxlbWVudHMuTmV0d29ya0VsZW1lbnR9IGluc3RhbmNlIG9mIGFuIG9iamVjdCBkZXJpdmVkIGZyb20gZWRpdG9yRWxlbWVudHMuTmV0d29ya0VsZW1lbnQgdGhhdCB0aGUgdXNlciBpbnRlcmFjdGVkIHdpdGhcbiAgICAgKi9cbiAgICBnZXRSZWFsVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBldmVudHkgc2UgbXVzZWppIHpwcmFjb3ZhdCB0YWR5LCBwcm90b3plIHYgU1ZHIHNlIGV2ZW50eSBuZXByb3BhZ3VqaVxuICAgICAgICBsZXQgJHRhcmdldCA9ICQodGFyZ2V0KTtcblxuICAgICAgICBpZiAoJHRhcmdldC5oYXNDbGFzcyhcImNvbm5lY3RvclwiKSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBhIGNvbm5lY3RvciwgZG9uJ3QgdHJhdmVyc2UgZ3JvdXBzXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb25uZWN0b3JCeUlkKCR0YXJnZXQuYXR0cignaWQnKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoJHRhcmdldC5wYXJlbnRzKCdnJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gdGhpcyBlbGVtZW50IGlzIGluIGEgZ3JvdXAgYW5kIGl0IGlzIG5vdCBhIGNvbm5lY3RvclxuXG4gICAgICAgICAgICAvLyB0cmF2ZXJzaW5nIHVwIHRoZSBET00gdHJlZSB1bnRpbCB3ZSBmaW5kIHRoZSBjbG9zZXN0IGdyb3VwXG4gICAgICAgICAgICBsZXQgJHBhcmVudEdyb3VwID0gJHRhcmdldC5wYXJlbnQoKTtcbiAgICAgICAgICAgIHdoaWxlICgkcGFyZW50R3JvdXAucHJvcChcInRhZ05hbWVcIikgIT09IFwiR1wiICYmICRwYXJlbnRHcm91cC5wcm9wKFwidGFnTmFtZVwiKSAhPT0gXCJnXCIpIHtcbiAgICAgICAgICAgICAgICAkcGFyZW50R3JvdXAgPSAkcGFyZW50R3JvdXAucGFyZW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRyeSB0byBtYXRjaCB0aGUgalF1ZXJ5IGVsZW1lbnQgdG8gdGhlIGxvZ2ljYWwgZWxlbWVudCB1c2luZyBET00gY2xhc3Nlc1xuXG4gICAgICAgICAgICBpZiAoJHBhcmVudEdyb3VwLmhhc0NsYXNzKFwiYm94XCIpKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIGJveFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEJveEJ5SWQoJHBhcmVudEdyb3VwLmF0dHIoJ2lkJykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkcGFyZW50R3JvdXAuaGFzQ2xhc3MoXCJ3aXJlXCIpKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHdpcmVcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRXaXJlQnlJZCgkcGFyZW50R3JvdXAuYXR0cignaWQnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGZvdW5kIGEgZ3JvdXAgdGhhdCBjb250YWlucyB0aGUgdGFyZ2V0LCBidXQgdGhpcyBncm91cCBkb2VzIG5vdCBtYXRjaCBhbnkga25vd24gZWxlbWVudCB0eXBlc1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbGVtZW50IGRvZXMgbm90IG1hdGNoIGFueSBrbm93biBlbGVtZW50IHR5cGVzXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIGVsZW1lbnQgdG8gdGhlIENhbnZhc1xuICAgICAqIEBwYXJhbSAge2VkaXRvckVsZW1lbnRzLk5ldHdvcmtFbGVtZW50fSAgZWxlbWVudCBFbGVtZW50IHRoYXQgd2lsbCBiZSBhZGRlZCBvbiB0aGUgQ2FudmFzXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gW3JlZnJlc2g9dHJ1ZV0gaWYgdHJ1ZSwgdGhlIFNWRyBkb2N1bWVudCB3aWxsIGJlIHJlbG9hZGVkIGFmdGVyIGFkZGluZyB0aGlzIGVsZW1lbnRcbiAgICAgKi9cbiAgICBhcHBlbmRFbGVtZW50KGVsZW1lbnQsIHJlZnJlc2ggPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kSlF1ZXJ5T2JqZWN0KGVsZW1lbnQuZ2V0KCksIHJlZnJlc2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBhIGpRdWVyeSBlbGVtZW50IHRvIHRoZSBTVkcgZG9jdW1lbnQgKGhlbHBlciBmb3IgdGhpcy5hcHBlbmRFbGVtZW50KVxuICAgICAqIEBwYXJhbSAge29iamVjdH0gIG9iamVjdCAgICAgICAgIGpRdWVyeSBlbGVtZW50IHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgU1ZHIGRvY3VtZW50XG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gW3JlZnJlc2g9dHJ1ZV0gaWYgdHJ1ZSwgdGhlIFNWRyBkb2N1bWVudCB3aWxsIGJlIHJlbG9hZGVkIGFmdGVyIGFkZGluZyB0aGlzIGVsZW1lbnRcbiAgICAgKi9cbiAgICBhcHBlbmRKUXVlcnlPYmplY3Qob2JqZWN0LCByZWZyZXNoID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRzdmcuYXBwZW5kKG9iamVjdCk7XG4gICAgICAgIGlmIChyZWZyZXNoKVxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyBwYXR0ZXJuIHRvIHRoZSBkZWZpbml0aW9ucyBlbGVtZW50IGluIHRoZSBTVkcgZG9jdW1lbnRcbiAgICAgKiBAcGFyYW0ge3N2Z09iai5QYXR0ZXJufSBwYXR0ZXJuIHBhdHRlcm4gdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSA8ZGV2cz4gZWxlbWVudCBpbiB0aGUgU1ZHIGRvY3VtZW50XG4gICAgICovXG4gICAgYWRkUGF0dGVybihwYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMuJGRlZnMuYXBwZW5kKHBhdHRlcm4pO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWxvYWQgdGhlIFNWRyBkb2N1bWVudCAobmVlZGVkIHRvIGRpc3BsYXkgYSBuZXdseSBhcHBlbmRlZCBqUXVlcnkgb2JqZWN0KVxuICAgICAqL1xuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuJHN2Zy5odG1sKHRoaXMuJHN2Zy5odG1sKCkpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNWRyBkb2N1bWVudCBoYXMgYmVlbiByZWxvYWRlZC5cIilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IHRoZSBjb250ZXh0IG1lbnUgb24gdGhlIHNwZWNpZmllZCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSAge251bWJlcn0geCAgICAgICBob3Jpem9udGFsIHBvc2l0aW9uIGluIENTUyBwaXhlbHNcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHkgICAgICAgdmVydGljYWwgcG9zaXRpb24gaW4gQ1NTIHBpeGVsc1xuICAgICAqIEBwYXJhbSAge2pRdWVyeS5lbGVtZW50fSAkdGFyZ2V0IHRoZSBpdGVtIHVzZXIgY2xpY2tlZCBvbiAodXNlZCB0byBkaXNwbGF5IFwicmVtb3ZlIHRoaXMgZWxlbWVudFwiLXR5cGUgaXRlbXMgaW4gdGhlIG1lbnUpXG4gICAgICovXG4gICAgZGlzcGxheUNvbnRleHRNZW51KHgsIHksICR0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudS5kaXNwbGF5KHgsIHksICR0YXJnZXQpO1xuXG4gICAgICAgIC8vIGlmIHR1dG9yaWFsIGV4aXN0cywgY2FsbCB0dXRvcmlhbCBjYWxsYmFja1xuICAgICAgICBpZiAodGhpcy50dXRvcmlhbCkge1xuICAgICAgICAgICAgdGhpcy50dXRvcmlhbC5vbkNvbnRleHRNZW51T3BlbmVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoaWRlIHRoZSBjb250ZXh0IG1lbnVcbiAgICAgKi9cbiAgICBoaWRlQ29udGV4dE1lbnUoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dE1lbnUuaGlkZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNuYXAgYSB2YWx1ZSB0byBhIGdyaWRcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHZhbHVlIHZhbHVlIGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgIHRoZSB2YWx1ZSByb3VuZGVkIHRvIHRoZSBjbG9zZXN0IG51bWJlciBkaXZpc2libGUgYnkgdGhlIGdyaWQgc2l6ZVxuICAgICAqL1xuICAgIHNuYXBUb0dyaWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgLyB0aGlzLmdyaWRTaXplKSAqIHRoaXMuZ3JpZFNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY29udmVydCBncmlkIHBpeGVscyB0byBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSB2YWx1ZSBkaXN0YW5jZSBpbiBncmlkIHBpeGVsc1xuICAgICAqIEByZXR1cm4ge251bWJlcn0gICAgICAgZGlzdGFuY2UgaW4gU1ZHIHBpeGVsc1xuICAgICAqL1xuICAgIGdyaWRUb1NWRyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgKiB0aGlzLmdyaWRTaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNvbnZlcnQgU1ZHIHBpeGVscyB0byBncmlkIHBpeGVsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBkaXN0YW5jZSBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHJldHVybiB7bnVtYmVyfSAgICAgIGRpc3RhbmNlIGluIGdydWQgcGl4ZWxzXG4gICAgICovXG4gICAgU1ZHVG9HcmlkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAvIHRoaXMuZ3JpZFNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc3RhdGljIGZ1bmN0aW9uIGZvciBzbmFwcGluZyBhIHZhbHVlIHRvIGEgZ3JpZFxuICAgICAqIEBwYXJhbSAge251bWJlcn0gdmFsdWUgdmFsdWUgaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSAge251bWJlcn0gZ3JpZFNpemUgc2l6ZSBvZiB0aGUgZ3JpZCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHJldHVybiB7bnVtYmVyfSAgICAgICB0aGUgdmFsdWUgcm91bmRlZCB0byB0aGUgY2xvc2VzdCBudW1iZXIgZGl2aXNpYmxlIGJ5IHRoZSBncmlkIHNpemVcbiAgICAgKi9cbiAgICBzdGF0aWMgc25hcFRvR3JpZCh2YWx1ZSwgZ3JpZFNpemUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgLyBncmlkU2l6ZSkgKiBncmlkU2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBtb3ZlIGFuIGVsZW1lbnQgdG8gdGhlIGZyb250IGluIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IG9iaklkIGlkIG9mIHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgbW92ZVRvRnJvbnRCeUlkKG9iaklkKSB7XG4gICAgICAgIHRoaXMuJHN2Zy5hcHBlbmQoJChcIiNcIiArIG9iaklkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbW92ZSBhbiBlbGVtZW50IHRvIHRoZSBiYWNrIGluIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IG9iaklkIGlkIG9mIHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgbW92ZVRvQmFja0J5SWQob2JqSWQpIHtcbiAgICAgICAgJChcIiNcIiArIHRoaXMuYmFja2dyb3VuZC5pZCkuYWZ0ZXIoJChcIiNcIiArIG9iaklkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHNldCBvZiBub2RlcywgdGhhdCBjYW5ub3QgYmUgdXNlZCBmb3Igd2lyaW5nIGF0IGFueSBjaXJjdW1zdGFuY2VzXG4gICAgICogQHJldHVybiB7U2V0fSBzZXQgb2Ygbm9kZXMgKG9iamVjdHMgY29udGFpbmluZyB4IGFuZCB5IGNvb3JkaW5hdGVzKSB0aGF0IGFyZSBub3Qgc3VpdGFibGUgZm9yIHdpcmluZ1xuICAgICAqL1xuICAgIGdldE5vblJvdXRhYmxlTm9kZXMoKSB7XG4gICAgICAgIGxldCBibG9ja2VkTm9kZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8vIGZvciBlYWNoIGJveFxuICAgICAgICBmb3IgKGNvbnN0IGJveCBvZiB0aGlzLmJveGVzKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2xhdGUgPSBib3guZ2V0R3JpZFBpeGVsVHJhbnNmb3JtKCkuZ2V0VHJhbnNsYXRlKCk7XG5cbiAgICAgICAgICAgIC8vIGZvciBlYWNoIGl0ZW0gaW4gYmxvY2tlZE5vZGVzIChzZXQgb2YgYmxvY2tlZCBub2RlcyB3aXRoIGNvb3JkaW5hdGVzIHJlbGF0aXZlXG4gICAgICAgICAgICAvLyB0byB0aGUgbGVmdCB1cHBlciBjb3JuZXIgb2YgcmVjdDsgdW5pdCB1c2VkIGlzIFwib25lIGdyaWRTaXplXCIpIGNvbnZlcnQgdGhlIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICAvLyB0byBhYnNvbHV0ZSAobXVsdGlwbGUgd2l0aCBncmlkU2l6ZSBhbmQgYWRkIHBvc2l0aW9uIG9mIHJlY3QpIGFuZCBhZGQgdGhlIHJlc3VsdCB0byB0aGUgc2V0XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgYm94LmJsb2NrZWROb2Rlcykge1xuICAgICAgICAgICAgICAgIGJsb2NrZWROb2Rlcy5hZGQoe1xuICAgICAgICAgICAgICAgICAgICB4OiB0cmFuc2xhdGUueCArIG5vZGUueCxcbiAgICAgICAgICAgICAgICAgICAgeTogdHJhbnNsYXRlLnkgKyBub2RlLnlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZPUiBERUJVRyBPTkxZOiBkaXNwbGF5IHRoZSBub24gcm91dGFibGUgbm9kZXNcbiAgICAgICAgLypcblxuICAgICAgICBpZih0aGlzLm5vZGVEaXNwbGF5KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlY3RhbmdsZUlkIG9mIHRoaXMubm9kZURpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAkKGAjJHtyZWN0YW5nbGVJZH1gKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubm9kZURpc3BsYXkgPSBbXTtcblxuICAgICAgICBsZXQgZmlyc3QgPSB0cnVlO1xuXG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBibG9ja2VkTm9kZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSB0aGlzLmdyaWRUb1NWRyhub2RlLngpO1xuICAgICAgICAgICAgY29uc3QgeSA9IHRoaXMuZ3JpZFRvU1ZHKG5vZGUueSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHcgPSA0O1xuICAgICAgICAgICAgY29uc3QgcCA9IHcgLyAyO1xuXG4gICAgICAgICAgICBjb25zdCBub2RlUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSh4IC0gcCwgeSAtIHAsIHcsIHcsIGZpcnN0ID8gXCJibHVlXCIgOiBcInJlZFwiLCBcIm5vbmVcIilcbiAgICAgICAgICAgIHRoaXMubm9kZURpc3BsYXkucHVzaChub2RlUmVjdGFuZ2xlLmlkKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kRWxlbWVudChub2RlUmVjdGFuZ2xlLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgICAqL1xuICAgICAgICAvLyBFTkQgRk9SIERFQlVHIE9OTFlcblxuICAgICAgICAvLyByZXR1cm4gdGhlIHNldFxuICAgICAgICByZXR1cm4gYmxvY2tlZE5vZGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBzZXQgb2Ygbm9kZXMsIHRoYXQgYXJlIGluY29udmVuaWVudCBmb3Igd2lyaW5nLCBidXQgY2FuIGJlIHVzZWQsIGp1c3QgYXJlIG5vdCBwcmVmZXJyZWRcbiAgICAgKiBAcmV0dXJuIHtTZXR9IHNldCBvZiBub2RlcyAob2JqZWN0cyBjb250YWluaW5nIHggYW5kIHkgY29vcmRpbmF0ZXMpIHRoYXQgYXJlIG5vdCBwcmVmZXJyZWQgZm9yIHdpcmluZ1xuICAgICAqL1xuICAgIGdldEluY29udmVuaWVudE5vZGVzKGlnbm9yZVdpcmVJZCkge1xuICAgICAgICBsZXQgaW5jb252ZW5pZW50Tm9kZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8vIGZvciBlYWNoIHdpcmVcblxuICAgICAgICBmb3IgKGNvbnN0IHdpcmUgb2YgdGhpcy53aXJlcykge1xuICAgICAgICAgICAgaWYgKGlnbm9yZVdpcmVJZCA9PT0gdW5kZWZpbmVkIHx8IGlnbm9yZVdpcmVJZCAhPT0gd2lyZS5pZCkge1xuICAgICAgICAgICAgICAgIGlmICh3aXJlLmluY29udmVuaWVudE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiB3aXJlLmluY29udmVuaWVudE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNvbnZlbmllbnROb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGT1IgREVCVUcgT05MWTogZGlzcGxheSB0aGUgaW5jb252ZW5pZW50IG5vZGVzXG4gICAgICAgIC8qXG5cbiAgICAgICAgaWYodGhpcy5pbmNvbnZlbmllbnROb2RlRGlzcGxheSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWN0YW5nbGVJZCBvZiB0aGlzLmluY29udmVuaWVudE5vZGVEaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgJChgIyR7cmVjdGFuZ2xlSWR9YCkucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluY29udmVuaWVudE5vZGVEaXNwbGF5ID0gW107XG5cbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGluY29udmVuaWVudE5vZGVzKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gdGhpcy5ncmlkVG9TVkcobm9kZS54KTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLmdyaWRUb1NWRyhub2RlLnkpO1xuXG4gICAgICAgICAgICBjb25zdCB3ID0gNDtcbiAgICAgICAgICAgIGNvbnN0IHAgPSB3IC8gMjtcblxuICAgICAgICAgICAgY29uc3Qgbm9kZVJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoeCAtIHAsIHkgLSBwLCB3LCB3LCBcIm9yYW5nZVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAgIHRoaXMuaW5jb252ZW5pZW50Tm9kZURpc3BsYXkucHVzaChub2RlUmVjdGFuZ2xlLmlkKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kRWxlbWVudChub2RlUmVjdGFuZ2xlLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgICAqL1xuICAgICAgICAvLyBFTkQgRk9SIERFQlVHIE9OTFlcblxuICAgICAgICAvLyByZXR1cm4gdGhlIHNldFxuICAgICAgICByZXR1cm4gaW5jb252ZW5pZW50Tm9kZXM7XG4gICAgfVxufVxuIiwiLyoqIEBtb2R1bGUgTG9naWMgKi9cbi8qKlxuICogZGVmaW5pdGlvbnMgb2YgbG9naWMgc3RhdGVzIGFuZCBiYXNpYyBsb2dpYyBmdW5jdGlvbnMgdXNlZCBpbiB0aGUgc2ltdWxhdGlvblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2dpYyB7XG4gICAgLyoqXG4gICAgICogRW51bSBmb3IgbG9naWMgc3RhdGVzLlxuICAgICAqXG4gICAgICogU3RhdGVzOlxuICAgICAqIC0gYHVua25vd25gXG4gICAgICogLSBgb25gXG4gICAgICogLSBgb2ZmYFxuICAgICAqIC0gYG9zY2lsbGF0aW5nYFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBzdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVua25vd246IDAsXG4gICAgICAgICAgICBvbjogMSxcbiAgICAgICAgICAgIG9mZjogMixcbiAgICAgICAgICAgIG9zY2lsbGF0aW5nOiAzXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBsaXN0IG9mIGFsbCBzdGF0ZXMgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgc2ltdWxhdGlvblxuICAgICAqXG4gICAgICogVGhpcyBnZXR0ZXIgaXRlcmF0ZXMgb3ZlciBMb2dpYy5zdGF0ZSBhbmQgcmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGFsbCB2YWx1ZXMgb2YgTG9naWMuc3RhdGUncyBtZW1iZXJzXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgc3RhdGVMaXN0KCkge1xuICAgICAgICBsZXQgc3RhdGVzID0gW107XG5cbiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIGFsbCBkZWZpbmVkIHN0YXRlcyBhbmQgYWRkIHRoZWlyIHZhbHVlcyB0byB0aGUgc3RhdGVzIGFycmF5XG4gICAgICAgIE9iamVjdC5rZXlzKExvZ2ljLnN0YXRlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBzdGF0ZXMucHVzaChMb2dpYy5zdGF0ZVtrZXldKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHN0YXRlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dpYyBBTkRcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gYSBmaXJzdCBpbnB1dCBzdGF0ZVxuICAgICAqIEBwYXJhbSAge0xvZ2ljLnN0YXRlfSBiIHNlY29uZCBpbnB1dCBzdGF0ZVxuICAgICAqIEByZXR1cm4ge0xvZ2ljLnN0YXRlfSAgIG91dHB1dCBzdGF0ZVxuICAgICAqL1xuICAgIHN0YXRpYyBhbmQoYSwgYikge1xuICAgICAgICByZXR1cm4gTG9naWMucnVuU3ltbWV0cmljUnVsZXMoYSwgYiwgW1xuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9uLCBMb2dpYy5zdGF0ZS5vbiwgTG9naWMuc3RhdGUub25dLFxuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9uLCBMb2dpYy5zdGF0ZS5vZmYsIExvZ2ljLnN0YXRlLm9mZl0sXG4gICAgICAgICAgICBbTG9naWMuc3RhdGUub24sIExvZ2ljLnN0YXRlLnVua25vd24sIExvZ2ljLnN0YXRlLnVua25vd25dLFxuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9uLCBMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUub3NjaWxsYXRpbmddLFxuXG4gICAgICAgICAgICBbTG9naWMuc3RhdGUub2ZmLCBMb2dpYy5zdGF0ZS5vZmYsIExvZ2ljLnN0YXRlLm9mZl0sXG4gICAgICAgICAgICBbTG9naWMuc3RhdGUub2ZmLCBMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS5vZmZdLFxuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9mZiwgTG9naWMuc3RhdGUub3NjaWxsYXRpbmcsIExvZ2ljLnN0YXRlLm9mZl0sXG5cbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS51bmtub3duXSxcbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUudW5rbm93bl0sXG5cbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUub3NjaWxsYXRpbmcsIExvZ2ljLnN0YXRlLm9zY2lsbGF0aW5nXVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9naWMgTkFORFxuICAgICAqIEBwYXJhbSAge0xvZ2ljLnN0YXRlfSBhIGZpcnN0IGlucHV0IHN0YXRlXG4gICAgICogQHBhcmFtICB7TG9naWMuc3RhdGV9IGIgc2Vjb25kIGlucHV0IHN0YXRlXG4gICAgICogQHJldHVybiB7TG9naWMuc3RhdGV9ICAgb3V0cHV0IHN0YXRlXG4gICAgICovXG4gICAgc3RhdGljIG5hbmQoYSwgYikge1xuICAgICAgICByZXR1cm4gTG9naWMubm90KExvZ2ljLmFuZChhLCBiKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9naWMgTk9SXG4gICAgICogQHBhcmFtICB7TG9naWMuc3RhdGV9IGEgZmlyc3QgaW5wdXQgc3RhdGVcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gYiBzZWNvbmQgaW5wdXQgc3RhdGVcbiAgICAgKiBAcmV0dXJuIHtMb2dpYy5zdGF0ZX0gICBvdXRwdXQgc3RhdGVcbiAgICAgKi9cbiAgICBzdGF0aWMgbm9yKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIExvZ2ljLm5vdChMb2dpYy5vcihhLCBiKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9naWMgTk9UXG4gICAgICogQHBhcmFtICB7TG9naWMuc3RhdGV9IGEgZmlyc3QgaW5wdXQgc3RhdGVcbiAgICAgKiBAcmV0dXJuIHtMb2dpYy5zdGF0ZX0gICBvdXRwdXQgc3RhdGVcbiAgICAgKi9cbiAgICBzdGF0aWMgbm90KGEpIHtcbiAgICAgICAgaWYoYSA9PT0gTG9naWMuc3RhdGUub24pIHtcbiAgICAgICAgICAgIHJldHVybiBMb2dpYy5zdGF0ZS5vZmY7XG4gICAgICAgIH0gZWxzZSBpZiAoYSA9PT0gTG9naWMuc3RhdGUub2ZmKSB7XG4gICAgICAgICAgICByZXR1cm4gTG9naWMuc3RhdGUub247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ2ljIE9SXG4gICAgICogQHBhcmFtICB7TG9naWMuc3RhdGV9IGEgZmlyc3QgaW5wdXQgc3RhdGVcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gYiBzZWNvbmQgaW5wdXQgc3RhdGVcbiAgICAgKiBAcmV0dXJuIHtMb2dpYy5zdGF0ZX0gICBvdXRwdXQgc3RhdGVcbiAgICAgKi9cbiAgICBzdGF0aWMgb3IoYSwgYikge1xuICAgICAgICByZXR1cm4gTG9naWMucnVuU3ltbWV0cmljUnVsZXMoYSwgYiwgW1xuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9uLCBMb2dpYy5zdGF0ZS5vbiwgTG9naWMuc3RhdGUub25dLFxuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9uLCBMb2dpYy5zdGF0ZS5vZmYsIExvZ2ljLnN0YXRlLm9uXSxcbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS5vbiwgTG9naWMuc3RhdGUudW5rbm93biwgTG9naWMuc3RhdGUub25dLFxuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9uLCBMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUub25dLFxuXG4gICAgICAgICAgICBbTG9naWMuc3RhdGUub2ZmLCBMb2dpYy5zdGF0ZS5vZmYsIExvZ2ljLnN0YXRlLm9mZl0sXG4gICAgICAgICAgICBbTG9naWMuc3RhdGUub2ZmLCBMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS51bmtub3duXSxcbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS5vZmYsIExvZ2ljLnN0YXRlLm9zY2lsbGF0aW5nLCBMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZ10sXG5cbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS51bmtub3duXSxcbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUudW5rbm93bl0sXG5cbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUub3NjaWxsYXRpbmcsIExvZ2ljLnN0YXRlLm9zY2lsbGF0aW5nXVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dpYyBYTk9SXG4gICAgICogQHBhcmFtICB7TG9naWMuc3RhdGV9IGEgZmlyc3QgaW5wdXQgc3RhdGVcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gYiBzZWNvbmQgaW5wdXQgc3RhdGVcbiAgICAgKiBAcmV0dXJuIHtMb2dpYy5zdGF0ZX0gICBvdXRwdXQgc3RhdGVcbiAgICAgKi9cbiAgICBzdGF0aWMgeG5vcihhLCBiKSB7XG4gICAgICAgIHJldHVybiBMb2dpYy5ub3QoTG9naWMueG9yKGEsIGIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dpYyBYT1JcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gYSBmaXJzdCBpbnB1dCBzdGF0ZVxuICAgICAqIEBwYXJhbSAge0xvZ2ljLnN0YXRlfSBiIHNlY29uZCBpbnB1dCBzdGF0ZVxuICAgICAqIEByZXR1cm4ge0xvZ2ljLnN0YXRlfSAgIG91dHB1dCBzdGF0ZVxuICAgICAqL1xuICAgIHN0YXRpYyB4b3IoYSwgYikge1xuICAgICAgICByZXR1cm4gTG9naWMucnVuU3ltbWV0cmljUnVsZXMoYSwgYiwgW1xuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9uLCBMb2dpYy5zdGF0ZS5vbiwgTG9naWMuc3RhdGUub2ZmXSxcbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS5vbiwgTG9naWMuc3RhdGUub2ZmLCBMb2dpYy5zdGF0ZS5vbl0sXG4gICAgICAgICAgICBbTG9naWMuc3RhdGUub24sIExvZ2ljLnN0YXRlLnVua25vd24sIExvZ2ljLnN0YXRlLnVua25vd25dLFxuICAgICAgICAgICAgW0xvZ2ljLnN0YXRlLm9uLCBMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUub3NjaWxsYXRpbmddLFxuXG4gICAgICAgICAgICBbTG9naWMuc3RhdGUub2ZmLCBMb2dpYy5zdGF0ZS5vZmYsIExvZ2ljLnN0YXRlLm9mZl0sXG4gICAgICAgICAgICBbTG9naWMuc3RhdGUub2ZmLCBMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS51bmtub3duXSxcbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS5vZmYsIExvZ2ljLnN0YXRlLm9zY2lsbGF0aW5nLCBMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZ10sXG5cbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS51bmtub3duXSxcbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS51bmtub3duLCBMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUudW5rbm93bl0sXG5cbiAgICAgICAgICAgIFtMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZywgTG9naWMuc3RhdGUub3NjaWxsYXRpbmcsIExvZ2ljLnN0YXRlLm9zY2lsbGF0aW5nXVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgY29ycmVjdCBydWxlIGluIHRoZSBhcnJheSBvZiBydWxlcyBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXR1cm4gdmFsdWUuXG4gICAgICogVGhpcyBmdW5jdGlvbiBleHBlY3RzIHJ1bGVzIHRvIGJlIHN5bW1ldHJpYyAoc28gYGEgUlVMRSBiYCBzaG91bGQgcmV0dXJucyB0aGUgc2FtZSB2YWx1ZSBhcyBgYiBSVUxFIGFgKSxcbiAgICAgKiB3aGljaCBhbGxvd3MgdG8gY3V0IGRvd24gb24gdGhlIGBydWxlc2AgYXJyYXkgcXVpdGUgYSBiaXRcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gYSAgICAgZmlyc3QgaW5wdXQgc3RhdGVcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gYiAgICAgc2Vjb25kIGlucHV0IHN0YXRlXG4gICAgICogQHBhcmFtICB7QXJyYXl9IHJ1bGVzICAgICAgIEFycmF5IG9mIGFycmF5cy4gRWFjaCBpbm5lciBhcnJheSByZXByZXNlbnRzIGEgcnVsZSBpbiB0aGUgZm9ybWF0IFtpbnB1dDEsIGlucHV0Miwgb3V0cHV0XS5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGZ1bmN0aW9uIGZpbmRzIGFuIGFycmF5LCB3aGVyZSBgYSA9PT0gaW5wdXQxYCBhbmQgYGIgPT09IGlucHV0MWAgKG9yIGBhID09PSBpbnB1dDJgIGFuZCBgYiA9PT0gaW5wdXQxYClcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHJldHVybnMgYG91dHB1dGAgZnJvbSB0aGlzIGFycmF5LlxuICAgICAqIEByZXR1cm4ge0xvZ2ljLnN0YXRlfSAgICAgICBvdXRwdXQgc3RhdGVcbiAgICAgKi9cbiAgICBzdGF0aWMgcnVuU3ltbWV0cmljUnVsZXMoYSwgYiwgcnVsZXMpIHtcbiAgICAgICAgLy8gaXRlcmF0ZSB0aHJvdWdoIGFsbCB0aGUgcnVsZXNcbiAgICAgICAgZm9yIChjb25zdCBydWxlIG9mIHJ1bGVzKSB7XG4gICAgICAgICAgICBpZiAoKHJ1bGVbMF0gPT09IGEgJiYgcnVsZVsxXSA9PT0gYikgfHwgKHJ1bGVbMF0gPT09IGIgJiYgcnVsZVsxXSA9PT0gYSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZVsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vIHJ1bGUgbWF0Y2hlcywgdGhlIG91dHB1dCBzdGF0ZSBpcyB1bmtub3duXG4gICAgICAgIHJldHVybiBMb2dpYy5zdGF0ZS51bmtub3duO1xuICAgIH1cbn1cbiIsImltcG9ydCBMb2dpYyBmcm9tICcuL0xvZ2ljJ1xuXG4vKipcbiAqIEBtb2R1bGUgU2ltdWxhdGlvblxuICovXG5cblxuY2xhc3Mgc3RhdGVDaGFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3RvcklkLCBzdGF0ZSwgd2hvQ2F1c2VkSXQpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0b3JJZCA9IGNvbm5lY3RvcklkXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZVxuICAgICAgICB0aGlzLndob0NhdXNlZEl0ID0gd2hvQ2F1c2VkSXRcbiAgICB9XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBydW5zIHRoZSBuZXR3b3JrIHNpbXVsYXRpb24uXG4gKlxuICogX25vdGU6IGFsbCBjb25uZWN0b3JzIHRoYXQgYXJlIHVzZWQgaW4gdGhpcyBjbGFzcyBhcmUgKipvdXRwdXQgY29ubmVjdG9ycyoqX1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW11bGF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0NhbnZhc30gcGFyZW50U1ZHIGluc3RhbmNlIG9mIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudFNWRykge1xuICAgICAgICAvKipcbiAgICAgICAgICogaW5zdGFuY2Ugb2YgQ2FudmFzIHRoaXMgU2ltdWxhdGlvbiBiZWxvbmdzIHRvXG4gICAgICAgICAqIEB0eXBlIHtDYW52YXN9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBhcmVudFNWRyA9IHBhcmVudFNWR1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtYXBzIGVhY2ggYWZmZWN0ZWQgb3V0cHV0IGNvbm5lY3RvciB0byBpdCdzIGRpcmVjdGx5IHByZWNlZWRpbmcgb3V0cHV0IGNvbm5lY3RvcnNcbiAgICAgICAgICogQHR5cGUge01hcH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHJlZGVjZXNzb3JzID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtYXBzIHdhdmVJZCB0byBhbiBhcnJheSBvZiBhZmZlY3RlZCBvdXRwdXRDb25uZWN0b3JzXG4gICAgICAgICAqIEB0eXBlIHtNYXB9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndhdmVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLndhdmUgPSAwXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1hcHMgY3ljbGVkIGNvbm5lY3RvciBpZCB0byBzZXQgb2Ygc3RhdGVzIHRoaXMgY29ubmVjdG9yIHdhcyBpblxuICAgICAgICAgKiBAdHlwZSB7TWFwfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jeWNsZWRDb25uZWN0b3JzID0gbmV3IE1hcCgpXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCBvZiBjeWNsZWQgY29ubmVjdG9ycyB0aGF0IGhhdmUgYmVlbiBhbHJlYWR5IHJlc29sdmVkXG4gICAgICAgICAqIEB0eXBlIHtTZXR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlc29sdmVkQ3ljbGVkQ29ubmVjdG9ycyA9IG5ldyBTZXQoKVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcnVuIHRoZSBzaW11bGF0aW9uXG4gICAgICovXG4gICAgcnVuKCkge1xuICAgICAgICB0aGlzLndhdmUrKztcbiAgICAgICAgd2hpbGUodGhpcy53YXZlcy5oYXModGhpcy53YXZlKSkge1xuICAgICAgICAgICAgdGhpcy5zdGVwKClcbiAgICAgICAgICAgIHRoaXMud2F2ZXMuZGVsZXRlKHRoaXMud2F2ZSkgLy8gY2xlYW4gb2xkIHdhdmVzIG9uIHRoZSBnb1xuICAgICAgICAgICAgdGhpcy53YXZlKytcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG9uZSBzdGVwL3dhdmUgb2YgdGhlIHNpbXVsYXRpb25cbiAgICAgKlxuICAgICAqIGRldGVybWluZXMgc3RhdGVzIG9mIHRoZSBjb25uZWN0b3JzIGluIHRoZSBjdXJyZW50IHdhdmUsIGRldGVjdHMgY3ljbGVzXG4gICAgICovXG4gICAgc3RlcCgpIHtcbiAgICAgICAgZm9yIChsZXQge2Nvbm5lY3RvcklkLCBzdGF0ZSwgd2hvQ2F1c2VkSXR9IG9mIHRoaXMud2F2ZXMuZ2V0KHRoaXMud2F2ZSkpIHtcbiAgICAgICAgICAgIC8vIHNraXAgcmVzb2x2ZWQgY3ljbGVzXG4gICAgICAgICAgICBpZih0aGlzLnJlc29sdmVkQ3ljbGVkQ29ubmVjdG9ycy5oYXMoY29ubmVjdG9ySWQpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2tpcCBjb25uZWN0b3IgdGhhdCBhcmUgY3ljbGVzXG4gICAgICAgICAgICBpZiAodGhpcy5jeWNsZWRDb25uZWN0b3JzLmhhcyhjb25uZWN0b3JJZCkpIHtcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIHNldCBvZiBzdGF0ZXMgdGhhdCB0aGlzIGNvbm5lY3RvciBhcHBlYXJlZCBmcm9tIHRoZSBtb21lbnQgdGhlIHNpZ25hbCBmaXJzdCBjeWNsZWRcbiAgICAgICAgICAgICAgICBsZXQgc3RhdGVzID0gdGhpcy5jeWNsZWRDb25uZWN0b3JzLmdldChjb25uZWN0b3JJZClcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjb25uZWN0b3IgYWxyZWFkeSBoYWQgdGhpcyBzdGF0ZSBpbiB0aGlzIGN5Y2xlLCByZXNvbHZlIHRoZSBjeWNsZVxuICAgICAgICAgICAgICAgIGlmKHN0YXRlcy5oYXMoc3RhdGUpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgYXJlIG1vcmUgc3RhdGVzIGluIHRoZSBzZXQsIHRoZSBjb25uZWN0b3IgaXMgb3NjaWxsYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gKGVsc2UgaXQga2VlcHMgaXRzIHN0YXRlIGFuZCB3ZSBqdXN0IGJyZWFrIHRoZSBjeWNsZSlcbiAgICAgICAgICAgICAgICAgICAgaWYoc3RhdGVzLnNpemUgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IExvZ2ljLnN0YXRlLm9zY2lsbGF0aW5nXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBtYXJrIHRoaXMgY29ubmVjdG9yIGFzIHJlc29sdmVkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZWRDeWNsZWRDb25uZWN0b3JzLmFkZChjb25uZWN0b3JJZClcblxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBuZXcsIHVuc2VlbiBzdGF0ZSwgYWRkIGl0IHRvIHRoZSBzZXQgYW5kIGNvbnRpbnVlIHNpbXVsYXRpbmcgdGhlIGN5Y2xlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzLmFkZChzdGF0ZSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBtYXAgdGhlIG1vZGlmaWVkIHNldCBvZiBzdGF0ZXMgdG8gdGhlIGNvbm5lY3RvclxuICAgICAgICAgICAgICAgIHRoaXMuY3ljbGVkQ29ubmVjdG9ycy5zZXQoY29ubmVjdG9ySWQsIHN0YXRlcylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy53aG9DYXVzZWRJdCA9IGNvbm5lY3RvcklkXG4gICAgICAgICAgICAvKiAgcHJvY2VzcyBhbGwgb3V0cHV0Q29ubmVjdG9ycyBieSBzZXR0aW5nIHRoZWlyIHN0YXRlXG4gICAgICAgICAgICAgICAgdGhpcyB3aWxsIHRyaWdnZXIgYSBmb2xsb3dpbmcgZXZlbnQgY2hhaW46XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dENvbm5lY3RvciBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAgIC0+IGFsbCBjb25uZWN0ZWQgd2lyZXMgY2hhbmdlXG4gICAgICAgICAgICAgICAgICAgIC0+IGFsbCBpbnB1dENvbm5lY3RvcnMgY29ubmVjdGVkIHRvIHRoZXNlIHdpcmVzIGNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAtPiBhbGwgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZXNlIGlucHV0Q29ubmVjdG9ycyBjaGFuZ2VcbiAgICAgICAgICAgICAgICAgICAgLT4gdGhlc2UgZWxlbWVudHMgY29tcHV0ZSB0aGUgbmV3IHN0YXRlIG9mIHRoZWlyIG91dHB1dCBjb25uZWN0b3JzIGFuZCBjYWxsIG5vdGlmeUNoYW5nZSgpXG4gICAgICAgICAgICAqL1xuXG5cbiAgICAgICAgICAgIGlmKHdob0NhdXNlZEl0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRQcmVkZWNlc3Nvcihjb25uZWN0b3JJZCwgd2hvQ2F1c2VkSXQpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5jeWNsZWRDb25uZWN0b3JzLmhhcyhjb25uZWN0b3JJZCkgJiYgdGhpcy5nZXRBbGxQcmVkZWNlc3NvcnMoY29ubmVjdG9ySWQpLmhhcyhjb25uZWN0b3JJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN5Y2xlZENvbm5lY3RvcnMuc2V0KGNvbm5lY3RvcklkLCBuZXcgU2V0KFtzdGF0ZV0pKVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIHJlZmxlY3QgdGhlIGNoYW5nZXMgaW4gU1ZHXG4gICAgICAgICAgICBsZXQgY29ubmVjdG9yID0gdGhpcy5wYXJlbnRTVkcuZ2V0Q29ubmVjdG9yQnlJZChjb25uZWN0b3JJZClcbiAgICAgICAgICAgIGlmKGNvbm5lY3Rvcikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rvci5zZXRTdGF0ZShzdGF0ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLndob0NhdXNlZEl0ID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbWFyayBhIHByZWRlY2Vzc29yQ29ubmVjdG9ySWQgYXMgYSBwcmVkZWNlc3NvciBvZiBjb25uZWN0b3JJZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb25uZWN0b3JJZCBJRCBvZiBhIGNvbm5lY3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVkZWNlc3NvckNvbm5lY3RvcklkIHByZWRlY2Vzc29yIG9mIGBjb25uZWN0b3JJZGBcbiAgICAgKi9cbiAgICBhZGRQcmVkZWNlc3Nvcihjb25uZWN0b3JJZCwgcHJlZGVjZXNzb3JDb25uZWN0b3JJZCkge1xuICAgICAgICBpZighdGhpcy5wcmVkZWNlc3NvcnMuaGFzKGNvbm5lY3RvcklkKSkge1xuICAgICAgICAgICAgdGhpcy5wcmVkZWNlc3NvcnMuc2V0KGNvbm5lY3RvcklkLCBuZXcgU2V0KCkpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByZWRlY2Vzc29ycy5nZXQoY29ubmVjdG9ySWQpLmFkZChwcmVkZWNlc3NvckNvbm5lY3RvcklkKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBzZXQgb2YgYWxsIG91dHB1dCBjb25uZWN0b3JzIHRoYXQgYXJlIGJlZm9yZSB0aGlzIG91dHB1dCBjb25uZWN0b3JcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNvbm5lY3RvcklkIElEIG9mIGEgY29ubmVjdG9yXG4gICAgICogQHJldHVybiB7U2V0fSAgICAgICAgICAgICAgICBzZXQgb2YgY29ubmVjdG9yIGlkcyB0aGF0IGFyZSBiZWZvcmUgdGhpcyBvdXRwdXQgY29ubmVjdG9yXG4gICAgICovXG4gICAgZ2V0QWxsUHJlZGVjZXNzb3JzKGNvbm5lY3RvcklkKSB7XG4gICAgICAgIGlmKCF0aGlzLnByZWRlY2Vzc29ycy5oYXMoY29ubmVjdG9ySWQpKSB7XG4gICAgICAgICAgICB0aGlzLnByZWRlY2Vzc29ycy5zZXQoY29ubmVjdG9ySWQsIG5ldyBTZXQoKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhbGwgPSBuZXcgU2V0KClcblxuICAgICAgICB0aGlzLnByZWRlY2Vzc29ycy5nZXQoY29ubmVjdG9ySWQpLmZvckVhY2goYWxsLmFkZCwgYWxsKTtcblxuICAgICAgICBsZXQgcHJldlNpemUgPSAwXG4gICAgICAgIGxldCBzaXplID0gYWxsLnNpemVcbiAgICAgICAgd2hpbGUocHJldlNpemUgPCBzaXplKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjb25uZWN0b3Igb2YgYWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJlZGVjZXNzb3JzLmhhcyhjb25uZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlZGVjZXNzb3JzLmdldChjb25uZWN0b3IpLmZvckVhY2goYWxsLmFkZCwgYWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2U2l6ZSA9IHNpemVcbiAgICAgICAgICAgIHNpemUgPSBhbGwuc2l6ZVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vdGlmeSBhIGNoYW5nZSBpbiB0aGUgbmV0d29yay4gVGhpcyBmdW5jdGlvbiBhZGRzIHRoZSBjaGFuZ2VkIGNvbm5lY3RvciB0byB0aGUgbmV4dCB3YXZlXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBjb25uZWN0b3JJZCBJRCBvZiB0aGUgY2hhbmdlZCBjb25uZWN0b3JcbiAgICAgKiBAcGFyYW0gIHtMb2dpYy5zdGF0ZX0gc3RhdGUgIG5ldyBbTG9naWMuc3RhdGVdKC4vbW9kdWxlLUxvZ2ljLmh0bWwjLnN0YXRlKSBvZiB0aGUgY29ubmVjdG9yXG4gICAgICovXG4gICAgbm90aWZ5Q2hhbmdlKGNvbm5lY3RvcklkLCBzdGF0ZSkge1xuICAgICAgICBsZXQgd2F2ZUlkID0gdGhpcy53YXZlICsgMVxuXG4gICAgICAgIGlmKCF0aGlzLndhdmVzLmhhcyh3YXZlSWQpKSB7XG4gICAgICAgICAgICB0aGlzLndhdmVzLnNldCh3YXZlSWQsIFtdKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy53YXZlcy5nZXQod2F2ZUlkKS5wdXNoKG5ldyBzdGF0ZUNoYW5nZShjb25uZWN0b3JJZCwgc3RhdGUsIHRoaXMud2hvQ2F1c2VkSXQpKTtcbiAgICB9XG59XG4iLCIvKiogQG1vZHVsZSBlZGl0b3JFbGVtZW50cyAqL1xuXG4vLyB0cmFuc2Zvcm1cbmV4cG9ydCB7IGRlZmF1bHQgYXMgVHJhbnNmb3JtIH0gZnJvbSAnLi9lZGl0b3JFbGVtZW50cy9UcmFuc2Zvcm0nXG5cbi8vIGNvbm5lY3RvcnNcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSW5wdXRDb25uZWN0b3J9IGZyb20gJy4vZWRpdG9yRWxlbWVudHMvSW5wdXRDb25uZWN0b3InXG5leHBvcnQgeyBkZWZhdWx0IGFzIE91dHB1dENvbm5lY3Rvcn0gZnJvbSAnLi9lZGl0b3JFbGVtZW50cy9PdXRwdXRDb25uZWN0b3InXG5cbi8vIGJveGVzXG5leHBvcnQgeyBkZWZhdWx0IGFzIElucHV0Qm94fSBmcm9tICcuL2VkaXRvckVsZW1lbnRzL0lucHV0Qm94J1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBPdXRwdXRCb3h9IGZyb20gJy4vZWRpdG9yRWxlbWVudHMvT3V0cHV0Qm94J1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHYXRlfSBmcm9tICcuL2VkaXRvckVsZW1lbnRzL0dhdGUnXG5leHBvcnQgeyBkZWZhdWx0IGFzIEJsYWNrYm94fSBmcm9tICcuL2VkaXRvckVsZW1lbnRzL0JsYWNrYm94J1xuXG4vLyBoZWxwZXIgd2lyZVxuZXhwb3J0IHsgZGVmYXVsdCBhcyBIZWxwZXJXaXJlfSBmcm9tICcuL2VkaXRvckVsZW1lbnRzL0hlbHBlcldpcmUnXG5cbi8vIHdpcmVcbmV4cG9ydCB7IGRlZmF1bHQgYXMgV2lyZX0gZnJvbSAnLi9lZGl0b3JFbGVtZW50cy9XaXJlJ1xuIiwiaW1wb3J0IHtHcm91cCwgUmVjdGFuZ2xlLCBNdWx0aUxpbmVUZXh0LCBQb2x5TGluZSwgUG9seUxpbmVQb2ludHMsIFBvbHlMaW5lUG9pbnR9IGZyb20gJy4uL3N2Z09iamVjdHMnXG5pbXBvcnQgTG9naWMgZnJvbSAnLi4vTG9naWMnXG5cbmltcG9ydCBCb3ggZnJvbSAnLi9Cb3gnXG5cbi8qKiBAbW9kdWxlIGVkaXRvckVsZW1lbnRzLkJsYWNrYm94ICovXG5cbi8qKlxuICogQmxhY2tib3ggaXMgYSBib3ggdGhhdCBpcyBkZWZpbmVkIGJ5IGl0cyBldmFsdWF0aW9uIGZ1bmN0aW9uXG4gKiBAZXh0ZW5kcyBCb3hcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxhY2tib3ggZXh0ZW5kcyBCb3gge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Q2FudmFzfSBwYXJlbnRTVkcgIGluc3RhbmNlIG9mIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dENvbm5lY3RvcnMgIG51bWJlciBvZiBpbnB1dCBjb25uZWN0b3JzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG91dHB1dENvbm5lY3RvcnMgbnVtYmVyIG9mIG91dHB1dCBjb25uZWN0b3JzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXZhbEZ1bmN0aW9uICAgZnVuY3Rpb24gdGhhdCB0YWtlcyBgaW5wdXRDb25uZWN0b3JzYCBbTG9naWMuc3RhdGVdKC4vbW9kdWxlLUxvZ2ljLmh0bWwjLnN0YXRlKXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgcmV0dXJucyBgb3V0cHV0Q29ubmVjdG9yc2AgTG9naWMuc3RhdGVzLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZV0gICAgICAgIG5hbWUgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBvbiB0aGUgYmxhY2tib3hcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTVkcsIGlucHV0Q29ubmVjdG9ycywgb3V0cHV0Q29ubmVjdG9ycywgZXZhbEZ1bmN0aW9uLCBuYW1lID0gXCJcIikge1xuICAgICAgICBjb25zdCB3aWR0aCA9IDExO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChpbnB1dENvbm5lY3RvcnMsIG91dHB1dENvbm5lY3RvcnMpICogMjtcblxuICAgICAgICBzdXBlcihwYXJlbnRTVkcsIG5hbWUsIFwiYmxhY2tib3hcIiwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY29uc3QgY29ubmVjdG9yUGluTGVuZ2h0ID0gMi41ICogdGhpcy5ncmlkU2l6ZTtcblxuICAgICAgICAvLyBvdmVycmlkZSBkZWZhdWx0IHN2Z09iaiBzdHJ1Y3R1cmVcbiAgICAgICAgdGhpcy5zdmdPYmogPSBuZXcgR3JvdXAoKTtcblxuICAgICAgICAvLyB0cmFuc3BhcmVudCBiYWNrZ3JvdW5kIHJlY3RhbmdsZVxuICAgICAgICBsZXQgaGl0Ym94ID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgXCJub25lXCIsIFwibm9uZVwiKTtcbiAgICAgICAgaGl0Ym94LiRlbC5hZGRDbGFzcygncmVjdCcpO1xuXG4gICAgICAgIHRoaXMuc3ZnT2JqLmFkZENoaWxkKGhpdGJveCk7XG5cbiAgICAgICAgLy8gbWFpbiByZWN0YW5nbGVcbiAgICAgICAgY29uc3QgYm9keVdpZHRoID0gdGhpcy53aWR0aCAtIDIgKiBjb25uZWN0b3JQaW5MZW5naHQ7XG5cbiAgICAgICAgbGV0IHJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoY29ubmVjdG9yUGluTGVuZ2h0LCAwLCBib2R5V2lkdGgsIHRoaXMuaGVpZ2h0LCBcIndoaXRlXCIsIFwiYmxhY2tcIik7XG4gICAgICAgIHJlY3RhbmdsZS5hZGRBdHRyKHsnc3Ryb2tlLXdpZHRoJzogJzIuNSd9KTtcbiAgICAgICAgcmVjdGFuZ2xlLiRlbC5hZGRDbGFzcygncmVjdCcpO1xuXG4gICAgICAgIHRoaXMuc3ZnT2JqLmFkZENoaWxkKHJlY3RhbmdsZSk7XG5cbiAgICAgICAgLy8gdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgYm94XG4gICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IGJvZHlXaWR0aCAtIHRoaXMuZ3JpZFNpemU7XG4gICAgICAgIGNvbnN0IHRleHRIZWlnaHQgPSB0aGlzLmhlaWdodCAtIHRoaXMuZ3JpZFNpemU7XG4gICAgICAgIGxldCB0ZXh0ID0gbmV3IE11bHRpTGluZVRleHQoXG4gICAgICAgICAgICAodGhpcy53aWR0aCAtIHRleHRXaWR0aCkgLyAyLCAvLyBob3Jpem9udGFsIGNlbnRlcmluZ1xuICAgICAgICAgICAgKHRoaXMuaGVpZ2h0IC0gdGV4dEhlaWdodCkgLyAyLCAvLyB2ZXJ0aWNhbCBjZW50ZXJpbmdcbiAgICAgICAgICAgIHRleHRXaWR0aCxcbiAgICAgICAgICAgIHRleHRIZWlnaHQsXG4gICAgICAgICAgICBuYW1lLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICB0aGlzLmdyaWRTaXplICogMS4yXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3ZnT2JqLmFkZENoaWxkKHRleHQpO1xuXG4gICAgICAgIC8vIGFkZCBpbnB1dCBjb25uZWN0b3JzXG4gICAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IGlucHV0Q29ubmVjdG9ycyA7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZ3JpZFBvc2l0aW9uID0gKGkgKiAyKSArIDE7XG4gICAgICAgICAgICBjb25zdCBwaXhlbFBvc2l0aW9uID0gZ3JpZFBvc2l0aW9uICogdGhpcy5ncmlkU2l6ZTtcblxuICAgICAgICAgICAgbGV0IHBpbiA9IG5ldyBQb2x5TGluZShcbiAgICAgICAgICAgICAgICBuZXcgUG9seUxpbmVQb2ludHMoW1xuICAgICAgICAgICAgICAgICAgICBuZXcgUG9seUxpbmVQb2ludCgwLCBwaXhlbFBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvbHlMaW5lUG9pbnQoY29ubmVjdG9yUGluTGVuZ2h0LCBwaXhlbFBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgIFwiYmxhY2tcIlxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICB0aGlzLnN2Z09iai5hZGRDaGlsZChwaW4pO1xuXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGNvbm5lY3RvclxuICAgICAgICAgICAgdGhpcy5hZGRJbnB1dENvbm5lY3RvcigwLCBncmlkUG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIG91dHB1dCBjb25uZWN0b3JzXG4gICAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IG91dHB1dENvbm5lY3RvcnMgOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGdyaWRQb3NpdGlvbiA9IChpICogMikgKyAxO1xuICAgICAgICAgICAgY29uc3QgcGl4ZWxQb3NpdGlvbiA9IGdyaWRQb3NpdGlvbiAqIHRoaXMuZ3JpZFNpemU7XG5cbiAgICAgICAgICAgIGxldCBwaW4gPSBuZXcgUG9seUxpbmUoXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlMaW5lUG9pbnRzKFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvbHlMaW5lUG9pbnQodGhpcy53aWR0aCAtIGNvbm5lY3RvclBpbkxlbmdodCwgcGl4ZWxQb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2x5TGluZVBvaW50KHRoaXMud2lkdGgsIHBpeGVsUG9zaXRpb24pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgXCJibGFja1wiXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHRoaXMuc3ZnT2JqLmFkZENoaWxkKHBpbik7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkT3V0cHV0Q29ubmVjdG9yKHdpZHRoLCBncmlkUG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdmdPYmouJGVsLmFkZENsYXNzKFwiYm94XCIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmdW5jdGlvbiB0aGF0IHRha2VzIGBpbnB1dENvbm5lY3RvcnNgIFtMb2dpYy5zdGF0ZV0oLi9tb2R1bGUtTG9naWMuaHRtbCMuc3RhdGUpc1xuICAgICAgICAgKiBhbmQgcmV0dXJucyBgb3V0cHV0Q29ubmVjdG9yc2AgTG9naWMuc3RhdGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ldmFsRnVuY3Rpb24gPSBldmFsRnVuY3Rpb247XG5cbiAgICAgICAgLy8gcmVnZW5lcmF0ZSB0aGUgYmxvY2tlZCBub2RlcyBhZnRlciBhZGRpbmcgYWxsIHRoZSBjb25uZWN0b3JzXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVCbG9ja05vZGVzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGRhdGEgb2YgdGhpcyBibGFja2JveCBhcyBhIEpTT04tcmVhZHkgb2JqZWN0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGVzc2VudGlhbCBkYXRhIGZvciB0aGlzIGJsYWNrYm94XG4gICAgICovXG4gICAgZ2V0IGV4cG9ydERhdGEoKSB7XG4gICAgICAgIGxldCBkYXRhID0gc3VwZXIuZXhwb3J0RGF0YTtcbiAgICAgICAgZGF0YS5pbnB1dHMgPSB0aGlzLmlucHV0Q29ubmVjdG9ycy5sZW5ndGg7XG4gICAgICAgIGRhdGEub3V0cHV0cyA9IHRoaXMub3V0cHV0Q29ubmVjdG9ycy5sZW5ndGg7XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHRydXRoIHRhYmxlXG5cbiAgICAgICAgZGF0YS50YWJsZSA9IFtdXG5cbiAgICAgICAgLy8gYXJyYXkgb2YgdGVzdGVkIGlucHV0IHN0YXRlc1xuICAgICAgICBjb25zdCBzdGF0ZUxpc3QgPSBMb2dpYy5zdGF0ZUxpc3Q7XG5cbiAgICAgICAgLy8gcmVjdXJzaXZlIGZ1bmN0aW9uIHRoYXQgZ2VuZXJhdGVzIGFsbCBwb3NzaWJsZSBpbnB1dHNcbiAgICAgICAgY29uc3QgZ2V0UGVybXV0YXRpb25zID0gKGxlbmd0aCkgPT4ge1xuICAgICAgICAgICAgbGV0IHBlcm11dGF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3RhdGUgb2Ygc3RhdGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJtdXRhdGlvbnMucHVzaChbc3RhdGVdKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwZXJtdXRhdGlvbnM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdGF0ZSBvZiBzdGF0ZUxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihjb25zdCBwZXJtIG9mIGdldFBlcm11dGF0aW9ucyhsZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcm11dGF0aW9ucy5wdXNoKFtzdGF0ZSwgLi4ucGVybV0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBlcm11dGF0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdlbmVyYXRlIG91dHB1dHMgZm9yIGFsbCB0aGUgcG9zc2libGUgaW5wdXRzXG4gICAgICAgIGZvciAoY29uc3QgaW5wdXRWYWx1ZXMgb2YgZ2V0UGVybXV0YXRpb25zKGRhdGEuaW5wdXRzKSkge1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0VmFsdWVzID0gdGhpcy5ldmFsRnVuY3Rpb24oLi4uaW5wdXRWYWx1ZXMpO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbiBvdXRwdXQgdmFsdWUgdGhhdCBpcyBub3QgTG9naWMuc3RhdGUudW5rbm93biwgYWRkIHRoaXMgbGluZSB0byB0aGVcbiAgICAgICAgICAgIC8vIHRydXRodGFibGUsIG90aGVyd2lzZSBkb24ndCBhZGQgaXQgKGlmIGFsbCBvdXRwdXQgdmFsdWVzIGFyZSBMb2dpYy5zdGF0ZS51bmtub3duLFxuICAgICAgICAgICAgLy8gdGhlIGlucHV0IGNvbWJpbmF0aW9uIGRvZXMgbm90IGhhdmUgdG8gYmUgZGVmaW5lcywgYmVjYXVzZSBMb2dpYy5zdGF0ZS51bmtub3duIGlzIHRoZSBkZWZhdWx0IHZhbHVlKVxuICAgICAgICAgICAgaWYgKG91dHB1dFZhbHVlcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yIHx8IGN1cnJlbnQgIT09IExvZ2ljLnN0YXRlLnVua25vd25cbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgZGF0YS50YWJsZS5wdXNoKFsuLi5pbnB1dFZhbHVlcywgLi4ub3V0cHV0VmFsdWVzXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHByb2NjZXNzIHRoZSBpbnB1dCBjb25uZWN0b3Igc3RhdGVzIGFuZCByZWZsZWN0IHRoZW0gaW4gdGhlIG91dHB1dCBjb25uZWN0b3Igc3RhdGVzIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBsb2dpYyBkZWZpbmVkIGJ5IHRoaXMuZXZhbEZ1bmN0aW9uXG4gICAgICovXG4gICAgcmVmcmVzaFN0YXRlKCkge1xuICAgICAgICBjb25zdCBpbnB1dFN0YXRlcyA9IHRoaXMuaW5wdXRDb25uZWN0b3JzLm1hcChjb25uID0+IGNvbm4uc3RhdGUpO1xuICAgICAgICAvLyBjYWxsIHRoZSBldmFsRnVuY3Rpb24gdG8gZ2V0IHRoZSBvdXRwdXQgc3RhdGVzXG4gICAgICAgIGNvbnN0IG91dHB1dFN0YXRlcyA9IHRoaXMuZXZhbEZ1bmN0aW9uKC4uLmlucHV0U3RhdGVzKTtcblxuICAgICAgICAvLyBhcHBseSB0aGUgb3V0cHV0U3RhdGVzIHRvIHRoZSBvdXRwdXRDb25uZWN0b3JzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0U3RhdGVzLmxlbmd0aCA7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRDb25uZWN0b3JzW2ldLnNldFN0YXRlKG91dHB1dFN0YXRlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW5lcmF0ZUJsb2NrTm9kZXMoKSB7XG4gICAgICAgIC8vIGFkZCBibG9ja2VkIG5vZGVzIG9uIHRoZSBjb25uZWN0b3JzIGFuZCBiZXR3ZWVuIHRoZW0gYXMgd2VsbFxuXG4gICAgICAgIGxldCBzcGVjaWFsTm9kZXMgPSBbXVxuICAgICAgICBmb3IgKGxldCBpID0gMSA7IGkgPCB0aGlzLmlucHV0Q29ubmVjdG9ycy5sZW5ndGggKiAyIDsgKytpKSB7XG4gICAgICAgICAgICBzcGVjaWFsTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiBpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAxIDsgaSA8IHRoaXMub3V0cHV0Q29ubmVjdG9ycy5sZW5ndGggKiAyIDsgKytpKSB7XG4gICAgICAgICAgICBzcGVjaWFsTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5ncmlkV2lkdGgsXG4gICAgICAgICAgICAgICAgeTogaVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLmdlbmVyYXRlQmxvY2tOb2RlcygwLCAxLCAwLCAxLCAuLi5zcGVjaWFsTm9kZXMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7R3JvdXAsIFJlY3RhbmdsZSwgU3ZnSW1hZ2V9IGZyb20gJy4uL3N2Z09iamVjdHMnXG5cbmltcG9ydCBOZXR3b3JrRWxlbWVudCBmcm9tICcuL05ldHdvcmtFbGVtZW50J1xuaW1wb3J0IElucHV0Q29ubmVjdG9yIGZyb20gJy4vSW5wdXRDb25uZWN0b3InXG5pbXBvcnQgT3V0cHV0Q29ubmVjdG9yIGZyb20gJy4vT3V0cHV0Q29ubmVjdG9yJ1xuaW1wb3J0IFRyYW5zZm9ybSBmcm9tICcuL1RyYW5zZm9ybSdcblxuLyoqIEBtb2R1bGUgZWRpdG9yRWxlbWVudHMuQm94ICovXG5cbi8qKlxuICogUGFyZW50IGNsYXNzIGZvciBnYXRlcyBhbmQgaW5wdXQgYW5kIG91dHB1dCBib3hlcy4gRGVmaW5lcyBhbGwgdGhlIGZhY3RvcnNcbiAqIHRoYXQgdGhlIGJveGVzIGhhdmUgaW4gY29tbW9uIChzdmdPYmogc3RydWN0dXJlLCBkcmFnZ2FiaWxpdHkgYW5kIHJvdGF0YWJpbGl0eS4uLilcbiAqIEBleHRlbmRzIE5ldHdvcmtFbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJveCBleHRlbmRzIE5ldHdvcmtFbGVtZW50IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0NhbnZhc30gcGFyZW50U1ZHICBpbnN0YW5jZSBvZiBbQ2FudmFzXSguL21vZHVsZS1DYW52YXMuaHRtbClcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAgICAgICBuYW1lIG9mIHRoZSBlbGVtZW50IChpbnB1dCwgb3V0cHV0LCBhbmQsIG9yLCB4b3IuLi4pXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNhdGVnb3J5ICAgdHlwZSBvZiB0aGUgZWxlbWVudCAoaW8sIGdhdGUpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGdyaWRXaWR0aCAgd2lkdGggb2YgdGhlIGVsZW1lbnQgaW4gZ3JpZCBwaXhlbHNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZ3JpZEhlaWdodCBoZWlnaHQgb2YgdGhlIGVsZW1lbnQgaW4gZ3JpZCBwaXhlbHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTVkcsIG5hbWUsIGNhdGVnb3J5LCBncmlkV2lkdGgsIGdyaWRIZWlnaHQpIHtcbiAgICAgICAgc3VwZXIocGFyZW50U1ZHKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogc3BlY2lmaWVzIHRoZSBib3ggdHlwZSB3aXRoaW4gdGhlIGNhdGVnb3J5IChpbnB1dC9vdXRwdXQgaW4gaW8sIGFuZC9vci8uLi4gaW4gZ2F0ZSlcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNwZWNpZmllcyB0aGUgYm94IGNhdGVnb3J5IChpbyBmb3IgaW5wdXQgb3Igb3V0cHV0LCBnYXRlIGZvciBsb2dpYyBnYXRlcylcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogc2l6ZSBvZiB0aGUgZ3JpZCBpbiBTVkcgcGl4ZWxzXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdyaWRTaXplID0gdGhpcy5wYXJlbnRTVkcuZ3JpZFNpemU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFycmF5IG9mIGNvbm5lY3RvcnMgb2YgdGhpcyBib3hcbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb25uZWN0b3JzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHN2Z09iaiBjb250YWluaW5nIGFsbCBTVkcgZGF0YSB1c2VkIHRvIGRpc3BsYXkgdGhpcyBib3hcbiAgICAgICAgICogQHR5cGUge3N2Z09ian1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3ZnT2JqID0gbmV3IEdyb3VwKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHdpZHRoIG9mIHRoaXMgZWxlbWVudCBpbiBTVkcgcGl4ZWxzXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndpZHRoID0gZ3JpZFdpZHRoICogdGhpcy5ncmlkU2l6ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhlaWdodCBvZiB0aGlzIGVsZW1lbnQgaW4gU1ZHIHBpeGVsc1xuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oZWlnaHQgPSBncmlkSGVpZ2h0ICogdGhpcy5ncmlkU2l6ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogd2lkdGggb2YgdGhpcyBlbGVtZW50IGluIGdyaWQgcGl4ZWxzXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdyaWRXaWR0aCA9IGdyaWRXaWR0aDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhlaWdodCBvZiB0aGlzIGVsZW1lbnQgaW4gZ3JpZCBwaXhlbHNcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ3JpZEhlaWdodCA9IGdyaWRIZWlnaHQ7XG5cbiAgICAgICAgLy8gdHJhbnNwYXJlbnQgYmFja2dyb3VuZCByZWN0YW5nbGVcbiAgICAgICAgbGV0IHJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIFwibm9uZVwiLCBcIm5vbmVcIik7XG4gICAgICAgIHJlY3RhbmdsZS4kZWwuYWRkQ2xhc3MoJ3JlY3QnKTtcblxuICAgICAgICB0aGlzLnN2Z09iai5hZGRDaGlsZChyZWN0YW5nbGUpO1xuXG4gICAgICAgIC8vIGltYWdlIG9mIHRoZSBlbGVtZW50XG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgU3ZnSW1hZ2UoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMudXJsKTtcbiAgICAgICAgdGhpcy5zdmdPYmouYWRkQ2hpbGQodGhpcy5pbWFnZSk7XG5cbiAgICAgICAgLy8gYWRkIHR5cGU9XCJnYXRlXCIsIHVzZWQgaW4gc3BlY2lhbCBjYWxsYmFja3MgaW4gY29udGV4dG1lbnVcbiAgICAgICAgdGhpcy5zdmdPYmouYWRkQXR0cih7XCJ0eXBlXCI6IGNhdGVnb3J5fSk7XG5cbiAgICAgICAgdGhpcy5zdmdPYmouJGVsLmFkZENsYXNzKFwiYm94XCIpO1xuICAgICAgICB0aGlzLnN2Z09iai4kZWwuYWRkQ2xhc3MoY2F0ZWdvcnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHVybCBvZiB0aGUgaW1hZ2UgZGVwaWN0aW5nIHRoaXMgb2JqZWN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQgdXJsKCkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgY2F0ZWdvcnkgPSB0aGlzLmNhdGVnb3J5IHx8IFwiXCIsXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5uYW1lIHx8IFwiXCIsXG4gICAgICAgICAgICBzdWZmaXggPSB0aGlzLmltZ1N1ZmZpeCB8fCBcIlwiO1xuXG4gICAgICAgIHJldHVybiBgaW1nL3N2Zy8ke2NhdGVnb3J5fS8ke25hbWV9JHtzdWZmaXh9LnN2Z2A7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFsbCBpbnB1dCBjb25uZWN0b3JzIG9mIHRoaXMgYm94XG4gICAgICogQHJldHVybiB7QXJyYXl9IGFycmF5IG9mIGlucHV0IGNvbm5lY3RvcnNcbiAgICAgKi9cbiAgICBnZXQgaW5wdXRDb25uZWN0b3JzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3JzLmZpbHRlcihjb25uID0+IGNvbm4uaXNJbnB1dENvbm5lY3RvcilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYWxsIG91dHB1dCBjb25uZWN0b3JzIG9mIHRoaXMgYm94XG4gICAgICogQHJldHVybiB7QXJyYXl9IGFycmF5IG9mIG91dHB1dCBjb25uZWN0b3JzXG4gICAgICovXG4gICAgZ2V0IG91dHB1dENvbm5lY3RvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3RvcnMuZmlsdGVyKGNvbm4gPT4gY29ubi5pc091dHB1dENvbm5lY3RvcilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgZGF0YSBvZiB0aGlzIGJveCBhcyBhIEpTT04tcmVhZHkgb2JqZWN0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGVzc2VudGlhbCBkYXRhIGZvciB0aGlzIGJveFxuICAgICAqL1xuICAgIGdldCBleHBvcnREYXRhKCkge1xuICAgICAgICBsZXQgY29ubmVjdGlvbnMgPSBbXTtcblxuICAgICAgICAvLyBnbyB0aHJvdWdoIGFsbCBjb25uZWN0b3JzXG4gICAgICAgIGxldCBjb3VudGVyID0gMFxuICAgICAgICBmb3IgKGNvbnN0IGNvbm4gb2YgdGhpcy5jb25uZWN0b3JzKSB7XG4gICAgICAgICAgICAvLyBnbyB0aHJvdWdoIGVhY2ggaXRzIHdpcmUgaWRcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBjb25uLndpcmVJZHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGhpc1dpcmVJZDtcbiAgICAgICAgICAgICAgICBpZighdGhpcy5wYXJlbnRTVkcuZXhwb3J0V2lyZUlkTWFwLmhhcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgd2lyZSBpZCBpcyBub3QgaW4gdGhlIG1hcCwgYWRkIGl0IGFuZCBhc3NpZ24gbmV3IGFyYml0cmFyeSBpZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5leHBvcnRXaXJlSWRNYXAuc2V0KGl0ZW0sIHRoaXMucGFyZW50U1ZHLmV4cG9ydFdpcmVJZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNXaXJlSWQgPSB0aGlzLnBhcmVudFNWRy5leHBvcnRXaXJlSWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50U1ZHLmV4cG9ydFdpcmVJZCsrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVsc2UgZ2V0IGlkIGZyb20gdGhlIG1hcFxuICAgICAgICAgICAgICAgICAgICB0aGlzV2lyZUlkID0gdGhpcy5wYXJlbnRTVkcuZXhwb3J0V2lyZUlkTWFwLmdldChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIC8vIGFkZCB0aGlzIGNvbm5lY3Rpb24gdG8gdGhlIGxpc3RcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uc1tjb25uZWN0aW9ucy5sZW5ndGhdID0ge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogY291bnRlcixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogY29ubi50eXBlLFxuICAgICAgICAgICAgICAgICAgICB3aXJlSWQ6IHRoaXNXaXJlSWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnRlcisrXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRoaXMuZ2V0VHJhbnNmb3JtKHRydWUpLFxuICAgICAgICAgICAgY29ubmVjdGlvbnM6IGNvbm5lY3Rpb25zXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHNldCBvZiBub2RlcyB0aGF0IGFyZSBub3Qgc3VpdGFibGUgZm9yIHdpcmUgcm91dGluZ1xuICAgICAqIEBwYXJhbSAge051bWJlcn0gW21hcmdpblRvcD0wXSAgICB0b3AgbWFyZ2luIG9mIHRoZSBlbGVtZW50IChkaXN0YW5jZSBmcm9tIHRoZSBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIGFsc28gYmxvY2tlZClcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFttYXJnaW5SaWdodD0wXSAgcmlnaHQgbWFyZ2luIG9mIHRoZSBlbGVtZW50XG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbbWFyZ2luQm90dG9tPTBdIGJvdHRvbSBtYXJnaW4gb2YgdGhlIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFttYXJnaW5MZWZ0PTBdICAgbGVmdCBtYXJnaW4gb2YgdGhlIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNwZWNpYWxOb2RlcyAgICAgYWRkaXRpb25hbCBub2RlcyB0aGF0IHNob3VsZCBiZSBhZGRlZCB0byB0aGUgc2V0XG4gICAgICogQHJldHVybiB7U2V0fSAgICAgICAgICAgICAgICAgICAgIHNldCBvZiBub3Qgc3VpdGFibGUgbm9kZXNcbiAgICAgKi9cbiAgICBnZW5lcmF0ZUJsb2NrTm9kZXMobWFyZ2luVG9wID0gMCwgbWFyZ2luUmlnaHQgPSAwLCBtYXJnaW5Cb3R0b20gPSAwLCBtYXJnaW5MZWZ0ID0gMCwgLi4uc3BlY2lhbE5vZGVzKSB7XG4gICAgICAgIHRoaXMuYmxvY2tlZE5vZGVzID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IobGV0IHggPSBtYXJnaW5MZWZ0IDsgeCA8PSB0aGlzLmdyaWRXaWR0aCAtIG1hcmdpblJpZ2h0IDsgeCsrKSB7XG4gICAgICAgICAgICBmb3IobGV0IHkgPSBtYXJnaW5Ub3AgOyB5IDw9IHRoaXMuZ3JpZEhlaWdodCAtIG1hcmdpbkJvdHRvbSA7IHkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tlZE5vZGVzLmFkZCh7XG4gICAgICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IHlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IG5vZGUgb2Ygc3BlY2lhbE5vZGVzKSB7XG4gICAgICAgICAgICB0aGlzLmJsb2NrZWROb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBlbXB0eSBmdW5jdGlvbiwgcmVkZWZpbmVkIGluIGluaGVyaXRlZCBlbGVtZW50c1xuICAgICAqIHJlZnJlc2hTdGF0ZSB0YWtlcyBpbnB1dCBjb25uZWN0b3IgdmFsdWVzIGFuZCBzZXRzIG91dHB1dCB2YWx1ZXMgYWNjb3JkaW5nbHlcbiAgICAgKi9cbiAgICByZWZyZXNoU3RhdGUoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkNhbGxpbmcgdGhlIHZpcnR1YWwgZnVuY3Rpb24gcmVmcmVzaFN0YXRlIGhhcyBubyBlZmZlY3QuXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoYW5nZSBpbWFnZSB0byBhbm90aGVyIG9uZSB0aGF0IGVuZHMgd2l0aCBhIHNwZWNpZmllZCBzdWZmaXhcbiAgICAgKlxuICAgICAqICp1c2FnZToqIGBjaGFuZ2VJbWFnZShcImFiY1wiKWAgY2hhbmdlcyBpbWFnZSB1cmwgdG8gYGltYWdlLWFiYy5zdmdgLFxuICAgICAqIGBjaGFuZ2VJbWFnZSgpYCBjaGFuZ2VzIGltYWdlIHVybCB0byB0aGUgZGVmYXVsdCBvbmUgKGBpbWFnZS5zdmdgKVxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gW3N1ZmZpeF0gbmV3IHN1ZmZpeCBmb3IgdGhlIGltYWdlXG4gICAgICovXG4gICAgY2hhbmdlSW1hZ2Uoc3VmZml4KSB7XG4gICAgICAgIGlmKHN1ZmZpeCA9PT0gdW5kZWZpbmVkIHx8IHN1ZmZpeCA9PT0gXCJcIikge1xuICAgICAgICAgICAgdGhpcy5pbWdTdWZmaXggPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbWdTdWZmaXggPSBcIi1cIiArIHN1ZmZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW1hZ2UuY2hhbmdlVXJsKHRoaXMudXJsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYSBqUXVlcnkgZWxlbWVudCByZXByZXNlbnRpbmcgdGhpcyBib3hcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnkuZWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN2Z09iai5nZXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByb3RhdGUgdGhlIHNldCBvZiBibG9ja2VkIG5vZGVzIGJ5IDkwIGRlZ3JlZXMgdG8gdGhlIHJpZ2h0IG9yIHRvIHRoZSBsZWZ0LCBkZXBlbmRpbmcgb24gdGhlIHBhcmFtZXRlclxuICAgICAqXG4gICAgICogdXNlZCB0byByb3RhdGUgdGhlIG5vZGVzIHdoZW4gdGhlIG9iamVjdCBpdHNlbGYgaXMgcm90YXRlZFxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IHJpZ2h0IHJvdGF0ZSBjbG9ja3dpc2UgaWYgdHJ1ZSwgY291bnRlcmNsb2Nrd2lzZSBpZiBmYWxzZVxuICAgICAqL1xuICAgIHJvdGF0ZUJsb2NrZWROb2RlcyhjZW50ZXIsIHJpZ2h0KSB7XG4gICAgICAgIGlmKHRoaXMucm90YXRpb25QYXJpdHk9PT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucm90YXRpb25QYXJpdHkgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucm90YXRpb25QYXJpdHkgPSAhdGhpcy5yb3RhdGlvblBhcml0eTtcblxuICAgICAgICBsZXQgbmV3QmxvY2tlZE5vZGVzID0gbmV3IFNldCgpO1xuXG4gICAgICAgIC8vIHJvdGF0ZSB0aGUgbm9kZVxuXG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLmJsb2NrZWROb2Rlcykge1xuICAgICAgICAgICAgbGV0IG5ld05vZGU7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhcml0eUZhY3RvciA9ICAodGhpcy5yb3RhdGlvblBhcml0eSA/IDEgOiAtMSk7XG5cbiAgICAgICAgICAgIGlmKHJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogLSBub2RlLnkgKyB0aGlzLmdyaWRIZWlnaHQgKyAoY2VudGVyLnggLSBjZW50ZXIueSkgKiBwYXJpdHlGYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgIHk6IG5vZGUueCArIChjZW50ZXIueSAtIGNlbnRlci54KSAqIHBhcml0eUZhY3RvclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld05vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IG5vZGUueSArIChjZW50ZXIueCAtIGNlbnRlci55KSAqIHBhcml0eUZhY3RvclxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKHRoaXMucm90YXRpb25QYXJpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS55ID0gLSBub2RlLnggKyB0aGlzLmdyaWRXaWR0aCArICgodGhpcy5ncmlkSGVpZ2h0IC0gY2VudGVyLnkpIC0gKHRoaXMuZ3JpZFdpZHRoIC0gY2VudGVyLngpKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld05vZGUueSA9IC0gbm9kZS54ICsgdGhpcy5ncmlkSGVpZ2h0ICsgKGNlbnRlci55IC0gY2VudGVyLngpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdCbG9ja2VkTm9kZXMuYWRkKG5ld05vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ibG9ja2VkTm9kZXMgPSBuZXdCbG9ja2VkTm9kZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcm90YXRlIHRoZSBzZXQgb2YgYmxvY2tlZCBub2RlcyB0byB0aGUgcmlnaHRcbiAgICAgKlxuICAgICAqIHVzZWQgdG8gcm90YXRlIHRoZSBub2RlcyB3aGVuIHRoZSBvYmplY3QgaXRzZWxmIGlzIHJvdGF0ZWRcbiAgICAgKi9cbiAgICByb3RhdGVCbG9ja2VkTm9kZXNSaWdodChjZW50ZXIpIHtcbiAgICAgICAgdGhpcy5yb3RhdGVCbG9ja2VkTm9kZXMoY2VudGVyLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByb3RhdGUgdGhlIHNldCBvZiBibG9ja2VkIG5vZGVzIHRvIHRoZSByaWdodFxuICAgICAqXG4gICAgICogdXNlZCB0byByb3RhdGUgdGhlIG5vZGVzIHdoZW4gdGhlIG9iamVjdCBpdHNlbGYgaXMgcm90YXRlZFxuICAgICAqL1xuICAgIHJvdGF0ZUJsb2NrZWROb2Rlc0xlZnQoY2VudGVyKSB7XG4gICAgICAgIHRoaXMucm90YXRlQmxvY2tlZE5vZGVzKGNlbnRlciwgZmFsc2UpO1xuICAgIH1cblxuICAgIHJvdGF0ZShjbG9ja1dpc2UpIHtcbiAgICAgICAgLy8gZ2V0IHRoZSB0cmFuc2Zvcm0gdmFsdWUgZm9yIHRoaXMgYm94XG4gICAgICAgIGxldCB0cmFuc2Zvcm0gPSB0aGlzLmdldFRyYW5zZm9ybSgpO1xuXG4gICAgICAgIC8vIGdldCB0aGUgYm91bmRpbmcgcmVjdGFuZ2xlIGZvciB0aGlzIGJveFxuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuc3ZnT2JqLiRlbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAvLyB1c2UgdGhlIGJvdW5kaW5nIHJlY3RhbmdsZSBkaW1lbnNpb25zIHRvIGZpZ3VyZSBvdXQgdGhlIGdlb21ldHJpY2FsIGNlbnRlciBvZiB0aGUgYm94XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHtcbiAgICAgICAgICAgIHg6IE1hdGgucm91bmQocmVjdC53aWR0aCAvIDIpLFxuICAgICAgICAgICAgeTogTWF0aC5yb3VuZChyZWN0LmhlaWdodCAvIDIpXG4gICAgICAgIH1cblxuICAgICAgICBjZW50ZXIueCAtPSBjZW50ZXIueCAlIHRoaXMuZ3JpZFNpemU7XG4gICAgICAgIGNlbnRlci55IC09IGNlbnRlci55ICUgdGhpcy5ncmlkU2l6ZTtcblxuICAgICAgICAvLyBhcHBseSB0aGUgcm90YXRpb24gdG8gdGhlIHRyYW5zZm9ybSBvYmplY3RcbiAgICAgICAgaWYoY2xvY2tXaXNlKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm0ucm90YXRlUmlnaHQoY2VudGVyLngsIGNlbnRlci55KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybS5yb3RhdGVMZWZ0KGNlbnRlci54LCBjZW50ZXIueSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIGFwcGx5IHRoZSBtb2RpZmllZCB0cmFuc2Zvcm0gb2JqZWN0IG90IHRoZSBzdmdPYmpcbiAgICAgICAgdGhpcy5zdmdPYmouYWRkQXR0cih7XCJ0cmFuc2Zvcm1cIjogdHJhbnNmb3JtLmdldCgpfSk7XG5cbiAgICAgICAgY29uc3QgZ3JpZENlbnRlciA9IHtcbiAgICAgICAgICAgIHg6IGNlbnRlci54IC8gdGhpcy5ncmlkU2l6ZSxcbiAgICAgICAgICAgIHk6IGNlbnRlci55IC8gdGhpcy5ncmlkU2l6ZVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHJvdGF0ZSBhbHNvIHRoZSBibG9ja2VkIG5vZGVzXG4gICAgICAgIGlmKGNsb2NrV2lzZSkge1xuICAgICAgICAgICAgdGhpcy5yb3RhdGVCbG9ja2VkTm9kZXNSaWdodChncmlkQ2VudGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucm90YXRlQmxvY2tlZE5vZGVzTGVmdChncmlkQ2VudGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgd2lyZXNcbiAgICAgICAgdGhpcy51cGRhdGVXaXJlcygpO1xuXG4gICAgICAgIC8vIGlmIHR1dG9yaWFsIGV4aXN0cywgY2FsbCB0dXRvcmlhbCBjYWxsYmFja1xuICAgICAgICBpZih0aGlzLnBhcmVudFNWRy50dXRvcmlhbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRTVkcudHV0b3JpYWwub25Cb3hSb3RhdGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGQgYSBjb25uZWN0b3IgdG8gdGhlIGVsZW1lbnQgb24gdGhlIHNwZWNpZmllZCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSAgbGVmdCAgICAgICAgICAgICBob3Jpem9udGFsIGRpc3RhbmNlIGZyb20gdGhlIGxlZnQgZWRnZSBvZiB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSAgdG9wICAgICAgICAgICAgICB2ZXJ0aWNhbCBkaXN0YW5jZSBmcm9tIHRoZSB0b3AgZWRnZSBvZiB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnB1dENvbm5lY3RvciB3aGV0aGVyIG9yIG5vdCBzaG91bGQgdGhpcyBjb25uZWN0b3IgYW4gaW5wdXQgY29ubmVjdG9yIChgdHJ1ZWAgZm9yIGlucHV0IGNvbm5lY3RvciwgYGZhbHNlYCBmb3Igb3V0cHV0IGNvbm5lY3RvcilcbiAgICAgKi9cbiAgICBhZGRDb25uZWN0b3IobGVmdCwgdG9wLCBpc0lucHV0Q29ubmVjdG9yKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuY29ubmVjdG9ycy5sZW5ndGg7XG4gICAgICAgIGlmKGlzSW5wdXRDb25uZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yc1tpbmRleF0gPSBuZXcgSW5wdXRDb25uZWN0b3IodGhpcy5wYXJlbnRTVkcsIGxlZnQsIHRvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RvcnNbaW5kZXhdID0gbmV3IE91dHB1dENvbm5lY3Rvcih0aGlzLnBhcmVudFNWRywgbGVmdCwgdG9wKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN2Z09iai5hZGRDaGlsZCh0aGlzLmNvbm5lY3RvcnNbaW5kZXhdLmdldCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGQgYW4gaW5wdXQgY29ubmVjdG9yIHRvIHRoZSBlbGVtZW50IG9uIHRoZSBzcGVjaWZpZWQgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCBob3Jpem9udGFsIGRpc3RhbmNlIGZyb20gdGhlIGxlZnQgZWRnZSBvZiB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgIHZlcnRpY2FsIGRpc3RhbmNlIGZyb20gdGhlIHRvcCBlZGdlIG9mIHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgYWRkSW5wdXRDb25uZWN0b3IobGVmdCwgdG9wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZENvbm5lY3RvcihsZWZ0LCB0b3AsIHRydWUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkIGFuIG91dHB1dCBjb25uZWN0b3IgdG8gdGhlIGVsZW1lbnQgb24gdGhlIHNwZWNpZmllZCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IGhvcml6b250YWwgZGlzdGFuY2UgZnJvbSB0aGUgbGVmdCBlZGdlIG9mIHRoZSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCAgdmVydGljYWwgZGlzdGFuY2UgZnJvbSB0aGUgdG9wIGVkZ2Ugb2YgdGhlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBhZGRPdXRwdXRDb25uZWN0b3IobGVmdCwgdG9wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZENvbm5lY3RvcihsZWZ0LCB0b3AsIGZhbHNlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgY29ubmVjdG9yIG9iamVjdCBiYXNlZCBvbiBpdHMgaWRcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNvbm5lY3RvcklkIElEIG9mIHRoZSB7QGxpbmsgQ29ubmVjdG9yfVxuICAgICAqIEByZXR1cm4ge0Nvbm5lY3Rvcn0gICAgICAgICAgICAgaW5zdGFuY2Ugb2YgdGhlIHtAbGluayBDb25uZWN0b3J9IG9yIGB1bmRlZmluZWRgIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIGdldENvbm5lY3RvckJ5SWQoY29ubmVjdG9ySWQpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCB0aGlzLmNvbm5lY3RvcnMubGVuZ3RoIDsgaSsrKSB7XG4gICAgICAgICAgICBpZih0aGlzLmNvbm5lY3RvcnNbaV0uaWQ9PT1jb25uZWN0b3JJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3RvcnNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgY29ubmVjdG9yIG5vdCBmb3VuZCwgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgaW5zdGFuY2Ugb2Yge0BsaW5rIFRyYW5zZm9ybX0gcmVwcmVzZW50aW5nIHRoZSBzdGF0ZSBvZiB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBvZiB0aGlzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBbZ3JpZFBpeGVscz1mYWxzZV0gaWYgYHRydWVgLCBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgcmVzdWx0IGluIGdyaWQgcGl4ZWxzIGluc3RlYWQgb2YgU1ZHIHBpeGVsc1xuICAgICAqIEByZXR1cm4ge1RyYW5zZm9ybX0gICAgICAgICAgICAgICAgICB7QGxpbmsgVHJhbnNmb3JtfSBvZiB0aGUgZWxlbWVudFxuICAgICAqL1xuICAgIGdldFRyYW5zZm9ybShncmlkUGl4ZWxzID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHRyYW5zZm9ybTtcbiAgICAgICAgaWYgKCF0aGlzLnN2Z09iai4kZWwuYXR0cihcInRyYW5zZm9ybVwiKSkge1xuICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIFwidHJhbnNmb3JtXCIgcHJvcGVydHkgLS0+IGNyZWF0ZSBpdFxuICAgICAgICAgICAgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgdHJhbnNmb3JtLnNldFRyYW5zbGF0ZSgwLCAwKTtcbiAgICAgICAgICAgIHRoaXMuc3ZnT2JqLmFkZEF0dHIoe1widHJhbnNmb3JtXCI6IHRyYW5zZm9ybS5nZXQoKX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgZG9lcyBoYXZlIGEgXCJ0cmFuc2Zvcm1cIiBwcm9wZXJ0eSAtLT4gY2hhbmdlIGl0XG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHRoaXMuc3ZnT2JqLiRlbC5hdHRyKFwidHJhbnNmb3JtXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnZlcnQgdmFsdWVzIHRvIGdyaWQgcGl4ZWxzXG4gICAgICAgIGlmKGdyaWRQaXhlbHMpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybS50b0dyaWRQaXhlbHModGhpcy5wYXJlbnRTVkcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIGluc3RhbmNlIG9mIHtAbGluayBUcmFuc2Zvcm19IHJlcHJlc2VudGluZyB0aGUgc3RhdGUgb2YgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb2YgdGhpcyBlbGVtZW50IF93aXRoIGxlbmdodCB1bml0cyBpbiBncmlkIHBpeGVsc19cbiAgICAgKiBAcmV0dXJuIHtUcmFuc2Zvcm19IHtAbGluayBUcmFuc2Zvcm19IG9mIHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgZ2V0R3JpZFBpeGVsVHJhbnNmb3JtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUcmFuc2Zvcm0odHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIG9mIHRoaXMgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7VHJhbnNmb3JtfSB0cmFuc2Zvcm0ge0BsaW5rIFRyYW5zZm9ybX0gb2YgdGhlIGVsZW1lbnQgKHdpdGggbGVuZ3RocyBzcGVjaWZpZWQgaW4gU1ZHIHBpeGVscylcbiAgICAgKi9cbiAgICBzZXRUcmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgICAgIHRoaXMuc3ZnT2JqLmFkZEF0dHIoe1widHJhbnNmb3JtXCI6IHRyYW5zZm9ybS5nZXQoKX0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIG9uIGV2ZXJ5IG1vdXNlIGRvd24gb24gdGhpcyBlbGVtZW50XG4gICAgICpcbiAgICAgKiBtb3ZlcyB0aGUgZWxlbWVudCB0byB0aGUgZnJvbnQgYW5kIGNhbGxzIG9uTW91c2VEb3duTGVmdCBpZiBhcHBsaWNhYmxlXG4gICAgICogQHBhcmFtICB7alF1ZXJ5Lk1vdXNlRXZlbnR9IGV2ZW50XG4gICAgICovXG4gICAgb25Nb3VzZURvd24oZXZlbnQpIHtcbiAgICAgICAgdGhpcy5tb3VzZUxlZnQgPSBmYWxzZTtcbiAgICAgICAgaWYoZXZlbnQud2hpY2ggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMubW91c2VMZWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMub25Nb3VzZURvd25MZWZ0KGV2ZW50KTtcblxuICAgICAgICAgICAgLy8gbW92ZSB0aGUgRE9NIGVsZW1lbnQgdG8gZnJvbnRcbiAgICAgICAgICAgIHRoaXMucGFyZW50U1ZHLm1vdmVUb0Zyb250QnlJZCh0aGlzLnN2Z09iai5pZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCBvbiBldmVyeSBsZWZ0IG1vdXNlIGRvd24gb24gdGhpcyBlbGVtZW50XG4gICAgICpcbiAgICAgKiBwcmVwYXJlcyBlbGVtZW50IGZvciB0aGUgXCJjbGlja1wiIGFuZCBcImRyYWcgYW5kIGRyb3BcIiBhY3Rpb25zXG4gICAgICogQHBhcmFtICB7alF1ZXJ5Lk1vdXNlRXZlbnR9IGV2ZW50XG4gICAgICovXG4gICAgb25Nb3VzZURvd25MZWZ0KGV2ZW50KSB7XG4gICAgICAgIHRoaXMubW91c2VNb3ZlZCA9IGZhbHNlO1xuXG4gICAgICAgIGxldCB0cmFuc2Zvcm0gPSB0aGlzLmdldFRyYW5zZm9ybSgpO1xuXG4gICAgICAgIC8vIHNhdmUgdGhlIGN1cnJlbnQgaXRlbSBwb3NpdGlvbiBpbnRvIGEgdmFyaWFibGVcbiAgICAgICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IHRyYW5zZm9ybS5nZXRUcmFuc2xhdGUoKTtcblxuICAgICAgICBsZXQge3BhZ2VYLCBwYWdlWX0gPSB0aGlzLnBhcmVudFNWRy52aWV3Ym94LnRyYW5zZm9ybUV2ZW50KGV2ZW50KVxuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBtb3VzZSBvZmZzZXQgZnJvbSB0aGUgb2JqZWN0IG9yaWdpblxuICAgICAgICB0aGlzLm9mZnNldCA9IHtcbiAgICAgICAgICAgIHg6IHBhZ2VYIC0gY3VycmVudFBvc2l0aW9uLngsXG4gICAgICAgICAgICB5OiBwYWdlWSAtIGN1cnJlbnRQb3NpdGlvbi55XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgb24gZXZlcnkgbGVmdCBtb3VzZSBtb3ZlIHdpdGggdGhpcyBlbGVtZW50XG4gICAgICogYXBwbGllcyB0aGUgY29ycmVjdCB0cmFuc2Zvcm0gdmFsdWVzIHRvIHByb3ZpZGUgdGhlIFwiZHJhZyBhbmQgZHJvcFwiIGZ1bmN0aW9uYWxpdHlcbiAgICAgKiBAcGFyYW0gIHtqUXVlcnkuTW91c2VFdmVudH0gZXZlbnRcbiAgICAgKi9cbiAgICBvbk1vdXNlTW92ZShldmVudCkge1xuICAgICAgICBpZih0aGlzLm1vdXNlTGVmdCkge1xuICAgICAgICAgICAgdGhpcy5zdmdPYmouJGVsLmFkZENsYXNzKCdncmFiYmVkJyk7XG5cbiAgICAgICAgICAgIHRoaXMubW91c2VNb3ZlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGxldCB7cGFnZVgsIHBhZ2VZfSA9IHRoaXMucGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtRXZlbnQoZXZlbnQpXG5cbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBwYWdlWCAtIHRoaXMub2Zmc2V0Lng7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSBwYWdlWSAtIHRoaXMub2Zmc2V0Lnk7XG5cbiAgICAgICAgICAgIGxldCB0cmFuc2Zvcm0gPSB0aGlzLmdldFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgdHJhbnNmb3JtLnNldFRyYW5zbGF0ZShsZWZ0LCB0b3ApO1xuXG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdpcmVzKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgb24gZXZlcnkgbW91c2UgdXAgb24gdGhpcyBlbGVtZW50XG4gICAgICogcHJvdmlkZXMgdGhlIFwiY2xpY2tcIiBmdW5jdGlvbmFsaXR5IGFuZCBjYWxscyB0aGUgb25Ecm9wIGhhbmRsZXIgZm9yIHRoZSBcImRyYWcgYW5kIGRyb3BcIiBmdW5jdGlvbmFsaXR5XG4gICAgICogQHBhcmFtICB7alF1ZXJ5Lk1vdXNlRXZlbnR9IGV2ZW50XG4gICAgICovXG4gICAgb25Nb3VzZVVwKGV2ZW50KSB7XG4gICAgICAgIGlmKGV2ZW50LndoaWNoID09PSAxKSB7XG4gICAgICAgICAgICBpZih0aGlzLm1vdXNlTW92ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJvcChldmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25DbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LndoaWNoID09PSAyICkge1xuICAgICAgICAgICAgdGhpcy5vbkNsaWNrTWlkZGxlKGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3ZnT2JqLiRlbC5yZW1vdmVDbGFzcygnZ3JhYmJlZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNhbGxlZCBieSBvbk1vdXNlVXAgd2hlbiB0aGUgbW91c2UgaGFzIGJlZW4gbW92ZWQgYmV0d2VlbiBvbk1vdXNlRG93biBhbmQgb25Nb3VzZVVwXG4gICAgICpcbiAgICAgKiBhcHBsaWVzIGdyaWQgc25hcHBpbmcgb2YgdGhlIGVsZW1lbnQgb24gdGhlIGVuZCBvZiB0aGUgXCJkcmFnIGFuZCBkcm9wXCIgYWN0aW9uXG4gICAgICogQHBhcmFtICB7alF1ZXJ5Lk1vdXNlRXZlbnR9IGV2ZW50XG4gICAgICovXG4gICAgb25Ecm9wKGV2ZW50KSB7XG4gICAgICAgIGxldCB7cGFnZVgsIHBhZ2VZfSA9IHRoaXMucGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtRXZlbnQoZXZlbnQpXG5cbiAgICAgICAgbGV0IGxlZnQgPSBwYWdlWCAtIHRoaXMub2Zmc2V0Lng7XG4gICAgICAgIGxldCB0b3AgPSBwYWdlWSAtIHRoaXMub2Zmc2V0Lnk7XG5cbiAgICAgICAgbGVmdCA9IHRoaXMucGFyZW50U1ZHLnNuYXBUb0dyaWQobGVmdCk7XG4gICAgICAgIHRvcCA9IHRoaXMucGFyZW50U1ZHLnNuYXBUb0dyaWQodG9wKTtcblxuICAgICAgICBsZXQgdHJhbnNmb3JtID0gdGhpcy5nZXRUcmFuc2Zvcm0oKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldFRyYW5zbGF0ZShsZWZ0LCB0b3ApO1xuXG4gICAgICAgIHRoaXMuc2V0VHJhbnNmb3JtKHRyYW5zZm9ybSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVXaXJlcygpO1xuXG4gICAgICAgIC8vIGlmIHR1dG9yaWFsIGV4aXN0cywgY2FsbCB0dXRvcmlhbCBjYWxsYmFja1xuICAgICAgICBpZih0aGlzLnBhcmVudFNWRy50dXRvcmlhbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRTVkcudHV0b3JpYWwub25Cb3hNb3ZlZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZW1wdHkgZnVuY3Rpb24sIHdpbGwgYmUgcmVkZWZpbmVkIGluIElucHV0Qm94XG4gICAgICovXG4gICAgb25DbGljaygpIHt9XG5cbiAgICAvKipcbiAgICAgKiBjdXN0b20gY2FsbGJhY2sgZnVuY3Rpb24gZm9yIG1pZGRsZSBjbGljayB0aGF0IHJvdGF0ZXMgdGhlIGJveCBieSA5MCBkZWdyZWVzIHRvIHRoZSByaWdodFxuICAgICAqL1xuICAgIG9uQ2xpY2tNaWRkbGUoZXZlbnQpIHtcbiAgICAgICAgaWYoZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgdGhpcy5yb3RhdGUoZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yb3RhdGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGFsbCB3aXJlcyBjb25uZWN0ZWQgdG8gdGhpcyBib3guIEl0ZXJhdGVzIG92ZXIgYWxsIHdpcmVzIHRoYXQgYXJlIGNvbm5lY3RlZCB0byB0aGlzIGJveFxuICAgICAqIGFuZCBjYWxscyByb3V0ZVdpcmUgKG9yIHRlbXBvcmFyeVdpcmUgaWYgdGhlIGB0ZW1wb3JhcnlgIHBhcmFtZXRlciBpcyBzZXQgdG8gdHJ1ZSkgdG8gdXBkYXRlIHRoZSB3aXJlIHJvdXRpbmdcbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBbdGVtcG9yYXJ5PWZhbHNlXSBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgdXBkYXRlV2lyZXModGVtcG9yYXJ5ID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0b3JzLmZvckVhY2goY29ubiA9PiB7XG4gICAgICAgICAgICBjb25uLndpcmVJZHMuZm9yRWFjaCh3aXJlSWQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB3aXJlID0gdGhpcy5wYXJlbnRTVkcuZ2V0V2lyZUJ5SWQod2lyZUlkKTtcbiAgICAgICAgICAgICAgICBpZih0ZW1wb3JhcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lyZS50ZW1wb3JhcnlXaXJlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2lyZS5yb3V0ZVdpcmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImltcG9ydCBOZXR3b3JrRWxlbWVudCBmcm9tICcuL05ldHdvcmtFbGVtZW50JztcbmltcG9ydCB7UmVjdGFuZ2xlfSBmcm9tICcuLi9zdmdPYmplY3RzJ1xuaW1wb3J0IExvZ2ljIGZyb20gJy4uL0xvZ2ljJ1xuXG5pbXBvcnQgc3RhdGVDbGFzc2VzIGZyb20gJy4vc3RhdGVDbGFzc2VzJ1xuXG4vKiogQG1vZHVsZSBlZGl0b3JFbGVtZW50cy5Db25uZWN0b3IgKi9cblxuLyoqXG4gKiBwYXJlbnQgY2xhc3MgZm9yIGlucHV0IGFuZCBvdXRwdXQgY29ubmVjdG9yc1xuICogQGV4dGVuZHMgTmV0d29ya0VsZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29ubmVjdG9yIGV4dGVuZHMgTmV0d29ya0VsZW1lbnQge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Q2FudmFzfSBwYXJlbnRTVkcgbGluayB0byB0aGUge0BsaW5rIENhbnZhc30gaW5zdGFuY2UgdGhhdCB0aGlzIGNvbm5lY3RvciB3aWxsIGJlbG9uZyB0b1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBncmlkU2l6ZSAgc2l6ZSBvZiB0aGUgZ3JpZCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgICAgICBob3Jpem9udGFsIHBvc2l0aW9uIGRlZmluZWQgaW4gZ3JpZCB1bml0cyAoU1ZHIHBpeGVscyBkaXZpZGVkIGJ5IHRoZSBncmlkIHNpemUpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCAgICAgICB2ZXJ0aWNhbCBwb3NpdGlvbiBkZWZpbmVkIGluIGdyaWQgdW5pdHMgKFNWRyBwaXhlbHMgZGl2aWRlZCBieSB0aGUgZ3JpZCBzaXplKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudFNWRywgbGVmdCwgdG9wKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudFNWRyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNpemUgb2YgdGhlIGdyaWQgaW4gU1ZHIHBpeGVsc1xuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ncmlkU2l6ZSA9IHBhcmVudFNWRy5ncmlkU2l6ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNpemUgb2YgdGhlIGNvbm5lY3RvciBpbiBTVkcgcGl4ZWxzXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbm5lY3RvclNpemUgPSBwYXJlbnRTVkcuZ3JpZFNpemU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvZmZzZXQgb2YgdGhlIGNvbm5lY3RvciBmcm9tIHRoZSBncmlkIGluIFNWRyBwaXhlbHNcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29ubmVjdG9yT2Zmc2V0ID0gdGhpcy5jb25uZWN0b3JTaXplIC8gMjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogaW5zdGFuY2Ugb2Yge0BsaW5rIHN2Z09iamVjdHMuc3ZnT2JqfSB0aGF0IGhvbGRzIGFsbCBTVkcgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBjb25uZWN0b3JcbiAgICAgICAgICogQHR5cGUge3N2Z09ian1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3ZnT2JqID0gbmV3IFJlY3RhbmdsZShcbiAgICAgICAgICAgIGxlZnQgKiB0aGlzLmdyaWRTaXplIC0gdGhpcy5jb25uZWN0b3JPZmZzZXQsXG4gICAgICAgICAgICB0b3AgKiB0aGlzLmdyaWRTaXplIC0gdGhpcy5jb25uZWN0b3JPZmZzZXQsXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RvclNpemUsXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RvclNpemUsXG4gICAgICAgICAgICBcIm5vbmVcIixcbiAgICAgICAgICAgIFwiYmxhY2tcIlxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuc3ZnT2JqLiRlbC5hZGRDbGFzcyhcImNvbm5lY3RvclwiKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhpcyBmbGFnIGRlc2NyaWJlcyB3aGV0aGVyIHRoaXMgY29ubmVjdG9yIGlzIGFuIGlucHV0IGNvbm5lY3RvclxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNJbnB1dENvbm5lY3RvciA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjdXJyZW50IGxvZ2ljYWwgc3RhdGUgb2YgdGhpcyBjb25uZWN0b3JcbiAgICAgICAgICogQHR5cGUge0xvZ2ljLnN0YXRlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbGVtZW50U3RhdGUgPSBMb2dpYy5zdGF0ZS51bmtub3duO1xuICAgICAgICB0aGlzLnN2Z09iai5hZGRDbGFzcyhzdGF0ZUNsYXNzZXNbTG9naWMuc3RhdGUudW5rbm93bl0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgb2YgaWRzIG9mIGFsbCB3aXJlcyBjb25uZWN0ZWQgdG8gdGhpcyBjb25uZWN0b3JcbiAgICAgICAgICogQHR5cGUge1NldH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMud2lyZUlkcyA9IG5ldyBTZXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB3aGV0aGVyIHRoaXMgY29ubmVjdG9yIGlzIGFuIG91dHB1dCBjb25uZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGdldCBpc091dHB1dENvbm5lY3RvcigpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzSW5wdXRDb25uZWN0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogd2hldGhlciB0aGlzIGNvbm5lY3RvciBpcyBhbiBvdXRwdXQgY29ubmVjdG9yXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzZXQgaXNPdXRwdXRDb25uZWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pc0lucHV0Q29ubmVjdG9yID0gIXZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZCBhIHdpcmUgaWQgdG8gdGhlIGxpc3Qgb2Ygd2lyZSBpZHNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gd2lyZUlkXG4gICAgICovXG4gICAgYWRkV2lyZUlkKHdpcmVJZCkge1xuICAgICAgICB0aGlzLndpcmVJZHMuYWRkKHdpcmVJZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGEgd2lyZSBpZCBmcm9tIHRoZSBsaXN0IG9mIHdpcmUgaWRzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHdpcmVJZFxuICAgICAqL1xuICAgIHJlbW92ZVdpcmVJZCh3aXJlSWQpIHtcbiAgICAgICAgdGhpcy53aXJlSWRzLmRlbGV0ZSh3aXJlSWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSBhIHdpcmUgc3BlY2lmaWVkIGJ5IElEIGFuZCB1cGRhdGUgdGhlIGNvbm5lY3RvclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gd2lyZUlkIElEIG9mIHRoZSB3aXJlIHRvIGJlIHJlbW92ZWRcbiAgICAgKi9cbiAgICByZW1vdmVXaXJlSWRBbmRVcGRhdGUod2lyZUlkKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlV2lyZUlkKHdpcmVJZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IGxvZ2ljYWwgc3RhdGUgb2YgdGhlIGNvbm5lY3RvclxuICAgICAqIEBwYXJhbSB7TG9naWMuc3RhdGV9IHN0YXRlIG5ldyBzdGF0ZSBvZiB0aGUgY29ubmVjdG9yXG4gICAgICovXG4gICAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdmdPYmoucmVtb3ZlQ2xhc3NlcyguLi5zdGF0ZUNsYXNzZXMpO1xuICAgICAgICB0aGlzLnN2Z09iai5hZGRDbGFzcyhzdGF0ZUNsYXNzZXNbc3RhdGVdKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnRTdGF0ZSA9IHN0YXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBzdGF0ZSBvZiB0aGlzIGNvbm5lY3RvclxuICAgICAqIEByZXR1cm4ge0xvZ2ljLnN0YXRlfVxuICAgICAqL1xuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFN0YXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBzdmdPYmogaW5zdGFuY2UgY29udGVudCBvZiB0aGlzIGNvbm5lY3RvclxuICAgICAqIEByZXR1cm4ge3N2Z09iamVjdHMuUmVjdGFuZ2xlfVxuICAgICAqL1xuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ZnT2JqO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNhbGwgW3dpcmVDcmVhdGlvbkhlbHBlcl0oLi9tb2R1bGUtQ2FudmFzLmh0bWwjd2lyZUNyZWF0aW9uSGVscGVyKSBvbiBtb3VzZSB1cFxuICAgICAqL1xuICAgIG9uTW91c2VVcChldmVudCkge1xuICAgICAgICAvLyBvbmx5IGxlZnQgY2xpY2sgY291bnRzXG4gICAgICAgIGlmKGV2ZW50LndoaWNoID09PSAxKSB7XG4gICAgICAgICAgICBldmVudCA9IHRoaXMucGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtRXZlbnQoZXZlbnQpO1xuXG4gICAgICAgICAgICBjb25zdCBtb3VzZVBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgIHg6IGV2ZW50LnBhZ2VYLFxuICAgICAgICAgICAgICAgIHk6IGV2ZW50LnBhZ2VZXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGFyZW50U1ZHLndpcmVDcmVhdGlvbkhlbHBlcih0aGlzLnN2Z09iai5pZCwgbW91c2VQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgTG9naWMgZnJvbSAnLi4vTG9naWMnXG5cbmltcG9ydCBCb3ggZnJvbSAnLi9Cb3gnXG5cbi8qKiBAbW9kdWxlIGVkaXRvckVsZW1lbnRzLkdhdGUgKi9cblxuLyoqXG4gKiBHYXRlIGlzIGEgYm94IHRoYXQgcHJvY2Vzc2VzIHRoZSBzdGF0ZXMgb2YgaXRzIGlucHV0IGNvbm5lY3RvcnMgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBpbiBpdHMgb3V0cHV0IGNvbm5lY3RvcnMuXG4gKiBAZXh0ZW5kcyBCb3hcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2F0ZSBleHRlbmRzIEJveCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtDYW52YXN9IHBhcmVudFNWRyAgaW5zdGFuY2Ugb2YgW0NhbnZhc10oLi9tb2R1bGUtQ2FudmFzLmh0bWwpXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgICAgICAgbmFtZSBvZiB0aGUgZ2F0ZSAoYW5kLCBub3QsIHhvci4uLilcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTVkcsIG5hbWUpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSA5O1xuICAgICAgICBjb25zdCBoZWlnaHQgPSA0O1xuXG4gICAgICAgIHN1cGVyKHBhcmVudFNWRywgbmFtZSwgXCJnYXRlXCIsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIC8vIEFERCBDT05ORUNUT1JTXG5cbiAgICAgICAgbGV0IHNwZWNpYWxOb2RlcyA9IFtdO1xuXG4gICAgICAgIC8vIG91dHB1dFxuICAgICAgICB0aGlzLmFkZENvbm5lY3Rvcih3aWR0aCwgaGVpZ2h0IC8gMiwgZmFsc2UpO1xuXG4gICAgICAgIC8vIGJsb2NrIHRoZSBvdXRwdXQgY29ubmVjdG9yXG4gICAgICAgIHNwZWNpYWxOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgIHg6IHdpZHRoLFxuICAgICAgICAgICAgeTogaGVpZ2h0IC8gMlxuICAgICAgICB9KTtcblxuICAgICAgICBpZih0aGlzLm5hbWU9PT1cIm5vdFwiIHx8IHRoaXMubmFtZT09PVwicmVwZWF0ZXJcIikge1xuICAgICAgICAgICAgLy8gaW5wdXRcbiAgICAgICAgICAgIHRoaXMuYWRkQ29ubmVjdG9yKDAsIGhlaWdodCAvIDIsIHRydWUpO1xuICAgICAgICAgICAgLy8gYmxvY2sgdGhlIGlucHV0IGNvbm5lY3RvclxuICAgICAgICAgICAgc3BlY2lhbE5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogaGVpZ2h0IC8gMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpbnB1dFxuICAgICAgICAgICAgdGhpcy5hZGRDb25uZWN0b3IoMCwgaGVpZ2h0IC8gNCwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmFkZENvbm5lY3RvcigwLCBoZWlnaHQgLyAoNC8zKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIGJsb2NrIHRoZSBpbnB1dCBjb25uZWN0b3JzXG4gICAgICAgICAgICBzcGVjaWFsTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiBoZWlnaHQgLyA0XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgc3BlY2lhbE5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogaGVpZ2h0IC8gKDQvMylcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhZGQgb25lIGJsb2NrZWQgbm9kZSBiZXR3ZWVuIHRoZSBpbnB1dHMgKGZvciBiZXR0ZXIgbG9va2luZyB3aXJpbmcpXG4gICAgICAgICAgICBzcGVjaWFsTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiBoZWlnaHQgLyAyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVCbG9ja05vZGVzKC4uLnNwZWNpYWxOb2Rlcyk7XG5cbiAgICAgICAgdGhpcy5yZWZyZXNoU3RhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhcnJheSBvZiB2YWxpZCBnYXRlIG5hbWVzXG4gICAgICogQHR5cGUge1NldH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHZhbGlkR2F0ZXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0KFtcIm5vdFwiLCBcImFuZFwiLCBcIm9yXCIsIFwibmFuZFwiLCBcIm5vclwiLCBcInhvclwiLCBcInhub3JcIiwgXCJyZXBlYXRlclwiXSk7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVCbG9ja05vZGVzKC4uLnNwZWNpYWxOb2Rlcykge1xuICAgICAgICBpZihzcGVjaWFsTm9kZXMhPT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN1cGVyLmdlbmVyYXRlQmxvY2tOb2RlcygwLCAxLCAwLCAxLCAuLi5zcGVjaWFsTm9kZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuZ2VuZXJhdGVCbG9ja05vZGVzKDAsIDEsIDAsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcHJvY2Nlc3MgdGhlIGlucHV0IGNvbm5lY3RvciBzdGF0ZXMgYW5kIHJlZmxlY3QgdGhlbSBpbiB0aGUgb3V0cHV0IGNvbm5lY3RvciBzdGF0ZXMgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIGxvZ2ljIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBnYXRlJ3MgbmFtZVxuICAgICAqL1xuICAgIHJlZnJlc2hTdGF0ZSgpIHtcbiAgICAgICAgLy8gbWFwIGdhdGUgbmFtZXMgdG8gdGhlaXIgbG9naWMgZnVuY3Rpb25zXG4gICAgICAgIGNvbnN0IHN0YXRlTWFwID0ge1xuICAgICAgICAgICAgXCJhbmRcIjogKCkgPT4gTG9naWMuYW5kKHRoaXMuY29ubmVjdG9yc1sxXS5zdGF0ZSwgdGhpcy5jb25uZWN0b3JzWzJdLnN0YXRlKSxcbiAgICAgICAgICAgIFwibmFuZFwiOiAoKSA9PiBMb2dpYy5uYW5kKHRoaXMuY29ubmVjdG9yc1sxXS5zdGF0ZSwgdGhpcy5jb25uZWN0b3JzWzJdLnN0YXRlKSxcbiAgICAgICAgICAgIFwibm9yXCI6ICgpID0+IExvZ2ljLm5vcih0aGlzLmNvbm5lY3RvcnNbMV0uc3RhdGUsIHRoaXMuY29ubmVjdG9yc1syXS5zdGF0ZSksXG4gICAgICAgICAgICBcIm5vdFwiOiAoKSA9PiBMb2dpYy5ub3QodGhpcy5jb25uZWN0b3JzWzFdLnN0YXRlKSxcbiAgICAgICAgICAgIFwib3JcIjogKCkgPT4gTG9naWMub3IodGhpcy5jb25uZWN0b3JzWzFdLnN0YXRlLCB0aGlzLmNvbm5lY3RvcnNbMl0uc3RhdGUpLFxuICAgICAgICAgICAgXCJ4bm9yXCI6ICgpID0+IExvZ2ljLnhub3IodGhpcy5jb25uZWN0b3JzWzFdLnN0YXRlLCB0aGlzLmNvbm5lY3RvcnNbMl0uc3RhdGUpLFxuICAgICAgICAgICAgXCJ4b3JcIjogKCkgPT4gTG9naWMueG9yKHRoaXMuY29ubmVjdG9yc1sxXS5zdGF0ZSwgdGhpcy5jb25uZWN0b3JzWzJdLnN0YXRlKSxcbiAgICAgICAgICAgIFwicmVwZWF0ZXJcIjogKCkgPT4gdGhpcy5jb25uZWN0b3JzWzFdLnN0YXRlXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3RhdGUgPSBMb2dpYy5zdGF0ZS51bmtub3duXG5cbiAgICAgICAgaWYoc3RhdGVNYXBbdGhpcy5uYW1lXSkge1xuICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZU1hcFt0aGlzLm5hbWVdKClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vdGlmeSB0aGUgc2ltdWxhdG9yIGFib3V0IHRoaXMgY2hhbmdlXG4gICAgICAgIHRoaXMucGFyZW50U1ZHLnNpbXVsYXRpb24ubm90aWZ5Q2hhbmdlKHRoaXMuY29ubmVjdG9yc1swXS5pZCwgc3RhdGUpXG4gICAgfVxufVxuIiwiaW1wb3J0IHtQb2x5TGluZSwgUG9seUxpbmVQb2ludHMsIFBvbHlMaW5lUG9pbnR9IGZyb20gJy4uL3N2Z09iamVjdHMnXG5cbmltcG9ydCBOZXR3b3JrRWxlbWVudCBmcm9tICcuL05ldHdvcmtFbGVtZW50J1xuXG4vKiogQG1vZHVsZSBlZGl0b3JFbGVtZW50cy5IZWxwZXJXaXJlICovXG5cbi8qKlxuICogQSB0ZW1wb3Jhcnkgd2lyZSB0aGF0IGlzIGNvbm5lY3RpbmcgYSB7QGxpbmsgQ29ubmVjdG9yfSB3aXRoIGEgbW91c2UgcG9pbnRlciB3aGVuIHVzZXIgY3JlYXRlcyBhIHdpcmUuXG4gKiBAZXh0ZW5kcyBOZXR3b3JrRWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWxwZXJXaXJlIGV4dGVuZHMgTmV0d29ya0VsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudFNWRywgZnJvbUlkLCBtb3VzZVBvc2l0aW9uKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudFNWRyk7XG5cbiAgICAgICAgY29uc3QgY29ubmVjdG9yID0gdGhpcy5wYXJlbnRTVkcuZ2V0Q29ubmVjdG9yQnlJZChmcm9tSWQpO1xuICAgICAgICB0aGlzLmNvbm5lY3RvclBvc2l0aW9uID0gdGhpcy5wYXJlbnRTVkcuZ2V0Q29ubmVjdG9yUG9zaXRpb24oY29ubmVjdG9yLCB0cnVlKTtcblxuICAgICAgICBjb25zdCBmcm9tID0gbmV3IFBvbHlMaW5lUG9pbnQodGhpcy5jb25uZWN0b3JQb3NpdGlvbi54LCB0aGlzLmNvbm5lY3RvclBvc2l0aW9uLnkpO1xuICAgICAgICBjb25zdCB0byA9IG5ldyBQb2x5TGluZVBvaW50KG1vdXNlUG9zaXRpb24ueCwgbW91c2VQb3NpdGlvbi55KTtcblxuICAgICAgICBjb25zdCBwb2ludHMgPSBuZXcgUG9seUxpbmVQb2ludHMoW2Zyb20sIHRvXSk7XG5cbiAgICAgICAgdGhpcy5zdmdPYmogPSBuZXcgUG9seUxpbmUocG9pbnRzLCAyLCBcIiM4YjhiOGJcIik7XG4gICAgfVxuXG4gICAgdXBkYXRlTW91c2VQb3NpdGlvbihtb3VzZVBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGZyb20gPSBuZXcgUG9seUxpbmVQb2ludCh0aGlzLmNvbm5lY3RvclBvc2l0aW9uLngsIHRoaXMuY29ubmVjdG9yUG9zaXRpb24ueSk7XG4gICAgICAgIGNvbnN0IHRvID0gbmV3IFBvbHlMaW5lUG9pbnQobW91c2VQb3NpdGlvbi54LCBtb3VzZVBvc2l0aW9uLnkpO1xuXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IG5ldyBQb2x5TGluZVBvaW50cyhbZnJvbSwgdG9dKTtcblxuICAgICAgICB0aGlzLnN2Z09iai51cGRhdGVQb2ludHMocG9pbnRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIGpRdWVyeSBlbGVtZW50IGZvciB0aGlzIGhlbHBlciB3aXJlXG4gICAgICogQHJldHVybiB7alF1ZXJ5LmVsZW1lbnR9XG4gICAgICovXG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdmdPYmouZ2V0KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IExvZ2ljIGZyb20gJy4uL0xvZ2ljJ1xuXG5pbXBvcnQgQm94IGZyb20gJy4vQm94J1xuXG4vKiogQG1vZHVsZSBlZGl0b3JFbGVtZW50cy5JbnB1dEJveCAqL1xuXG4vKipcbiAqIElucHV0Qm94IGhhcyBvbmx5IG91dHB1dCBjb25uZWN0b3JzIGFuZCBpcyB1c2VkIHRvIHNldCB0aGUgaW5wdXQgc3RhdGVzIGZvciB0aGUgbG9naWMgbmV0d29yay5cbiAqIEBleHRlbmRzIEJveFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnB1dEJveCBleHRlbmRzIEJveCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtDYW52YXN9IHBhcmVudFNWRyAgaW5zdGFuY2Ugb2YgW0NhbnZhc10oLi9tb2R1bGUtQ2FudmFzLmh0bWwpXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbaXNPbj1mYWxzZV0gdGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIGlucHV0Ym94IChgdHJ1ZWAgaXMgKm9uKiwgYGZhbHNlYCBpcyAqb2ZmKilcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTVkcsIGlzT24gPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBncmlkV2lkdGggPSA3O1xuICAgICAgICBjb25zdCBncmlkSGVpZ2h0ID0gNDtcblxuICAgICAgICBzdXBlcihwYXJlbnRTVkcsIFwiaW5wdXRcIiwgXCJvdGhlclwiLCBncmlkV2lkdGgsIGdyaWRIZWlnaHQpO1xuXG4gICAgICAgIHRoaXMuYWRkQ29ubmVjdG9yKGdyaWRXaWR0aCwgZ3JpZEhlaWdodCAvIDIsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLm9uID0gaXNPbjtcblxuICAgICAgICB0aGlzLmdlbmVyYXRlQmxvY2tOb2RlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBkYXRhIG9mIHRoaXMgaW5wdXQgYm94IGFzIGEgSlNPTi1yZWFkeSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgZXNzZW50aWFsIGRhdGEgZm9yIHRoaXMgaW5wdXQgYm94XG4gICAgICovXG4gICAgZ2V0IGV4cG9ydERhdGEoKSB7XG4gICAgICAgIGxldCBkYXRhID0gc3VwZXIuZXhwb3J0RGF0YTtcbiAgICAgICAgZGF0YS5pc09uID0gdGhpcy5pc09uO1xuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGdlbmVyYXRlQmxvY2tOb2RlcygpIHtcbiAgICAgICAgLy8gYmxvY2sgdGhlIGlucHV0IGNvbm5lY3RvciBub2RlXG4gICAgICAgIGNvbnN0IHNwZWNpYWxOb2RlID0ge1xuICAgICAgICAgICAgeDogdGhpcy5ncmlkV2lkdGgsXG4gICAgICAgICAgICB5OiB0aGlzLmdyaWRIZWlnaHQgLyAyXG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZ2VuZXJhdGVCbG9ja05vZGVzKDAsIDEsIDEsIDAsIHNwZWNpYWxOb2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzdGFydCBhIG5ldyBzaW11bGF0aW9uIGZyb20gdGhlIG91dHB1dCBjb25uZWN0b3JcbiAgICAgKi9cbiAgICByZWZyZXNoU3RhdGUoKSB7XG4gICAgICAgIHRoaXMucGFyZW50U1ZHLnN0YXJ0TmV3U2ltdWxhdGlvbih0aGlzLmNvbm5lY3RvcnNbMF0sIHRoaXMuY29ubmVjdG9yc1swXS5zdGF0ZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgdGhlIHN0YXRlIG9mIHRoZSBpbnB1dGJveCB0byB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZVxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IGlzT24gc2V0IHRvICpvbiogaWYgYHRydWVgLCBzZXQgdG8gKm9mZiogaWYgYGZhbHNlYFxuICAgICAqL1xuICAgIHNldCBvbihpc09uKSB7XG4gICAgICAgIGlmIChpc09uKSB7XG4gICAgICAgICAgICAvLyB0dXJuIG9uXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUltYWdlKFwib25cIik7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RvcnNbMF0uc2V0U3RhdGUoTG9naWMuc3RhdGUub24pO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoU3RhdGUoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdHVybiBvZmZcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlSW1hZ2UoKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yc1swXS5zZXRTdGF0ZShMb2dpYy5zdGF0ZS5vZmYpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoU3RhdGUoKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pc09uID0gaXNPbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHN0YXRlIG9mIHRoZSBpbnB1dGJveCAoYHRydWVgIGlmICpvbiosIGBmYWxzZWAgaWYgKm9mZiopXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGdldCBvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNPbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0b2dnbGUgdGhlIHN0YXRlIG9mIHRoZSBpbnB1dGJveFxuICAgICAqL1xuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIHRoaXMub24gPSAhdGhpcy5vbjtcblxuICAgICAgICBpZih0aGlzLnBhcmVudFNWRy50dXRvcmlhbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRTVkcudHV0b3JpYWwub25DaGFuZ2VJbnB1dEJveFN0YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgQ29ubmVjdG9yIGZyb20gJy4vQ29ubmVjdG9yJ1xuaW1wb3J0IExvZ2ljIGZyb20gJy4uL0xvZ2ljJ1xuXG4vKiogQG1vZHVsZSBlZGl0b3JFbGVtZW50cy5JbnB1dENvbm5lY3RvciAqL1xuXG4vKipcbiAqIENvbm5lY3RvciB0aGF0IGdldHMgaXRzIHN0YXRlIGZyb20gYSBjb25uZWN0ZWQgdmFsdWUgYW5kIHBhc3NlcyBpdCB0aHJvdWdoIHRvIHRoZSB7QGxpbmsgQm94fSB0aGlzIGNvbm5lY3RvciBiZWxvbmdzIHRvLlxuICogQGV4dGVuZHMgQ29ubmVjdG9yXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0Q29ubmVjdG9yIGV4dGVuZHMgQ29ubmVjdG9yIHtcbiAgICAvKipcbiAgICAgKiBDYWxsIHRoZSBjb25zdHJ1Y3RvciBmcm9tIHRoZSBwYXJlbnQge0BsaW5rIENvbm5lY3Rvcn0gY2xhc3MgYW5kIHNldCBpc0lucHV0Q29ubmVjdG9yIHRvIHRydWUuXG4gICAgICogQHBhcmFtIHtDYW52YXN9IHBhcmVudFNWRyBsaW5rIHRvIHRoZSB7QGxpbmsgQ2FudmFzfSBpbnN0YW5jZSB0aGF0IHRoaXMgY29ubmVjdG9yIHdpbGwgYmVsb25nIHRvXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgICAgICBob3Jpem9udGFsIHBvc2l0aW9uIGRlZmluZWQgaW4gZ3JpZCB1bml0cyAoU1ZHIHBpeGVscyBkaXZpZGVkIGJ5IHRoZSBncmlkIHNpemUpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCAgICAgICB2ZXJ0aWNhbCBwb3NpdGlvbiBkZWZpbmVkIGluIGdyaWQgdW5pdHMgKFNWRyBwaXhlbHMgZGl2aWRlZCBieSB0aGUgZ3JpZCBzaXplKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudFNWRywgbGVmdCwgdG9wKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudFNWRywgbGVmdCwgdG9wKTtcblxuICAgICAgICB0aGlzLmlzSW5wdXRDb25uZWN0b3IgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgdGhlIHNldFN0YXRlIG1ldGhvZCBvZiB7QGxpbmsgQ29ubmVjdG9yfSBhbmQgdGhhbiByZWZyZXNoIHRoZSBzdGF0ZSBvZiB0aGUgY29ubmVjdGVkIHtAbGluayBCb3h9XG4gICAgICogQHBhcmFtIHtMb2dpYy5zdGF0ZX0gc3RhdGUgbmV3IHtAbGluayBMb2dpYy5zdGF0ZX0gb2YgdGhlIGNvbm5lY3RvclxuICAgICAqL1xuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHN1cGVyLnNldFN0YXRlKHN0YXRlKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJTRVQgU1RBVEUgT04gSUNcIiwgdGhpcy5pZCwgXCI6XCIsIHN0YXRlKVxuXG4gICAgICAgIGxldCBib3ggPSB0aGlzLnBhcmVudFNWRy5nZXRCb3hCeUNvbm5lY3RvcklkKHRoaXMuc3ZnT2JqLmlkKTtcbiAgICAgICAgYm94LnJlZnJlc2hTdGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSB0aGUgd2lyZSAoYnkgY2FsbGluZyB0aGUgcmVtb3ZlV2lyZUlkQW5kVXBkYXRlIG9mIHtAbGluayBDb25uZWN0b3J9KVxuICAgICAqIGFuZCB1cGRhdGUgc3RhdGUgb2YgdGhpcyBjb25uZWN0b3IgYnkgc2V0dGluZyBpdCB0byB1bmRlZmluZWQgdXNpbmcgdGhlIHNldFN0YXRlIG1ldGhvZFxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gd2lyZUlkIElEIG9mIHRoZSB7QGxpbmsgV2lyZX1cbiAgICAgKi9cbiAgICByZW1vdmVXaXJlSWRBbmRVcGRhdGUod2lyZUlkKSB7XG4gICAgICAgIHN1cGVyLnJlbW92ZVdpcmVJZEFuZFVwZGF0ZSh3aXJlSWQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKExvZ2ljLnN0YXRlLnVua25vd24pO1xuICAgIH1cbn1cbiIsIi8qKiBAbW9kdWxlIGVkaXRvckVsZW1lbnRzLk5ldHdvcmtFbGVtZW50ICovXG5cbi8qKlxuICogcGFyZW50IGNsYXNzIGZvciBhbGwgbmV0d29yayBlbGVtZW50c1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXR3b3JrRWxlbWVudCB7XG4gICAgLyoqXG4gICAgICogQmFzaWMgY29uc3RydWN0b3IgZm9yIE5ldHdvcmtFbGVtZW50XG4gICAgICogQHBhcmFtIHtDYW52YXN9IHBhcmVudFNWRyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIHtAbGluayBDYW52YXN9IHRoYXQgdGhpcyBlbGVtZW50IGJlbG9uZ3MgdG9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTVkcpIHtcbiAgICAgICAgaWYoIXBhcmVudFNWRykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlBhcmVudCBTVkcgZWxlbWVudCBoYXMgdG8gYmUgZGVmaW5lZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnRTVkcgPSBwYXJlbnRTVkc7XG5cbiAgICAgICAgLy8gdXNlZCB0byBzdG9yZSB0aGUgc3ZqT2JqZWN0J3MgaW5zdGFuY2Ugb2YgdGhpcyBlbGVtZW50XG4gICAgICAgIHRoaXMuc3ZnT2JqID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdW5pcXVlIElEIG9mIHRoZSBTVkcgZWxlbWVudCB0aWVkIHRvIHRoaXMgbG9naWNhbCBlbGVtZW50XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgU1ZHIGVsZW1lbnRcbiAgICAgKi9cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN2Z09iai5pZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBlbXB0eSBjYWxsYmFjayBmdW5jdGlvbiB0byBwcmV2ZW50IGVycm9yIG1lc3NhZ2VzLCBmdW5jdGlvbiBpcyBpbXBsZW1lbnRlZCBsYXRlciBpbiB0aGUge0BsaW5rIEJveH0gY2xhc3NcbiAgICAgKi9cbiAgICBvbk1vdXNlRG93bigpIHt9XG5cbiAgICAvKipcbiAgICAgKiBlbXB0eSBmdW5jdGlvbiB0byBwcmV2ZW50IGVycm9yIG1lc3NhZ2VzLCBmdW5jdGlvbiBpcyBpbXBsZW1lbnRlZCBsYXRlciBpbiB0aGUge0BsaW5rIEJveH0gYW5kIHtAbGluayBDb25uZWN0b3J9IGNsYXNzZXNcbiAgICAgKi9cbiAgICBvbk1vdXNlVXAoKSB7fVxuXG4gICAgLyoqXG4gICAgICogZW1wdHkgZnVuY3Rpb24gdG8gcHJldmVudCBlcnJvciBtZXNzYWdlcywgZnVuY3Rpb24gaXMgaW1wbGVtZW50ZWQgbGF0ZXIgaW4gdGhlIHtAbGluayBCb3h9IGNsYXNzXG4gICAgICovXG4gICAgb25Nb3VzZU1vdmUoKSB7fVxuXG4gICAgLyoqXG4gICAgICogXCJ2aXJ0dWFsXCIgZ2V0dGVyIGZvciBqc29uIGRhdGEsIHByaW50cyBhbiBlcnJvciB0aGF0IGl0IGhhcyB0byBiZSByZWRlZmluZWQgaW4gdGhlIGRlcml2ZWQgY2xhc3Nlc1xuICAgICAqL1xuICAgIGdldCBleHBvcnREYXRhKCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiJ2pzb24nIGdldHRlciBoYXMgbm90IGJlZW4gZGVmaW5lZCBmb3IgdGhpcyBlbGVtZW50XCIsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbiIsImltcG9ydCBMb2dpYyBmcm9tICcuLi9Mb2dpYydcblxuaW1wb3J0IEJveCBmcm9tICcuL0JveCdcblxuLyoqIEBtb2R1bGUgZWRpdG9yRWxlbWVudHMuT3V0cHV0Qm94ICovXG5cbi8qKlxuICogT3V0cHV0Qm94IGhhcyBvbmx5IGlucHV0IGNvbm5lY3RvcnMgYW5kIGlzIHVzZWQgdG8gdmlzdWFsaXplIHRoZSBvdXRwdXQgc3RhdGVzIG9mIHRoZSBsb2dpYyBuZXR3b3JrLlxuICogQGV4dGVuZHMgQm94XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE91dHB1dEJveCBleHRlbmRzIEJveCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtDYW52YXN9IHBhcmVudFNWRyAgaW5zdGFuY2Ugb2YgW0NhbnZhc10oLi9tb2R1bGUtQ2FudmFzLmh0bWwpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocGFyZW50U1ZHKSB7XG4gICAgICAgIGNvbnN0IGdyaWRIZWlnaHQgPSA0O1xuICAgICAgICBjb25zdCBncmlkV2lkdGggPSA1O1xuXG4gICAgICAgIHN1cGVyKHBhcmVudFNWRywgXCJvdXRwdXRcIiwgXCJvdGhlclwiLCBncmlkV2lkdGgsIGdyaWRIZWlnaHQpO1xuXG4gICAgICAgIHRoaXMuYWRkQ29ubmVjdG9yKDAsIGdyaWRIZWlnaHQgLyAyLCB0cnVlKTtcblxuICAgICAgICB0aGlzLmdlbmVyYXRlQmxvY2tOb2RlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldCBzdGF0ZSBvZiB0aGlzIG91dHB1dCBib3ggdG8gbWF0Y2ggdGhlIHN0YXRlIG9mIGl0cyBpbnB1dCBjb25uZWN0b3JcbiAgICAgKi9cbiAgICByZWZyZXNoU3RhdGUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy5jb25uZWN0b3JzWzBdLnN0YXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWZsZWN0IHRoZSBpbnB1dCBjb25uZWN0b3Igc3RhdGUgaW4gdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGVsZW1lbnQgLSBzZXRcbiAgICAgKiB0aGUgZWxlbWVudCBpbWFnZSB0byByZXByZXNlbnQgdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGVcbiAgICAgKiBAcGFyYW0ge0xvZ2ljLnN0YXRlfSBzdGF0ZSBuZXcgc3RhdGUgb2YgdGhpcyBvdXRwdXRCb3hcbiAgICAgKi9cbiAgICBzZXRTdGF0ZShzdGF0ZSkge1xuICAgICAgICBpZihzdGF0ZT09PUxvZ2ljLnN0YXRlLm9uKXtcbiAgICAgICAgICAgIGlmKHRoaXMucGFyZW50U1ZHLnR1dG9yaWFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRTVkcudHV0b3JpYWwub25PdXRwdXRCb3hUcnVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3RhdGVNYXAgPSB7fTtcbiAgICAgICAgc3RhdGVNYXBbTG9naWMuc3RhdGUub25dID0gXCJvblwiXG4gICAgICAgIHN0YXRlTWFwW0xvZ2ljLnN0YXRlLm9mZl0gPSBcIm9mZlwiXG4gICAgICAgIHN0YXRlTWFwW0xvZ2ljLnN0YXRlLnVua25vd25dID0gXCJcIlxuICAgICAgICBzdGF0ZU1hcFtMb2dpYy5zdGF0ZS5vc2NpbGxhdGluZ10gPSBcIm9zY1wiXG5cbiAgICAgICAgdGhpcy5jaGFuZ2VJbWFnZShzdGF0ZU1hcFtzdGF0ZV0pO1xuICAgIH1cblxuICAgIGdlbmVyYXRlQmxvY2tOb2RlcygpIHtcbiAgICAgICAgLy8gYmxvY2sgdGhlIGlucHV0IGNvbm5lY3RvciBub2RlXG4gICAgICAgIGNvbnN0IHNwZWNpYWxOb2RlID0ge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IHRoaXMuZ3JpZEhlaWdodCAvIDJcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5nZW5lcmF0ZUJsb2NrTm9kZXMoMCwgMCwgMCwgMSwgc3BlY2lhbE5vZGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCBDb25uZWN0b3IgZnJvbSAnLi9Db25uZWN0b3InXG5cbi8qKiBAbW9kdWxlIGVkaXRvckVsZW1lbnRzLk91dHB1dENvbm5lY3RvciAqL1xuXG4vKipcbiAqIENvbm5lY3RvciB0aGF0IHRha2VzIGEgc3RhdGUgZGVmaW5lZCBieSB0aGUge0BsaW5rIEJveH0gaXQgYmVsb25ncyB0byBhbmQgcGFzc2VzIGl0IHRvIGFsbCBjb25uZWN0ZWQgd2lyZVxuICogQGV4dGVuZHMgQ29ubmVjdG9yXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE91dHB1dENvbm5lY3RvciBleHRlbmRzIENvbm5lY3RvciB7XG4gICAgLyoqXG4gICAgICogQ2FsbCB0aGUgY29uc3RydWN0b3IgZnJvbSB0aGUgcGFyZW50IHtAbGluayBDb25uZWN0b3J9IGNsYXNzIGFuZCBzZXQgaXNPdXRwdXRDb25uZWN0b3IgdG8gdHJ1ZS5cbiAgICAgKiBAcGFyYW0ge0NhbnZhc30gcGFyZW50U1ZHIGxpbmsgdG8gdGhlIHtAbGluayBDYW52YXN9IGluc3RhbmNlIHRoYXQgdGhpcyBjb25uZWN0b3Igd2lsbCBiZWxvbmcgdG9cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCAgICAgIGhvcml6b250YWwgcG9zaXRpb24gZGVmaW5lZCBpbiBncmlkIHVuaXRzIChTVkcgcGl4ZWxzIGRpdmlkZWQgYnkgdGhlIGdyaWQgc2l6ZSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9wICAgICAgIHZlcnRpY2FsIHBvc2l0aW9uIGRlZmluZWQgaW4gZ3JpZCB1bml0cyAoU1ZHIHBpeGVscyBkaXZpZGVkIGJ5IHRoZSBncmlkIHNpemUpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocGFyZW50U1ZHLCBsZWZ0LCB0b3ApIHtcbiAgICAgICAgc3VwZXIocGFyZW50U1ZHLCBsZWZ0LCB0b3ApO1xuXG4gICAgICAgIHRoaXMuaXNPdXRwdXRDb25uZWN0b3IgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgdGhlIHNldFN0YXRlIG1ldGhvZCBvZiB7QGxpbmsgQ29ubmVjdG9yfSBhbmQgdGhhbiBzZXQgdGhlIHN0YXRlIG9mIHRoZSBjb25uZWN0ZWQge0BsaW5rIFdpcmV9c1xuICAgICAqIEBwYXJhbSB7TG9naWMuc3RhdGV9IHN0YXRlIG5ldyB7QGxpbmsgTG9naWMuc3RhdGV9IG9mIHRoZSBjb25uZWN0b3JcbiAgICAgKi9cbiAgICBzZXRTdGF0ZShzdGF0ZSkge1xuICAgICAgICBzdXBlci5zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgICAgICAgZm9yIChjb25zdCB3aXJlSWQgb2YgdGhpcy53aXJlSWRzKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5nZXRXaXJlQnlJZCh3aXJlSWQpLnNldFN0YXRlKHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qKiBAbW9kdWxlIGVkaXRvckVsZW1lbnRzLlRyYW5zZm9ybSAqL1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB1c2VkIGJ5IHtAbGluayBUcmFuc2Zvcm19LlxuICpcbiAqIFJlcHJlc2VudHMgb25lIHNpbmdsZSBwcm9wZXJ0eSBvZiB0aGUgdHJhbnNmb3JtIGFyZ3VtZW50LCBmb3IgZXhhbXBsZSBgdHJhbnNsYXRlKDM2MCAxNTApYFxuICogdGhhdCBtYXkgYmUgYSBwYXJ0IG9mIGxvbmdlciB0cmFuc2Zvcm0gYXJndW1lbnQgbGlrZSBgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDM2MCAxNTApIHJvdGF0ZSg5MCAzMCAyMClcImBcbiAqL1xuY2xhc3MgUHJvcGVydHkge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIFByb3BlcnR5IG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nXSBzdHJpbmcgaW4gdGhlIHByb3BlcnR5IGZvcm1hdCBgcHJvcGVydHluYW1lKGxpc3Qgb2Ygc3BhY2Ugc2VwYXJhdGVkIHZhbHVlcylgXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc3RyaW5nKSB7XG4gICAgICAgIGlmKHN0cmluZyE9PXVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gc3RyaW5nLnJlcGxhY2UoL15bIF0qKFteKF0rKS4qLywgXCIkMVwiKTtcbiAgICAgICAgICAgIHRoaXMuYXJncyA9IHN0cmluZy5yZXBsYWNlKC9eW14oXStcXCgoLiopXFwpLywgXCIkMVwiKS5zcGxpdCgnICcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IG9yIHJlcGxhY2UgdGhlIG5hbWUgb2YgdGhpcyBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5ldyBuYW1lIGZvciB0aGlzIHByb3BlcnR5XG4gICAgICovXG4gICAgc2V0TmFtZShuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IGFyZ3VtZW50cyBvZiB0aGlzIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHthcnJheX0gYXJncyBhcnJheSBvZiBhcmd1bWVudHNcbiAgICAgKi9cbiAgICBzZXRBcmd1bWVudHMoYXJncykge1xuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBwcm9wZXJ0eSBpbiB0aGUgcHJvcGVydHkgZm9ybWF0IGBuYW1lKGFyZzEgYXJnMilgXG4gICAgICovXG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCIoXCIgKyB0aGlzLmFyZ3Muam9pbihcIiBcIikgKyBcIilcIjtcbiAgICB9XG59XG5cbi8qKlxuICogQVBJIGZvciBtYW5pcHVsYXRpbmcgdGhlIHRyYW5zZm9ybSBhcmd1bWVudCB1c2VkIGluIFNWR1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2Zvcm0ge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIFRyYW5zZm9ybSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZ10gc3RyaW5nIGluIHRoZSBmb3JtYXQgb2YgdGhlIGB0cmFuc2Zvcm1gIGFyZ3VtZW50IGluIFNWRywgZm9yIGV4YW1wbGUgYHRyYW5zbGF0ZSgzNjAgMTUwKSByb3RhdGUoOTAgMzAgMjApYFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0cmluZykge1xuICAgICAgICAvKipcbiAgICAgICAgICogYXJyYXkgb2Yge0BsaW5rIFByb3BlcnR5fSBpbnN0YW5jZXNcbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuXG4gICAgICAgIGlmKHN0cmluZyE9PXVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHN0cmluZy5zcGxpdChcIilcIikpIHtcbiAgICAgICAgICAgICAgICBpZihpdGVtKSB7IC8vIGlmIG5vdCBlbXB0eVxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gobmV3IFByb3BlcnR5KGl0ZW0gKyBcIilcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNvbnZlcnQgZGlzdGFuY2VzIGZyb20gU1ZHIHBpeGVscyB0byBncmlkIHBpeGVsc1xuICAgICAqIEBwYXJhbSAge0NhbnZhc30gcGFyZW50U1ZHIGluc3RhbmNlIG9mIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKVxuICAgICAqL1xuICAgIHRvR3JpZFBpeGVscyhwYXJlbnRTVkcpIHtcbiAgICAgICAgdGhpcy5waXhlbENvbnZlcnNpb24oKHZhbCkgPT4gcGFyZW50U1ZHLlNWR1RvR3JpZCh2YWwpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNvbnZlcnQgZGlzdGFuY2VzIGZyb20gZ3JpZCBwaXhlbHMgdG8gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSAge0NhbnZhc30gcGFyZW50U1ZHIGluc3RhbmNlIG9mIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKVxuICAgICAqL1xuICAgIHRvU1ZHUGl4ZWxzKHBhcmVudFNWRykge1xuICAgICAgICB0aGlzLnBpeGVsQ29udmVyc2lvbigodmFsKSA9PiBwYXJlbnRTVkcuZ3JpZFRvU1ZHKHZhbCkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBkaXN0YW5jZXMgdXNpbmcgYSBzcGVjaWZpZWQgY29udmVydG9yLiBVc2VkIGJ5IHRvR3JpZFBpeGVscyBhbmQgdG9TVkdQaXhlbHNcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY29udmVydG9yIGZ1bmN0aW9uIHRoYXQgY29udmVydHMgaW50IHRvIGludFxuICAgICAqL1xuICAgIHBpeGVsQ29udmVyc2lvbihjb252ZXJ0b3IpIHtcbiAgICAgICAgY29uc3QgcHJvcGVydHlNYXAgPSB7XG4gICAgICAgICAgICBcInRyYW5zbGF0ZVwiOiAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uYXJncyA9IGl0ZW0uYXJncy5tYXAoYXJnID0+IGNvbnZlcnRvcihhcmcpKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicm90YXRlXCI6IChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5hcmdzID0gW1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnZlcnRvcihpdGVtLmFyZ3NbMV0pLFxuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0b3IoaXRlbS5hcmdzWzJdKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5TWFwW2l0ZW0ubmFtZV0gPyBwcm9wZXJ0eU1hcFtpdGVtLm5hbWVdKGl0ZW0pIDogaXRlbVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZpbmQgYSB0cmFuc2Zvcm0gcHJvcGVydHkgYnkgbmFtZSBhbmQgZ2V0IGl0cyBpbmRleCBpbiB0aGUgW2l0ZW1zXSgjaXRlbXMpIGFycmF5XG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHJldHVybiB7bnVtYmVyfSAgICAgIGluZGV4IG9mIHRoZSBwcm9wZXJ0eSBpbiB0aGUgYXJyYXkgb2YgcHJvcGVydGllcyBvciBgLTFgIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIGdldEluZGV4KG5hbWUpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZihuYW1lID09PSB0aGlzLml0ZW1zW2ldLm5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHRyYW5zbGF0ZSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgcGFyYW1ldGVycyBvZiB0aGUgdHJhbnNsYXRlIGF0dHJpYnV0ZVxuICAgICAqL1xuICAgIGdldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldEFyZ3VtZW50cyh0aGlzLmdldEluZGV4KFwidHJhbnNsYXRlXCIpKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogTnVtYmVyKGFyZ3NbMF0pLFxuICAgICAgICAgICAgeTogTnVtYmVyKGFyZ3NbMV0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHJvdGF0ZSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgcGFyYW1ldGVycyBvZiB0aGUgcm90YXRlIGF0dHJpYnV0ZVxuICAgICAqL1xuICAgIGdldFJvdGF0ZSgpIHtcbiAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldEFyZ3VtZW50cyh0aGlzLmdldEluZGV4KFwicm90YXRlXCIpKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVnOiBOdW1iZXIoYXJnc1swXSksXG4gICAgICAgICAgICBjZW50ZXJYOiBOdW1iZXIoYXJnc1sxXSksXG4gICAgICAgICAgICBjZW50ZXJZOiBOdW1iZXIoYXJnc1syXSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldCB0cmFuc2xhdGUgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCBob3Jpem9udGFsIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgdmVydGljYWwgdHJhbnNsYXRpb25cbiAgICAgKi9cbiAgICBzZXRUcmFuc2xhdGUoeCwgeSkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihcInRyYW5zbGF0ZVwiLCBbeCwgeV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldCByb3RhdGUgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVnICAgICBhbmdsZSBvZiB0aGUgcm90YXRpb24gaW4gZGVncmVlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjZW50ZXJYIGhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIGNlbnRlciBvZiB0aGUgcm90YXRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWSB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgY2VudGVyIG9mIHRoZSByb3RhdGlvblxuICAgICAqL1xuICAgIHNldFJvdGF0ZShkZWcsIGNlbnRlclgsIGNlbnRlclkpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoXCJyb3RhdGVcIiwgW2RlZywgY2VudGVyWCwgY2VudGVyWV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJvdGF0ZSBieSA5MCBkZWdyZWVzIHRvIHRoZSByaWdodCBvciBsZWZ0LCBkZXBlbmRpbmcgb24gdGhlIHBhcmFtZXRlciBgcmlnaHRgXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNlbnRlclggaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgY2VudGVyIG9mIHRoZSByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjZW50ZXJZIHZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSBjZW50ZXIgb2YgdGhlIHJvdGF0aW9uXG4gICAgICogQHBhcmFtIHtib29sZWFufSByaWdodCByb3RhdGUgdG8gdGhlIHJpZ2h0IGlmIGB0cnVlYCwgdG8gdGhlIGxlZnQgaWYgYGZhbHNlYFxuICAgICAqL1xuICAgIHJvdGF0ZVJpZ2h0QW5nbGUoY2VudGVyWCwgY2VudGVyWSwgcmlnaHQpIHtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gcmlnaHQgPyA5MCA6IDI3MDtcblxuICAgICAgICBpZih0aGlzLmdldEluZGV4KFwicm90YXRlXCIpPT09LTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Um90YXRlKGFtb3VudCwgY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbmV3Um90YXRpb24gPSAocGFyc2VJbnQodGhpcy5nZXRSb3RhdGUoKS5kZWcpICsgYW1vdW50KSAlIDM2MDtcblxuICAgICAgICAgICAgaWYobmV3Um90YXRpb249PT0xODApIHtcbiAgICAgICAgICAgICAgICAvLyBzd2FwIGNlbnRlciBjb29yZGluYXRlc1xuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2Ugcm90YXRlKGMsIHgsIHkpIGlzIGRlZmluZWQgbGlrZSB0cmFuc2Zvcm0oLXgsIC15KSByb3RhdGUoYykgdHJhbnNmb3JtKHgsIHkpXG4gICAgICAgICAgICAgICAgbGV0IGEgPSBjZW50ZXJYO1xuICAgICAgICAgICAgICAgIGNlbnRlclggPSBjZW50ZXJZO1xuICAgICAgICAgICAgICAgIGNlbnRlclkgPSBhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldFJvdGF0ZShcbiAgICAgICAgICAgICAgICBuZXdSb3RhdGlvbixcbiAgICAgICAgICAgICAgICBjZW50ZXJYLFxuICAgICAgICAgICAgICAgIGNlbnRlcllcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByb3RhdGUgYnkgOTAgZGVncmVlcyB0byB0aGUgcmlnaHRcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IGNlbnRlclggaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgY2VudGVyIG9mIHRoZSByb3RhdGlvblxuICAgICAqIEBwYXJhbSAge251bWJlcn0gY2VudGVyWSB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgY2VudGVyIG9mIHRoZSByb3RhdGlvblxuICAgICAqL1xuICAgIHJvdGF0ZVJpZ2h0KGNlbnRlclgsIGNlbnRlclkpIHtcbiAgICAgICAgdGhpcy5yb3RhdGVSaWdodEFuZ2xlKGNlbnRlclgsIGNlbnRlclksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJvdGF0ZSBieSA5MCBkZWdyZWVzIHRvIHRoZSBsZWZ0XG4gICAgICogQHBhcmFtICB7bnVtYmVyfSBjZW50ZXJYIGhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIGNlbnRlciBvZiB0aGUgcm90YXRpb25cbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IGNlbnRlclkgdmVydGljYWwgcG9zaXRpb24gb2YgdGhlIGNlbnRlciBvZiB0aGUgcm90YXRpb25cbiAgICAgKi9cbiAgICByb3RhdGVMZWZ0KGNlbnRlclgsIGNlbnRlclkpIHtcbiAgICAgICAgdGhpcy5yb3RhdGVSaWdodEFuZ2xlKGNlbnRlclgsIGNlbnRlclksIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHRyYW5zZm9ybSB2YWx1ZXMgaW4gYSBzdHJpbmdcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdmFsdWUgZm9yIHRoZSB0cmFuc2Zvcm0gcHJvcGVydHkgb2YgYSBTVkcgZWxlbWVudFxuICAgICAqL1xuICAgIGdldCgpIHtcbiAgICAgICAgbGV0IHJldFZhbDtcbiAgICAgICAgZm9yKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgaWYocmV0VmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0VmFsICs9IFwiIFwiICsgaXRlbS5nZXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0VmFsID0gaXRlbS5nZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0VmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBhcmd1bWVudHMgb2YgYSBwcm9wZXJ0eSBzcGVjaWZpZWQgYnkgaW5kZXhcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IGluZGV4IGluZGV4IG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm4ge2FycmF5fSAgICAgICBhcnJheSBvZiBhcmd1bWVudHMgb2YgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eVxuICAgICAqL1xuICAgIGdldEFyZ3VtZW50cyhpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1tpbmRleF0uYXJncztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgYXJndW1ldHMgb2YgYSBwcm9wZXJ0eSBzcGVjaWZpZWQgYnkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHthcnJheX0gYXJncyBhcnJheSBvZiBhcmd1bWVudHMgb2YgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eVxuICAgICAqL1xuICAgIHNldFBhcmFtZXRlcihuYW1lLCBhcmdzKSB7XG4gICAgICAgIC8vIGRldGVybWluZSBpbmRleCBvZiB0aGUgcGFyYW1ldGVyIChpZiBzZXQpLCBlbHNlIGluZGV4ID09IC0xXG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuZ2V0SW5kZXgobmFtZSk7XG5cbiAgICAgICAgLy8gaWYgdGhlIHByb3BlcnR5IGhhcyBiZWVuIGFscmVhZHkgc2V0LCBjaGFuZ2UgaXQgKHJld3JpdGUgdGhlIGFycmF5IGluIHRoZSByaWdodCBpbmRleClcbiAgICAgICAgLy8gZWxzZSBjcmVhdGUgYSBuZXcgb25lIChzZXQgaW5kZXggdG8gdGhlIGxlbmd0aCBvZiBhbiBhcnJheSAtLT4gYWQgYW4gaXRlbSB0byB0aGUgZW5kKVxuICAgICAgICBpZihpbmRleD09PS0xKSB7XG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuaXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5pdGVtc1tpbmRleF0gPSBuZXcgUHJvcGVydHkoKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaW5kZXhdLnNldE5hbWUobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzYXZlIGFyZ3MgdW5kZXIgdGhlIHJpZ2h0IGluZGV4XG4gICAgICAgIHRoaXMuaXRlbXNbaW5kZXhdLnNldEFyZ3VtZW50cyhhcmdzKTtcbiAgICB9XG59XG4iLCIvKiogQG1vZHVsZSBlZGl0b3JFbGVtZW50cy5XaXJlICovXG5cbmltcG9ydCB7UG9seUxpbmUsIFBvbHlMaW5lUG9pbnRzLCBQb2x5TGluZVBvaW50LCBHcm91cH0gZnJvbSAnLi4vc3ZnT2JqZWN0cydcbmltcG9ydCBMb2dpYyBmcm9tICcuLi9Mb2dpYydcbmltcG9ydCBzdGF0ZUNsYXNzZXMgZnJvbSAnLi9zdGF0ZUNsYXNzZXMnXG5pbXBvcnQgZmluZFBhdGggZnJvbSAnLi4vZmluZFBhdGgnXG5cbmltcG9ydCBOZXR3b3JrRWxlbWVudCBmcm9tICcuL05ldHdvcmtFbGVtZW50J1xuXG4vKipcbiAqIFdpcmUgcmVwcmVzZW50cyBjb25uZWN0aW9uIG9mIHR3byB7QGxpbmsgQ29ubmVjdG9yfXMuXG4gKiBAZXh0ZW5kcyBOZXR3b3JrRWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaXJlIGV4dGVuZHMgTmV0d29ya0VsZW1lbnQge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Q2FudmFzfSBwYXJlbnRTVkcgIGluc3RhbmNlIG9mIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgZnJvbUlkICAgIGlkIG9mIHRoZSBmaXJzdCBjb25uZWN0b3IgdGhpcyB3aXJlIHdpbGwgYmUgY29ubmVjdGVkIHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICB0b0lkICAgICAgaWQgb2YgdGhlIHNlY29uZCBjb25uZWN0b3IgdGhpcyB3aXJlIHdpbGwgYmUgY29ubmVjdGVkIHRvXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbcmVmcmVzaD10cnVlXSBpZiBgdHJ1ZWAsIHRoZSBbQ2FudmFzXSguL21vZHVsZS1DYW52YXMuaHRtbCkgd2lsbCByZWZyZXNoIGFmdGVyIGNyZWF0aW5nIHRoaXMgd2lyZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudFNWRywgZnJvbUlkLCB0b0lkLCByZWZyZXNoID0gdHJ1ZSwgcm91dGUgPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudFNWRyk7XG5cbiAgICAgICAgdGhpcy5ncmlkU2l6ZSA9IHBhcmVudFNWRy5ncmlkU2l6ZTtcblxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSB7XG4gICAgICAgICAgICBmcm9tOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGZyb21JZCxcbiAgICAgICAgICAgICAgICBib3g6IHRoaXMucGFyZW50U1ZHLmdldEJveEJ5Q29ubmVjdG9ySWQoZnJvbUlkKSxcbiAgICAgICAgICAgICAgICBjb25uZWN0b3I6IHRoaXMucGFyZW50U1ZHLmdldENvbm5lY3RvckJ5SWQoZnJvbUlkKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgaWQ6IHRvSWQsXG4gICAgICAgICAgICAgICAgYm94OiB0aGlzLnBhcmVudFNWRy5nZXRCb3hCeUNvbm5lY3RvcklkKHRvSWQpLFxuICAgICAgICAgICAgICAgIGNvbm5lY3RvcjogdGhpcy5wYXJlbnRTVkcuZ2V0Q29ubmVjdG9yQnlJZCh0b0lkKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy5jb25uZWN0aW9uLmZyb20uY29ubmVjdG9yLmlzT3V0cHV0Q29ubmVjdG9yKSB7XG4gICAgICAgICAgICBpZih0aGlzLmNvbm5lY3Rpb24udG8uY29ubmVjdG9yLmlzSW5wdXRDb25uZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAvLyBkZXNpcmVkIHN0YXRlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNvbm5lY3RpbmcgdHdvIG91dHB1dCBjb25uZWN0b3JzXG4gICAgICAgICAgICAgICAgdGhyb3cgXCJDYW4gbm90IHBsYWNlIHdpcmUgYmV0d2VlbiB0d28gb3V0cHV0IGNvbm5lY3RvcnNcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKHRoaXMuY29ubmVjdGlvbi50by5jb25uZWN0b3IuaXNJbnB1dENvbm5lY3Rvcikge1xuICAgICAgICAgICAgICAgIC8vIGNvbm5lY3RpbmcgdHdvIGlucHV0IGNvbm5lY3RvcnNcbiAgICAgICAgICAgICAgICB0aHJvdyBcIkNhbiBub3QgcGxhY2Ugd2lyZSBiZXR3ZWVuIHR3byBpbnB1dCBjb25uZWN0b3JzXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHN3YXAgdGhlbSBhbmQgd2UgYXJlIHJlYWR5IHRvIGdvXG4gICAgICAgICAgICAgICAgWyB0aGlzLmNvbm5lY3Rpb24uZnJvbSwgdGhpcy5jb25uZWN0aW9uLnRvIF0gPSBbIHRoaXMuY29ubmVjdGlvbi50bywgdGhpcy5jb25uZWN0aW9uLmZyb20gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHJvdXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJvdXRlV2lyZSh0cnVlLCByZWZyZXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGVtcG9yYXJ5V2lyZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbGVtZW50U3RhdGUgPSBMb2dpYy5zdGF0ZS51bmtub3duO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy5jb25uZWN0aW9uLmZyb20uY29ubmVjdG9yLnN0YXRlKVxuXG4gICAgICAgIGlmKHJlZnJlc2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHtjb25uZWN0b3J9ID0gdGhpcy5jb25uZWN0aW9uLnRvO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRTVkcuc3RhcnROZXdTaW11bGF0aW9uKGNvbm5lY3RvciwgY29ubmVjdG9yLnN0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3ZnT2JqLiRlbC5hZGRDbGFzcyhcIndpcmVcIik7XG4gICAgfVxuXG4gICAgZ2V0IGJveGVzKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMuY29ubmVjdGlvbi5mcm9tLmJveCwgdGhpcy5jb25uZWN0aW9uLnRvLmJveF07XG4gICAgfVxuXG4gICAgZ2V0IGNvbm5lY3RvcnMoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5jb25uZWN0aW9uLmZyb20uY29ubmVjdG9yLCB0aGlzLmNvbm5lY3Rpb24udG8uY29ubmVjdG9yXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgZGF0YSBvZiB0aGlzIHdpcmUgYXMgYSBKU09OLXJlYWR5IG9iamVjdFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gamF2YXNjcmlwdCBvYmplY3QgY29udGFpbmluZyBlc3NlbnRpYWwgZGF0YSBmb3IgdGhpcyB3aXJlXG4gICAgICovXG4gICAgZ2V0IGV4cG9ydERhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmcm9tSWQ6IHRoaXMuY29ubmVjdGlvbi5mcm9tLmlkLFxuICAgICAgICAgICAgdG9JZDogdGhpcy5jb25uZWN0aW9uLnRvLmlkXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IHRoZSBzdGF0ZSBvZiB0aGlzIHdpcmUgdG8gbWF0Y2ggdGhlIHN0YXRlIG9mIHRoZSBpbnB1dCBjb25uZWN0b3IgaXQgaXMgY29ubmVjdGVkIHRvXG4gICAgICogQHBhcmFtIHtMb2dpYy5zdGF0ZX0gc3RhdGUgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHRoaXMuc3ZnT2JqLnJlbW92ZUNsYXNzZXMoLi4uc3RhdGVDbGFzc2VzKTtcbiAgICAgICAgdGhpcy5zdmdPYmouYWRkQ2xhc3Moc3RhdGVDbGFzc2VzW3N0YXRlXSk7XG5cbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLnRvLmNvbm5lY3Rvci5zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50U3RhdGUgPSBzdGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIGN1cnJlbnQgW0xvZ2ljLnN0YXRlXSguL21vZHVsZXMtTG9naWMuaHRtbCMuc3RhdGUpIG9mIHRoaXMgd2lyZVxuICAgICAqIEByZXR1cm4ge0xvZ2ljLnN0YXRlfVxuICAgICAqL1xuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFN0YXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgc3RhdGUgb2YgdGhpcyB3aXJlXG4gICAgICovXG4gICAgdXBkYXRlV2lyZVN0YXRlKCkge1xuICAgICAgICAvLyBUT0RPIGludmVzdGlnYXRlXG4gICAgICAgIGZvciAoY29uc3QgYm94IG9mIHRoaXMuYm94ZXMpIHtcbiAgICAgICAgICAgIGJveC5yZWZyZXNoU3RhdGUoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBqUXVlcnkgZWxlbWVudCBmb3IgdGhpcyB3aXJlXG4gICAgICogQHJldHVybiB7alF1ZXJ5LmVsZW1lbnR9XG4gICAgICovXG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdmdPYmouZ2V0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBQb2x5TGluZSBwb2ludHMgZm9yIGEgdGVtcG9yYXJ5IHdpcmUgcGxhY2VtZW50IGNvbm5lY3RpbmcgdGhlIHR3byBjb25uZWN0b3JzXG4gICAgICogQHJldHVybiB7UG9seUxpbmVQb2ludHN9IG5ldyBpbnN0YW5jZSBvZiB7QGxpbmsgUG9seUxpbmVQb2ludHN9XG4gICAgICovXG4gICAgZ2V0VGVtcG9yYXJ5V2lyZVBvaW50cygpIHtcbiAgICAgICAgbGV0IHBvaW50cyA9IG5ldyBQb2x5TGluZVBvaW50cygpO1xuICAgICAgICBwb2ludHMuYXBwZW5kKG5ldyBQb2x5TGluZVBvaW50KHRoaXMud2lyZVN0YXJ0LngsIHRoaXMud2lyZVN0YXJ0LnkpKTtcbiAgICAgICAgcG9pbnRzLmFwcGVuZChuZXcgUG9seUxpbmVQb2ludCh0aGlzLndpcmVFbmQueCwgdGhpcy53aXJlRW5kLnkpKTtcbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByb3V0ZSB0aGUgd2lyZSB1c2luZyB0aGUgdGVtcG9yYXJ5IHdpcmUgcG9pbnRzXG4gICAgICovXG4gICAgdGVtcG9yYXJ5V2lyZSgpIHtcbiAgICAgICAgdGhpcy53aXJlU3RhcnQgPSB0aGlzLnBhcmVudFNWRy5nZXRDb25uZWN0b3JQb3NpdGlvbih0aGlzLmNvbm5lY3Rpb24uZnJvbS5jb25uZWN0b3IsIGZhbHNlKTtcbiAgICAgICAgdGhpcy53aXJlRW5kID0gdGhpcy5wYXJlbnRTVkcuZ2V0Q29ubmVjdG9yUG9zaXRpb24odGhpcy5jb25uZWN0aW9uLnRvLmNvbm5lY3RvciwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuc2V0V2lyZVBhdGgodGhpcy5nZXRUZW1wb3JhcnlXaXJlUG9pbnRzKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJvdXRlIHRoZSB3aXJlIHVzaW5nIHRoZSBtb2RpZmllZCBBKiB3aXJlIHJvdXRpbmcgYWxnb3JpdGhtXG4gICAgICovXG4gICAgcm91dGVXaXJlKHNuYXBUb0dyaWQgPSB0cnVlLCByZWZyZXNoID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLndpcmVTdGFydCA9IHRoaXMucGFyZW50U1ZHLmdldENvbm5lY3RvclBvc2l0aW9uKHRoaXMuY29ubmVjdGlvbi5mcm9tLmNvbm5lY3Rvciwgc25hcFRvR3JpZCk7XG4gICAgICAgIHRoaXMud2lyZUVuZCA9IHRoaXMucGFyZW50U1ZHLmdldENvbm5lY3RvclBvc2l0aW9uKHRoaXMuY29ubmVjdGlvbi50by5jb25uZWN0b3IsIHNuYXBUb0dyaWQpO1xuXG4gICAgICAgIHRoaXMucG9pbnRzID0gdGhpcy5maW5kUm91dGUoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy53aXJlU3RhcnQueCAvIHRoaXMuZ3JpZFNpemUsXG4gICAgICAgICAgICAgICAgeTogdGhpcy53aXJlU3RhcnQueSAvIHRoaXMuZ3JpZFNpemVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy53aXJlRW5kLnggLyB0aGlzLmdyaWRTaXplLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMud2lyZUVuZC55IC8gdGhpcy5ncmlkU2l6ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zZXRXaXJlUGF0aCh0aGlzLnBvaW50cyk7XG5cbiAgICAgICAgaWYgKHJlZnJlc2gpXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdpcmVTdGF0ZSgpO1xuXG4gICAgICAgIC8vIHJlZ2VuZXJhdGUgaW5jb252ZW5pZW50IG5vZGVzXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVJbmNvbnZlbmllbnROb2RlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldCB0aGUgd2lyZSB0byBmb2xsb3cgdGhlIHNwZWNpZmllZCBwb2ludHNcbiAgICAgKiBAcGFyYW0ge1BvbHlMaW5lUG9pbnRzfSBwb2ludHMgaW5zdGFuY2Ugb2Yge0BsaW5rIFBvbHlMaW5lUG9pbnRzfVxuICAgICAqL1xuICAgIHNldFdpcmVQYXRoKHBvaW50cykge1xuICAgICAgICAvLyBzZXQgdGhlIGxpbmVcbiAgICAgICAgaWYodGhpcy5zdmdPYmohPT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMuc3ZnT2JqLnVwZGF0ZVBvaW50cyhwb2ludHMpO1xuICAgICAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgdGhpcy5zdmdPYmouY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBjaGlsZC51cGRhdGVQb2ludHMocG9pbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3ZnT2JqID0gbmV3IEdyb3VwKCk7XG5cbiAgICAgICAgICAgIGxldCBoaXRib3ggPSBuZXcgUG9seUxpbmUocG9pbnRzLCAxMCwgJ3doaXRlJyk7XG4gICAgICAgICAgICBoaXRib3guYWRkQ2xhc3MoXCJoaXRib3hcIik7XG4gICAgICAgICAgICBoaXRib3guYWRkQXR0cih7b3BhY2l0eTogMH0pO1xuICAgICAgICAgICAgdGhpcy5zdmdPYmouYWRkQ2hpbGQoaGl0Ym94KTtcblxuICAgICAgICAgICAgbGV0IG1haW5MaW5lID0gbmV3IFBvbHlMaW5lKHBvaW50cywgMik7XG4gICAgICAgICAgICBtYWluTGluZS5hZGRDbGFzcyhcIm1haW5cIiwgXCJzdGF0ZVVua25vd25cIik7XG4gICAgICAgICAgICB0aGlzLnN2Z09iai5hZGRDaGlsZChtYWluTGluZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXRoVG9Qb2x5TGluZShwYXRoKSB7XG4gICAgICAgIGxldCB0b3RhbFBhdGggPSBuZXcgUG9seUxpbmVQb2ludHMoKTtcbiAgICAgICAgZm9yIChjb25zdCBwb2ludCBvZiBwYXRoKSB7XG4gICAgICAgICAgICB0b3RhbFBhdGguYXBwZW5kKG5ldyBQb2x5TGluZVBvaW50KHBvaW50LnggKiB0aGlzLmdyaWRTaXplLCBwb2ludC55ICogdGhpcy5ncmlkU2l6ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbFBhdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZmluZCBhIG5pY2Ugcm91dGUgZm9yIHRoZSB3aXJlXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBzdGFydCBvYmplY3QgY29udGFpbmluZyBudW1lcmljIGF0dHJpYnV0ZXMgYHhgIGFuZCBgeWAgdGhhdCByZXByZXNlbnQgdGhlIGZpcnN0IGVuZHBvaW50IG9mIHRoZSB3aXJlIGluIGdyaWQgcGl4ZWxcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGVuZCAgIG9iamVjdCBjb250YWluaW5nIG51bWVyaWMgYXR0cmlidXRlcyBgeGAgYW5kIGB5YCB0aGF0IHJlcHJlc2VudCB0aGUgc2Vjb25kIGVuZHBvaW50IG9mIHRoZSB3aXJlIGluIGdyaWQgcGl4ZWxzXG4gICAgICogQHJldHVybiB7UG9seUxpbmVQb2ludHN9ICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBmaW5kUm91dGUoc3RhcnQsIGVuZCkge1xuICAgICAgICBsZXQgbm9uUm91dGFibGUgPSB0aGlzLnBhcmVudFNWRy5nZXROb25Sb3V0YWJsZU5vZGVzKCk7XG5cbiAgICAgICAgbGV0IHB1bmlzaGVkQnV0Um91dGFibGU7XG4gICAgICAgIGlmKHRoaXMuc3ZnT2JqPT09dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwdW5pc2hlZEJ1dFJvdXRhYmxlID0gdGhpcy5wYXJlbnRTVkcuZ2V0SW5jb252ZW5pZW50Tm9kZXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB1bmlzaGVkQnV0Um91dGFibGUgPSB0aGlzLnBhcmVudFNWRy5nZXRJbmNvbnZlbmllbnROb2Rlcyh0aGlzLnN2Z09iai5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGF0aCA9IGZpbmRQYXRoKHN0YXJ0LCBlbmQsIG5vblJvdXRhYmxlLCBwdW5pc2hlZEJ1dFJvdXRhYmxlLCB0aGlzLmdyaWRTaXplKTtcblxuICAgICAgICBpZihwYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoVG9Qb2x5TGluZShwYXRoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gaWYgYSBwYXRoIHdhcyBub3QgZm91bmQsIHRyeSBhZ2FpbiBidXQgZG9uJ3QgdGFrZSBpbnRvIGFjY291bnQgdGhlIHB1bmlzaGVkIGFuZCBub24gcm91dGFibGUgbm9kZVxuICAgICAgICBwYXRoID0gZmluZFBhdGgoc3RhcnQsIGVuZCwgbmV3IFNldCgpLCBuZXcgU2V0KCksIHRoaXMuZ3JpZFNpemUpO1xuXG4gICAgICAgIGlmKHBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhUb1BvbHlMaW5lKHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlIHBhdGggd2FzIHN0aWxsIG5vdCBmb3VuZCwgZ2l2ZSB1cCBhbmQgcmV0dXJuIHRlbXBvcmFyeSBwb2ludHNcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGVtcG9yYXJ5V2lyZVBvaW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdlbmVyYXRlIGEgc2V0IG9mIG5vZGVzLCB0aGF0IGFyZSBpbmNvbnZlbmllbnQgZm9yIHdpcmluZywgYnV0IGNhbiBiZSB1c2VkLCBqdXN0IGFyZSBub3QgcHJlZmVycmVkXG4gICAgICogQHJldHVybiB7U2V0fSBzZXQgb2Ygbm9kZXMgKG9iamVjdHMgY29udGFpbmluZyB4IGFuZCB5IGNvb3JkaW5hdGVzKSB0aGF0IGFyZSBub3QgcHJlZmVycmVkIGZvciB3aXJpbmdcbiAgICAgKi9cbiAgICBnZW5lcmF0ZUluY29udmVuaWVudE5vZGVzKCkge1xuICAgICAgICB0aGlzLmluY29udmVuaWVudE5vZGVzID0gbmV3IFNldCgpO1xuXG4gICAgICAgIGxldCBwcmV2UG9pbnQ7XG5cbiAgICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaChwb2ludCA9PiB7XG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIHggPSB0aGlzLnBhcmVudFNWRy5TVkdUb0dyaWQocG9pbnQueCksXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMucGFyZW50U1ZHLlNWR1RvR3JpZChwb2ludC55KTtcblxuICAgICAgICAgICAgaWYgKHByZXZQb2ludCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHByZXZQb2ludCBpcyB1bmRlZmluZWQsIGFkZCB0aGUgZmlyc3QgcG9pbnRcbiAgICAgICAgICAgICAgICB0aGlzLmluY29udmVuaWVudE5vZGVzLmFkZCh7eCwgeX0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBlbHNlIGFkZCBhbGwgdGhlIHBvaW50IGJldHdlZW4gdGhlIHByZXZQb2ludCAoZXhjbHVkZWQpIGFuZCBwb2ludCAoaW5jbHVkZWQpXG5cbiAgICAgICAgICAgICAgICBpZihwcmV2UG9pbnQueCA9PT0geCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbGluZSBpcyBob3Jpem9udGFsXG4gICAgICAgICAgICAgICAgICAgIGxldCBmcm9tID0gTWF0aC5taW4ocHJldlBvaW50LnksIHkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG8gPSBNYXRoLm1heChwcmV2UG9pbnQueSwgeSk7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoZnJvbSA8PSB0bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNvbnZlbmllbnROb2Rlcy5hZGQoe3g6IHgsIHk6IGZyb219KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20rKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihwcmV2UG9pbnQueSA9PT0geSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbGluZSBpcyB2ZXJ0aWNhbFxuICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IE1hdGgubWluKHByZXZQb2ludC54LCB4KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvID0gTWF0aC5tYXgocHJldlBvaW50LngsIHgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKGZyb20gPD0gdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5jb252ZW5pZW50Tm9kZXMuYWRkKHt4OiBmcm9tLCB5OiB5fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIGlzIG5laXRoZXIgaG9yaXpvbnRhbCBub3IgdmVydGljYWwsIHRocm93IGFuIGVycm9yIGZvciBiZXR0ZXIgZnV0dXJlIGRlYnVnZ2luZ1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKFwiZ2V0SW5jb252ZW5pZW50Tm9kZXM6IGxpbmUgYmV0d2VlbiB0d28gcG9pbnRzIGlzIG5laXRoZXIgaG9yaXpvbnRhbCBub3IgdmVydGljYWxcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzZXQgbmV3IHByZXZQb2ludFxuICAgICAgICAgICAgcHJldlBvaW50ID0ge3gsIHl9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgTG9naWMgZnJvbSAnLi4vTG9naWMnXG5cbi8qKlxuICogbWFwcGluZyBvZiBsb2dpY2FsIHN0YXRlcyB0byBjc3MgY2xhc3Nlc1xuICogQHR5cGUge09iamVjdH1cbiAqL1xuXG5sZXQgbWFwID0gW107IC8vIGFycmF5IHNvIHdlIGNhbiB1c2UgdGhlIC4uLnNwcmVhZCBvcGVyYXRvclxuXG5tYXBbTG9naWMuc3RhdGUub25dID0gXCJzdGF0ZU9uXCJcbm1hcFtMb2dpYy5zdGF0ZS5vZmZdID0gXCJzdGF0ZU9mZlwiXG5tYXBbTG9naWMuc3RhdGUudW5rbm93bl0gPSBcInN0YXRlVW5rbm93blwiXG5tYXBbTG9naWMuc3RhdGUub3NjaWxsYXRpbmddID0gXCJzdGF0ZU9zY2lsbGF0aW5nXCJcblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IHsgbWFuaGF0dGFuRGlzdGFuY2UgfSBmcm9tICcuL290aGVyL2hlbHBlckZ1bmN0aW9ucydcbmltcG9ydCBNYXBXaXRoRGVmYXVsdFZhbHVlIGZyb20gJy4vb3RoZXIvbWFwV2l0aERlZmF1bHRWYWx1ZSdcblxuaW1wb3J0IHsgUHJpb3JpdHlRdWV1ZSB9IGZyb20gJ2xpYnN0bCc7IC8vIG5vdGU6IGltcG9ydGVkIGZyb20gYSBub2RlIG1vZHVsZVxuXG4vKiogQG1vZHVsZSBmaW5kUGF0aCAqL1xuXG4vKipcbiAqIEhlYXZpbHkgbW9kaWZpZWQgaW1wbGVtZW50YXRpb24gb2YgdGhlIEEqIGFsZ29yaXRobVxuICogQHBhcmFtICB7T2JqZWN0fSBzdGFydCBvYmplY3QgY29udGFpbmluZyBudW1lcmljIGF0dHJpYnV0ZXMgYHhgIGFuZCBgeWAgdGhhdCByZXByZXNlbnQgdGhlIGZpcnN0IGVuZHBvaW50IG9mIHRoZSB3aXJlIGluIGdyaWQgcGl4ZWxzXG4gKiBAcGFyYW0gIHtPYmplY3R9IGVuZCAgIG9iamVjdCBjb250YWluaW5nIG51bWVyaWMgYXR0cmlidXRlcyBgeGAgYW5kIGB5YCB0aGF0IHJlcHJlc2VudCB0aGUgc2Vjb25kIGVuZHBvaW50IG9mIHRoZSB3aXJlIGluIGdyaWQgcGl4ZWxzXG4gKiBAcGFyYW0gIHtTZXR9IG5vblJvdXRhYmxlIHNldCBvZiBub24gcm91dGFibGUgbm9kZXNcbiAqIEBwYXJhbSAge1NldH0gcHVuaXNoZWRCdXRSb3V0YWJsZSBzZXQgb2Ygbm9kZXMgdGhhdCBhcmUgbm90IG9wdGltYWwgZm9yIHJvdXRpbmdcbiAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiBvYmplY3RzIGNvbnRhaW5pbmcgbnVtZXJpYyBhdHRyaWJ1dGVzIGB4YCBhbmQgYHlgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmRQYXRoKHN0YXJ0LCBlbmQsIG5vblJvdXRhYmxlLCBwdW5pc2hlZEJ1dFJvdXRhYmxlKSB7XG4gICAgY29uc3QgZGlzdGFuY2VGdW5jdGlvbiA9IG1hbmhhdHRhbkRpc3RhbmNlO1xuXG4gICAgY29uc3Qgd2lyZUNyb3NzUHVuaXNobWVudCA9IDE7XG4gICAgY29uc3Qgd2lyZUJlbmRQdW5pc2htZW50ID0gMTtcblxuICAgIC8vIG51bWJlciBvZiBub2RlcywgdGhhdCBjYW4gYmUgb3BlbmVkIGF0IG9uY2VcbiAgICAvLyBvbmNlIGlzIHRoaXMgbGltaXQgZXhjZWVkZWQsIGFTdGFyIHdpbGwgZmFpbCBhbmQgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IG1heE5vZGVMaW1pdCA9IDEwMDAwMDtcblxuICAgIGxldCBjbG9zZWROb2RlcyA9IG5ldyBTZXQoKTtcbiAgICBsZXQgb3Blbk5vZGVzID0gbmV3IFNldCgpO1xuICAgIGxldCBvcGVuTm9kZVF1ZXVlID0gbmV3IFByaW9yaXR5UXVldWUoKTtcblxuICAgIC8vIGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIG9wZW4gbm9kZXM6XG5cbiAgICAvKipcbiAgICAgKiBhZGQgYSBuZXcgb3BlbiBub2RlIHRvIHRoZSBzdHJ1Y3R1cmVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbm9kZSAgIG9iamVjdCBjb250YWluaW5nIG51bWVyaWMgYXR0cmlidXRlcyBgeGAgYW5kIGB5YCB0aGF0IHJlcHJlc2VudCB0aGUgZmlyc3QgZW5kcG9pbnQgb2YgdGhlIHdpcmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZnNjb3JlIGZTY29yZSBvZiB0aGlzIG5vZGVcbiAgICAgKi9cbiAgICBjb25zdCBhZGRPcGVuTm9kZSA9IChub2RlLCBmc2NvcmUpID0+IHtcbiAgICAgICAgb3Blbk5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgLy8gZmxpcCB0aGUgZnNjb3JlLCBiZWNhdXNlIFByaW9yaXR5UXVldWUgdXNlcyBtYXggaGVhcFxuICAgICAgICBvcGVuTm9kZVF1ZXVlLmVucXVldWUobm9kZSwgMSAvIGZzY29yZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBvcGVuIG5vZGUgd2l0aCB0aGUgbG93ZXN0IGZTY29yZSBhbmQgcmVtb3ZlIGl0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyBudW1lcmljIGF0dHJpYnV0ZXMgYHhgIGFuZCBgeWAgdGhhdCByZXByZXNlbnQgdGhlIGZpcnN0IGVuZHBvaW50IG9mIHRoZSB3aXJlXG4gICAgICovXG4gICAgY29uc3QgZ2V0T3Blbk5vZGUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBvcGVuTm9kZVF1ZXVlLmRlcXVldWUoKTtcbiAgICAgICAgb3Blbk5vZGVzLmRlbGV0ZShub2RlKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgbGV0IGNhbWVGcm9tID0gbmV3IE1hcCgpO1xuXG4gICAgLy8gZGVmYXVsdCB2YWx1ZTogaW5maW5pdHlcbiAgICBsZXQgZ1Njb3JlID0gbmV3IE1hcFdpdGhEZWZhdWx0VmFsdWUoSW5maW5pdHkpO1xuICAgIGdTY29yZS5zZXQoc3RhcnQsIDApO1xuXG4gICAgbGV0IHN0YXJ0RlNjb3JlID0gZGlzdGFuY2VGdW5jdGlvbihzdGFydCwgZW5kKTtcblxuICAgIGFkZE9wZW5Ob2RlKHN0YXJ0LCBzdGFydEZTY29yZSk7XG5cbiAgICBvcGVuTm9kZXMuYWRkKHN0YXJ0KTtcbiAgICBvcGVuTm9kZVF1ZXVlLmVucXVldWUoc3RhcnQsIDEgLyBzdGFydEZTY29yZSk7XG5cbiAgICB3aGlsZSAob3Blbk5vZGVzLnNpemUgPiAwKSB7XG4gICAgICAgIC8vIGdldCB0aGUgdmFsdWUgZnJvbSBvcGVuTm9kZXMgdGhhdCBoYXMgdGhlIGxvd2VzdCBmU2NvcmVcbiAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSBnZXRPcGVuTm9kZSgpO1xuXG4gICAgICAgIC8vIGlmIHdlIHJlYWNoZWQgdGhlIGVuZCBwb2ludCwgcmVjb25zdHJ1Y3QgdGhlIHBhdGggYW5kIHJldHVybiBpdFxuICAgICAgICBpZiAoY3VycmVudE5vZGUueCA9PSBlbmQueCAmJiBjdXJyZW50Tm9kZS55ID09IGVuZC55KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb25zdHJ1Y3RQYXRoKGNhbWVGcm9tLCBjdXJyZW50Tm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgdGhpcyBub2RlIHRvIHRoZSBjbG9zZWQgbm9kZXNcbiAgICAgICAgY2xvc2VkTm9kZXMuYWRkKGN1cnJlbnROb2RlKTtcblxuICAgICAgICAvLyB0aGUgZmFydGhlc3QgcG9pbnRzIGFjY2Vzc2libGUgd2l0aG91dCBhdm9pZGluZyBvYnN0YWNsZXMgaW4gZXZlcnkgZGlyZWN0aW9uXG4gICAgICAgIC8vIChidXQgbWF4IDUwIGluIGVhY2ggZGlyZWN0aW9uKVxuICAgICAgICBmb3IgKGxldCBkaXJlY3Rpb24gPSAwOyBkaXJlY3Rpb24gPCA0OyBkaXJlY3Rpb24rKykge1xuICAgICAgICAgICAgbGV0IG5ld1BvaW50ID0gbW92ZVBvaW50KGN1cnJlbnROb2RlLCBkaXJlY3Rpb24pO1xuXG4gICAgICAgICAgICBsZXQgd2lyZXNDcm9zc2VkID0gMDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgbmV3UG9pbnQgaXMgaW4gdGhlIHNldCBvZiBub24gcm91dGFibGUgcG9pbnRzLFxuICAgICAgICAgICAgICAgIC8vIGRvbid0IGFkZCBpdCBhbmQgc3RvcCBwcm9jZWVkaW5nIGluIHRoaXMgZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHNldEhhc1RoaXNQb2ludChub25Sb3V0YWJsZSwgbmV3UG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgbm90IHRoZSBlbmQgb3Igc3RhcnQgcG9pbnQsIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGlmICghKG5ld1BvaW50LnggPT09IGVuZC54ICYmIG5ld1BvaW50LnkgPT09IGVuZC55KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIShuZXdQb2ludC54ID09PSBzdGFydC54ICYmIG5ld1BvaW50LnkgPT09IHN0YXJ0LnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBza2lwIHRoaXMgbm9kZSwgaWYgaXQgaGFzIGJlZW4gYWxyZWFkeSBjbG9zZWRcbiAgICAgICAgICAgICAgICAvLyBvciBpZiBpdCBpcyBvbiB0aGUgbGlzdCBvZiBub24gcm91dGFibGUgbm9kZXNcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VkTm9kZXMuaGFzKG5ld1BvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgcG9zc2libGUgR1Njb3JlIGJ5IGFwcGx5aW5nIGEgcHVuaXNobWVudCBmb3IgZWFjaCBub2RlIChcImJlbmRcIikgaW4gdGhlIHBhdGhcbiAgICAgICAgICAgICAgICBsZXQgbmV3R1Njb3JlID0gd2lyZUJlbmRQdW5pc2htZW50ICsgZ1Njb3JlLmdldFdpdGhEZWZhdWx0KGN1cnJlbnROb2RlKTtcblxuICAgICAgICAgICAgICAgIGlmIChzZXRIYXNUaGlzUG9pbnQocHVuaXNoZWRCdXRSb3V0YWJsZSwgbmV3UG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBub2RlIGlzIGluIHRoZSBzZXQgb2YgcHVuaXNoZWQgbm9kZXMsIGFwcGx5IHRoZSBwdW5pc2htZW50XG4gICAgICAgICAgICAgICAgICAgIHdpcmVzQ3Jvc3NlZCsrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGFwcGx5IHRoZSBwdW5pc2htZW50IGZvciBlYWNoIHdpcmUgY3Jvc3NlZCBpbiB0aGlzIGRpcmVjdGlvblxuICAgICAgICAgICAgICAgIC8vIG5vdGU6IHdlIGFyZSBjb3VudGluZyB0aGUgd2lyZXMgY3Jvc3NlZCB3aGVuIGV4cG9ydGluZyB0aGlzIGRpcmVjdGlvbiwgbm90IHRoZSB3aXJlc1xuICAgICAgICAgICAgICAgIC8vIGNyb3NzZWQgaW4gdGhlIGZpbmFsIHBhdGgsIHRoZXJlIHdpbGwgYmUgcHJvYmFibHkgb25seSBhdCBtb3N0IG9mIHRoZXNlIG5vZGVzIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGZpbmFsIHBhdGgsIG5vdCBtdWx0aXBsZVxuICAgICAgICAgICAgICAgIG5ld0dTY29yZSArPSB3aXJlc0Nyb3NzZWQgKiB3aXJlQ3Jvc3NQdW5pc2htZW50O1xuXG4gICAgICAgICAgICAgICAgLy8gc2tpcCB0aGlzIG5vZGUgaWYgaXQgaGFzIHdvcnN0IGVzdGltYWdlIGdzY29yZSB0aGFuIGluIHRoZSBnc2NvcmUgdGFibGVcbiAgICAgICAgICAgICAgICBpZiAobmV3R1Njb3JlID49IGdTY29yZS5nZXRXaXRoRGVmYXVsdChuZXdQb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2FtZUZyb20uc2V0KG5ld1BvaW50LCBjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgZ1Njb3JlLnNldChuZXdQb2ludCwgbmV3R1Njb3JlKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0ZTY29yZSA9IG5ld0dTY29yZSArIGRpc3RhbmNlRnVuY3Rpb24obmV3UG9pbnQsIGVuZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW9wZW5Ob2Rlcy5oYXMobmV3UG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgcG9pbnQgdG8gdGhlIGxpc3Qgb2YgcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgIGFkZE9wZW5Ob2RlKG5ld1BvaW50LCBuZXdGU2NvcmUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIG1vdmUgdG8gdGhlIG5leHQgcG9pbnQgaW4gdGhlIGRpcmVjaXRvblxuICAgICAgICAgICAgICAgIG5ld1BvaW50ID0gbW92ZVBvaW50KG5ld1BvaW50LCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wZW5Ob2Rlcy5zaXplID4gbWF4Tm9kZUxpbWl0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgYVN0YXI6IE51bWJlciBvZiBvcGVuIG5vZGVzICgke29wZW5Ob2Rlcy5zaXplfSkgZXhjZWVkZWQgdGhlIGxpbWl0IGZvciBvcGVuIG5vZGVzICgke21heE5vZGVMaW1pdH0pLmApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiB3ZSBnb3QgaGVyZSwgdGhlIHBhdGggd2FzIG5vdCBmb3VuZFxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiByZXR1cm5zIGB0cnVlYCBpZiB0aGUgc3BlY2lmaWVkIHNldCBvZiBwb2ludHMgY29udGFpbnMgdGhlIHNwZWNpZmllZCBwb2ludCAoYW5kIHJldHVybnMgYGZhbHNlYCBvdGhlcndpc2UpXG4gKiBAcGFyYW0ge1NldH0gc2V0IHNldCBvZiBwb2ludHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBvYmplY3QgY29udGFpbmluZyBudW1lcmljIGF0dHJpYnV0ZXMgYHhgIGFuZCBgeWBcbiAqL1xuZnVuY3Rpb24gc2V0SGFzVGhpc1BvaW50KHNldCwgcG9pbnQpIHtcbiAgICBmb3IgKGxldCBpdGVtIG9mIHNldCkge1xuICAgICAgICBpZiAoaXRlbS54ID09PSBwb2ludC54ICYmIGl0ZW0ueSA9PT0gcG9pbnQueSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IG1vdmVzIHRoZSBwYXNzZWQgcG9pbnQgaW4gdGhlIHNwZWNpZmllZCBkaXJlY3Rpb24uIEl0IHNpbXBseSBhZGRzIG9yIHN1YnRyYWN0cyAxIGZyb20gb25lIG9mIHRoZSBjb29yZGluYXRlcyBkZXBlbmRpbmcgb24gdGhlIGRpcmVjdGlvbiBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0gIHtPYmplY3R9IHBvaW50ICAgICBvYmplY3QgY29udGFpbmluZyBudW1lcmljIGF0dHJpYnV0ZXMgYHhgIGFuZCBgeWBcbiAqIEBwYXJhbSAge251bWJlcn0gZGlyZWN0aW9uIGRpcmVjdGlvbnM6XG4gKiAgICAgLSAwOiB1cFxuICogICAgIC0gMTogcmlnaHRcbiAqICAgICAtIDI6IGRvd25cbiAqICAgICAtIDM6IGxlZnRcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgIG9iamVjdCBjb250YWluaW5nIG51bWVyaWMgYXR0cmlidXRlcyBgeGAgYW5kIGB5YFxuICovXG5mdW5jdGlvbiBtb3ZlUG9pbnQoe3gsIHl9LCBkaXJlY3Rpb24pIHtcbiAgICAvLyBtYXAgZGlyZWN0aW9uIGRvIHBvaW50IGNvb3JkaW5hdGUgbW9kaWZpY2F0aW9uXG4gICAgY29uc3QgZGlyTWFwID0ge1xuICAgICAgICAwOiAoKSA9PiB7XG4gICAgICAgICAgICB5IC09IDFcbiAgICAgICAgfSxcbiAgICAgICAgMTogKCkgPT4ge1xuICAgICAgICAgICAgeCArPSAxXG4gICAgICAgIH0sXG4gICAgICAgIDI6ICgpID0+IHtcbiAgICAgICAgICAgIHkgKz0gMVxuICAgICAgICB9LFxuICAgICAgICAzOiAoKSA9PiB7XG4gICAgICAgICAgICB4IC09IDFcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpck1hcFtkaXJlY3Rpb25dKCk7XG5cbiAgICByZXR1cm4ge3gsIHl9XG59XG5cbi8qKlxuICogaGVscGVyIGJhY2t0cmFja2luZyBmdW5jdGlvbiB1c2VkIGJ5IHRoZSBhU3RhciBhbGdvcml0aG0gdG8gY29uc3RydWN0IHRoZSBmaW5hbCBwYXRoXG4gKiBAcGFyYW0gIHtPYmplY3R9IGNhbWVGcm9tICAgIG9iamVjdCBjb250YWluaW5nIG51bWVyaWMgYXR0cmlidXRlcyBgeGAgYW5kIGB5YFxuICogQHBhcmFtICB7T2JqZWN0fSBjdXJyZW50Tm9kZSBvYmplY3QgY29udGFpbmluZyBudW1lcmljIGF0dHJpYnV0ZXMgYHhgIGFuZCBgeWBcbiAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiBvYmplY3RzIGNvbnRhaW5pbmcgbnVtZXJpYyBhdHRyaWJ1dGVzIGB4YCBhbmQgYHlgXG4gKi9cbmZ1bmN0aW9uIHJlY29uc3RydWN0UGF0aChjYW1lRnJvbSwgY3VycmVudE5vZGUpIHtcbiAgICBsZXQgcGF0aCA9IFtdO1xuXG4gICAgcGF0aC5wdXNoKHtcbiAgICAgICAgeDogY3VycmVudE5vZGUueCxcbiAgICAgICAgeTogY3VycmVudE5vZGUueVxuICAgIH0pXG5cbiAgICB3aGlsZSAoY2FtZUZyb20uaGFzKGN1cnJlbnROb2RlKSkge1xuICAgICAgICBjdXJyZW50Tm9kZSA9IGNhbWVGcm9tLmdldChjdXJyZW50Tm9kZSk7XG4gICAgICAgIHBhdGgucHVzaCh7XG4gICAgICAgICAgICB4OiBjdXJyZW50Tm9kZS54LFxuICAgICAgICAgICAgeTogY3VycmVudE5vZGUueVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBwYXRoO1xufVxuIiwiLyoqXG4gKiBAbW9kdWxlIEhlbHBlckZ1bmN0aW9uc1xuICovXG5cbmltcG9ydCBzdHJpbmdpZnkgZnJvbSBcImpzb24tc3RyaW5naWZ5LXByZXR0eS1jb21wYWN0XCI7IC8vIG5vdGU6IGltcG9ydGVkIGZyb20gYSBtb2R1bGVcblxuLyoqXG4gKiBhZGQgYSBjcm9zcyBicm93c2VyIGV2ZW50IGxpc3RlbmVyIG9uIGEgbW91c2Ugc2Nyb2xsXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgRE9NIHF1ZXJ5IG9mIHRoZSBlbGVtZW50IHRoYXQgdGhlIGxpc3RlbmVyIHdpbGwgYmUgYWRkZWQgdG9cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgb2NjdXJzLiBUaGUgZnVuY3Rpb24gdGFrZXMgYXMgYSBwYXJhbWV0ZXIgYW4gZXZlbnQgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkTW91c2VTY3JvbGxFdmVudExpc3RlbmVyKHF1ZXJ5LCBmdW5jKSB7XG4gICAgbGV0IE1vdXNlV2hlZWxIYW5kbGVyID0gZXZlbnQgPT4ge1xuICAgICAgICAvLyByZWRlY2xhcmUgZm9yIG9sZCBJRSBzdXBwb3J0XG4gICAgICAgIHZhciBldmVudCA9IHdpbmRvdy5ldmVudCB8fCBldmVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZWRlY2xhcmVcblxuICAgICAgICBldmVudC5kZWx0YSA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCAoZXZlbnQud2hlZWxEZWx0YSB8fCAtZXZlbnQuZGV0YWlsKSkpO1xuXG4gICAgICAgIGZ1bmMoZXZlbnQpXG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCBzdmdlbGVtZW50O1xuXG4gICAgLy8gaWYgdGhlIHF1ZXJ5IGlzIGEgc2ltcGxlIERPTSBpZCBzZWxlY3Rvciwgd2UgY2FuIHVzZSBnZXRFbGVtZW50QnlJZCB3aGljaCBoYXMgYmV0dGVyIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgaWYocXVlcnkubWF0Y2goL14jXFx3KyQvKSkge1xuICAgICAgICBzdmdlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocXVlcnkuc3Vic3RyKDEpKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHN2Z2VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHF1ZXJ5KVxuICAgIH1cblxuICAgIGlmIChzdmdlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgLy8gSUU5LCBDaHJvbWUsIFNhZmFyaSwgT3BlcmFcbiAgICAgICAgc3ZnZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLCBNb3VzZVdoZWVsSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgIHN2Z2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTU1vdXNlU2Nyb2xsXCIsIE1vdXNlV2hlZWxIYW5kbGVyLCBmYWxzZSk7XG4gICAgfSBlbHNlICB7XG4gICAgICAgIC8vIElFIDYvNy84XG4gICAgICAgIHN2Z2VsZW1lbnQuYXR0YWNoRXZlbnQoXCJvbm1vdXNld2hlZWxcIiwgTW91c2VXaGVlbEhhbmRsZXIpO1xuICAgIH1cbiAgICBzdmdlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdldmVudCcsIGUpXG4gICAgfSwgZmFsc2UpXG59XG5cbi8qKlxuICogY29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEpTT04gc3RyaW5nIG9yIHRvIGEgZGF0YSBVUkkgY29udGFpbmluZyBhIEpTT04gc3RyaW5nXG4gKiBAcGFyYW0gIHtPYmplY3R9ICBkYXRhICAgICAgICAgICAgb2JqZWN0IHRoYXQgd2lsbCBiZSBzZXJpYWxpemVkIGludG8gYSBKU09OIHN0cmluZ1xuICogQHBhcmFtICB7Qm9vbGVhbn0gW3ByZXR0eT1mYWxzZV0gIGlmIGB0cnVlYCwgdGhlIGNvZGUgd2lsbCBiZSBwcm9wcmVybHkgaW5kZW50ZWQsIGVsc2UgYSBtb3JlIGNvbXBhY3Qgc3ludGF4IHdpbGwgYmUgdXNlZFxuICogQHBhcmFtICB7Qm9vbGVhbn0gW2RhdGFVcmk9ZmFsc2VdIHJldHVybiBkYXRhVXJpIGNvbnRhaW5pbmcgdGhlIEpTT04gc3RyaW5nIGluc3RlYWQgb2YgdGhlIHB1cmUgSlNPTiBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEpTT05TdHJpbmcoZGF0YSwgcHJldHR5ID0gZmFsc2UsIGRhdGFVcmkgPSBmYWxzZSkge1xuICAgIGlmKGRhdGFVcmkpIHtcbiAgICAgICAgcmV0dXJuICdkYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCwnXG4gICAgICAgICAgICArIGVuY29kZVVSSUNvbXBvbmVudChnZXRKU09OU3RyaW5nKGRhdGEsIHByZXR0eSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcmV0dHkpXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5naWZ5KGRhdGEsIHttYXhMZW5ndGg6IDUwfSk7XG5cbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbn1cblxuLyoqXG4gKiByZXR1cm5zIHRoZSBNYW5oYXR0YW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcG9pbnRzIF9hXyBhbmQgX2JfXG4gKiBAcGFyYW0gIHtPYmplY3R9IGEgb2JqZWN0IGNvbnRhaW5pbmcgbnVtZXJpYyBhdHRyaWJ1dGVzIGB4YCBhbmQgYHlgXG4gKiBAcGFyYW0gIHtPYmplY3R9IGIgb2JqZWN0IGNvbnRhaW5pbmcgbnVtZXJpYyBhdHRyaWJ1dGVzIGB4YCBhbmQgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYW5oYXR0YW5EaXN0YW5jZShhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGEueCAtIGIueCkgKyBNYXRoLmFicyhhLnkgLSBiLnkpO1xufVxuIiwiLyoqIEBtb2R1bGUgSWQgKi9cblxuLyoqXG4gKiB0aGUgY3VycmVudCBpbnN0YW5jZSBvZiBJZFxuICogQHR5cGUge0lkfVxuICovXG5sZXQgZXhpc3RpbmdJZEluc3RhbmNlO1xuXG4vKipcbiAqIHNpbmdsZXRvbiB0byBnZW5lcmF0ZSB1bmlxdWUgaWQnc1xuICpcbiAqIHVzYWdlOiBgbGV0IGlkID0gbmV3IElkKCkudW5pcXVlYFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGlmKCFleGlzdGluZ0lkSW5zdGFuY2Upe1xuICAgICAgICAgICAgZXhpc3RpbmdJZEluc3RhbmNlID0gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwcmVmaXggZm9yIHRoZSBpZCwgdGhhdCBpcyBjb21tb24gaW4gYWxsIHRoZSBJZHNcbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHJlZml4ID0gXCJpZFwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBudW1lcmljIHBhcnQgb2YgdGhlIG5leHQgaWQgKHRoZSBuZXh0IGlkIHdpdGhvdXQgdGhlIHByZWZpeClcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmV4dElkID0gMDtcblxuICAgICAgICByZXR1cm4gZXhpc3RpbmdJZEluc3RhbmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB1bmlxdWUgSURcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IG5ldyB1bmlxdWUgSURcbiAgICAgKi9cbiAgICBnZXQgdW5pcXVlKCkge1xuICAgICAgICBsZXQgcmV0VmFsID0gdGhpcy5wcmVmaXggKyB0aGlzLm5leHRJZDtcblxuICAgICAgICAvLyBmaW5kIG5leHQgdW51c2VkIGlkWFhYWCB0byBwcmV2ZW50IGlkIGNvbGxpc2lvbiB0aGF0IG1pZ2h0IGJlIGNhdXNlZCBieSBzb21lIG90aGVyIGNvbXBvbmVudFxuICAgICAgICAvLyAoaXQgcmVhbGx5IHNob3VsZCBub3QgaGFwcGVuLCBidXQgdGhpcyBpcyBhIHNpbXBsZSB3YXkgdG8gZW5zdXJlIGl0KVxuICAgICAgICB3aGlsZSgkKFwiI1wiK3JldFZhbCkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLm5leHRJZCsrO1xuICAgICAgICAgICAgcmV0VmFsID0gdGhpcy5nZW5lcmF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiB0aGlzIGlkXG4gICAgICAgIHRoaXMubmV4dElkKys7XG5cbiAgICAgICAgcmV0dXJuIHJldFZhbDtcbiAgICB9XG59XG4iLCIvKiogQG1vZHVsZSBNYXBXaXRoRGVmYXVsdFZhbHVlICovXG4vKipcbiAqIE1hcCB0aGF0IGhhcyBhIGRlZmF1bHQgdmFsdWUgc3BlY2lmaWVkIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBGb3IgdGhlIGNvbXBsZXRlIGRvY3VtZW50YXRpb24gb2YgdGhlIE1hcCBzZWUgW01hcCBpbiB0aGUgTUROIHdlYiBkb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXApXG4gKlxuICogVXNhZ2U6XG4gKiBgYGBKYXZhU2NyaXB0XG4gbGV0IG15TWFwID0gbmV3IE1hcFdpdGhEZWZhdWx0VmFsdWUoSW5maW5pdHkpO1xuIGNvbnN0IHZhbHVlID0gbXlNYXAuZ2V0V2l0aERlZmF1bHQoa2V5KVxuIGBgYFxuICpcbiAqIF9Ob3RlOiBUaGlzIHZlcnNpb24gaXMgd3JpdHRlbiBzcGVjaWFsbHkgZm9yIEVTNiBjb21waWxlZCBpbnRvIEVTNS4gSW4gbm9uLWNvbXBpbGVkIEVTNiBpcyB0aGUgaW1wbGVtZW50YXRpb24gZmFyIG1vcmUgZWxlZ2FudDpfXG4gKlxuICogYGBgSmF2YVNjcmlwdFxuIGV4cG9ydCBjbGFzcyBNYXBXaXRoRGVmYXVsdFZhbHVlIGV4dGVuZHMgTWFwIHtcbiAgICAgY29uc3RydWN0b3IoZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgICB0aGlzLmRlZmF1bHQgPSBkZWZhdWx0VmFsdWU7XG4gICAgIH1cblxuICAgICBnZXQoa2V5KSB7XG4gICAgICAgICBpZih0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0O1xuICAgICAgICAgfVxuICAgICB9XG4gfWBgYFxuICogQGNsYXNzIE1hcFdpdGhEZWZhdWx0VmFsdWVcbiAqIEBwYXJhbSBkZWZhdWx0VmFsdWUge2FueX0gZGVmYXVsdCB2YWx1ZSB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgd2hlbiB0aGUgcmVxdWVzdGVkIGtleSBpcyBub3QgZm91bmQgaW4gdGhlIG1hcFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWZhdWx0VmFsdWUpIHtcbiAgICBsZXQgbWFwID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSAge2FueX0ga2V5IGtleSBvZiBhIHJlcXVlc3RlZCBpdGVtXG4gICAgICogQHJldHVybiB7YW55fSB2YWx1ZSBvZiB0aGUgaXRlbSB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGtleSwgb3IgZGVmYXVsdFZhbHVlIGlmIHRoZSBrZXkgaXMgbm90IGZvdW5kIGluIHRoZSBtYXBcbiAgICAgKi9cbiAgICBtYXAuZ2V0V2l0aERlZmF1bHQgPSAoa2V5KSA9PiB7XG4gICAgICAgIHJldHVybiBtYXAuaGFzKGtleSlcbiAgICAgICAgICAgID8gbWFwLmdldChrZXkpXG4gICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbiIsIi8qKiBAbW9kdWxlIHN2Z09iamVjdHMgKi9cblxuLy8gbm9uLXN2ZyBjbGFzc2VzIHVzZWQgYXMgaGVscGVyc1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQb2x5TGluZVBvaW50IH0gZnJvbSAnLi9zdmdPYmplY3RzL1BvbHlMaW5lUG9pbnQnXG5leHBvcnQgeyBkZWZhdWx0IGFzIFBvbHlMaW5lUG9pbnRzIH0gZnJvbSAnLi9zdmdPYmplY3RzL1BvbHlMaW5lUG9pbnRzJ1xuXG4vLyB2aXJ0dWFsIHN2ZyBlbGVtZW50c1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYXR0ZXJuIH0gZnJvbSAnLi9zdmdPYmplY3RzL1BhdHRlcm4nXG5leHBvcnQgeyBkZWZhdWx0IGFzIEdyb3VwIH0gZnJvbSAnLi9zdmdPYmplY3RzL0dyb3VwJ1xuXG4vLyBcInBoeXNpY2FsL3RvdWNoYWJsZVwiIHN2ZyBlbGVtZW50c1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSZWN0YW5nbGUgfSBmcm9tICcuL3N2Z09iamVjdHMvUmVjdGFuZ2xlJ1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdmdJbWFnZSB9IGZyb20gJy4vc3ZnT2JqZWN0cy9TdmdJbWFnZSdcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUG9seUxpbmUgfSBmcm9tICcuL3N2Z09iamVjdHMvUG9seUxpbmUnXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGV4dCB9IGZyb20gJy4vc3ZnT2JqZWN0cy9UZXh0J1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNdWx0aUxpbmVUZXh0IH0gZnJvbSAnLi9zdmdPYmplY3RzL011bHRpTGluZVRleHQnXG4iLCJpbXBvcnQgVGFnIGZyb20gJy4vVGFnJ1xuXG4vKiogQG1vZHVsZSBzdmdPYmplY3RzLkdyb3VwICovXG5cbi8qKlxuICogU1ZHIGdyb3VwLCB1c2VkIGZvciBncm91cGluZyBlbGVtZW50cywgZm9yIGV4YW1wbGUgYSBnYXRlIGlzIHJlcHJlc2VudGVkIGJ5IG1hbnkgZWxlbWVudHMgKHJlY3RhbmdsZSwgaW1hZ2UsIGluaXZpc2libGUgaGl0Ym94IHJlY3RhbmdsZS4uLiksXG4gKiBidXQgYWxsIG9mIHRoZSBlbGVtZW50cyBuZWVkIHRvIGJlIHRyYW5zZm9ybWVkIHRvZ2V0aGVyLiBVc2luZyBncm91cHMgdGhlIHRyYW5zZm9ybSBwcm9wZXJ0eSBjYW4gYmUgc2V0IG9uIHRoZSBncm91cCB3aGljaCBjb250YWlucyBhbGwgdGhlIGVsZW1lbnRzLlxuICogQGV4dGVuZHMgVGFnXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyb3VwIGV4dGVuZHMgVGFnIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJnXCIpO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGQgYW4gZWxlbWVudCB0byB0aGUgZ3JvdXBcbiAgICAgKiBAcGFyYW0ge1N2Z0VsZW1lbnR9IGVsIGFuIGluc3RhbmNlIG9mIHtAbGluayBTdmdFbGVtZW50fVxuICAgICAqL1xuICAgIGFkZENoaWxkKGVsKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChlbCk7XG5cbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKGVsLiRlbCk7XG4gICAgICAgIHJldHVybiBlbDsgLy8gcHJvIGplZG5vZHVzc2kgXCJsZXQgcmVjdCA9IGcuYWRkQ2hpbGQobmV3IFJlY3RhbmdsZSguLi5cIlxuICAgIH1cbn1cbiIsImltcG9ydCBUYWcgZnJvbSAnLi9UYWcnXG5pbXBvcnQgVGV4dCBmcm9tICcuL1RleHQnXG5cbi8qKiBAbW9kdWxlIHN2Z09iamVjdHMuTXVsdGlMaW5lVGV4dCAqL1xuXG4vKipcbiAqIE11bHRpIGxpbmUgdGV4dCBlbGVtZW50IGluIFNWR1xuICpcbiAqIE11bHRpIGxpbmUgdGV4dCBpcyBub3QgbmF0aXZlbHkgc3VwcG9ydGVuZCBpbiBTVkcgMS4xLFxuICogdGhlIHdvcmthcm91bmQgaXMgdG8gdXNlIHRoZSA8Zm9yZWlnbk9iamVjdD4gZWxlbWVudCBhbmQgZGlzcGxheVxuICogYSBIVE1MIHBhcmFncmFwaCBpbnNpZGUgb2YgdGhlIFNWRyBkb2N1bWVudC5cbiAqXG4gKiBCZWNhdXNlIHRoaXMgdGVjaG5pcXVlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgYWxsIG9mIHRoZSBicm93c2VycyxcbiAqIHRoZSBmb3JlaWduT2JqZWN0IGVsZW1lbnQgaXMgd3JhcHBlZCBpbiA8c3dpdGNoPiwgd2hpY2hcbiAqIHByb3ZpZGVzIGZhbGxiYWNrIGZvciB0aG9zZSBjYXNlcy5cbiAqXG4gKiByZWFkIG1vcmU6IFtmb3JlaWduT2JqZWN0IG9uIE1ETiB3ZWIgZG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0VsZW1lbnQvZm9yZWlnbk9iamVjdClcbiAqXG4gKiBAZXh0ZW5kcyBUYWdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlMaW5lVGV4dCBleHRlbmRzIFRhZyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggICAgICAgaG9yaXpvbnRhbCBwb3NpdGlvbiBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgICAgICAgdmVydGljYWwgcG9zaXRpb24gaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ICAgICAgIHdpZHRoIG9mIHRoZSB0ZXh0IGJveCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGggICAgICAgaGVpZ2h0IG9mIHRoZSB0ZXh0IGJveCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRleHQgICAgdGV4dCBjb250ZW50IG9mIHRoZSB0ZXh0IGJveFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaXplICAgIENTUyBmb250IHNpemUgb2YgdGhlIHRleHRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbG9yPVwiYmxhY2tcIl0gY29sb3Igb2YgdGhlIHRleHRcbiAgICAgKlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHgsIHksIHcsIGgsIHRleHQsIHNpemUsIGNvbG9yID0gXCJibGFja1wiKSB7XG4gICAgICAgIHN1cGVyKFwic3dpdGNoXCIpO1xuXG4gICAgICAgIGxldCBmb3JlaWduT2JqZWN0ID0gbmV3IFRhZyhcImZvcmVpZ25PYmplY3RcIik7XG4gICAgICAgIGxldCBhbHRlcm5hdGl2ZVRleHQgPSBuZXcgVGV4dCh4LCB5LCB3LCBoLCB0ZXh0LCBzaXplLCBjb2xvcik7XG5cbiAgICAgICAgZm9yZWlnbk9iamVjdC5hZGRBdHRyKHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgd2lkdGg6IHcsXG4gICAgICAgICAgICBoZWlnaHQ6IGhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0ICR3cmFwcGVyID0gJChcIjxkaXY+XCIpXG4gICAgICAgICAgICAuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKVxuICAgICAgICAgICAgLmFkZENsYXNzKFwibXVsdGlsaW5ldGV4dFwiKVxuICAgICAgICAgICAgLmNzcyhcImhlaWdodFwiLCBoKTtcblxuICAgICAgICBsZXQgJHBhcmFncmFwaCA9ICQoXCI8cD5cIilcbiAgICAgICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIpXG4gICAgICAgICAgICAuY3NzKFwiZm9udC1zaXplXCIsIHNpemUpXG4gICAgICAgICAgICAuYXBwZW5kKHRleHQpO1xuXG4gICAgICAgICR3cmFwcGVyLmFwcGVuZCgkcGFyYWdyYXBoKTtcbiAgICAgICAgZm9yZWlnbk9iamVjdC4kZWwuYXBwZW5kKCR3cmFwcGVyKVxuXG4gICAgICAgIHRoaXMuJGVsLmFwcGVuZChcbiAgICAgICAgICAgIGZvcmVpZ25PYmplY3QuJGVsXG4gICAgICAgICkuYXBwZW5kKFxuICAgICAgICAgICAgYWx0ZXJuYXRpdmVUZXh0LiRlbFxuICAgICAgICApXG4gICAgfVxufVxuIiwiaW1wb3J0IFRhZyBmcm9tICcuL1RhZydcblxuLyoqIEBtb2R1bGUgc3ZnT2JqZWN0cy5QYXR0ZXJuICovXG5cbi8qKlxuICogcGF0dGVybiBvYmplY3QgaW4gU1ZHXG4gKiBAZXh0ZW5kcyBUYWdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0dGVybiBleHRlbmRzIFRhZyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkICAgICB1bmlxdWUgaWQgb2YgdGhpcyBwYXR0ZXJuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoICB3aWR0aCBvZiBvbmUgcGF0dGVybiB0aWxlIGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IGhlaWdodCBvZiBvbmUgcGF0dGVybiB0aWxlIGluIFNWRyBwaXhlbHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpZCwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICBzdXBlcihcInBhdHRlcm5cIik7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRyKHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICBwYXR0ZXJuVW5pdHM6IFwidXNlclNwYWNlT25Vc2VcIixcbiAgICAgICAgICAgIHZpZXdCb3g6IFwiMCAwIFwiK3dpZHRoK1wiIFwiK2hlaWdodFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGQgYSBjaGlsZCB0byB0aGlzIHBhdHRlcm5cbiAgICAgKlxuICAgICAqIHBhdHRlcm4gYmVoYXZlcyBhIGxpdHRsZSBsaWtlIHtAbGluayBHcm91cH0gLSBpdCBjb250YWlucyBjaGlsZCBlbGVtZW50cywgd2hpY2ggcmVwcmVzZW50IHRoZSBjb250ZW50IG9mIG9uZSB0aWxlIG9mIHRoZSBwYXR0ZXJuXG4gICAgICogYW5kIHRoZSB3aG9sZSBwYWNrYWdlIG9mIHRoZSBjaGlsZCBlbGVtZW50cyBpcyByZXBlYXRlZCBvbiBlYWNoIHRpbGUgb2YgdGhlIHBhdHRlcm5cbiAgICAgKiBAcGFyYW0ge1N2Z0VsZW1lbnR9IGVsIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBwYXR0ZXJuXG4gICAgICovXG4gICAgYWRkQ2hpbGQoZWwpIHtcbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKGVsLiRlbCk7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgVGFnIGZyb20gJy4vVGFnJ1xuXG4vKiogQG1vZHVsZSBzdmdPYmplY3RzLlBvbHlMaW5lICovXG5cbi8qKlxuICogU1ZHIFBvbHlMaW5lIChhIHBhdGggZGVmaW5lZCBieSBzZXF1ZW5jZSBvZiBwb2ludHMgb24gcGxhbmUpXG4gKiBAZXh0ZW5kcyBUYWdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9seUxpbmUgZXh0ZW5kcyBUYWcge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UG9seUxpbmVQb2ludHN9IHBvaW50cyBwb2ludHMgZGVzY3JpYmluZyB0aGlzIFBvbHlMaW5lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdHJva2VXaWR0aF0gd2lkdGggb2YgdGhlIHN0cm9rZSBmb3IgdGhpcyBQb2x5TGluZSBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvcl0gQ1NTIGNvbG9yIG9mIHRoaXMgUG9seUxpbmVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwb2ludHMsIHN0cm9rZVdpZHRoLCBjb2xvcikge1xuICAgICAgICBzdXBlcihcIlBvbHlMaW5lXCIpO1xuXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0ge1xuICAgICAgICAgICAgcG9pbnRzOiBwb2ludHMuc3RyaW5nLFxuICAgICAgICAgICAgZmlsbDogXCJub25lXCIsXG4gICAgICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBzdHJva2VXaWR0aFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmKGNvbG9yIT09dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnN0cm9rZSA9IGNvbG9yXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFkZEF0dHIoYXR0cmlidXRlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdXBkYXRlIHBvaW50cyBvZiB0aGlzIFBvbHlMaW5lXG4gICAgICogQHBhcmFtIHtQb2x5TGluZVBvaW50c30gcG9pbnRzIG5ldyBzZXQgb2YgcG9pbnRzIGRlc2NyaWJpbmcgdGhpcyBQb2x5TGluZVxuICAgICAqL1xuICAgIHVwZGF0ZVBvaW50cyhwb2ludHMpIHtcbiAgICAgICAgdGhpcy5hZGRBdHRyKHtcbiAgICAgICAgICAgIHBvaW50czogcG9pbnRzLnN0cmluZ1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvKiogQG1vZHVsZSBzdmdPYmplY3RzLlBvbHlMaW5lUG9pbnQgKi9cblxuLyoqXG4gKiBvbmUgcG9pbnQgb2Yge0BsaW5rIFBvbHlMaW5lUG9pbnRzfSwgdXNlZCBpbiB0aGUge0BsaW5rIFBvbHlMaW5lfSBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9seUxpbmVQb2ludCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggaG9yaXpvbnRhbCBjb29yZGluYXRlIG9mIHRoZSBQb2x5TGluZSBwb2ludFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IHZlcnRpY2FsIGNvb3JkaW5hdGUgb2YgdGhlIFBvbHlMaW5lIHBvaW50XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICB0aGlzLnkgPSAwO1xuICAgICAgICBpZih4ICE9PSB1bmRlZmluZWQgJiYgeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoYW5nZSB0aGUgY29vcmRpbmF0ZXMgb2YgdGhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IGhvcml6b250YWwgY29vcmRpbmF0ZSBvZiB0aGUgUG9seUxpbmUgcG9pbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSB2ZXJ0aWNhbCBjb29yZGluYXRlIG9mIHRoZSBQb2x5TGluZSBwb2ludFxuICAgICAqL1xuICAgIHNldCh4LCB5KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIFBvbHlMaW5lIGZyb20gYSBjb21tYSBzZXBhcmF0ZWQgc3RyaW5nIChlLmcuIGZyb20gYSBzdHJpbmcgZm9ybWF0dGVkIGxpa2UgdGhpczogXCJ4LHlcIiwgZm9yIGV4YW1wbGUgXCIxNSw4XCIpXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBzdHJpbmcgc3RyaW5nIGluIHRoZSBmb3JtYXQgXCJ4LHlcIiByZXByZXNlbnRpbmcgYSBwb2ludCBpbiB0aGUgU1ZHIFBvbHlMaW5lXG4gICAgICogQHJldHVybiB7UG9seUxpbmVQb2ludH0gbmV3bHkgY3JlYXRlZCBpbnN0YW5jZSBvZiB7QGxpbmsgUG9seUxpbmVQb2ludH1cbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2VGcm9tU3RyaW5nKHN0cmluZykge1xuICAgICAgICBsZXQgYXJyID0gc3RyaW5nLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2x5TGluZVBvaW50KGFyclswXSwgYXJyWzFdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBQb2x5TGluZSBwb2ludFxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gc3RyaW5nIGluIHRoZSBmb3JtYXQgXCJ4LHlcIlxuICAgICAqL1xuICAgIGdldCBzdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggKyBcIixcIiArIHRoaXMueTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjb21wYXJlIFBvbHlMaW5lIHBvaW50cywgcmV0dXJuIGB0cnVlYCBpZiB0aGV5IGFyZSBlcXVhbCwgZWxzZSByZXR1cm4gYGZhbHNlYFxuICAgICAqIEBwYXJhbSAge1BvbHlMaW5lUG9pbnR9IGFcbiAgICAgKiBAcGFyYW0gIHtQb2x5TGluZVBvaW50fSBiXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEueCA9PT0gYi54ICYmIGEueSA9PT0gYi55O1xuICAgIH1cbn1cbiIsImltcG9ydCBQb2x5TGluZVBvaW50IGZyb20gJy4vUG9seUxpbmVQb2ludCdcblxuLyoqIEBtb2R1bGUgc3ZnT2JqZWN0cy5Qb2x5TGluZVBvaW50cyAqL1xuXG4vKipcbiAqIGFycmF5LWxpa2Ugc3RydWN0dXJlIHVzZWQgaW4ge0BsaW5rIFBvbHlMaW5lUG9pbnRzfVxuICovXG5jbGFzcyBTbWFydEFycmF5IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyXSBpZiBzZXQsIGluaXRpYWxpemVkIFNtYXJ0QXJyYXkgd2lsbCBjb250YWluIHRoZXNlIHZhbHVlc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFycikge1xuICAgICAgICBpZihhcnIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5hcnIgPSBhcnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFyciA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGEgZGVlcCBjb3B5IG9mIHRoaXMgYXJyYXlcbiAgICAgKiBAcmV0dXJuIHtTbWFydEFycmF5fVxuICAgICAqL1xuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBTbWFydEFycmF5KCQuZXh0ZW5kKHRydWUsIFtdLCB0aGlzLmFycikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFwcGVuZCBhbiBpdGVtIHRvIHRoZSBhcnJheVxuICAgICAqIEBwYXJhbSBpdGVtIG5ldyBpdGVtIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgYXJyYXlcbiAgICAgKi9cbiAgICBhcHBlbmQoaXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRXaXRoSW5kZXgoaXRlbSwgdGhpcy5hcnIubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwcmVwZW5kIGFuIGl0ZW0gdG8gdGhlIGFycmF5XG4gICAgICogQHBhcmFtIGl0ZW0gbmV3IGl0ZW0gdGhhdCB3aWxsIGJlIHByZXBlbmRlZCB0byB0aGUgYXJyYXlcbiAgICAgKi9cbiAgICBwcmVwZW5kKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkV2l0aEluZGV4KGl0ZW0sIDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZCBhIG5ldyBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXgsIG1vdmUgYWxsIGZvbGxvd2luZyBpdGVtc1xuICAgICAqIEBwYXJhbSBpdGVtIG5ldyBpdGVtIHRoYXQgd2lsbCBiZSBhZGRlZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IGluZGV4IG9mIHRoaXMgaXRlbVxuICAgICAqL1xuICAgIGFkZFdpdGhJbmRleChpdGVtLCBpbmRleCkge1xuICAgICAgICBmb3IobGV0IGkgPSB0aGlzLmFyci5sZW5ndGggOyBpID4gaW5kZXggOyAtLWkpIHtcbiAgICAgICAgICAgIHRoaXMuYXJyW2ldID0gdGhpcy5hcnJbaS0xXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFycltpbmRleF0gPSBpdGVtO1xuICAgICAgICByZXR1cm4gdGhpczsgLy8gdG8gZW5hYmxlIGNoYWluaW5nIG9mIGFwcGVuZCAvIHByZXBwZW5kIC8gYWRkV2l0aEluZGV4IGNvbW1hbmRzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGxlbmd0aCBvZiB0aGUgYXJyYXlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgaXRlbSBieSBpbmRleFxuICAgICAqIEBwYXJhbSAge251bWJlcn0gaW5kZXggaW5kZXggb2YgdGhlIGl0ZW1cbiAgICAgKiBAcmV0dXJuIGNvbnRlbnRzIG9mIHRoZSBhcnJheSBvbiB0aGUgc3BlY2lmaWVkIGluZGV4XG4gICAgICovXG4gICAgZ2V0SXRlbShpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnJbaW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gbGFzdCBlbGVtZW50IG9mIHRoZSBhcnJheVxuICAgICAqL1xuICAgIGdldCBsYXN0KCkge1xuICAgICAgICBpZih0aGlzLmxlbmd0aCE9PTApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFyclt0aGlzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiBmaXJzdCBlbGVtZW50IG9mIHRoZSBhcnJheVxuICAgICAqL1xuICAgIGdldCBmaXJzdCgpIHtcbiAgICAgICAgaWYodGhpcy5sZW5ndGghPT0wKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcnJbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgYW4gaXRlbSBmcm9tIHRoZSBhcnJheSBieSBpbmRleFxuICAgICAqIEBwYXJhbSAge251bWJlcn0gaW5kZXggaW5kZXggb2YgdGhlIGl0ZW0gdGhhdCB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKi9cbiAgICByZW1vdmUoaW5kZXgpIHtcbiAgICAgICAgbGV0IGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IGluZGV4IDsgaSA8IGxlbmd0aCA7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5hcnJbaV0gPSB0aGlzLmFycltpICsgMV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcnIucG9wKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIHBvaW50cyBvZiB0aGUge0BsaW5rIFBvbHlMaW5lfVxuICogQGV4dGVuZHMgU21hcnRBcnJheVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2x5TGluZVBvaW50cyBleHRlbmRzIFNtYXJ0QXJyYXkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJdIGFycmF5IGNvbnRhaW5pbmcgaW5zdGFuY2VzIG9mIHtAbGluayBQb2x5TGluZVBvaW50fVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFycikge1xuICAgICAgICBzdXBlcihhcnIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBhIGRlZXAgY29weSBvZiB0aGlzIG9iamVjdFxuICAgICAqIEByZXR1cm4ge1BvbHlMaW5lUG9pbnRzfVxuICAgICAqL1xuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9seUxpbmVQb2ludHMoJC5leHRlbmQodHJ1ZSwgW10sIHRoaXMuYXJyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYXBwZW5kIGEgcG9pbnRcbiAgICAgKiBAcGFyYW0gIHtQb2x5TGluZVBvaW50fSBwb2ludCBhIG5ldyBwb2ludFxuICAgICAqL1xuICAgIGFwcGVuZChwb2ludCkge1xuICAgICAgICAvLyBjYWxsIGluaGVyaXRlZCBmdW5jdGlvbiB0byBoYW5kbGUgdGhlIGFwcGVuZGluZ1xuICAgICAgICBzdXBlci5hcHBlbmQocG9pbnQpO1xuXG4gICAgICAgIC8vIGlmIHRoZSBzZWNvbmQgdG8gbGFzdCBwb2ludCBpcyB1bm5lY2Vzc2FyeSwgcmVtb3ZlIGl0XG4gICAgICAgIGxldCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgaWYgKCBsZW5ndGggPj0gM1xuICAgICAgICAgICAgICAgICYmICggICAgKCB0aGlzLmdldEl0ZW0obGVuZ3RoIC0gMykueCA9PT0gdGhpcy5nZXRJdGVtKGxlbmd0aCAtIDIpLnggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRJdGVtKGxlbmd0aCAtIDIpLnggPT09IHRoaXMuZ2V0SXRlbShsZW5ndGggLSAxKS54IClcbiAgICAgICAgICAgICAgICAgICAgIHx8ICggdGhpcy5nZXRJdGVtKGxlbmd0aCAtIDMpLnkgPT09IHRoaXMuZ2V0SXRlbShsZW5ndGggLSAyKS55ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0SXRlbShsZW5ndGggLSAyKS55ID09PSB0aGlzLmdldEl0ZW0obGVuZ3RoIC0gMSkueSApXG4gICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGxlbmd0aCAtIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmV0dXJuIHRoaXMgZWxlbWVudCAodG8gYWxsb3cgY2hhaW5pbmcpXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHBhcnNlIFBvbHlMaW5lIGZyb20gc3RyaW5nXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBzdHJpbmcgc3RyaW5nIGluIHRoZSBQb2x5TGluZSBmb3JtYXQgKGB4MSx5MSB4Mix5MiwgeDMseTNgKVxuICAgICAqIEByZXR1cm4ge1BvbHlMaW5lUG9pbnRzfSBhIG5ldyBpbnN0YW5jZSBvZiB7QGxpbmsgUG9seUxpbmVQb2ludHN9IGNyZWF0ZWQgYnkgcGFyc2luZyB0aGUgc3RyaW5nXG4gICAgICovXG4gICAgc3RhdGljIHBhcnNlRnJvbVN0cmluZyhzdHJpbmcpIHtcbiAgICAgICAgbGV0IHBvaW50U3RyaW5ncyA9IHN0cmluZy5zcGxpdChcIiBcIik7XG4gICAgICAgIGxldCBwb2ludHMgPSBuZXcgUG9seUxpbmVQb2ludHMoKTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IHBvaW50U3RyaW5ncy5sZW5ndGggOyArK2kpIHtcbiAgICAgICAgICAgIHBvaW50cy5hcHBlbmQoUG9seUxpbmVQb2ludC5wYXJzZUZyb21TdHJpbmcocG9pbnRTdHJpbmdzW2ldKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9pbnRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIFBvbHlMaW5lXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBzdHJpbmcgaW4gdGhlIFBvbHlMaW5lIGZvcm1hdCAoYHgxLHkxIHgyLHkyLCB4Myx5M2ApXG4gICAgICovXG4gICAgZ2V0IHN0cmluZygpIHtcbiAgICAgICAgbGV0IHN0cmluZyA9IFwiXCI7XG4gICAgICAgIGZvcihsZXQgaSA9IDAgOyBpIDwgdGhpcy5sZW5ndGggOyArK2kpIHtcbiAgICAgICAgICAgIGlmKGkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gXCIgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJpbmcgKz0gdGhpcy5hcnJbaV0uc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogd3JhcHBlciBmb3IgZm9yZWFjaCBvbiB0aGUgUG9seUxpbmUgcG9pbnRzXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZ1bmMgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIGVsZW1lbnRcbiAgICAgKi9cbiAgICBmb3JFYWNoKGZ1bmMpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCB0aGlzLmFyci5sZW5ndGggOyArK2kpIHtcbiAgICAgICAgICAgIGZ1bmModGhpcy5hcnJbaV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IFN2Z0VsZW1lbnQgZnJvbSAnLi9TdmdFbGVtZW50J1xuXG4vKiogQG1vZHVsZSBzdmdPYmplY3RzLlJlY3RhbmdsZSAqL1xuXG4vKipcbiAqIGEgcmVjdGFuZ2xlIGluIFNWR1xuICogQGV4dGVuZHMgU3ZnRWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWN0YW5nbGUgZXh0ZW5kcyBTdmdFbGVtZW50IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCAgICAgICBob3Jpem9udGFsIHBvc2l0aW9uIGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSAgICAgICB2ZXJ0aWNhbCBwb3NpdGlvbiBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHcgICAgICAgd2lkdGggaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoICAgICAgIGhlaWdodCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGwgICAgZmlsbGluZyBjb2xvciBvZiB0aGUgcmVjdGFuZ2xlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cm9rZSAgc3Ryb2tlIGNvbG9yIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB3LCBoLCBmaWxsLCBzdHJva2UpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgdywgaCwgXCJyZWN0XCIpO1xuICAgICAgICB0aGlzLmFkZEF0dHIoe1xuICAgICAgICAgICAgZmlsbDogZmlsbCxcbiAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuNSxcbiAgICAgICAgICAgICdwb2ludGVyLWV2ZW50cyc6ICdhbGwnIC8vIHRvIHRyaWdnZXIgaG92ZXIgZXZlbiB3aXRoIHRyYW5zcGFyZW50IGJhY2tncm91bmRcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFRhZyBmcm9tICcuL1RhZydcblxuLyoqIEBtb2R1bGUgc3ZnT2JqZWN0cy5TdmdFbGVtZW50ICovXG5cbi8qKlxuICogcmVwcmVzZW50cyB2aXNpYmxlIGVsZW1lbnQgaW4gU1ZHIHRoYXQgaGFzIHBvc2l0aW9uIGFuZCBkaW1lbnNpb25zIChmb3IgZXhhbXBsZSBgcmVjdGFuZ2xlYCBpcyBhIFN2Z0VsZW1lbnQsIGJ1dCBgcGF0dGVybmAgaXMgbm90LCBldmVuIHRob3VnaCBib3RoIGFyZSB0YWdzKVxuICogQGV4dGVuZHMgVGFnXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN2Z0VsZW1lbnQgZXh0ZW5kcyBUYWcge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4ICAgICAgIGhvcml6b250YWwgcG9zaXRpb24gaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ICAgICAgIHZlcnRpY2FsIHBvc2l0aW9uIGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdyAgICAgICB3aWR0aCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGggICAgICAgaGVpZ2h0IGluIFNWRyBwaXhlbHNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSB0YWcgbmFtZSBvZiB0aGUgZWxlbWVudFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHgsIHksIHcsIGgsIHRhZ05hbWUpIHtcbiAgICAgICAgc3VwZXIodGFnTmFtZSk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRyKHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgd2lkdGg6IHcsXG4gICAgICAgICAgICBoZWlnaHQ6IGhcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFN2Z0VsZW1lbnQgZnJvbSAnLi9TdmdFbGVtZW50J1xuXG4vKiogQG1vZHVsZSBzdmdPYmplY3RzLlN2Z0ltYWdlICovXG5cbi8qKlxuICogYW4gaW1hZ2UgaW4gU1ZHXG4gKiBAZXh0ZW5kcyBTdmdFbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN2Z0ltYWdlIGV4dGVuZHMgU3ZnRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgdywgaCwgdXJsKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHcsIGgsIFwiaW1hZ2VcIik7XG4gICAgICAgIHRoaXMuYWRkQXR0cih7XG4gICAgICAgICAgICBcInhsaW5rOmhyZWZcIjogdXJsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoYW5nZSB1cmwgb2YgdGhlIGltYWdlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCB0aGUgbmV3IHVybCBvZiB0aGUgaW1hZ2VcbiAgICAgKi9cbiAgICBjaGFuZ2VVcmwodXJsKSB7XG4gICAgICAgIHRoaXMuYWRkQXR0cih7XG4gICAgICAgICAgICBcInhsaW5rOmhyZWZcIjogdXJsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBJZCBmcm9tICcuLi9vdGhlci9pZCdcblxuLyoqIEBtb2R1bGUgc3ZnT2JqZWN0cy5UYWcgKi9cblxuLyoqXG4gKiBQYXJlbnQgY2xhc3MgZm9yIGFsbCBzdmdPYmplY3RzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhZyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgU1ZHIHRhZyBpZGVudGlmaWVyIChgcmVjdGAsIGBpbWFnZWAsIGBQb2x5TGluZWApXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFnTmFtZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogU1ZHIHRhZyBpZGVudGlmaWVyIChgcmVjdGAsIGBpbWFnZWAsIGBQb2x5TGluZWApXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRhZ05hbWUgPSB0YWdOYW1lO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBqUXVlcnkgZWxlbWVudCBmb3IgdGhpcyB0YWdcbiAgICAgICAgICogQHR5cGUge2pRdWVyeS5lbGVtZW50fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWwgPSAkKFwiPFwiK3RoaXMudGFnTmFtZStcIj5cIik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVuaXF1ZSBJRCBvZiB0aGlzIFNWRyBvYmplY3RcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaWQgPSBuZXcgSWQoKS51bmlxdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkIGEgY2xhc3MgdG8gdGhpcyBlbGVtZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY2xhc3MgbmFtZSB0byBiZSBhZGRlZFxuICAgICAqL1xuICAgIGFkZENsYXNzKG5hbWUpIHtcbiAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGNsYXNzIG5hbWVzIGZyb20gdGhpcyBlbGVtZW50XG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBjbGFzc2VzIGNsYXNzIG5hbWVzIHRvIGJlIHJlbW92ZWRcbiAgICAgKi9cbiAgICByZW1vdmVDbGFzc2VzKC4uLmNsYXNzZXMpIHtcbiAgICAgICAgZm9yKGxldCBpdGVtIG9mIGNsYXNzZXMpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsLnJlbW92ZUNsYXNzKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IGF0dHJpYnV0ZXMgb2YgdGhpcyBlbGVtZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFzc29jIGphdmFzY3JpcHQgb2JqZWN0IHRoYXQgd2lsbCBiZSBtYXBwZWQgaW50byBhdHRyaWJ1dGVzIChge2tleTogdmFsdWV9YCAtPiBga2V5PVwidmFsdWVcImApXG4gICAgICovXG4gICAgYWRkQXR0cihhc3NvYykge1xuICAgICAgICB0aGlzLmNoZWNrSWZFbGVtZW50RXhpc3RzSW5ET00oKTtcblxuICAgICAgICAvLyBhZGQgYXR0cmlidXRlcyB0byB0aGUgZWxlbWVudFxuICAgICAgICB0aGlzLiRlbC5hdHRyKGFzc29jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYXR0cmlidXRlIHZhbHVlIGJ5IG5hbWVcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgYXR0cmlidXRlXG4gICAgICogQHJldHVybiB7c3RyaW5nfSAgICAgIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGVcbiAgICAgKi9cbiAgICBnZXRBdHRyKG5hbWUpIHtcbiAgICAgICAgdGhpcy5jaGVja0lmRWxlbWVudEV4aXN0c0luRE9NKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsLmF0dHIobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGF0dHJpYnV0ZSBieSB2YWx1ZVxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gYmUgcmVtb3ZlZFxuICAgICAqL1xuICAgIHJlbW92ZUF0dHIobmFtZSkge1xuICAgICAgICB0aGlzLmNoZWNrSWZFbGVtZW50RXhpc3RzSW5ET00oKTtcblxuICAgICAgICB0aGlzLiRlbC5yZW1vdmVBdHRyKG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldCBpZCBvZiB0aGlzIFNWRyBvYmplY3RcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGlkIG5ldyBpZCBmb3IgdGhpcyBvYmplY3RcbiAgICAgKi9cbiAgICBzZXQgaWQoaWQpIHtcbiAgICAgICAgdGhpcy5hZGRBdHRyKHtcImlkXCI6IGlkfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGlkIG9mIHRoaXMgU1ZHIG9iamVjdFxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEF0dHIoXCJpZFwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgalF1ZXJ5IGVsZW1lbnQgZm9yIHRoaXMgU1ZHIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2pRdWVyeS5lbGVtZW50fVxuICAgICAqL1xuICAgIGdldCgpIHtcbiAgICAgICAgdGhpcy5jaGVja0lmRWxlbWVudEV4aXN0c0luRE9NKCk7XG4gICAgICAgIHJldHVybiB0aGlzLiRlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayBpZiB0aGUgZWxlbWVudCBleGlzdHMgaW4gZG9tLCBpZiBzbywgcmVmZXRjaCBpdCBmcm9tIERPTSB1c2luZyBqUXVlcnlcbiAgICAgKi9cbiAgICBjaGVja0lmRWxlbWVudEV4aXN0c0luRE9NKCkge1xuICAgICAgICBsZXQgJGpxRWxlbWVudCA9ICQoXCIjXCIrdGhpcy4kZWwuYXR0cignaWQnKSk7XG4gICAgICAgIGlmKCRqcUVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbCA9ICRqcUVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgVGFnIGZyb20gJy4vVGFnJ1xuXG4vKiogQG1vZHVsZSBzdmdPYmplY3RzLlRleHQgKi9cblxuLyoqXG4gKiBUZXh0IGVsZW1lbnQgaW4gU1ZHXG4gKiBAZXh0ZW5kcyBUYWdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dCBleHRlbmRzIFRhZyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggICAgICAgaG9yaXpvbnRhbCBwb3NpdGlvbiBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgICAgICAgdmVydGljYWwgcG9zaXRpb24gaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ICAgICAgIHdpZHRoIG9mIHRoZSB0ZXh0IGJveCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGggICAgICAgaGVpZ2h0IG9mIHRoZSB0ZXh0IGJveCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRleHQgICAgdGV4dCBjb250ZW50IG9mIHRoZSB0ZXh0IGJveFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaXplICAgIENTUyBmb250IHNpemUgb2YgdGhlIHRleHRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbG9yPVwiYmxhY2tcIl0gY29sb3Igb2YgdGhlIHRleHRcbiAgICAgKlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHgsIHksIHcsIGgsIHRleHQsIHNpemUsIGNvbG9yID0gXCJibGFja1wiKSB7XG4gICAgICAgIHN1cGVyKFwidGV4dFwiKTtcbiAgICAgICAgdGhpcy5hZGRBdHRyKHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgd2lkdGg6IHcsXG4gICAgICAgICAgICBoZWlnaHQ6IGgsXG4gICAgICAgICAgICBmaWxsOiBjb2xvclxuICAgICAgICB9KTtcblxuICAgICAgICBpZihzaXplKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEF0dHIoe1xuICAgICAgICAgICAgICAgICdmb250LXNpemUnOiBzaXplXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKHRleHQpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgZ2V0TGlicmFyeSxcbiAgICBnZXROZXR3b3JrRnJvbUxpYnJhcnlcbn0gZnJvbSAnLi9uZXR3b3JrTGlicmFyeSc7XG5cbmltcG9ydCB7R2F0ZX0gZnJvbSAnLi4vZWRpdG9yRWxlbWVudHMnXG5cbi8qKlxuICogSXRlbSBpbiB0aGUgW0NvbnRleHRNZW51XSguL21vZHVsZS1Db250ZXh0TWVudS5odG1sKS4gQ29udGV4dE1lbnVJdGVtcyBjYW4gYmUgbmVzdGVkIHVzaW5nIHRoZSBhcHBlbmRJdGVtIGZ1bmN0aW9uLlxuICovXG5jbGFzcyBDb250ZXh0TWVudUl0ZW0ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0ICAgICAgICAgIHRleHQgb24gdGhlIGJ1dHRvblxuICAgICAqIEBwYXJhbSB7Q29udGV4dE1lbnV9IGNvbnRleHRNZW51IGluc3RhbmNlIG9mIHRoZSBbQ29udGV4dE1lbnVdKC4vbW9kdWxlLUNvbnRleHRNZW51Lmh0bWwpIHRoaXMgaXRlbSBiZWxvbmdzIHRvXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2xpY2tGdW5jdGlvbiBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdXNlciBjbGlja3MgdGhpcyBpdGVtXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGV4dCwgY29udGV4dE1lbnUsIGNsaWNrRnVuY3Rpb24pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRleHQgb24gdGhlIGJ1dHRvblxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogaW5zdGFuY2Ugb2YgdGhlIFtDb250ZXh0TWVudV0oLi9tb2R1bGUtQ29udGV4dE1lbnUuaHRtbCkgdGhpcyBpdGVtIGJlbG9uZ3MgdG9cbiAgICAgICAgICogQHR5cGUge0NvbnRleHRNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb250ZXh0TWVudSA9IGNvbnRleHRNZW51O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBqUXVlcnkgZWxlbWVudCByZXByZXNlbnRpbmcgRE9NIGNvbnRlbnQgb2YgdGhpcyBtZW51IGl0ZW1cbiAgICAgICAgICogQHR5cGUge2pRdWVyeS5lbGVtZW50fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWwgPSAkKFwiPGxpPlwiKS50ZXh0KHRleHQpO1xuXG4gICAgICAgIC8vIHNldCB1cCBjbGljayBjYWxsYmFjayBpZiBjbGlja0Z1bmN0aW9uIGlzIGRlZmluZWRcbiAgICAgICAgaWYoY2xpY2tGdW5jdGlvbiE9PXVuZGVmaW5lZCkge1xuICAgICAgICAgICAgJCh0aGlzLiRlbCkuY2xpY2soXG4gICAgICAgICAgICAgICAgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrRnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnUuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogalF1ZXJ5IGVsZW1lbnQgY29udGFpbmluZyB0aGUgc3VibWVudSAob3IgdW5kZWZpbmVkLCBpZiBpdGVtIGhhcyBubyBzdWJpdGVtcylcbiAgICAgICAgICogQHR5cGUge2pRdWVyeS5lbGVtZW50fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kc3VibWVudSA9IHVuZGVmaW5lZFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzdWJtZW51IGl0ZW0gY291bnRlclxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pdGVtQ291bnQgPSAwXG5cbiAgICAgICAgLy8gc2V0IGhvdmVyIGNhbGxiYWNrXG4gICAgICAgICQodGhpcy4kZWwpLmhvdmVyKChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gbW91c2Ugb25cblxuICAgICAgICAgICAgaWYodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3VibWVudS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGhpcy4kZWwub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLiRlbC5wYXJlbnQoKS5vZmZzZXQoKS5sZWZ0ICsgdGhpcy4kZWwucGFyZW50KCkud2lkdGgoKSxcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudS4kZWwuYWZ0ZXIodGhpcy4kc3VibWVudSk7XG5cbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBtb3VzZSBvdXRcbiAgICAgICAgICAgIGlmKHRoaXMuJHN1Ym1lbnUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRzdWJtZW51LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwibm9uZVwiXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZG8gbm90IHN0b3AgZXZlbnQgcHJvcGFnYXRpb24sIGhlcmUgaXQgaXMgd2FudGVkXG4gICAgICAgICAgICAvLyAoYmVjYXVzZSBzdWJtZW51IG92ZXJyaWRlcyBkaXNwbGF5OiBub25lIHdoZW4gdXNlciBtb3ZlcyBmcm9tIHRoaXMgbWVudSBpdGVtIHRvIHRoZSBzdWJtZW51KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluc3RhbmNlIG9mIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKSB0aGlzIG1lbnUgYmVsb25ncyB0b1xuICAgICAqIEB0eXBlIHtDYW52YXN9XG4gICAgICovXG4gICAgZ2V0IHBhcmVudFNWRygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dE1lbnUucGFyZW50U1ZHO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgc3VibWVudVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtQ291bnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkIGEgQ1NTIGNsYXNzIHRvIHRoaXMgaXRlbVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbHMgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZENsYXNzKGNscykge1xuICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcyhjbHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhcHBlbmQgYSBuZXN0ZWQge0BsaW5rIENvbnRleHRNZW51SXRlbX0gdG8gdGhpcyBpdGVtXG4gICAgICogQHBhcmFtICB7Q29udGV4dE1lbnVJdGVtfSBpdGVtIGl0ZW0gdGhhdCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICovXG4gICAgYXBwZW5kSXRlbShpdGVtKSB7XG4gICAgICAgIGlmKCF0aGlzLiRzdWJtZW51KSB7XG4gICAgICAgICAgICB0aGlzLiRzdWJtZW51ID0gJChcIjx1bD5cIikuYWRkQ2xhc3MoXCJzdWJMaXN0XCIpO1xuICAgICAgICAgICAgdGhpcy4kc3VibWVudS5ob3ZlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3VibWVudS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3VibWVudS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kc3VibWVudS5hcHBlbmQoaXRlbS4kZWwpO1xuXG4gICAgICAgIHRoaXMuaXRlbUNvdW50Kys7XG5cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGpRdWVyeSBlbGVtZW50IG9mIHRoaXMgbWVudSBpdGVtXG4gICAgICogQHJldHVybiB7alF1ZXJ5LmVsZW1lbnR9IGpRdWVyeSBlbGVtZW50IGNvbnRhaW5pbmcgYWxsIERPTSBjb250ZW50IGZvciB0aGlzIG1lbnUgaXRlbVxuICAgICAqL1xuICAgIGdldCBqUXVlcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRlbDtcbiAgICB9XG5cbiAgICBnZXQgalF1ZXJ5U3VibWVudSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHN1Ym1lbnU7XG4gICAgfVxufVxuXG4vKipcbiAqIE1lbnUgaXRlbSB0aGF0IGhhcyBhIGN1c3RvbSBjbGljayBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGFkZHMgYSB7QGxpbmsgR2F0ZX0gb2YgdGhlIHNwZWNpZmllZCB0eXBlIHRvIHRoZSBbQ2FudmFzXSguL21vZHVsZS1DYW52YXMuaHRtbClcbiAqIEBleHRlbmRzIENvbnRleHRNZW51SXRlbVxuICovXG5jbGFzcyBHYXRlTWVudUl0ZW0gZXh0ZW5kcyBDb250ZXh0TWVudUl0ZW0ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlICAgICAgICB0eXBlIG9mIHRoZSBnYXRlIHtAbGluayBHYXRlfSAoYW5kLCBvciwgLi4uKVxuICAgICAqIEBwYXJhbSB7Q29udGV4dE1lbnV9IGNvbnRleHRNZW51IGluc3RhbmNlIG9mIHRoZSBbQ29udGV4dE1lbnVdKC4vbW9kdWxlLUNvbnRleHRNZW51Lmh0bWwpIHRoYXQgdGhpcyBpdGVtIGJlbG9uZ3MgdG9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBjb250ZXh0TWVudSkge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGAke3R5cGUudG9VcHBlckNhc2UoKX0gZ2F0ZWAsXG4gICAgICAgICAgICBjb250ZXh0TWVudSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5uZXdHYXRlKFxuICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5zbmFwVG9HcmlkKHRoaXMucGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtWChjb250ZXh0TWVudS5wb3NpdGlvbi54KSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50U1ZHLnNuYXBUb0dyaWQodGhpcy5wYXJlbnRTVkcudmlld2JveC50cmFuc2Zvcm1ZKGNvbnRleHRNZW51LnBvc2l0aW9uLnkpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxufVxuXG4vKipcbiAqIE1lbnUgaXRlbSB0aGF0IGhhcyBhIGN1c3RvbSBjbGljayBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGFkZHMgYSBzcGVjaWZpZWQge0BsaW5rIEJsYWNrYm94fSB0byB0aGUgW0NhbnZhc10oLi9tb2R1bGUtQ2FudmFzLmh0bWwpXG4gKiBAZXh0ZW5kcyBDb250ZXh0TWVudUl0ZW1cbiAqL1xuY2xhc3MgQmxhY2tib3hNZW51SXRlbSBleHRlbmRzIENvbnRleHRNZW51SXRlbSB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgZmlsZSwgY29udGV4dE1lbnUpIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgY29udGV4dE1lbnUsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZ2V0TmV0d29ya0Zyb21MaWJyYXJ5KGZpbGUpLnRoZW4oKHtibGFja2JveCwgbmFtZX0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge2lucHV0cywgb3V0cHV0cywgdGFibGV9ID0gYmxhY2tib3g7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBuYW1lIHNwZWNpZmllZCBpbiB0aGUgYmxhY2tib3ggaXRlbSwgaWYgaXQgZG9lcyBub3QgZXhpc3QsIHVzZSB0aGUgbmFtZSBmb3IgdGhlIG5ldHdvcmtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVzZWROYW1lID0gYmxhY2tib3gubmFtZSB8fCBuYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50U1ZHLm5ld0JsYWNrYm94KFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5zbmFwVG9HcmlkKHRoaXMucGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtWChjb250ZXh0TWVudS5wb3NpdGlvbi54KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5zbmFwVG9HcmlkKHRoaXMucGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtWShjb250ZXh0TWVudS5wb3NpdGlvbi55KSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICB9XG59XG5cbi8qKlxuICogTWVudSBpdGVtIHRoYXQgaGFzIGEgY3VzdG9tIGNsaWNrIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgYWRkcyBhIHNwZWNpZmllZCBOZXR3b3JrIHRvIHRoZSBbQ2FudmFzXSguL21vZHVsZS1DYW52YXMuaHRtbClcbiAqIEBleHRlbmRzIENvbnRleHRNZW51SXRlbVxuICovXG5jbGFzcyBOZXR3b3JrTWVudUl0ZW0gZXh0ZW5kcyBDb250ZXh0TWVudUl0ZW0ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGZpbGUsIGNvbnRleHRNZW51KSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGNvbnRleHRNZW51LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGdldE5ldHdvcmtGcm9tTGlicmFyeShmaWxlKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5pbXBvcnREYXRhKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQodGhpcy5wYXJlbnRTVkcudmlld2JveC50cmFuc2Zvcm1YKGNvbnRleHRNZW51LnBvc2l0aW9uLngpIC8gdGhpcy5wYXJlbnRTVkcuZ3JpZFNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLnBhcmVudFNWRy52aWV3Ym94LnRyYW5zZm9ybVkoY29udGV4dE1lbnUucG9zaXRpb24ueSkgLyB0aGlzLnBhcmVudFNWRy5ncmlkU2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgKS50aGVuKHdhcm5pbmdzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd2FybmluZyBvZiB3YXJuaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50U1ZHLm1lc3NhZ2VzLm5ld1dhcm5pbmdNZXNzYWdlKHdhcm5pbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5tZXNzYWdlcy5uZXdFcnJvck1lc3NhZ2UoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICB9XG59XG5cbi8qKiBAbW9kdWxlIENvbnRleHRNZW51ICovXG4vKipcbiAqIENvbnRleHRNZW51IHJlcHJlc2VudHMgdGhlIG1lbnUgdGhhdCBpcyBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIgd2hlbiB0aGV5IHJpZ2h0IGNsaWNrIG9uIGEgY2FudmFzLlxuICogVGhpcyBtZW51IGFsbG93cyB1c2VyIHRvIGFkZCBlbGVtZW50cyB0byB0aGUgQ2FudmFzIGFuZCBpbiB0aGUgY2FzZSB0aGF0IHVzZXIgcmlnaHRjbGlja2VkXG4gKiBvbiBhIHNwZWNpZmljIGVsZW1lbnQsIHRoaXMgbWVudSBhbGxvd3MgdGhlbSB0byByZW1vdmUgdGhpcyBlbGVtZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZXh0TWVudSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtDYW52YXN9IHBhcmVudFNWRyBpbnN0YW5jZSBvZiBbQ2FudmFzXSguL21vZHVsZS1DYW52YXMuaHRtbCkgdGhpcyBtZW51IGJlbG9uZ3MgdG9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTVkcpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGluc3RhbmNlIG9mIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKSB0aGlzIG1lbnUgYmVsb25ncyB0b1xuICAgICAgICAgKiBAdHlwZSB7Q2FudmFzfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXJlbnRTVkcgPSBwYXJlbnRTVkc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBvc2l0aW9uIG9mIHRoZSBjb250ZXh0IG1lbnUuIEl0IGlzIHVzZWQgdG8gYWRkIHRoZSBuZXcgZWxlbWVudHMgdG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gb24gdGhlIENhbnZhcy5cbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7XG4gICAgICAgICAgICB4OiAwLCB5OiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGpRdWVyeSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIGNvbnRleHQgbWVudVxuICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5LmVsZW1lbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbCA9ICQoXCI8dWw+XCIpO1xuICAgICAgICB0aGlzLiRlbC5hdHRyKCdpZCcsICdjb250ZXh0TWVudScpO1xuXG4gICAgICAgIGxldCBzcGVjaWFsID0gbmV3IENvbnRleHRNZW51SXRlbShcIlNwZWNpYWwgZWxlbWVudHNcIiwgdGhpcyk7XG5cbiAgICAgICAgLy8gYWRkIGlucHV0IGJveFxuICAgICAgICBzcGVjaWFsLmFwcGVuZEl0ZW0oXG4gICAgICAgICAgICBuZXcgQ29udGV4dE1lbnVJdGVtKFwiSW5wdXQgYm94XCIsIHRoaXMsXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLnBhcmVudFNWRy5zbmFwVG9HcmlkKHBhcmVudFNWRy52aWV3Ym94LnRyYW5zZm9ybVgodGhpcy5wb3NpdGlvbi54KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHRoaXMucGFyZW50U1ZHLnNuYXBUb0dyaWQocGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtWSh0aGlzLnBvc2l0aW9uLnkpKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFNWRy5uZXdJbnB1dChwb3NpdGlvbi5sZWZ0LCBwb3NpdGlvbi50b3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBhZGQgb3V0cHV0IGJveFxuICAgICAgICBzcGVjaWFsLmFwcGVuZEl0ZW0obmV3IENvbnRleHRNZW51SXRlbShcIk91dHB1dCBib3hcIiwgdGhpcywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMucGFyZW50U1ZHLnNuYXBUb0dyaWQocGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtWCh0aGlzLnBvc2l0aW9uLngpKSxcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMucGFyZW50U1ZHLnNuYXBUb0dyaWQocGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtWSh0aGlzLnBvc2l0aW9uLnkpKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcGFyZW50U1ZHLm5ld091dHB1dChwb3NpdGlvbi5sZWZ0LCBwb3NpdGlvbi50b3ApO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRJdGVtKHNwZWNpYWwpO1xuXG4gICAgICAgIC8vIGxpc3Qgb2YgZ2F0ZXMgdGhhdCBjYW4gYmUgYWRkZWRcbiAgICAgICAgY29uc3QgZ2F0ZXMgPSBHYXRlLnZhbGlkR2F0ZXM7XG4gICAgICAgIGxldCBnYXRlTGlzdCA9IG5ldyBDb250ZXh0TWVudUl0ZW0oXCJOZXcgZ2F0ZVwiLCB0aGlzLCBwYXJlbnRTVkcpO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgZ2F0ZXMpIHtcbiAgICAgICAgICAgIGdhdGVMaXN0LmFwcGVuZEl0ZW0oXG4gICAgICAgICAgICAgICAgbmV3IEdhdGVNZW51SXRlbShuYW1lLCB0aGlzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFwcGVuZEl0ZW0oZ2F0ZUxpc3QpO1xuXG4gICAgICAgIC8vIG1vcmUgb3B0aW9ucyB3aWxsIGJlIGFkZGVkIGluIHRoZSBnZXRMaWJyYXJ5KCkgY2FsbGJhY2sgYmVsb3dcbiAgICAgICAgbGV0IG5ldHdvcmtMaXN0ID0gbmV3IENvbnRleHRNZW51SXRlbShcIkFkZCBhIG5ldHdvcmtcIiwgdGhpcyk7XG4gICAgICAgIG5ldHdvcmtMaXN0LmFwcGVuZEl0ZW0obmV3IENvbnRleHRNZW51SXRlbShcIlBhc3RlIGEgbmV0d29ya1wiLCB0aGlzLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlJbXBvcnREaWFsb2coKVxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuYXBwZW5kSXRlbShuZXR3b3JrTGlzdCk7IC8vIGFsd2F5cyBhcHBlbmRcblxuICAgICAgICBsZXQgYmxhY2tib3hMaXN0ID0gbmV3IENvbnRleHRNZW51SXRlbShcIkFkZCBhIGJsYWNrYm94XCIsIHRoaXMpOyAvLyBhcHBlbmRzIG9ubHkgaWYgY29udGFpbnMgaXRlbXMgKHNlZSB0aGUgY2FsbGJhY2spXG5cbiAgICAgICAgLy8gbmV0d29yayBpbXBvcnQgKGJsYWNrYm94LCBuZXR3b3JrKVxuICAgICAgICBnZXRMaWJyYXJ5KCkudGhlbihuZXR3b3JrcyA9PiB7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3Qge25hbWUsIGZpbGUsIGhhc1RhYmxlLCBoYXNOZXR3b3JrfSBvZiBuZXR3b3Jrcykge1xuICAgICAgICAgICAgICAgIC8vIGFkZCBhIG5ldHdvcmsgYXMgYSBibGFja2JveFxuICAgICAgICAgICAgICAgIGlmKGhhc1RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsYWNrYm94TGlzdC5hcHBlbmRJdGVtKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJsYWNrYm94TWVudUl0ZW0obmFtZSwgZmlsZSwgdGhpcylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBsb2FkIGEgbmV0d29yayBhcyBhIG5ldHdvcmsgb2YgY29tcG9uZW50cyBjb25uZWN0ZWQgd2l0aCB3aXJlc1xuICAgICAgICAgICAgICAgIGlmKGhhc05ldHdvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0xpc3QuYXBwZW5kSXRlbShcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOZXR3b3JrTWVudUl0ZW0obmFtZSwgZmlsZSwgdGhpcylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGJsYWNrYm94TGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRJdGVtKGJsYWNrYm94TGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGFkZCBjb25kaXRpb25hbCBpdGVtcyBmb3IgYm94IGFuZCB3aXJlIHJlbW92YWxcbiAgICAgICAgdGhpcy5hcHBlbmRDb25kaXRpb25hbEl0ZW0oJ2JveCcsICdSZW1vdmUgdGhpcyBpdGVtJywgaWQgPT4ge3RoaXMucGFyZW50U1ZHLnJlbW92ZUJveChpZCl9KTtcbiAgICAgICAgdGhpcy5hcHBlbmRDb25kaXRpb25hbEl0ZW0oJ3dpcmUnLCAnUmVtb3ZlIHRoaXMgd2lyZScsIGlkID0+IHt0aGlzLnBhcmVudFNWRy5yZW1vdmVXaXJlQnlJZChpZCl9KTtcblxuICAgICAgICAvLyBhZGQgdGhlIGNvbnRleHQgbWVudSB0byB0aGUgRE9NXG4gICAgICAgIHBhcmVudFNWRy4kc3ZnLmJlZm9yZSh0aGlzLiRlbCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE51bWJlciBvZiBpdGVtcyBpbiB0aGlzIG1lbnUgKHVzZWQgaW4gdGhlIC5sZW5naHQgZ2V0dGVyKS4gQ29uZGl0aW9uYWwgaXRlbXMgZG8gbm90IGNvdW50LlxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pdGVtQ291bnQgPSAwO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1Db3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhcHBlbmQgYSBjb250ZXh0IG1lbnUgaXRlbSB0byB0aGUgY29udGV4dCBtZW51XG4gICAgICogQHBhcmFtICB7Q29udGV4dE1lbnVJdGVtfSBpdGVtIGluc3RhbmNlIG9mIHtAbGluayBDb250ZXh0TWVudUl0ZW19IHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGlzIG1lbnVcbiAgICAgKi9cbiAgICBhcHBlbmRJdGVtKGl0ZW0pIHtcbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKGl0ZW0ualF1ZXJ5KTtcblxuICAgICAgICB0aGlzLml0ZW1Db3VudCsrO1xuXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFwcGVuZHMgYW4gY29ubmRpdGlvbmFsIGl0ZW0gKHRoYXQgaXMgc2hvd24gb25seSBpZiB0aGUgdGFyZ2V0IGhhcyB0aGUgY2xhc3MgaXRlbUNsYXNzKVxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gaXRlbUNsYXNzICAgICBzaG93IHRoZSBpdGVtIG9ubHkgaWYgdGhlIHRhcmdldCBoYXMgdGhpcyBjbGFzc1xuICAgICAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCAgICAgICAgICB0ZXh0IG9mIHRoaXMgbWVudSBpdGVtXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNsaWNrRnVuY3Rpb24gZnVuY3Rpb24gd2l0aCBvbmUgYXJndW1lbnQgKElEIG9mIHRoZSB0YXJnZXQpIHRoYXQgd2lsbCBiZSBjYWxsZWQgb24gY2xpY2tcbiAgICAgKi9cbiAgICBhcHBlbmRDb25kaXRpb25hbEl0ZW0oaXRlbUNsYXNzLCB0ZXh0LCBjbGlja0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmKCF0aGlzLmNvbmRpdGlvbmFsSXRlbXMpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uYWxJdGVtcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25kaXRpb25hbEl0ZW1zW3RoaXMuY29uZGl0aW9uYWxJdGVtcy5sZW5ndGhdID0ge1xuICAgICAgICAgICAgaXRlbUNsYXNzOiBpdGVtQ2xhc3MsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgICAgY2xpY2tGdW5jdGlvbjogY2xpY2tGdW5jdGlvblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZGlzcGxheSB0aGUgZGlhbG9nIGZvciBpbXBvcnRpbmcgYSBuZXR3b3JrIGZyb20gYSBjbGlwYm9hcmRcbiAgICAgKi9cbiAgICBkaXNwbGF5SW1wb3J0RGlhbG9nKCkge1xuICAgICAgICBsZXQgJHBvcHVwID0gJChcIjxkaXY+XCIpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJpbXBvcnRFeHBvcnRcIilcbiAgICAgICAgICAgIC5hZGRDbGFzcyhcImltcG9ydFwiKTtcblxuICAgICAgICBsZXQgdGV4dGFyZWFJZCA9IFwiaW1wb3J0SlNPTlwiO1xuICAgICAgICBsZXQgJHRleHRibG9jayA9ICQoXCI8dGV4dGFyZWE+XCIpLmF0dHIoJ2lkJywgdGV4dGFyZWFJZCk7XG5cbiAgICAgICAgbGV0IGxpdHlJbnN0YW5jZTtcblxuICAgICAgICAkcG9wdXAuYXBwZW5kKFxuICAgICAgICAgICAgJHRleHRibG9ja1xuICAgICAgICApLmFwcGVuZChcbiAgICAgICAgICAgICQoXCI8YT5cIikuYXR0cih7XG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiI1wiLFxuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ1cGxvYWRcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hcHBlbmQoXG4gICAgICAgICAgICAgICAgJChcIjxpbWc+XCIpLmF0dHIoJ3NyYycsIFwiaW1nL2d1aS9pbXBvcnQuc3ZnXCIpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYXBwZW5kKFwiIGltcG9ydCBmcm9tIEpTT05cIilcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGE7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSgkKCcjJyArIHRleHRhcmVhSWQpLnZhbCgpKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRTVkcubWVzc2FnZXMubmV3RXJyb3JNZXNzYWdlKFwiVGhlIGltcG9ydGVkIGZpbGUgaXMgbm90IGEgdmFsaWQgSlNPTiBmaWxlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgbGl0eUluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBwcm9jY2VzcyB0aGUgaW1wb3J0ZWQgZGF0YVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5pbXBvcnREYXRhKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQodGhpcy5wYXJlbnRTVkcudmlld2JveC50cmFuc2Zvcm1YKHRoaXMucG9zaXRpb24ueCkgLyB0aGlzLnBhcmVudFNWRy5ncmlkU2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKHRoaXMucGFyZW50U1ZHLnZpZXdib3gudHJhbnNmb3JtWSh0aGlzLnBvc2l0aW9uLnkpIC8gdGhpcy5wYXJlbnRTVkcuZ3JpZFNpemUpXG4gICAgICAgICAgICAgICAgICAgICkudGhlbih3YXJuaW5ncyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdhcm5pbmcgb2Ygd2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5tZXNzYWdlcy5uZXdXYXJuaW5nTWVzc2FnZSh3YXJuaW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpdHlJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgbGl0eUluc3RhbmNlID0gbGl0eSgkcG9wdXApO1xuXG4gICAgICAgIC8vIGZvY3VzIG9uIHRoZSB0ZXh0YmxvY2tcbiAgICAgICAgJHRleHRibG9jay5mb2N1cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGRlY2lkZSB3aGV0aGVyIG9yIG5vdCB0byBkaXNwbGF5IHNwZWNpZmljIGNvbmRpdGlvbmFsIGl0ZW1zXG4gICAgICogQHBhcmFtICB7alF1ZXJ5LmVsZW1lbnR9ICR0YXJnZXQgalF1ZXJ5IHRhcmdldCBvZiBhIE1vdXNlRXZlbnQgKGVsZW1lbnQgdGhhdCB1c2VyIGNsaWNrZWQgb24pXG4gICAgICovXG4gICAgcmVzb2x2ZUNvbmRpdGlvbmFsSXRlbXMoJHRhcmdldCkge1xuICAgICAgICBmb3IobGV0IGl0ZW0gb2YgdGhpcy5jb25kaXRpb25hbEl0ZW1zKSB7XG4gICAgICAgICAgICBpZigkdGFyZ2V0Lmhhc0NsYXNzKGl0ZW0uaXRlbUNsYXNzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kSXRlbShcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRleHRNZW51SXRlbShcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udGV4dCwgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNsaWNrRnVuY3Rpb24oJHRhcmdldC5hdHRyKCdpZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkuYWRkQ2xhc3MoJ2NvbmRpdGlvbmFsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoaWRlIGFsbCBjb25kaXRpb25hbCBpdGVtc1xuICAgICAqL1xuICAgIGhpZGVBbGxDb25kaXRpb25hbEl0ZW1zKCkge1xuICAgICAgICB0aGlzLiRlbC5jaGlsZHJlbignLmNvbmRpdGlvbmFsJykucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZGlzcGxheXMgdGhlIGNvbnRleHQgbWVudSB3aXRoIHRoZSByaWdodCBzZXQgb2YgY29uZGl0aW9uYWwgaXRlbXNcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHggICAgICAgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgY29udGV4dCBtZW51IGluIENTUyBwaXhlbHNcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHkgICAgICAgdmVydGljYWwgcG9zaXRpb24gb2YgdGhlIGNvbnRleHQgbWVudSBpbiBDU1MgcGl4ZWxzXG4gICAgICogQHBhcmFtICB7alF1ZXJ5LmVsZW1lbnR9ICR0YXJnZXQgalF1ZXJ5IHRhcmdldCBvZiBhIE1vdXNlRXZlbnQgKGVsZW1lbnQgdGhhdCB1c2VyIGNsaWNrZWQgb24pXG4gICAgICovXG4gICAgZGlzcGxheSh4LCB5LCAkdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVzb2x2ZUNvbmRpdGlvbmFsSXRlbXMoJHRhcmdldCk7XG5cbiAgICAgICAgdGhpcy4kZWwuY3NzKHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICB0b3A6IHksXG4gICAgICAgICAgICBsZWZ0OiB4XG4gICAgICAgIH0pXG4gICAgICAgIC8vIHNldCB0aGUgd2lkdGggZXhwaWNpdGx5LCBvciBlbHNlIHRoZSBtZW51IHdpbGwgd2lkZW4gd2hlbiBkaXNwbGF5aW5nIGEgc3VibWVudVxuICAgICAgICAvLyAyIGlzIHRvIHByZXZlbnQgYSB3ZWlyZCB0ZXh0IHdyYXAgYnVnXG4gICAgICAgIC5jc3MoJ3dpZHRoJywgJ2F1dG8nKVxuICAgICAgICAuY3NzKCd3aWR0aCcsIHRoaXMuJGVsLmlubmVyV2lkdGgoKSArIDIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGhpZGUgdGhlIGNvbnRleHQgbWVudVxuICAgICAqL1xuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuJGVsLmNzcyh7ZGlzcGxheTogJ25vbmUnfSk7XG4gICAgICAgICQoXCIuc3ViTGlzdFwiKS5jc3Moe2Rpc3BsYXk6ICdub25lJ30pO1xuICAgICAgICB0aGlzLmhpZGVBbGxDb25kaXRpb25hbEl0ZW1zKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0SlNPTlN0cmluZyB9IGZyb20gXCIuLi9vdGhlci9oZWxwZXJGdW5jdGlvbnNcIjtcblxuLyoqXG4gKiBGbG9hdGluZ0J1dHRvbiByZXByZXNlbnRzIGEgYnV0dG9uIHRoYXQgaXMgdXNlZCBpbiB0aGUgZmxvYXRpbmcgbWVudSBpbiB0aGUgcmlnaHQgYm90dG9tIGNvcm5lclxuICogb2YgdGhlIGFwcGxpY2F0aW9uLiBJdCBtYXkgaGF2ZSBhIGN1c3RvbSB0b29sdGlwIGFuZCBjYWxsYmFjayBvbiB0aGUgY2xpY2sgZXZlbnRcbiAqL1xuY2xhc3MgRmxvYXRpbmdCdXR0b24ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25DbGFzcyBDdXN0b20gc3RyaW5nIHRoYXQgaWRlbnRpZmllcyB0aGUgU1ZHIGljb24gdXNlZCBvbiB0aGlzIGJ1dHRvbi4gVGhpcyBzdHJpbmcgaXMgYWxzbyBhZGRlZCBhcyBhIENTUyBjbGFzcyB0byB0aGUgYnV0dG9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0b29sdGlwICAgICB0b29sdGlwIGZvciB0aGUgYnV0dG9uLCB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIG9uIGhvdmVyIGFuZCBhbHNvIHVzZWQgYXMgYWx0ZXJuYXRpdmUgdGl0bGUgZm9yIHRoZSBpbWFnZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNsaWNrRXZlbnQgIGN1c3RvbSBjYWxsYmFjayB3aGVuIHVzZXIgY2xpY2tzIHRoZSBidXR0b25cbiAgICAgKiBAcGFyYW0ge0NhbnZhc30gcGFyZW50U1ZHICAgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgU1ZHIGVsZW1lbnRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihidXR0b25DbGFzcywgdG9vbHRpcCwgY2xpY2tFdmVudCwgcGFyZW50U1ZHKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBqUXVlcnkgZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGJ1dHRvblxuICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5LmVsZW1lbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbCA9ICQoJzxhPicpXG5cbiAgICAgICAgLy8gYWRkIGNsYXNzZXMgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJidXR0b25cIik7XG4gICAgICAgIHRoaXMuJGVsLmFkZENsYXNzKGJ1dHRvbkNsYXNzKTtcblxuICAgICAgICAvLyBhZGQgdGhlIGljb25cbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKFxuICAgICAgICAgICAgJChcIjxpbWc+XCIpXG4gICAgICAgICAgICAuYXR0cihcInNyY1wiLCBgaW1nL2d1aS8ke2J1dHRvbkNsYXNzfS5zdmdgKVxuICAgICAgICAgICAgLmF0dHIoXCJhbHRcIiwgdG9vbHRpcClcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBhZGQgdGhlIHRvb2x0aXAgZWxlbWVudCBhbmQgYW4gZXZlbnQgbGlzdGVuZXIgaWYgdG9vbHRpcCBpcyBkZWZpbmVkXG4gICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGpRdWVyeSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgdG9vbHRpcFxuICAgICAgICAgICAgICogQHR5cGUge2pRdWVyeS5lbGVtZW50fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLiR0b29sdGlwID0gJChcIjxkaXY+XCIpO1xuICAgICAgICAgICAgdGhpcy4kdG9vbHRpcFxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcInRvb2x0aXBcIilcbiAgICAgICAgICAgICAgICAuaHRtbCh0b29sdGlwKTtcblxuICAgICAgICAgICAgcGFyZW50U1ZHLiRzdmcuYWZ0ZXIodGhpcy4kdG9vbHRpcCk7XG5cbiAgICAgICAgICAgIHRoaXMuJGVsLmhvdmVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiR0b29sdGlwLmZhZGVJbigyMDApO1xuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJHRvb2x0aXAuZmFkZU91dCgyMDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgYW4gZXZlbnQgbGlzdGVuZXIgb24gY2xpY2ssIGlmIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBkZWZpbmVkXG4gICAgICAgIGlmIChjbGlja0V2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLiRlbC5vbihcImNsaWNrXCIsIGNsaWNrRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKiogQG1vZHVsZSBGbG9hdGluZ01lbnUgKi9cbi8qKlxuICogQ2xhc3MgdG8gcmVwcmVzZW50IHRoZSBmbG9hdGluZyBtZW51IGluIHRoZSByaWdodCBib3R0b20gY29ybmVyIG9mIHRoZSBwYWdlLlxuICogSXQgaW5zdGFudGlhdGVzIGFsbCB0aGUgYnV0dG9ucyBhbmQgdGhlaXIgY2FsbGJhY2tzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbG9hdGluZ01lbnUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Q2FudmFzfSBwYXJlbnRTVkcgcmVmZXJlbmNlIHRvIHRoZSBDYW52YXMgZWxlbWVudCB0aGlzIG1lbnUgaXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocGFyZW50U1ZHKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgalF1ZXJ5IGVsZW1lbnQgY29udGFpbmluZyBhbGwgYnV0dG9uc1xuICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5LmVsZW1lbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbCA9ICQoJzxkaXY+JylcblxuICAgICAgICBjb25zdCBpZCA9ICdmbG9hdGluZ01lbnUnO1xuXG4gICAgICAgIHRoaXMuJGVsLmF0dHIoXCJpZFwiLCBpZCk7XG5cbiAgICAgICAgLy8gY29uc3QgJGxvYWRlciA9ICQoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcImxvYWRlclwiKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcblxuXG4gICAgICAgIC8qIEVYUE9SVCAqL1xuICAgICAgICB0aGlzLmFwcGVuZChcbiAgICAgICAgICAgIG5ldyBGbG9hdGluZ0J1dHRvbihcImV4cG9ydFwiLCBcIkdldCBjb2RlIGZvciB0aGlzIG5ldHdvcmtcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgcG9wdXAgY29udGFpbmVyIGhvbGRpbmcgYWxsIHBvcHVwIGNvbnRlbnQgKHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gbGl0eSlcbiAgICAgICAgICAgICAgICBsZXQgJHBvcHVwID0gJChcIjxkaXY+XCIpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImltcG9ydEV4cG9ydFwiKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJleHBvcnRcIik7XG5cbiAgICAgICAgICAgICAgICAvLyBnZW5lcmF0ZSB0aGUgYmxvY2sgd2l0aCBjb2RlIHRvIGJlIGRpc3BsYXllZCBhbmQgYXBwZW5kIGl0IHRvIHRoZSBwb3B1cCBlbGVtZW50XG4gICAgICAgICAgICAgICAgY29uc3QgJHRleHRibG9jayA9ICQoXCI8dGV4dGFyZWE+XCIpLnRleHQoXG4gICAgICAgICAgICAgICAgICAgIGdldEpTT05TdHJpbmcocGFyZW50U1ZHLmV4cG9ydERhdGEsIHRydWUpXG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgJHBvcHVwLmFwcGVuZCgkdGV4dGJsb2NrKTtcblxuICAgICAgICAgICAgICAgIC8vIGdlbmVyYXRlIHRoZSBsaW5rc1xuICAgICAgICAgICAgICAgICRwb3B1cC5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICQoXCI8YT5cIikuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImhyZWZcIjogZ2V0SlNPTlN0cmluZyhwYXJlbnRTVkcuZXhwb3J0RGF0YSwgdHJ1ZSwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwiZG93bmxvYWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZG93bmxvYWRcIjogXCJuZXR3b3JrLmpzb25cIlxuICAgICAgICAgICAgICAgICAgICB9KS5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiPGltZz5cIikuYXR0cignc3JjJywgXCJpbWcvZ3VpL2V4cG9ydC5zdmdcIilcbiAgICAgICAgICAgICAgICAgICAgKS5hcHBlbmQoXCIgZXhwYW5kZWQgSlNPTlwiKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJHBvcHVwLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgJChcIjxhPlwiKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBnZXRKU09OU3RyaW5nKHBhcmVudFNWRy5leHBvcnREYXRhLCBmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwiZG93bmxvYWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZG93bmxvYWRcIjogXCJuZXR3b3JrLm1pbi5qc29uXCJcbiAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIjxpbWc+XCIpLmF0dHIoJ3NyYycsIFwiaW1nL2d1aS9leHBvcnQuc3ZnXCIpXG4gICAgICAgICAgICAgICAgICAgICkuYXBwZW5kKFwiIGNvbXBhY3QgSlNPTlwiKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBsaXR5KCRwb3B1cCk7XG5cbiAgICAgICAgICAgICAgICAvLyBoaWdobGlnaHQgdGhlIHRleHQgaW4gdGhlIHRleHRibG9ja1xuICAgICAgICAgICAgICAgICR0ZXh0YmxvY2suc2VsZWN0KCk7XG4gICAgICAgICAgICB9LCBwYXJlbnRTVkcpXG4gICAgICAgICk7XG5cbiAgICAgICAgLyogVHV0b3JpYWwgKi9cbiAgICAgICAgdGhpcy5hcHBlbmQoXG4gICAgICAgICAgICBuZXcgRmxvYXRpbmdCdXR0b24oXCJ0dXRvcmlhbFwiLCBcIlN0YXJ0IHRoZSB0dXRvcmlhbFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcGFyZW50U1ZHLnN0YXJ0VHV0b3JpYWwoKTtcbiAgICAgICAgICAgIH0sIHBhcmVudFNWRylcbiAgICAgICAgKTtcblxuICAgICAgICBwYXJlbnRTVkcuJHN2Zy5hZnRlcih0aGlzLiRlbCk7XG5cbiAgICAgICAgLyogSEVMUCAqL1xuXG4gICAgICAgIGxldCBoZWxwID0gbmV3IEZsb2F0aW5nQnV0dG9uKFwiaGVscFwiLCBcIkRpc3BsYXkgYSBoZWxwIHBhZ2VcIiwgZmFsc2UsIHBhcmVudFNWRyk7XG4gICAgICAgIGhlbHAuJGVsLmF0dHIoe1xuICAgICAgICAgICAgJ2hyZWYnOiAnLi9kb2NzL3VzZXIuaHRtbCcsXG4gICAgICAgICAgICAnZGF0YS1saXR5JzogJydcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlbHApO1xuXG4gICAgICAgIHBhcmVudFNWRy4kc3ZnLmFmdGVyKHRoaXMuJGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhcHBlbmQgYSBGbG9hdGluZ0J1dHRvbiB0byB0aGlzIG1lbnVcbiAgICAgKiBAcGFyYW0gIHtGbG9hdGluZ0J1dHRvbn0gbWVudUl0ZW0gYXBwZW5kIGFuIGluc3RhbmNlIG9mICB7QGxpbmsgRmxvYXRpbmdCdXR0b259IHRvIHRoaXMgbWVudVxuICAgICAqL1xuICAgIGFwcGVuZChtZW51SXRlbSkge1xuICAgICAgICB0aGlzLiRlbC5hcHBlbmQobWVudUl0ZW0uJGVsKTtcbiAgICB9XG59XG4iLCIvKiogQG1vZHVsZSBNZXNzYWdlcyAqL1xuXG4vKipcbiAqIGEgZ2VuZXJpYyBtZXNzYWdlIHRoYXQgY2FuIGJlIGRpc3BsYXllZCBpbiB0aGUge0BsaW5rIE1lc3NhZ2VzfSBib3hcbiAqL1xuY2xhc3MgTWVzc2FnZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgICAgICAgICAgICAgICB0ZXh0IG9mIHRoZSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29uSGlkZV0gYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGBoaWRlKClgIG1ldGhvZCBpcyBjYWxsZWRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0ZXh0LCBvbkhpZGUpIHtcbiAgICAgICAgdGhpcy4kZWwgPSAkKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJtZXNzYWdlXCIpLnRleHQodGV4dCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgYGhpZGUoKWAgbWV0aG9kIGlzIGNhbGxlZFxuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uSGlkZSA9IG9uSGlkZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoaWRlIHRoZSBtZXNzYWdlIChhbmQgY2FsbCB0aGUgb25IaWRlIGNhbGxiYWNrIGlmIHRoZXJlIGlzIGFueSlcbiAgICAgKi9cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLiRlbC5yZW1vdmUoKTtcblxuICAgICAgICBpZih0aGlzLm9uSGlkZSkge1xuICAgICAgICAgICAgdGhpcy5vbkhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBhIGxvYWRpbmcgbWVzc2FnZSB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgaW4gdGhlIHtAbGluayBNZXNzYWdlc30gYm94XG4gKiBAZXh0ZW5kcyBNZXNzYWdlXG4gKi9cbmNsYXNzIExvYWRpbmdNZXNzYWdlIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IodGV4dCwgb25IaWRlID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN1cGVyKHRleHQsIG9uSGlkZSk7XG5cbiAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBhIG1lc3NhZ2UgdGhhdCBoYXMgYSBjbG9zZSBidXR0b24gYW5kIHRoYXQgY2FuIGJlIGRpc3BsYXllZCBpbiB0aGUge0BsaW5rIE1lc3NhZ2VzfSBib3hcbiAqIEBleHRlbmRzIE1lc3NhZ2VcbiAqL1xuY2xhc3MgQ2xvc2FibGVNZXNzYWdlIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IodGV4dCwgb25IaWRlID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN1cGVyKHRleHQsIG9uSGlkZSk7XG5cbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKFxuICAgICAgICAgICAgJChcIjxzcGFuPlwiKS5hZGRDbGFzcyhcImNsb3NlXCIpLmNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICB9XG59XG5cbi8qKlxuICogYW4gZXJyb3IgbWVzc2FnZSB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgaW4gdGhlIHtAbGluayBNZXNzYWdlc30gYm94XG4gKiBAZXh0ZW5kcyBDbG9zYWJsZU1lc3NhZ2VcbiAqL1xuY2xhc3MgRXJyb3JNZXNzYWdlIGV4dGVuZHMgQ2xvc2FibGVNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0LCBvbkhpZGUgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3VwZXIodGV4dCwgb25IaWRlKTtcblxuICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImVycm9yXCIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBhIHdhcm5pbmcgbWVzc2FnZSB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgaW4gdGhlIHtAbGluayBNZXNzYWdlc30gYm94XG4gKiBAZXh0ZW5kcyBDbG9zYWJsZU1lc3NhZ2VcbiAqL1xuY2xhc3MgV2FybmluZ01lc3NhZ2UgZXh0ZW5kcyBDbG9zYWJsZU1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHRleHQsIG9uSGlkZSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBzdXBlcih0ZXh0LCBvbkhpZGUpO1xuXG4gICAgICAgIHRoaXMuJGVsLmFkZENsYXNzKFwid2FybmluZ1wiKTtcbiAgICB9XG59XG5cbi8qKlxuICogZGlzcGxheSBtZXNzYWdlcyB0byB0aGUgdXNlciBpbiBhIG5pY2UgVUlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzc2FnZXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogalF1ZXJ5IGVsZW1lbnQgdGhhdCByZXByZXNlbnRzIHRoZSBtZXNzYWdlIGludGVyZmFjZS4gVGhpcyBlbGVtZW50IGNvbnRhaW5zIGFsbCB0aGUgY3VycmVudGx5IGRpc3BsYXllZCBtZXNzYWdlcy5cbiAgICAgICAgICogQHR5cGUge2pRdWVyeS5lbGVtZW50fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWwgPSAkKFwiPGRpdj5cIikuYWRkQ2xhc3MoJ21lc3NhZ2VzJyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG51bWJlciBvZiBjdXJyZW50bHkgZGlzcGxheWVkIG1lc3NhZ2VzLCBoYXMgYSBzcGVjaWZpZWQgc2V0dGVyIGFuZCBnZXR0ZXJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuXG4gICAgICAgIC8vIHBsYWNlIHRoZSBwcm9ncmVzcyBpbmZvIGVsZW1lbnRcbiAgICAgICAgJCgnYm9keScpLmFwcGVuZCh0aGlzLiRlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBudW1iZXIgb2YgY3VycmVudGx5IGRpc3BsYXllZCBtZXNzYWdlc1xuICAgICAqIEByZXR1cm4ge251bWJlcn0gW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGdldCBjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUNvdW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbnVtYmVyIG9mIGN1cnJlbnRseSBkaXNwbGF5ZWQgbWVzc2FnZXMuIFNob3VsZCBiZSBjYWxsZWQgb25seSB0aHJvdWdoIGZ1bmN0aW9ucyB0aGF0IGFkZCBtZXNzYWdlcy5cbiAgICAgKlxuICAgICAqIElmIHRoZSBtZXNzYWdlIGNvdW50IGlzID49IDEsIHRoZSBqUXVlcnkgZWxlbWVudCBmb3IgdGhlIFVJIGlzIGRpc3BsYXllZCwgaWYgdGhlIG1lc3NhZ2UgY291bnQgaXMgPDEsIHRoZSBVSSBpcyBoaWRkZW4uXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSB2YWx1ZSBbZGVzY3JpcHRpb25dXG4gICAgICogQHJldHVybiB7bnVtYmVyfSAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0IGNvdW50KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZUNvdW50ID0gdmFsdWU7XG5cbiAgICAgICAgaWYodGhpcy5tZXNzYWdlQ291bnQgPCAxKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaGlkZSB0aGUgbWVzc2FnZSBib3ggYnkgYWRkaW5nIGEgYGhpZGRlbmAgY2xhc3MgdG8gdGhlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZGlzcGxheSB0aGUgbWVzc2FnZSBib3ggYnkgcmVtb3ZpbmcgdGhlIGBoaWRkZW5gIGNsYXNzIHRvIHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgZGlzcGxheSgpIHtcbiAgICAgICAgdGhpcy4kZWwucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZCBhIG5ldyBtZXNzYWdlIHRvIHRoZSBtZXNzYWdlIGJveFxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCAgICAgICAgICAgICB0ZXh0IG9mIHRoZSBtZXNzYWdlXG4gICAgICogQHBhcmFtICB7TWVzc2FnZX0gW2NvbnN0cj1NZXNzYWdlXSBjb25zdHJ1Y3RvciBvZiB0aGUgbWVzc2FnZSwgbXVzdCBiZSBhIGRlcml2YXRlIG9mIHRoZSB7QGxpbmsgTWVzc2FnZX0gY2xhc3NcbiAgICAgKiBAcmV0dXJuIHtNZXNzYWdlfSAgICAgICAgICAgICAgICAgIHRoZSBuZXdseSBjb25zdHJ1Y3RlZCBtZXNzYWdlIChpbnN0YW5jZSBtYWRlIGJ5IHRoZSBzcGVjaWZpZWQgY29uc3RydWN0b3IpXG4gICAgICovXG4gICAgbmV3TWVzc2FnZSh0ZXh0LCBjb25zdHIgPSBNZXNzYWdlKSB7XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgbWVzc2FnZSBieSBjYWxsaW5nIHRoZSBjb25zdHJ1Y3RvcixcbiAgICAgICAgLy8gcHJvdmlkZSBpdCB3aXRoIHRleHQgYW5kIGEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIGhpZGluZyB0aGUgbWVzc2FnZS5cbiAgICAgICAgLy8gVGhpcyBjYWxsYmFjayBzdWJ0cmFjdHMgMSBmcm9tIHRoZVxuICAgICAgICBsZXQgbWVzc2FnZSA9IG5ldyBjb25zdHIodGV4dCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb3VudC0tO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiRlbC5hcHBlbmQobWVzc2FnZS4kZWwpO1xuICAgICAgICB0aGlzLmNvdW50Kys7XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGEgbmV3IGxvYWRpbmcgbWVzc2FnZSBhbmQgYWRkIGl0IHRvIHRoZSBtZXNzYWdlIGJveFxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCB0ZXh0IG9mIHRoZSBtZXNzYWdlXG4gICAgICogQHJldHVybiB7TG9hZGluZ01lc3NhZ2V9IHRoZSBuZXdseSBjb25zdHJ1Y3RlZCB7QGxpbmsgTG9hZGluZ01lc3NhZ2V9XG4gICAgICovXG4gICAgbmV3TG9hZGluZ01lc3NhZ2UodGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXdNZXNzYWdlKHRleHQsIExvYWRpbmdNZXNzYWdlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBuZXcgZXJyb3IgbWVzc2FnZSBhbmQgYWRkIGl0IHRvIHRoZSBtZXNzYWdlIGJveFxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCB0ZXh0IG9mIHRoZSBtZXNzYWdlXG4gICAgICogQHJldHVybiB7RXJyb3JNZXNzYWdlfSB0aGUgbmV3bHkgY29uc3RydWN0ZWQge0BsaW5rIEVycm9yTWVzc2FnZX1cbiAgICAgKi9cbiAgICBuZXdFcnJvck1lc3NhZ2UodGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXdNZXNzYWdlKHRleHQsIEVycm9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGEgbmV3IHdhcm5pbmcgbWVzc2FnZSBhbmQgYWRkIGl0IHRvIHRoZSBtZXNzYWdlIGJveFxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCB0ZXh0IG9mIHRoZSBtZXNzYWdlXG4gICAgICogQHJldHVybiB7V2FybmluZ01lc3NhZ2V9IHRoZSBuZXdseSBjb25zdHJ1Y3RlZCB7QGxpbmsgV2FybmluZ01lc3NhZ2V9XG4gICAgICovXG4gICAgbmV3V2FybmluZ01lc3NhZ2UodGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXdNZXNzYWdlKHRleHQsIFdhcm5pbmdNZXNzYWdlKTtcbiAgICB9XG59XG4iLCIvKiogQG1vZHVsZSBUdXRvcmlhbCAqL1xuLyoqXG4gKiBEaXNwbGF5IGFuZCBtYW5hZ2UgdGhlIHR1dG9yaWFsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR1dG9yaWFsIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0NhbnZhc30gcGFyZW50U1ZHIGluc3RhbmNlIG9mIFtDYW52YXNdKC4vbW9kdWxlLUNhbnZhcy5odG1sKSBmb3IgdGhpcyB0dXRvcmlhbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvblR1dG9yaWFsQ2xvc2VkXSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIHVzZXIgY2xvc2VzIG9yIGZpbmlzaGVzIHRoZSB0dXRvcmlhbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudFNWRywgb25UdXRvcmlhbENsb3NlZCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogaW5zdGFuY2Ugb2YgW0NhbnZhc10oLi9tb2R1bGUtQ2FudmFzLmh0bWwpIGZvciB0aGlzIHR1dG9yaWFsXG4gICAgICAgICAqIEB0eXBlIHtDYW52YXN9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBhcmVudFNWRyA9IHBhcmVudFNWRztcblxuICAgICAgICAvKipcbiAgICAgICAgICogaGVscGVyIHZhcmlhYmxlIGZvciB0aGUgYHN0ZXBgIHByb3BlcnR5LCBzdG9yZXMgY3VycmVudCBzdGF0ZSBvZiB0aGUgdHV0b3JpYWwgKHN0ZXAgYDBgIG1lYW5zIHRoYXQgdHV0b3JpYWwgaXMgY2xvc2VkKVxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jdXJyZW50U3RlcCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGpRdWVyeSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHR1dG9yaWFsIHBvcHVwXG4gICAgICAgICAqIEB0eXBlIHtqUXVlcnkuZWxlbWVudH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJHR1dG9yaWFsV2luZG93O1xuICAgICAgICAvKipcbiAgICAgICAgICogalF1ZXJ5IGVsZW1lbnQgZm9yIHRoZSBkeW5hbWljIHBhcnQgb2YgdGhlIHR1dG9yaWFsIHBvcHVwXG4gICAgICAgICAqICh0ZXh0IGFuZCBidXR0b25zIHRoYXQgYXJlIGRlcGVuZGVudCBvbiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgdHV0b3JpYWwpXG4gICAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJHR1dG9yaWFsQ29udGVudDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYXJyYXkgb2YgZnVuY3Rpb25zIHRoYXQgcmVwcmVzZW50IGludGl2aWR1YWwgc3RlcHMgaW4gdGhlIHR1dG9yaWFsXG4gICAgICAgICAqIGJ5IGRlZmF1bHQgcG9wdWxhdGVkIHdpdGggc3RlcCBgMGAgdGhhdCBjbG9zZXMgdGhlIHR1dG9yaWFsXG4gICAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RlcHMgPSBbKCkgPT4geyB0aGlzLmNsb3NlV2luZG93KG9uVHV0b3JpYWxDbG9zZWQpIH1dO1xuXG4gICAgICAgIC8vIHNldCB1cCB0aGUgdHV0b3JpYWxcbiAgICAgICAgdGhpcy5zZXRVcFR1dG9yaWFsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBjdXJyZW50IHN0ZXAgb2YgdGhlIHR1dG9yaWFsLCB0aGlzIG51bWJlciBjb3JyZXNwb25kcyB0byB0aGUgaW5kZXggaW4gdGhlIGB0aGlzLnN0ZXBzYCBhcnJheVxuICAgICAqIHRoYXQgY29udGFpbnMgdGhlIGZ1bmN0aW9uIGZvciB0aGUgbGFzdCBkaXNwbGF5ZWQgc3RlcFxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgc3RlcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFN0ZXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hhbmdlIHRoZSBjdXJyZW50IHN0ZXAgb2YgdGhlIHR1dG9yaWFsLCBgMGAgbWVhbnMgXCJzdG9wIHRoZSB0dXRvcmlhbFwiXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSB2YWx1ZSB0aGUgc3RlcCBvZiB0aGUgdHV0b3JpYWwgdG8gYmUgZGlzcGxheWVkXG4gICAgICovXG4gICAgc2V0IHN0ZXAodmFsdWUpIHtcbiAgICAgICAgLy8gcmVzZXQgYWxsIGhvb2tzXG4gICAgICAgIHRoaXMucmVzZXRIb29rcygpO1xuXG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSB2YWx1ZTtcblxuICAgICAgICBpZih0aGlzLnN0ZXAgPCB0aGlzLnN0ZXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zdGVwc1t0aGlzLnN0ZXBdKCk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuc3RlcCA9PT0gMSlcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlXaW5kb3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RlcCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXNldCBhbGwgdHV0b3JpYWwgaG9va3NcbiAgICAgKi9cbiAgICByZXNldEhvb2tzKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogX3R1dG9yaWFsIGhvb2tfLCBjYWxsZWQgd2hlbiB0aGUgY29udGV4dCBtZW51IGlzIG9wZW5lZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkNvbnRleHRNZW51T3BlbmVkID0gKCkgPT4ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIF90dXRvcmlhbCBob29rXywgY2FsbGVkIHdoZW4gYSBuZXcgZWxlbWVudCBpcyBhZGRlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkVsZW1lbnRBZGRlZCA9ICgpID0+IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBfdHV0b3JpYWwgaG9va18sIGNhbGxlZCB3aGVuIGEgYm94IGlzIG1vdmVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uQm94TW92ZWQgPSAoKSA9PiB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogX3R1dG9yaWFsIGhvb2tfLCBjYWxsZWQgd2hlbiBhIGJveCBpcyByb3RhdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uQm94Um90YXRlZCA9ICgpID0+IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBfdHV0b3JpYWwgaG9va18sIGNhbGxlZCB3aGVuIGFuIG91dHB1dCBib3ggdmFsdWUgaXMgc2V0IHRvIGBvbmBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25PdXRwdXRCb3hUcnVlID0gKCkgPT4ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIF90dXRvcmlhbCBob29rXywgY2FsbGVkIHdoZW4gdGhlIGNhbnZhcyBpcyBtb3ZlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkNhbnZhc01vdmVkID0gKCkgPT4ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIF90dXRvcmlhbCBob29rXywgY2FsbGVkIHdoZW4gdGhlIGNhbnZhcyBpcyB6b29tZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25DYW52YXNab29tZWQgPSAoKSA9PiB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogX3R1dG9yaWFsIGhvb2tfLCBjYWxsZWQgd2hlbiBhIGJveCBpcyByZW1vdmVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uRWxlbWVudFJlbW92ZWQgPSAoKSA9PiB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogX3R1dG9yaWFsIGhvb2tfLCBjYWxsZWQgd2hlbiB1c2VyIGNoYW5nZXMgdGhlIHN0YXRlIG9mIGFuIGlucHV0IGJveFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkNoYW5nZUlucHV0Qm94U3RhdGUgPSAoKSA9PiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgdXAgdGhlIHR1dG9yaWFsOiByZXNldCBhbGwgdHV0b3JpYWwgaG9va3MgYW5kIGRlZmluZSB0aGUgb3JkZXIgb2YgdHV0b3JpYWwgc3RlcHNcbiAgICAgKi9cbiAgICBzZXRVcFR1dG9yaWFsKCkge1xuICAgICAgICB0aGlzLnJlc2V0SG9va3MoKTtcblxuICAgICAgICB0aGlzLnN0ZXBzLnB1c2goXG4gICAgICAgICAgICAoKSA9PiB7IHRoaXMuc3RlcFdlbGNvbWUoKSB9LFxuICAgICAgICAgICAgKCkgPT4geyB0aGlzLnN0ZXBBZGRCb3hlcygpIH0sXG4gICAgICAgICAgICAoKSA9PiB7IHRoaXMuc3RlcE1vdmVDYW52YXMoKSB9LFxuICAgICAgICAgICAgKCkgPT4geyB0aGlzLnN0ZXBab29tQ2FudmFzKCkgfSxcbiAgICAgICAgICAgICgpID0+IHsgdGhpcy5zdGVwTW92ZUJveGVzKCkgfSxcbiAgICAgICAgICAgICgpID0+IHsgdGhpcy5zdGVwV2lyaW5nKCkgfSxcbiAgICAgICAgICAgICgpID0+IHsgdGhpcy5zd2l0Y2hJbnB1dEJveCgpIH0sXG4gICAgICAgICAgICAoKSA9PiB7IHRoaXMuc3RlcFJlbW92ZUJveCgpIH0sXG4gICAgICAgICAgICAoKSA9PiB7IHRoaXMuc3RlcEZpbmlzaCgpIH1cbiAgICAgICAgKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIF90dXRvcmlhbCBzdGVwXzogZGlzcGxheSBjb250ZXh0IG1lbnVcbiAgICAgKi9cbiAgICBzdGVwV2VsY29tZSgpIHtcbiAgICAgICAgdGhpcy53aW5kb3dDb250ZW50KFxuICAgICAgICAgICAgYFdlbGNvbWUgdG8gSHJhZGxhISBUbyBnZXQgc3RhcnRlZCwgY2xpY2sgYW55d2hlcmUgb24gdGhlIGVkaXRpbmcgYXJlYSB3aXRoIHlvdXIgcmlnaHQgbW91c2UgYnV0dG9uLmBcbiAgICAgICAgKVxuXG4gICAgICAgIHRoaXMub25Db250ZXh0TWVudU9wZW5lZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogX3R1dG9yaWFsIHN0ZXBfOiBhZGQgaW5wdXQgYm94LCBvdXRwdXQgYm94IGFuZCBhIE5PVCBnYXRlXG4gICAgICovXG4gICAgc3RlcEFkZEJveGVzKCkge1xuICAgICAgICB0aGlzLndpbmRvd0NvbnRlbnQoXG4gICAgICAgICAgICBgR3JlYXQgam9iISBOb3cgeW91IGtub3csIGhvdyB0byBvcGVuIHRoZSBlZGl0b3IgbWVudS5cbiAgICAgICAgICAgIE5vdyB0cnkgdG8gYWRkIGFuIDxlbT5JbnB1dCBib3g8L2VtPiwgPGVtPk91dHB1dCBib3g8L2VtPiBhbmQgYSA8ZW0+Tk9UIGdhdGU8L2VtPlxuICAgICAgICAgICAgdG8gdGhlIGVkaXRpbmcgYXJlYS5gKVxuXG4gICAgICAgIGxldCBlbGVtZW50c0FkZGVkID0ge1xuICAgICAgICAgICAgaW5wdXRCb3g6IGZhbHNlLFxuICAgICAgICAgICAgb3V0cHV0Qm94OiBmYWxzZSxcbiAgICAgICAgICAgIG5vdEdhdGU6IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uRWxlbWVudEFkZGVkID0gKG5hbWUpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c0FkZGVkLmlucHV0Qm94ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm91dHB1dFwiOlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c0FkZGVkLm91dHB1dEJveCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJub3RcIjpcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNBZGRlZC5ub3RHYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gYWN0aW9uIG9uIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGVsZW1lbnRzQWRkZWQuaW5wdXRCb3ggJiYgZWxlbWVudHNBZGRlZC5vdXRwdXRCb3ggJiYgZWxlbWVudHNBZGRlZC5ub3RHYXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJvY2VlZCB0byB0aGUgbmV4dCBzdGVwIG9mIHRoZSB0dXRvcmlhbFxuICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIF90dXRvcmlhbCBzdGVwXzogbW92ZSB0aGUgY2FudmFzXG4gICAgICovXG4gICAgc3RlcE1vdmVDYW52YXMoKSB7XG4gICAgICAgIHRoaXMud2luZG93Q29udGVudChcbiAgICAgICAgICAgIGBZb3UgY2FuIG1vdmUgdGhlIGVkaXRpbmcgYXJlYSAoc29tZXRpbWVzIGNhbGxlZCBjYW52YXMpIGJ5IGRyYWdnaW5nXG4gICAgICAgICAgICB3aXRoIHRoZSBtaWRkbGUgbW91c2UgYnV0dG9uIG9yIGJ5IGhvbGRpbmcgdGhlIDxjb2RlPkN0cmw8L2NvZGU+IGtleVxuICAgICAgICAgICAgYW5kIGRyYWdnaW5nIHdpdGggdGhlIGxlZnQgbW91c2UgYnV0dG9uLiBDaGVjayBpdCBvdXQuYClcblxuICAgICAgICB0aGlzLm9uQ2FudmFzTW92ZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIF90dXRvcmlhbCBzdGVwXzogem9vbSB0aGUgY2FudmFzXG4gICAgICovXG4gICAgc3RlcFpvb21DYW52YXMoKSB7XG4gICAgICAgIHRoaXMud2luZG93Q29udGVudChcbiAgICAgICAgICAgIGBZb3UgY2FuIGFsc28gem9vbSBpbiBhbmQgb3V0IHVzaW5nIHRoZSBtb3VzZSB3aGVlbFxuICAgICAgICAgICAgb3Igd2l0aCB0aGUgPGNvZGU+KzwvY29kZT4mbmJzcDthbmQgPGNvZGU+4oiSPC9jb2RlPiZuYnNwO2tleXMuYFxuICAgICAgICApXG5cbiAgICAgICAgdGhpcy5vbkNhbnZhc1pvb21lZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogX3R1dG9yaWFsIHN0ZXBfOiBtb3ZlIHRoZSBib3hlc1xuICAgICAqL1xuICAgIHN0ZXBNb3ZlQm94ZXMoKSB7XG4gICAgICAgIHRoaXMud2luZG93Q29udGVudChgWW91IGNhbiBtb3ZlIHRoZSBlbGVtZW50cyBvbiB0aGUgZWRpdGluZyBjYW52YXMgYnkgZHJhZ2dpbmcgdGhlbVxuICAgICAgICAgICAgdXNpbmcgdGhlIGxlZnQgbW91c2UgYnV0dG9uLiBZb3UgY2FuIGFsc28gcm90YXRlIHRoZW0gdXNpbmcgbWlkZGxlIGNsaWNrLiBUcnkgaXQgb3V0LmApXG5cbiAgICAgICAgbGV0IGJveE1vdmVkID0gZmFsc2U7XG4gICAgICAgIGxldCBib3hSb3RhdGVkID0gZmFsc2U7XG5cbiAgICAgICAgbGV0IG1vdmVSb3RhdGVDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmKGJveE1vdmVkICYmIGJveFJvdGF0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25Cb3hNb3ZlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGJveE1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG1vdmVSb3RhdGVDYWxsYmFjaygpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uQm94Um90YXRlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGJveFJvdGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbW92ZVJvdGF0ZUNhbGxiYWNrKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIF90dXRvcmlhbCBzdGVwXzogY3JlYXRlIGFuIGludmVydG9yXG4gICAgICovXG4gICAgc3RlcFdpcmluZygpIHtcbiAgICAgICAgdGhpcy53aW5kb3dDb250ZW50KGBFc3NlbnRpYWwgcGFydCBvZiBsb2dpYyBuZXR3b3JrcyBpcyB0aGUgd2lyaW5nLiBDcmVhdGUgYSB2ZXJ5IHNpbXBsZVxuICAgICAgICAgICAgaW52ZXJ0ZXIgYnkgY29ubmVjdGluZyB0aGUgPGVtPklucHV0IGJveDwvZW0+IHRvIHRoZSBpbnB1dCBvZiB0aGUgPGVtPk5PVCBnYXRlPC9lbT5cbiAgICAgICAgICAgIGFuZCB0aGUgb3V0cHV0IG9mIHRoZSA8ZW0+Tk9UIGdhdGU8L2VtPiB0byB0aGUgaW5wdXQgb2YgdGhlIDxlbT5PdXRwdXQgYm94PC9lbT4uYCxcbiAgICAgICAgICAgIGBUbyBjb25uZWN0IHR3byBlbGVtbnRzLCBzaW1wbHkgY2xpY2sgb24gYSBjb25uZWN0b3Igb2YgdGhlIGZpcnN0IGVsZW1lbnQsXG4gICAgICAgICAgICB0aGFuIGNsaWNrIG9uIGEgY29uZWN0b3Igb2YgdGhlIHNlY29uZCBlbGVtZW50LmApXG5cbiAgICAgICAgdGhpcy5vbk91dHB1dEJveFRydWUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBfdHV0b3JpYWwgc3RlcF86IGNoYW5nZSB0aGUgc3RhdGUgb2YgYW4gaW5wdXQgYm94XG4gICAgICovXG4gICAgc3dpdGNoSW5wdXRCb3goKSB7XG4gICAgICAgIHRoaXMud2luZG93Q29udGVudChgXG4gICAgICAgICAgICBUaGUgaW5wdXQgYm94ZXMgY2FuIGJlIGluIHR3byBzdGF0ZXM6IDxlbT5PTjwvZW0+IGFuZCA8ZW0+T0ZGPC9lbT4sIHNpZ25hbGxlZFxuICAgICAgICAgICAgYnkgdGhlIGdyZWVuIGFuZCByZWQgY29sb3JzIHJlc3BlY3RpdmVseS4gWW91IGNhbiBsZWZ0IGNsaWNrIG9uIGFuIElucHV0IGJveCB0b1xuICAgICAgICAgICAgc3dpdGNoIGl0cyBzdGF0ZS4gVHJ5IGl0IG91dCFcbiAgICAgICAgYClcblxuICAgICAgICB0aGlzLm9uQ2hhbmdlSW5wdXRCb3hTdGF0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIF90dXRvcmlhbCBzdGVwXzogcmVtb3ZlIGEgYm94XG4gICAgICovXG4gICAgc3RlcFJlbW92ZUJveCgpIHtcbiAgICAgICAgdGhpcy53aW5kb3dDb250ZW50KFxuICAgICAgICAgICAgYFdoZW4geW91IHJpZ2h0IGNsaWNrIG9uIGFuIGVsZW1lbnQsIHlvdSBjYW4gZmluZCBhIG5ldyBpdGVtIGluIHRoZSBtZW51LFxuICAgICAgICAgICAgdGhhdCBhbGxvd3MgeW91IHRvIHJlbW92ZSB0aGUgZWxlbWVudC4gVGhpcyB3b3JrcyBmb3Igd2lyZXMgYXMgd2VsbCBhcyBmb3IgZ2F0ZXMgYW5kIG90aGVyIHR5cGVzIG9mIGJveGVzLlxuICAgICAgICAgICAgVHJ5IHRvIHJlbW92ZSBhbiBlbGVtZW50IWBcbiAgICAgICAgKVxuXG4gICAgICAgIHRoaXMub25FbGVtZW50UmVtb3ZlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogX3R1dG9yaWFsIHN0ZXBfOiBhc2sgdGhlIHVzZXIgaWYgdGhleSB3YW50IHRvIGNsZWFuIHRoZSBjYW52YXMgYmVmb3JlIGNsb3NpbmcgdGhlIHR1dG9yaWFsXG4gICAgICovXG4gICAgc3RlcEZpbmlzaCgpIHtcbiAgICAgICAgdGhpcy53aW5kb3dDb250ZW50KGBZb3UncmUgYWxsIHNldCwgZW5qb3kgeW91ciBzdGF5IWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBgRG8geW91IHdpc2ggdG8gc3RhcnQgd2l0aCBlbXB0eSBjYW52YXM/YClcbiAgICAgICAgdGhpcy53aW5kb3dDaG9pY2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGV4dDogJ3llcywgY2xlYW4gdGhlIGNhbnZhcycsXG4gICAgICAgICAgICAgICAgZnVuYzogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFNWRy5jbGVhbkNhbnZhcygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdubywga2VlcCB0aGUgY2FudmFzIGFzIGl0IGlzJyxcbiAgICAgICAgICAgICAgICBmdW5jOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGRpc3BsYXkgdGhlIHR1dG9yaWFsIHdpbmRvd1xuICAgICAqL1xuICAgIGRpc3BsYXlXaW5kb3coKSB7XG4gICAgICAgIHRoaXMucGFyZW50U1ZHLiRzdmcuYWZ0ZXIodGhpcy4kdHV0b3JpYWxXaW5kb3cpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2xvc2UgdGhlIHR1dG9yaWFsIHdpbmRvd1xuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbb25UdXRvcmlhbENsb3NlZF0gY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdHV0b3JpYWwgaXMgY2xvc2VkXG4gICAgICovXG4gICAgY2xvc2VXaW5kb3cob25UdXRvcmlhbENsb3NlZCkge1xuICAgICAgICB0aGlzLiR0dXRvcmlhbFdpbmRvdy5yZW1vdmUoKTtcblxuICAgICAgICBpZihvblR1dG9yaWFsQ2xvc2VkIT09dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvblR1dG9yaWFsQ2xvc2VkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgdGhlIHR1dG9yaWFsIHdpbmRvdyB0ZXh0IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0gIHsuLi5zdHJpbmd9IHRleHQgZWFjaCBzdHJpbmcgaXMgYSBzZXBhcmF0ZSBwYXJhZ3JhcGhcbiAgICAgKi9cbiAgICB3aW5kb3dDb250ZW50KC4uLnRleHQpIHtcbiAgICAgICAgaWYoIXRoaXMuJHR1dG9yaWFsV2luZG93KSB7XG4gICAgICAgICAgICB0aGlzLiR0dXRvcmlhbFdpbmRvdyA9ICQoXCI8ZGl2PlwiKS5hdHRyKFwiaWRcIiwgXCJ0dXRvcmlhbFwiKTtcblxuICAgICAgICAgICAgdGhpcy4kdG9wQnV0dG9uc0xlZnQgPSAkKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJsZWZ0XCIpO1xuXG4gICAgICAgICAgICB0aGlzLiR0dXRvcmlhbFdpbmRvdy5hcHBlbmQoXG4gICAgICAgICAgICAgICAgJChcIjxkaXY+XCIpLmFkZENsYXNzKFwidG9wQnV0dG9uc1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMuJHRvcEJ1dHRvbnNMZWZ0KVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCAvLyB0aGUgLnJpZ2h0IGRpdiBjYW4gYmUgYWRkZWQgaGVyZSBiZWNhdXNlIGl0IGlzIG5vdCBtb2RpZmllZCBkdXJpbmcgdGhlIHR1dG9yaWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJyaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiPGE+XCIpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBcIiNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiY2xvc2UgdHV0b3JpYWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmFkZENsYXNzKFwiYnV0dG9uIGNsb3NlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICB0aGlzLiR0dXRvcmlhbFdpbmRvdy5hcHBlbmQodGhpcy4kdG9wQnV0dG9ucyk7XG5cbiAgICAgICAgICAgIHRoaXMuJHR1dG9yaWFsQ29udGVudCA9ICQoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcImNvbnRlbnRcIik7XG4gICAgICAgICAgICB0aGlzLiR0dXRvcmlhbFdpbmRvdy5hcHBlbmQodGhpcy4kdHV0b3JpYWxDb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJHRvcEJ1dHRvbnNMZWZ0Lmh0bWwoXCJcIik7XG5cbiAgICAgICAgbGV0ICRwcmV2ID0gJChcIjxhPlwiKS5hdHRyKHtcbiAgICAgICAgICAgIGhyZWY6IFwiI1wiLFxuICAgICAgICAgICAgdGl0bGU6IFwiZ28gYmFja1wiXG4gICAgICAgIH0pLmFkZENsYXNzKFwiYnV0dG9uIHByZXZcIik7XG5cbiAgICAgICAgaWYodGhpcy5zdGVwPjEpIHtcbiAgICAgICAgICAgICRwcmV2LmNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXYoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHByZXYuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCAkbmV4dCA9ICQoXCI8YT5cIikuYXR0cih7XG4gICAgICAgICAgICBocmVmOiBcIiNcIixcbiAgICAgICAgICAgIHRpdGxlOiBcImdvIGZvcndhcmRcIlxuICAgICAgICB9KS5hZGRDbGFzcyhcImJ1dHRvbiBuZXh0XCIpO1xuXG4gICAgICAgIGlmKHRoaXMuc3RlcCA8IHRoaXMuc3RlcHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgJG5leHQuY2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkbmV4dC5hZGRDbGFzcyhcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kdG9wQnV0dG9uc0xlZnQuYXBwZW5kKCRwcmV2KS5hcHBlbmQoJG5leHQpO1xuXG4gICAgICAgIC8vIHNldCB0aGUgdGV4dCBjb250ZW50XG5cbiAgICAgICAgdGhpcy4kdHV0b3JpYWxDb250ZW50Lmh0bWwoXCJcIik7XG4gICAgICAgIGZvciAoY29uc3QgcGFyYWdyYXBoIG9mIHRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuJHR1dG9yaWFsQ29udGVudC5hcHBlbmQoXG4gICAgICAgICAgICAgICAgJChcIjxwPlwiKS5odG1sKHBhcmFncmFwaClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAvLyByZW5kZXIgdGhlIGJ1dHRvbnMgaW4gZWFjaCBzdGVwICh0byByZW1vdmUgZm9jdXMgYW5kIHRvXG4gICAgICAgIC8vIC8vIGVuc3VyZSB0aGVyZSBpcyBubyBcImJhY2tcIiBidXR0b24gb24gdGhlIGZpcnN0IHN0ZXAgb3IgXCJuZXh0XCIgYnV0dG9uIG9uIHRoZSBsYXN0IHN0ZXApXG4gICAgICAgIC8vIGlmKHRoaXMuJHByZXZOZXh0KSB7XG4gICAgICAgIC8vICAgICB0aGlzLiRwcmV2TmV4dC5yZW1vdmUoKTtcbiAgICAgICAgLy8gfVxuICAgICAgICAvL1xuICAgICAgICAvLyB0aGlzLiRwcmV2TmV4dCA9ICQoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcImJvdHRvbUJ1dHRvbnNcIik7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGlmKHRoaXMuc3RlcD4xKSB7XG4gICAgICAgIC8vICAgICB0aGlzLiRwcmV2TmV4dC5hcHBlbmQoXG4gICAgICAgIC8vICAgICAgICAgJChcIjxhPlwiKS5hdHRyKFwiaHJlZlwiLCBcIiNcIikuYWRkQ2xhc3MoXCJidXR0b24gcHJldlwiKVxuICAgICAgICAvLyAgICAgICAgIC8vIC50ZXh0KFwiYmFja1wiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGljaygoKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuc3RlcC0tO1xuICAgICAgICAvLyAgICAgICAgIH0pXG4gICAgICAgIC8vICAgICApXG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gaWYodGhpcy5zdGVwIDwgdGhpcy5zdGVwcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vICAgICB0aGlzLiRwcmV2TmV4dC5hcHBlbmQoXG4gICAgICAgIC8vICAgICAgICAgJChcIjxhPlwiKS5hdHRyKFwiaHJlZlwiLCBcIiNcIikuYWRkQ2xhc3MoXCJidXR0b24gbmV4dFwiKVxuICAgICAgICAvLyAgICAgICAgIC8vIC50ZXh0KFwibmV4dFwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGljaygoKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAvLyAgICAgICAgIH0pXG4gICAgICAgIC8vICAgICApXG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gdGhpcy4kdHV0b3JpYWxXaW5kb3cuYXBwZW5kKHRoaXMuJHByZXZOZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGQgYnV0dG9ucyB3aXRoIGNob2ljZXMgdG8gdGhlIHR1dG9yaWFsIHdpbmRvd1xuICAgICAqIEBwYXJhbSAgey4uLm9iamVjdH0gY2hvaWNlcyBlYWNoIGNob2ljZSBpcyBhbiBvYmplY3QgaW4gd2l0aCBhIGBzdHJpbmdgIHByb3BlcnR5IF90ZXh0XyBhbmQgYSBgZnVuY3Rpb25gIHByb3BlcnR5IF9mdW5jX1xuICAgICAqL1xuICAgIHdpbmRvd0Nob2ljZSguLi5jaG9pY2VzKSB7XG4gICAgICAgIGxldCAkY2hvaWNlcyA9ICQoXCI8b2w+XCIpLmFkZENsYXNzKFwiY2hvaWNlc1wiKTtcbiAgICAgICAgZm9yIChjb25zdCBjaG9pY2Ugb2YgY2hvaWNlcykge1xuICAgICAgICAgICAgJGNob2ljZXMuYXBwZW5kKFxuICAgICAgICAgICAgICAgICQoXCI8bGk+XCIpLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgJChcIjxhPlwiKS5hdHRyKFwiaHJlZlwiLCBcIiNcIikuY2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hvaWNlLmZ1bmMoKVxuICAgICAgICAgICAgICAgICAgICB9KS5odG1sKGNob2ljZS50ZXh0KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiR0dXRvcmlhbENvbnRlbnQuYXBwZW5kKCRjaG9pY2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzdGFydCB0aGUgdHV0b3JpYWxcbiAgICAgKi9cbiAgICBzdGFydCgpIHsgdGhpcy5zdGVwID0gMTsgfVxuXG4gICAgLyoqXG4gICAgICogZ28gdG8gdGhlIG5leHQgc3RlcCBvZiB0aGUgdHV0b3JpYWxcbiAgICAgKi9cbiAgICBuZXh0KCkgeyB0aGlzLnN0ZXArKzsgfVxuXG4gICAgLyoqXG4gICAgICogZ28gdG8gdGhlIHByZXZpb3VzIHN0ZXAgb2YgdGhlIHR1dG9yaWFsXG4gICAgICovXG4gICAgcHJldigpIHsgdGhpcy5zdGVwLS07IH1cblxuICAgIC8qKlxuICAgICAqIHN0b3AgdGhlIHR1dG9yaWFsXG4gICAgICovXG4gICAgc3RvcCgpIHsgdGhpcy5zdGVwID0gMCB9XG59XG4iLCIvKiogQG1vZHVsZSBWaWV3Qm94ICovXG4vKipcbiAqIFZpZXdCb3ggcHJvdmlkZXMgYW4gYXBpIGZvciBvcHJlcmF0aW5nIHdpdGggdGhlIHZpZXdCb3ggYXJndW1lbnQgb2YgdGhlIDxzdmc+IERPTSBlbGVtZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3Qm94IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHZpZXdCb3hcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCAgIGRpc3RhbmNlIG9mIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHZpZXdib3ggZnJvbSBkb2N1bWVudCdzIHkgYXhpcyBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCAgICBkaXN0YW5jZSBvZiB0aGUgdG9wIGVkZ2Ugb2YgdGhlIHZpZXdib3ggZnJvbSB0aGUgZG9jdW1lbnQncyB4IGF4aXMgaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAgd2lkdGggb2YgdGhlIHZpZXdib3ggaW4gU1ZHIHBpeGVsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaGVpZ2h0IG9mIHRoZSB2aWV3Ym94IGluIFNWRyBwaXhlbHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZpZXdCb3ggYXR0cmlidXRlcyBiZWZvcmUgYXBwbHlpbmcgem9vbSBhbmQgc2hpZnRcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVhbCA9IHsgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0IH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1heGltdW0gYW1vdW50IG9mIHpvb20gb24gdGhlIHZpZXdib3hcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWF4Wm9vbSA9IDg7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbWluaW11bSBhbW91bnQgb2Ygem9vbSBvbiB0aGUgdmlld2JveFxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5taW5ab29tID0gMC4xO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbW91bnQgb2Ygem9vbSBvbiB0aGUgdmlld2JveCwgYWx3YXlzIGJldHdlZW4gdGhpcy5taW5ab29tIGFuZCB0aGlzLm1heFpvb21cbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVhbFpvb20gPSAxXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFtb3VudCBvZiBob3Jpem9udGFsIHNoaWZ0IG9mIHRoZSBkb2N1bWVudFxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZWZ0U2hpZnQgPSAwXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbW91bnQgb2YgdmVydGljYWwgc2hpZnQgb2YgdGhlIGRvY3VtZW50XG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRvcFNoaWZ0ID0gMFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgZGltZW5zaW9ucyBvZiB0aGUgdmlld2JveCAodXNlZCBvbiB3aW5kb3cgcmVzaXplKVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gd2lkdGggIG5ldyB3aWR0aCBvZiB0aGUgdmlld2JveCBpbiBTVkcgcGl4ZWxzXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBoZWlnaHQgbmV3IGhlaWdodCBvZiB0aGUgdmlld2JveCBpbiBTVkcgcGl4ZWxzXG4gICAgICovXG4gICAgbmV3RGltZW5zaW9ucyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIC8vIGtlZXAgdGhlIHZpZXdib3ggY2VudGVyZWRcbiAgICAgICAgdGhpcy5yZWFsLmxlZnQgKz0gKHRoaXMucmVhbC53aWR0aCAtIHdpZHRoKS8yXG4gICAgICAgIHRoaXMucmVhbC50b3AgKz0gKHRoaXMucmVhbC5oZWlnaHQgLSBoZWlnaHQpLzJcblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGRpbWVuc2lvbnNcbiAgICAgICAgdGhpcy5yZWFsLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMucmVhbC5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBhbW91bnQgb2Ygem9vbSBvbiB0aGUgdmlld2JveFxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgem9vbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbFpvb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IHRoZSBhbW91bnQgb2Ygem9vbSBvbiB0aGUgdmlld2JveFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSB0aGUgbmV3IGFtb3VudCBvZiB6b29tXG4gICAgICovXG4gICAgc2V0IHpvb20odmFsdWUpIHtcbiAgICAgICAgLy8gZml0IHRoaXMucmVhbFpvb20gdG8gZml0IGJldHdlZW4gdGhpcy5taW5ab29tIGFuZCB0aGlzLm1heFpvb21cbiAgICAgICAgdGhpcy5yZWFsWm9vbSA9IE1hdGgubWF4KE1hdGgubWluKHZhbHVlLCB0aGlzLm1heFpvb20pLCB0aGlzLm1pblpvb20pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgd2lkdGggb2YgdGhlIHZpZXdib3ggd2l0aCB0aGUgY3VycmVudCB6b29tIGFwcGxpZWRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBmaW5hbCB3aWR0aCBvZiB0aGUgdmlld2JveFxuICAgICAqL1xuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbC53aWR0aCAvIHRoaXMuem9vbVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgaGVpZ2h0IG9mIHRoZSB2aWV3Ym94IHdpdGggdGhlIGN1cnJlbnQgem9vbSBhcHBsaWVkXG4gICAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgZmluYWwgaGVpZ2h0IG9mIHRoZSB2aWV3Ym94XG4gICAgICovXG4gICAgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbC5oZWlnaHQgLyB0aGlzLnpvb21cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIGhvcml6b250YWwgZGlzdGFuY2UgZnJvbSB0aGUgeSBheGlzIG9mIHRoZSBkb2N1bWVudCB3aXRoIHpvb20gYW5kIHNoaWZ0IHZhbHVlIGFwcGxpZWRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IGxlZnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWwubGVmdCAtICh0aGlzLmxlZnRTaGlmdCAvIHRoaXMuem9vbSkgKyAoKHRoaXMucmVhbC53aWR0aCAtIHRoaXMud2lkdGgpIC8gMilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHZlcnRpY2FsIGRpc3RhbmNlIGZyb20gdGhlIHggYXhpcyBvZiB0aGUgZG9jdW1lbnQgd2l0aCB6b29tIGFuZCBzaGlmdCB2YWx1ZSBhcHBsaWVkXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCB0b3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWwudG9wIC0gKHRoaXMudG9wU2hpZnQgLyB0aGlzLnpvb20pICsgKCh0aGlzLnJlYWwuaGVpZ2h0IC0gdGhpcy5oZWlnaHQpIC8gMilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIGNvbXB1dGVkIHZpZXdib3ggdmFsdWVzIGFzIGEgc3RyaW5nIGluIHRoZSBjb3JyZWN0IGZvcm1hdCB0aGF0IGNhbiBiZSB1c2VkIGluIHRoZSB2aWV3Qm94IGF0dHJpYnV0ZSBvZiB0aGUgU1ZHIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHN0cmluZyBpbiBmb3JtYXQgXCJsZWZ0IHRvcCB3aWR0aCBoZWlnaHRcIlxuICAgICAqL1xuICAgIGdldCBzdHIoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmxlZnR9ICR7dGhpcy50b3B9ICR7dGhpcy53aWR0aH0gJHt0aGlzLmhlaWdodH1gXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdHJhbnNmb3JtIGhvcml6b250YWwgdW5pdHMgdG8gdGhlIHNjYWxlIGFuZCBzaGlmdCBvZiB0aGUgZWRpdG9yXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSB4IG9yaWdpbmFsIGhvcml6b250YWwgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9ICAgdHJhbnNmb3JtZWQgaG9yaXpvbnRhbCB2YWx1ZVxuICAgICAqL1xuICAgIHRyYW5zZm9ybVgoeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0ICsgKHggLyB0aGlzLnpvb20pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdHJhbnNmb3JtIHZlcnRpY2FsIHVuaXRzIHRvIHRoZSBzY2FsZSBhbmQgc2hpZnQgb2YgdGhlIGVkaXRvclxuICAgICAqIEBwYXJhbSAge251bWJlcn0geSBvcmlnaW5hbCB2ZXJ0aWNhbCB2YWx1ZVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gICB0cmFuc2Zvcm1lZCB2ZXJ0aWNhbCB2YWx1ZVxuICAgICAqL1xuICAgIHRyYW5zZm9ybVkoeSkge1xuICAgICAgICByZXR1cm4gdGhpcy50b3AgKyAoeSAvIHRoaXMuem9vbSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cmFuc2Zvcm0gcGFnZVggYW5kIHBhZ2VZIHBhcmFtZXRlcnMgb2YgdGhlIGpxdWVyeSBldmVudCB0byBtYXRjaCB0aGUgem9vbSBhbmQgc2hpZnQgb2YgdGhlIHZpZXdib3hcbiAgICAgKiBAcGFyYW0gIHtqcXVlcnkuTW91c2VFdmVudH0gZXZlbnQgb3JpZ2luYWwgZXZlbnRcbiAgICAgKiBAcmV0dXJuIHtqcXVlcnkuTW91c2VFdmVudH0gICAgICAgdGhlIHNhbWUgZXZlbnQgYnV0IHdpdGggdHJhbnNmb3JtZWQgcGFnZVggYW5kIHBhZ2VZIG1lbWJlcnNcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1FdmVudChldmVudCkge1xuICAgICAgICBldmVudC5wYWdlWCA9IHRoaXMudHJhbnNmb3JtWChldmVudC5wYWdlWClcbiAgICAgICAgZXZlbnQucGFnZVkgPSB0aGlzLnRyYW5zZm9ybVkoZXZlbnQucGFnZVkpXG5cbiAgICAgICAgcmV0dXJuIGV2ZW50XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAbW9kdWxlIExpYnJhcnlcbiAqL1xuXG5jb25zdCBsaWJyYXJ5RGlyID0gJy4vbGlicmFyeS8nXG5cbi8qKlxuICogZ2V0IGxpc3Qgb2YgbmV0d29ya3MgZnJvbSB0aGUgbGlicmFyeVxuICogQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSwgdGhlIHJlc29sdXRpb24gaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYSBsaXN0IG9mIGxpYnJhcmllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlicmFyeSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBsaWJyYXJ5RmlsZSA9IGxpYnJhcnlEaXIgKyAnbmV0d29ya0xpc3QuanNvbic7XG5cbiAgICAgICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodGhpcy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZS5uZXR3b3Jrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihbXCJlcnJvclwiLCBcImFib3J0XCJdLCAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoXCJGYWlsZWQgbG9hZGluZyBsaWJyYXJpZXMuXCIpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgbGlicmFyeUZpbGUsIHRydWUpO1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgICAgcmVxdWVzdC5zZW5kKCk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogZ2V0IGEgbmV0d29yayBmcm9tIHRoZSBsaWJyYXJ5LCBzcGVjaWZpZWQgYnkgZmlsZW5hbWVcbiAqIEBwYXJhbSAge3N0cmluZ30gbmV0d29ya05hbWUgbGlicmFyeSBmaWxlIG5hbWUgd2l0aG91dCB0aGUgZXh0ZW5zaW9uXG4gKiBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlLCB0aGUgcmVzb2x1dGlvbiBpcyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbGlicmFyeSBpbXBvcnQgZGF0YVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV0d29ya0Zyb21MaWJyYXJ5KG5ldHdvcmtOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodGhpcy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihbXCJlcnJvclwiLCBcImFib3J0XCJdLCAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoYEZhaWxlZCBsb2FkaW5nIGxpYnJhcnkgJHtuZXR3b3JrTmFtZX0uYClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVxdWVzdC5vcGVuKCdHRVQnLCBsaWJyYXJ5RGlyICsgbmV0d29ya05hbWUgKyAnLmpzb24nLCB0cnVlKTtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuICAgIH0pO1xufVxuIl19"}