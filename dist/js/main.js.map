{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/json-stringify-pretty-compact/index.js","node_modules/libstl/Datastructures/DoublyLinkedList.js","node_modules/libstl/Datastructures/Heap.js","node_modules/libstl/Datastructures/MaxHeap.js","node_modules/libstl/Datastructures/MinHeap.js","node_modules/libstl/Datastructures/PriorityQueue.js","node_modules/libstl/Datastructures/Queue.js","node_modules/libstl/Datastructures/Stack.js","node_modules/libstl/node-module.js","src/es6/main.js","src/es6/modules/App.js","src/es6/modules/Logic.js","src/es6/modules/Simulation.js","src/es6/modules/editorElements.js","src/es6/modules/editorElements/Blackbox.js","src/es6/modules/editorElements/Box.js","src/es6/modules/editorElements/Connector.js","src/es6/modules/editorElements/Gate.js","src/es6/modules/editorElements/HelperWire.js","src/es6/modules/editorElements/InputBox.js","src/es6/modules/editorElements/InputConnector.js","src/es6/modules/editorElements/NetworkElement.js","src/es6/modules/editorElements/OutputBox.js","src/es6/modules/editorElements/OutputConnector.js","src/es6/modules/editorElements/Transform.js","src/es6/modules/editorElements/Wire.js","src/es6/modules/editorElements/stateClasses.js","src/es6/modules/findPath.js","src/es6/modules/other/helperFunctions.js","src/es6/modules/other/id.js","src/es6/modules/other/mapWithDefaultValue.js","src/es6/modules/svgObjects.js","src/es6/modules/svgObjects/Group.js","src/es6/modules/svgObjects/MultiLineText.js","src/es6/modules/svgObjects/Pattern.js","src/es6/modules/svgObjects/PolyLine.js","src/es6/modules/svgObjects/PolyLinePoint.js","src/es6/modules/svgObjects/PolyLinePoints.js","src/es6/modules/svgObjects/Rectangle.js","src/es6/modules/svgObjects/SvgElement.js","src/es6/modules/svgObjects/SvgImage.js","src/es6/modules/svgObjects/Tag.js","src/es6/modules/svgObjects/Text.js","src/es6/modules/ui/ContextMenu.js","src/es6/modules/ui/FloatingMenu.js","src/es6/modules/ui/Messages.js","src/es6/modules/ui/Tutorial.js","src/es6/modules/ui/ViewBox.js","src/es6/modules/ui/networkLibrary.js"],"names":[],"mappingszvUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;;AAEA;;;;;;AAEA;;;AAGA,EAAE,YAAM;AACJ,MAAI,aAAJ,CAAQ,SAAR,EAAmB,EAAnB;AACH,CAFD;;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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function stringify (obj, options) {\n  options = options || {}\n  var indent = JSON.stringify([1], null, get(options, 'indent', 2)).slice(2, -3)\n  var addMargin = get(options, 'margins', false)\n  var maxLength = (indent === '' ? Infinity : get(options, 'maxLength', 80))\n\n  return (function _stringify (obj, currentIndent, reserved) {\n    if (obj && typeof obj.toJSON === 'function') {\n      obj = obj.toJSON()\n    }\n\n    var string = JSON.stringify(obj)\n\n    if (string === undefined) {\n      return string\n    }\n\n    var length = maxLength - currentIndent.length - reserved\n\n    if (string.length <= length) {\n      var prettified = prettify(string, addMargin)\n      if (prettified.length <= length) {\n        return prettified\n      }\n    }\n\n    if (typeof obj === 'object' && obj !== null) {\n      var nextIndent = currentIndent + indent\n      var items = []\n      var delimiters\n      var comma = function (array, index) {\n        return (index === array.length - 1 ? 0 : 1)\n      }\n\n      if (Array.isArray(obj)) {\n        for (var index = 0; index < obj.length; index++) {\n          items.push(\n            _stringify(obj[index], nextIndent, comma(obj, index)) || 'null'\n          )\n        }\n        delimiters = '[]'\n      } else {\n        Object.keys(obj).forEach(function (key, index, array) {\n          var keyPart = JSON.stringify(key) + ': '\n          var value = _stringify(obj[key], nextIndent,\n                                 keyPart.length + comma(array, index))\n          if (value !== undefined) {\n            items.push(keyPart + value)\n          }\n        })\n        delimiters = '{}'\n      }\n\n      if (items.length > 0) {\n        return [\n          delimiters[0],\n          indent + items.join(',\\n' + nextIndent),\n          delimiters[1]\n        ].join('\\n' + currentIndent)\n      }\n    }\n\n    return string\n  }(obj, '', 0))\n}\n\n// Note: This regex matches even invalid JSON strings, but since we’re\n// working on the output of `JSON.stringify` we know that only valid strings\n// are present (unless the user supplied a weird `options.indent` but in\n// that case we don’t care since the output would be invalid anyway).\nvar stringOrChar = /(\"(?:[^\\\\\"]|\\\\.)*\")|[:,\\][}{]/g\n\nfunction prettify (string, addMargin) {\n  var m = addMargin ? ' ' : ''\n  var tokens = {\n    '{': '{' + m,\n    '[': '[' + m,\n    '}': m + '}',\n    ']': m + ']',\n    ',': ', ',\n    ':': ': '\n  }\n  return string.replace(stringOrChar, function (match, string) {\n    return string ? match : tokens[match]\n  })\n}\n\nfunction get (options, name, defaultValue) {\n  return (name in options ? options[name] : defaultValue)\n}\n\nmodule.exports = stringify\n","/**\n * The DoublyLinkedList class provides the main functionality of a doubly linked list.\n *\n * @class DoublyLinkedList\n */\nvar DoublyLinkedList = (function () {\n    function DoublyLinkedList() {\n        /**\n         * Count of elements in list\n         *\n         * @property _length\n         * @type number\n         * @private\n         */\n        this._length = 0;\n        /**\n         * Iteration pointer\n         *\n         * @property _key\n         * @type number\n         * @private\n         */\n        this._key = 0;\n        /**\n         * Reference to head(first) element in list\n         *\n         * @property _head\n         * @type DoublyLinkedListNode\n         * @private\n         */\n        this._head = null;\n        /**\n         * Reference to tail(last) element in list\n         *\n         * @property _tail\n         * @type DoublyLinkedListNode\n         * @private\n         */\n        this._tail = null;\n        /**\n         * Reference to iterated element in list\n         *\n         * @property _current\n         * @type DoublyLinkedListNode\n         * @private\n         */\n        this._current = null;\n    }\n    /**\n     * Insert a new value at the specified index\n     *\n     * @method add\n     * @param index The index where the new value is to be inserted.\n     * @param value The new value for the index.\n     * @return void\n     */\n    DoublyLinkedList.prototype.add = function (index, value) {\n        if (index < 0 || index >= this._length) {\n            throw new Error(\"Out of bounds\");\n        }\n        var i = 0;\n        var current = this._head;\n        while (i < index) {\n            current = current.next;\n            i++;\n        }\n        current.value = value;\n    };\n    /**\n     * Pops a node from the end of the doubly linked list\n     *\n     * @method pop\n     * @return any  The value of the popped node.\n     */\n    DoublyLinkedList.prototype.pop = function () {\n        if (this._length === 0) {\n            throw new Error(\"Can't pop from an empty data structure\");\n        }\n        var value = this._tail.value;\n        this._tail = this._tail.prev;\n        if (this._tail) {\n            delete this._tail.next;\n            this._tail.next = null;\n        }\n        this._length--;\n        if (this._length === 0) {\n            delete this._head;\n            this._head = null;\n        }\n        return value;\n    };\n    /**\n     * Shifts a node from the beginning of the doubly linked list\n     *\n     * @method shift\n     * @return any  The value of the shifted node.\n     */\n    DoublyLinkedList.prototype.shift = function () {\n        if (this._length === 0) {\n            throw new Error(\"Can't shift from an empty data structure\");\n        }\n        var value = this._head.value;\n        this._head = this._head.next;\n        if (this._head) {\n            delete this._head.prev;\n            this._head.prev = null;\n        }\n        this._length--;\n        return value;\n    };\n    /**\n     * Pushes an element at the end of the doubly linked list\n     *\n     * @method push\n     * @param value The value to push.\n     * @return void\n     */\n    DoublyLinkedList.prototype.push = function (value) {\n        // allocate new node\n        var node = {\n            value: value,\n            prev: this._tail,\n            next: null\n        };\n        if (this._length === 0) {\n            this._head = this._tail = node;\n        }\n        else {\n            this._tail.next = node;\n            this._tail = this._tail.next;\n        }\n        this._length++;\n    };\n    /**\n     * Prepends the doubly linked list with an element\n     *\n     * @method unshift\n     * @param value The value to unshift.\n     * @return void\n     */\n    DoublyLinkedList.prototype.unshift = function (value) {\n        // allocate new node\n        var node = {\n            value: value,\n            prev: null,\n            next: this._head\n        };\n        if (this._length === 0) {\n            this._head = this._tail = node;\n        }\n        else {\n            this._head.prev = node;\n            this._head = this._head.prev;\n        }\n        this._length++;\n    };\n    /**\n     * Peeks at the node from the end of the doubly linked list\n     *\n     * @method top\n     * @return any  The value of the last node.\n     */\n    DoublyLinkedList.prototype.top = function () {\n        if (this._tail)\n            return this._tail.value;\n    };\n    /**\n     * Peeks at the node from the beginning of the doubly linked list\n     *\n     * @method bottom\n     * @return any  The value of the first node.\n     */\n    DoublyLinkedList.prototype.bottom = function () {\n        if (this._head)\n            return this._head.value;\n    };\n    /**\n     * Counts the number of elements in the doubly linked list\n     *\n     * @method count\n     * @return number the number of elements in the doubly linked list.\n     */\n    DoublyLinkedList.prototype.count = function () {\n        return this._length;\n    };\n    /**\n     * Checks whether the doubly linked list is empty\n     *\n     * @method isEmpty\n     * @return boolean whether the doubly linked list is empty.\n     */\n    DoublyLinkedList.prototype.isEmpty = function () {\n        return (this._length === 0);\n    };\n    /**\n     * Rewind iterator back to the start\n     *\n     * @method rewind\n     * @return void\n     */\n    DoublyLinkedList.prototype.rewind = function () {\n        this._key = 0;\n        this._current = this._head;\n    };\n    /**\n     * Return current list entry\n     *\n     * @method current\n     * @return any  The current node value.\n     */\n    DoublyLinkedList.prototype.current = function () {\n        if (this._current) {\n            return this._current.value;\n        }\n        return null;\n    };\n    /**\n     * Return current node index\n     *\n     * @method key\n     * @return any  The current node index.\n     */\n    DoublyLinkedList.prototype.key = function () {\n        return this._key;\n    };\n    /**\n     * Move to next entry\n     *\n     * @method next\n     * @return void\n     */\n    DoublyLinkedList.prototype.next = function () {\n        this._current = this._current.next;\n        this._key++;\n    };\n    /**\n     * Move to previous entry\n     *\n     * @method prev\n     * @return void\n     */\n    DoublyLinkedList.prototype.prev = function () {\n        this._current = this._current.prev;\n        this._key--;\n    };\n    /**\n     * Check whether the doubly linked list contains more nodes\n     *\n     * @method valid\n     * @return boolean true if the doubly linked list contains any more nodes, false otherwise.\n     */\n    DoublyLinkedList.prototype.valid = function () {\n        return (this._key >= 0 && this._key < this._length);\n    };\n    /**\n     * Export the list to array\n     *\n     * @method toArray\n     * @return Array   The exported array\n     */\n    DoublyLinkedList.prototype.toArray = function () {\n        var list = [];\n        var current = this._head;\n        while (current) {\n            list.push(current.value);\n            current = current.next;\n        }\n        return list;\n    };\n    /**\n     * Serializes the list to string\n     *\n     * @method toString\n     * @return string   The serialized string.\n     */\n    DoublyLinkedList.prototype.toString = function () {\n        return \"{\" + this.toArray().join(\"->\") + \"}\";\n    };\n    return DoublyLinkedList;\n})();\nmodule.exports = DoublyLinkedList;\n//# sourceMappingURL=DoublyLinkedList.js.map","/**\n * The Heap class provides the main functionality of a Heap.\n *\n * @class Heap\n */\nvar Heap = (function () {\n    function Heap() {\n        /**\n         * Binary tree storage array\n         *\n         * @property _tree\n         * @type Array\n         * @private\n         */\n        this._tree = [];\n        /**\n         * Heap type\n         *\n         * @property _type\n         * @type number\n         * @private\n         */\n        this._type = Heap.MAX;\n        /**\n         * Iteration pointer\n         *\n         * @property _key\n         * @type number\n         * @private\n         */\n        this._key = 0;\n    }\n    /**\n     * Get index of left child element in binary tree stored in array\n     *\n     * @method _child\n     * @param n\n     * @return number\n     * @private\n     */\n    Heap.prototype._child = function (n) {\n        return 2 * n + 1;\n    };\n    /**\n     * Get index of parent element in binary tree stored in array\n     *\n     * @method _parent\n     * @param n\n     * @return number\n     * @private\n     */\n    Heap.prototype._parent = function (n) {\n        //console.log('n=', n, Math.floor(n / 2));\n        return Math.floor(n / 2);\n    };\n    /**\n     * Swap 2 elements in binary tree\n     *\n     * @method _swap\n     * @param first\n     * @param second\n     * @private\n     */\n    Heap.prototype._swap = function (first, second) {\n        var swap = this._tree[first];\n        this._tree[first] = this._tree[second];\n        this._tree[second] = swap;\n    };\n    /**\n     * Sift elements in binary tree\n     *\n     * @method _siftUp\n     * @param i\n     * @private\n     */\n    Heap.prototype._siftUp = function (i) {\n        while (i > 0) {\n            var parent = this._parent(i);\n            if (this.compare(this._tree[i], this._tree[parent]) * this._type > 0) {\n                this._swap(i, parent);\n                i = parent;\n            }\n            else {\n                break;\n            }\n        }\n    };\n    /**\n     * Sift down elements in binary tree\n     *\n     * @method _siftDown\n     * @param i\n     * @private\n     */\n    Heap.prototype._siftDown = function (i) {\n        while (i < this._tree.length) {\n            var left = this._child(i);\n            var right = left + 1;\n            if ((left < this._tree.length) && (right < this._tree.length) &&\n                (this.compare(this._tree[i], this._tree[left]) * this._type < 0 ||\n                    this.compare(this._tree[i], this._tree[right]) * this._type < 0)) {\n                // there is 2 children and one of them must be swapped\n                // get correct element to sift down\n                var sift = left;\n                if (this.compare(this._tree[left], this._tree[right]) * this._type < 0) {\n                    sift = right;\n                }\n                this._swap(i, sift);\n                i = sift;\n            }\n            else if (left < this._tree.length &&\n                this.compare(this._tree[i], this._tree[left]) * this._type < 0) {\n                // only one child exists\n                this._swap(i, left);\n                i = left;\n            }\n            else {\n                break;\n            }\n        }\n    };\n    /**\n     * Extracts a node from top of the heap and sift up\n     *\n     * @method extract\n     * @return any The value of the extracted node.\n     */\n    Heap.prototype.extract = function () {\n        if (this._tree.length === 0) {\n            throw new Error(\"Can't extract from an empty data structure\");\n        }\n        var extracted = this._tree[0];\n        if (this._tree.length === 1) {\n            this._tree = [];\n        }\n        else {\n            this._tree[0] = this._tree.pop();\n            this._siftDown(0);\n        }\n        return extracted;\n    };\n    /**\n     * Inserts an element in the heap by sifting it up\n     *\n     * @method insert\n     * @param value The value to insert.\n     * @return void\n     */\n    Heap.prototype.insert = function (value) {\n        this._tree.push(value);\n        this._siftUp(this._tree.length - 1);\n    };\n    /**\n     * Peeks at the node from the top of the heap\n     *\n     * @method top\n     * @return any The value of the node on the top.\n     */\n    Heap.prototype.top = function () {\n        if (this._tree.length === 0) {\n            throw new Error(\"Can't peek at an empty heap\");\n        }\n        return this._tree[0];\n    };\n    /**\n     * Counts the number of elements in the heap\n     *\n     * @method count\n     * @return number the number of elements in the heap.\n     */\n    Heap.prototype.count = function () {\n        return this._tree.length;\n    };\n    /**\n     * Checks whether the heap is empty\n     *\n     * @method isEmpty\n     * @return boolean whether the heap is empty.\n     */\n    Heap.prototype.isEmpty = function () {\n        return (this._tree.length === 0);\n    };\n    /**\n     * Rewind iterator back to the start (no-op)\n     *\n     * @method rewind\n     * @return void\n     */\n    Heap.prototype.rewind = function () {\n        this._key = 0;\n    };\n    /**\n     * Return current node pointed by the iterator\n     *\n     * @method current\n     * @return any The current node value.\n     */\n    Heap.prototype.current = function () {\n        return this._tree[this._key];\n    };\n    /**\n     * Return current node index\n     *\n     * @method key\n     * @return any The current node index.\n     */\n    Heap.prototype.key = function () {\n        return this._key;\n    };\n    /**\n     * Move to the next node\n     *\n     * @method next\n     * @return void\n     */\n    Heap.prototype.next = function () {\n        this._key++;\n    };\n    /**\n     * Move to previous entry\n     *\n     * @method prev\n     * @return void\n     */\n    Heap.prototype.prev = function () {\n        this._key--;\n    };\n    /**\n     * Check whether the heap contains more nodes\n     *\n     * @method valid\n     * @return boolean true if the heap contains any more nodes, false otherwise.\n     */\n    Heap.prototype.valid = function () {\n        return (this._key >= 0 && this._key < this._tree.length);\n    };\n    /**\n     * Compare elements in order to place them correctly in the heap while sifting up.\n     *\n     * @method compare\n     * @param first The value of the first node being compared.\n     * @param second The value of the second node being compared.\n     * @return number Result of the comparison, positive integer if first is greater than second, 0 if they are equal, negative integer otherwise.\n     * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\n     */\n    Heap.prototype.compare = function (first, second) {\n        if (first > second) {\n            return 1;\n        }\n        else if (first == second) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    };\n    /**\n     * Visually display heap tree\n     *\n     * @method _displayNode\n     * @param node\n     * @param prefix\n     * @param last\n     * @return String\n     * @private\n     */\n    Heap.prototype._displayNode = function (node, prefix, last) {\n        if (prefix === void 0) { prefix = ''; }\n        if (last === void 0) { last = true; }\n        var line = prefix;\n        // get child indexes\n        var left = this._child(node);\n        var right = left + 1;\n        if (last) {\n            line += (prefix ? '└─' : '  ');\n        }\n        else {\n            line += '├─';\n        }\n        line += this._tree[node];\n        prefix += (last ? '  ' : '│ ');\n        if (left < this._tree.length) {\n            line += '\\n' + this._displayNode(left, prefix, (this._tree[right] == undefined ? true : false));\n        }\n        if (right < this._tree.length) {\n            line += '\\n' + this._displayNode(right, prefix, true);\n        }\n        return line;\n    };\n    /**\n     * Serializes the heap to string\n     *\n     * @method toString\n     * @return string   The serialized string.\n     */\n    Heap.prototype.toString = function () {\n        // start with root and recursively goes to each node\n        return this._displayNode(0);\n    };\n    /**\n     * Serializes the heap to array\n     *\n     * @method toArray\n     * @return Array   The serialized array.\n     */\n    Heap.prototype.toArray = function () {\n        return this._tree;\n    };\n    /**\n     * Max heap flag\n     *\n     * @property MAX\n     * @type number\n     * @static\n     */\n    Heap.MAX = 1;\n    /**\n     * Min heap flag\n     *\n     * @property MIN\n     * @type number\n     * @static\n     */\n    Heap.MIN = -1;\n    return Heap;\n})();\nmodule.exports = Heap;\n//# sourceMappingURL=Heap.js.map","var __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Heap = require('./Heap');\n/**\n * The MaxHeap class provides the main functionality of a heap, keeping the maximum on the top.\n *\n * @class MaxHeap\n * @extends Heap\n */\nvar MaxHeap = (function (_super) {\n    __extends(MaxHeap, _super);\n    function MaxHeap() {\n        _super.apply(this, arguments);\n        this._type = Heap.MAX;\n    }\n    return MaxHeap;\n})(Heap);\nmodule.exports = MaxHeap;\n//# sourceMappingURL=MaxHeap.js.map","var __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Heap = require('./Heap');\n/**\n * The MinHeap class provides the main functionality of a heap, keeping the minimum on the top.\n *\n * @class MinHeap\n * @extends Heap\n */\nvar MinHeap = (function (_super) {\n    __extends(MinHeap, _super);\n    function MinHeap() {\n        _super.apply(this, arguments);\n        this._type = Heap.MIN;\n    }\n    return MinHeap;\n})(Heap);\nmodule.exports = MinHeap;\n//# sourceMappingURL=MinHeap.js.map","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Heap = require('./Heap');\n/**\n * The PriorityQueue class provides the main functionality of an prioritized queue, implemented using a max heap.\n *\n * @class PriorityQueue\n * @extends Heap\n */\nvar PriorityQueue = (function (_super) {\n    __extends(PriorityQueue, _super);\n    function PriorityQueue() {\n        _super.apply(this, arguments);\n        this._type = Heap.MAX;\n    }\n    /**\n     * Adds an element to the queue\n     *\n     * @method enqueue\n     * @param value The value to enqueue.\n     * @param priority The priority of value.\n     * @return void\n     */\n    PriorityQueue.prototype.enqueue = function (value, priority) {\n        return this.insert(new PriorityQueueNode(value, priority));\n    };\n    /**\n     * Dequeues a node from the queue\n     *\n     * @method dequeue\n     * @return any  The value of the dequeued node.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        return this.extract().value;\n    };\n    /**\n     * Peeks at the node from the top of the heap\n     *\n     * @method top\n     * @return any The value of the node on the top.\n     */\n    PriorityQueue.prototype.top = function () {\n        return _super.prototype.top.call(this).value;\n    };\n    /**\n     * Compare elements in order to place them correctly in the heap while sifting up.\n     *\n     * @method compare\n     * @param first The value of the first node being compared.\n     * @param second The value of the second node being compared.\n     * @return number Result of the comparison, positive integer if first is greater than second, 0 if they are equal, negative integer otherwise.\n     * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\n     */\n    PriorityQueue.prototype.compare = function (first, second) {\n        if (first.priority > second.priority) {\n            return 1;\n        }\n        else if (first.priority == second.priority) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    };\n    return PriorityQueue;\n})(Heap);\n/**\n * PriorityQueue Node\n *\n * @class PriorityQueueNode\n */\nvar PriorityQueueNode = (function () {\n    /**\n     * Constructor\n     *\n     * @method constructor\n     * @param value\n     * @param priority\n     */\n    function PriorityQueueNode(value, priority) {\n        this.value = value;\n        this.priority = priority;\n    }\n    /**\n     * Serializes the node to string\n     *\n     * @method toString\n     * @return string   The serialized string.\n     */\n    PriorityQueueNode.prototype.toString = function () {\n        return this.value + \" [\" + this.priority + \"]\";\n    };\n    return PriorityQueueNode;\n})();\nmodule.exports = PriorityQueue;\n//# sourceMappingURL=PriorityQueue.js.map","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DoublyLinkedList = require('./DoublyLinkedList');\n/**\n * The Queue class provides the main functionality of a queue implemented using a doubly linked list.\n *\n * @class Queue\n * @extends DoublyLinkedList\n */\nvar Queue = (function (_super) {\n    __extends(Queue, _super);\n    function Queue() {\n        _super.apply(this, arguments);\n    }\n    /**\n     * Adds an element to the queue\n     *\n     * @method enqueue\n     * @param value The value to enqueue.\n     * @return void\n     */\n    Queue.prototype.enqueue = function (value) {\n        return this.push(value);\n    };\n    /**\n     * Dequeues a node from the queue\n     *\n     * @method dequeue\n     * @return any  The value of the dequeued node.\n     */\n    Queue.prototype.dequeue = function () {\n        return this.shift();\n    };\n    return Queue;\n})(DoublyLinkedList);\nmodule.exports = Queue;\n//# sourceMappingURL=Queue.js.map","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DoublyLinkedList = require('./DoublyLinkedList');\n/**\n * The Stack class provides the main functionality of a stack implemented using a doubly linked list.\n *\n * @class Stack\n * @extends DoublyLinkedList\n */\nvar Stack = (function (_super) {\n    __extends(Stack, _super);\n    function Stack() {\n        _super.apply(this, arguments);\n    }\n    return Stack;\n})(DoublyLinkedList);\nmodule.exports = Stack;\n//# sourceMappingURL=Stack.js.map","/**\n * STL\n * @type {{DoublyLinkedList: exports, Stack: exports, Queue: exports, Heap: exports, MaxHeap: exports, MinHeap: exports, PriorityQueue: exports}}\n */\nmodule.exports = {\n\tDoublyLinkedList: require('./Datastructures/DoublyLinkedList'),\n\tStack: require('./Datastructures/Stack'),\n\tQueue: require('./Datastructures/Queue'),\n\tHeap: require('./Datastructures/Heap'),\n\tMaxHeap: require('./Datastructures/MaxHeap'),\n\tMinHeap: require('./Datastructures/MinHeap'),\n\tPriorityQueue: require('./Datastructures/PriorityQueue')\n};","'use strict';\n\nimport App from './modules/App';\n\n/**\n * When the document is ready, initialize the application\n */\n$(() => {\n    new App('#canvas', 10);\n});\n","// editor elements (gates, wires...)\nimport * as editorElements from './editorElements';\n\n// svg elements\nimport { Pattern, Rectangle, PolyLinePoint, PolyLinePoints, PolyLine } from './svgObjects';\n\n// network logic and simulation\nimport Logic from './Logic';\nimport Simulation from './Simulation';\nimport { SimulationDummy } from './Simulation';\n\n// ui stuff\nimport ContextMenu from './ui/ContextMenu';\nimport FloatingMenu from './ui/FloatingMenu';\nimport Tutorial from './ui/Tutorial';\nimport Messages from './ui/Messages';\nimport ViewBox from './ui/ViewBox';\n\n// mouse scroll event listerer for ui, manhattan distance for importData\nimport { addMouseScrollEventListener, manhattanDistance } from './other/helperFunctions';\n\n// used in importData\n// note: imported from a node module\nimport { PriorityQueue } from 'libstl';\n\nconst ctrlKey = 17,\n    cmdKey = 91;\n\n/** @module App */\n/**\n * Main class of the application. It represents an instance of the whole editor and holds\n * references to all its elements.\n */\nexport default class App {\n    /**\n     * Initialize the Svg class\n     * @param {string} canvas   query selector of the SVG element, that will contain all SVG content of the application\n     * @param {number} gridSize initial size of the grid in SVG pixels\n     */\n    constructor(canvas, gridSize) {\n        /**\n         * jQuery element for the SVG document\n         */\n        this.$svg = $(canvas);\n\n        /**\n         * space between grid lines in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = gridSize;\n\n        /**\n         * Array of all boxes (instances of objects derived from editorElements.Box) used on canvas\n         * @type {Array}\n         */\n        this.boxes = []; // stores all boxes\n\n        /**\n         * Array of all wires (instances of editorElements.Wire) used on canvas\n         * @type {Array}\n         */\n        this.wires = []; // stores all wires\n\n        /**\n         * Interface for showing messages to the user\n         * @type {Messages}\n         */\n        this.messages = new Messages();\n\n        this.simulationEnabled = true;\n        this.simulation = new SimulationDummy(); // dummy, will be overwritten on startNewSimulation\n\n        /**\n         * distance from the left top corner to the first element in the imported network\n         * and distance from the left top corner to the imported black box _in grid pixels_\n         * @type {number}\n         */\n        this.leftTopPadding = 4;\n\n        // create the defs element, used for patterns\n        this.$defs = $('<defs>');\n        this.$svg.prepend(this.$defs);\n\n        // BACKGROUND PATTERN\n        let pattern = new Pattern('grid', this.gridSize, this.gridSize);\n\n        let patternPoints = new PolyLinePoints()\n            .append(new PolyLinePoint(0, 0))\n            .append(new PolyLinePoint(this.gridSize, 0))\n            .append(new PolyLinePoint(this.gridSize, this.gridSize));\n\n        pattern.addChild(new PolyLine(patternPoints, 2, '#c2c3e4'));\n        this.addPattern(pattern.get());\n\n        this.background = new Rectangle(0, 0, this.width, this.height, 'url(#grid)', 'none');\n        this.appendJQueryObject(this.background.get());\n        this.refresh();\n\n        // set the viewbox for future zooming and moving of the canvas\n        this.$svg.attr('preserveAspectRatio', 'xMinYMin slice');\n        this.viewbox = new ViewBox(0, 0, this.width, this.height);\n        this.applyViewbox();\n\n        // CONSTRUCT CONTEXT MENU\n        this.contextMenu = new ContextMenu(this);\n\n        // CONSTRUCT FLOATING MENU\n        this.floatingMenu = new FloatingMenu(this);\n\n        let target;\n\n        // ALL EVENT CALLBACKS\n        this.$svg\n            .on('mousedown', event => {\n                target = this.getRealTarget(event.target);\n\n                if (target !== undefined) {\n                    // propagate mousedown to the real target\n                    target.onMouseDown(event);\n                } else {\n                    // mousedown happened directly on the svg\n                    this.onMouseDown(event);\n                }\n\n                this.hideContextMenu();\n                event.preventDefault();\n            })\n            .on('mousemove', event => {\n                if (target !== undefined) {\n                    target.onMouseMove(event);\n                } else {\n                    // mousemove happened directly on the svg\n                    this.onMouseMove(event);\n                }\n\n                event.preventDefault();\n            })\n            .on('mouseup', event => {\n                if (target !== undefined) {\n                    target.onMouseUp(event);\n                } else {\n                    // mouseup happened directly on the svg\n                    this.onMouseUp(event);\n                }\n\n                target = undefined;\n\n                event.preventDefault();\n            })\n            .on('contextmenu', event => {\n                this.displayContextMenu(\n                    event.pageX,\n                    event.pageY,\n                    this.getRealJQueryTarget(event.target)\n                );\n                event.preventDefault();\n            });\n\n        $(document)\n            .on('keydown', event => {\n                this.onKeyDown(event);\n            })\n            .on('keyup', event => {\n                this.onKeyUp(event);\n            });\n\n        // update the viewbox on window resize\n        $(window).on('resize', () => {\n            this.viewbox.newDimensions(this.width, this.height);\n            this.applyViewbox();\n        });\n\n        addMouseScrollEventListener(canvas, event => {\n            // zoom only if the ctrl key is not pressed\n            if (!event.ctrlKey) {\n                this.zoom += event.delta * 0.1;\n\n                event.preventDefault();\n            }\n        });\n\n        $(window).on('keydown', event => {\n            const actions = {\n                '+': 0.1,\n                '-': -0.1\n            };\n\n            if (actions[event.key]) {\n                this.zoom += actions[event.key];\n            }\n        });\n\n        /**\n         * property containing an instance of [Tutorial](./module-Tutorial.html), if there is any\n         * @type {Tutorial}\n         */\n        this.tutorial;\n\n        // check if the user visits for the first time, if so, start the tutorial\n        try {\n            if (!localStorage.userHasVisited) {\n                this.startTutorial();\n            }\n        } catch (e) {\n            console.warn(e);\n        }\n    }\n\n    /**\n     * Get the width of the main SVG element\n     * @return {number} width of the SVG element in pixels\n     */\n    get width() {\n        return this.$svg.width();\n    }\n\n    /**\n     * Get the height of the main SVG element\n     * @return {number} height of the SVG element in pixels\n     */\n    get height() {\n        return this.$svg.height();\n    }\n\n    /**\n     * Process all keydown events that are connected to the app\n     * @param  {jquery.KeyboardEvent} event KeyboardEvent generated by a listener\n     */\n    onKeyDown(event) {\n        if (event.keyCode === ctrlKey || event.keyCode === cmdKey) {\n            this.$svg.addClass('grabbable');\n        }\n    }\n\n    /**\n     * Process all keyup events that are connected to the app\n     * @param  {jquery.KeyboardEvent} event KeyboardEvent generated by a listener\n     */\n    onKeyUp(event) {\n        if (event.keyCode === ctrlKey || event.keyCode === cmdKey) {\n            this.$svg.removeClass('grabbable');\n        }\n    }\n\n    /**\n     * Process all mousedown events that are happening directly on the canvas\n     * @param  {jquery.MouseEvent} event MouseEvent generated by a listener\n     */\n    onMouseDown(event) {\n        // any click on canvas cancels the wire creation\n        this.cancelWireCreation();\n\n        // middle mouse or left mouse + ctrl moves the canvas\n        if (event.which === 2 || (event.which === 1 && event.ctrlKey)) {\n            this.$svg.addClass('grabbed');\n            this.moveCanvas = {\n                left: event.pageX,\n                top: event.pageY\n            };\n        }\n    }\n\n    /**\n     * Process all mousemove events that are happening directly on the canvas\n     * @param  {jquery.MouseEvent} event MouseEvent generated by a listener\n     */\n    onMouseMove(event) {\n        if (this.moveCanvas) {\n            let left = event.pageX - this.moveCanvas.left;\n            let top = event.pageY - this.moveCanvas.top;\n\n            this.viewbox.move(left, top);\n\n            this.applyViewbox();\n\n            this.moveCanvas = {\n                left: event.pageX,\n                top: event.pageY\n            };\n        }\n    }\n\n    /**\n     * Process all mouseup events that are happening directly on the canvas\n     */\n    onMouseUp() {\n        if (this.moveCanvas) {\n            this.$svg.removeClass('grabbed');\n            this.moveCanvas = undefined;\n\n            // if tutorial exists, call tutorial callback\n            if (this.tutorial) {\n                this.tutorial.onCanvasMoved();\n            }\n        }\n    }\n\n    /**\n     * Set the viewBox attribute of the SVG element and size and position attributes\n     * of the rectangle with the background grid to match the values in this.viewbox\n     */\n    applyViewbox() {\n        // adjust background\n        this.background.addAttr({\n            x: this.viewbox.left,\n            y: this.viewbox.top,\n            width: this.viewbox.width,\n            height: this.viewbox.height\n        });\n\n        // set the viewBox attribute\n        this.$svg.attr('viewBox', this.viewbox.str);\n    }\n\n    /**\n     * Get the current zoom multiplier of the canvas\n     * @return {number}\n     */\n    get zoom() {\n        return this.viewbox.zoom;\n    }\n\n    /**\n     * Set the zoom multiplier of the canvas.\n     * I sets the viewbox zoom and then applies the new value by calling this.applyViewbox()\n     * @param  {number} value set the zoom to this value\n     */\n    set zoom(value) {\n        this.viewbox.zoom = value;\n        this.applyViewbox();\n\n        // if tutorial exists, call tutorial callback\n        if (this.tutorial) {\n            this.tutorial.onCanvasZoomed();\n        }\n    }\n\n    /**\n     * start the tutorial\n     */\n    startTutorial() {\n        // instantiate the tutorial\n        this.tutorial = new Tutorial(this, () => {\n            // set userHasVisited to true when user closes (or finishes) the tutorial\n            localStorage.userHasVisited = true;\n\n            // unset the this.tutorial property\n            this.tutorial = undefined;\n        });\n\n        // start the tutorial\n        this.tutorial.start();\n    }\n\n    /**\n     * Generate an object containing export data for the canvas and all elements.\n     * Data from this function should cover all important information needed to import the\n     * network in a different session.\n     * @return {object} object containing infomration about the network\n     */\n    get exportData() {\n        this.exportWireIdMap = new Map();\n        this.exportWireId = 0;\n\n        let data = {\n            boxes: []\n        };\n\n        for (const box of this.boxes) {\n            data.boxes.push(box.exportData);\n        }\n\n        return data;\n    }\n\n    /**\n     * Recreate a logic network from the data provided\n     * @param  {object} data object containing information about the imported network\n     * @param  {number} [x]  horizontal position of the left top corner of the network in grid pixels\n     * @param  {number} [y]  vertical position of the left top corner of the network in grid pixels\n     */\n    importData(data, x, y) {\n        return new Promise(resolve => {\n            let warnings = [];\n\n            // if the x or y is undefined, set it to leftTopPadding instead\n            // (cannot use x || leftTopPadding because of 0)\n            x = x !== undefined ? x : this.leftTopPadding;\n            y = y !== undefined ? y : this.leftTopPadding;\n\n            this.simulationEnabled = false;\n\n            // list of wires to be added\n            let newWires = new Map();\n\n            // find the leftmost and topmost coordinate of any box, save them to leftTopCorner\n            let leftTopCorner = {\n                x: 0,\n                y: 0\n            };\n\n            for (const boxData of data.boxes) {\n                if (boxData.transform && boxData.transform.items) {\n                    for (const transformInfo of boxData.transform.items) {\n                        if (transformInfo.name === 'translate') {\n                            if (leftTopCorner) {\n                                leftTopCorner = {\n                                    x: Math.min(leftTopCorner.x, transformInfo.args[0]),\n                                    y: Math.min(leftTopCorner.y, transformInfo.args[1])\n                                };\n                            } else {\n                                leftTopCorner = {\n                                    x: transformInfo.args[0],\n                                    y: transformInfo.args[1]\n                                };\n                            }\n                        }\n                    }\n                }\n            }\n\n            for (let boxData of data.boxes) {\n                // mapping of dataBox.name of the objects that have category \"other\"\n                const otherMap = {\n                    input: () => this.newInput(0, 0, boxData.isOn, false),\n                    output: () => this.newOutput(0, 0, false)\n                };\n\n                // mapping of dataBox.category\n                const boxMap = {\n                    gate: () => this.newGate(boxData.name, 0, 0, false),\n                    blackbox: () =>\n                        this.newBlackbox(\n                            boxData.inputs,\n                            boxData.outputs,\n                            boxData.table,\n                            boxData.name,\n                            0,\n                            0,\n                            false\n                        ),\n                    other: () => {\n                        if (!boxData.name) throw `This network contains a box without a name.`;\n\n                        if (!otherMap[boxData.name])\n                            throw `This network contains unknown box names. (${boxData.name})`;\n\n                        return otherMap[boxData.name]();\n                    }\n                };\n\n                const createBox = () => {\n                    if (!boxData.category) throw `This network a box without a category.`;\n\n                    if (!boxMap[boxData.category])\n                        throw `This network contains unknown box categories. (${boxData.category})`;\n\n                    return boxMap[boxData.category]();\n                };\n\n                let box;\n\n                try {\n                    box = createBox();\n                } catch (e) {\n                    warnings.push(e);\n                }\n\n                if (box) {\n                    // proccess box transforms (translation and rotation)\n                    let transform = new editorElements.Transform();\n                    let rotationCount = 0;\n\n                    const transformItemMap = {\n                        translate: args => {\n                            transform.setTranslate(\n                                args[0] -\n                                leftTopCorner.x + // make it the relative distance from the leftmost element\n                                    x, // apply the position\n                                args[1] -\n                                leftTopCorner.y + // make it the relative distance from the topmost element\n                                    y // apply the position\n                            );\n                        },\n                        rotate: args => {\n                            rotationCount = (args[0] % 360) / 90;\n                        }\n                    };\n\n                    if (boxData.transform && boxData.transform.items) {\n                        for (const transformItem of boxData.transform.items) {\n                            const { name, args } = transformItem;\n\n                            if (!name) {\n                                warnings.push(\n                                    `This network contains unnamed transform properties.`\n                                );\n                                break;\n                            }\n\n                            if (!transformItemMap[name]) {\n                                warnings.push(\n                                    `This network contains unknown transform properties. (${\n                                        transformItem.name\n                                    })`\n                                );\n                                break;\n                            }\n\n                            transformItemMap[name](args);\n                        }\n                    }\n\n                    transform.toSVGPixels(this);\n                    box.setTransform(transform);\n\n                    for (let i = 0; i < rotationCount; ++i) {\n                        box.rotate(true);\n                    }\n\n                    // add all wires to the list of wires to be added\n                    if (boxData.connections) {\n                        for (const connection of boxData.connections) {\n                            // get the artificial wire id\n                            let wireId = connection.wireId;\n\n                            // pass the values got from json into a variable that will be added into the map\n                            let value = {\n                                index: connection.index,\n                                boxId: box.id\n                            };\n\n                            // add the value to the map\n                            if (newWires.has(wireId)) {\n                                // if there already is a wire with this id in the map,\n                                // add the value to the end of the array of values\n                                let mapValue = newWires.get(wireId);\n                                mapValue.push(value);\n                                newWires.set(wireId, mapValue);\n                            } else {\n                                // if there is no wire with this id in the map\n                                // add the wire and set the value to be the first element in the array\n                                newWires.set(wireId, [value]);\n                            }\n                        }\n                    }\n                }\n            }\n\n            // refresh the SVG document (needed for wiring)\n            this.refresh();\n\n            // with all boxes added, we can now connect them with wires\n\n            // priority queue for the new wires, priority being (1 / manhattanDistance) between the conenctors, higher is better\n            let wireQueue = new PriorityQueue();\n\n            // get all ids for lal the\n            for (const wireInfo of newWires.values()) {\n                let connectorIds = [];\n\n                // create an array [connector1Id, connector2Id]\n                for (const { boxId, index } of wireInfo) {\n                    connectorIds.push(this.getBoxById(boxId).connectors[index].id);\n                }\n\n                // create and array [{x, y}, {x, y}] containing positions for connectors 1 and 2\n                const connectorsPositions = connectorIds.map(connectorId =>\n                    this.getConnectorPosition(this.getConnectorById(connectorId), true)\n                );\n\n                if (connectorsPositions.length === 2) {\n                    let wire = this.newWire(...connectorIds, false, false);\n\n                    // get the manhattan distance between these two connectors\n                    const distance = manhattanDistance(...connectorsPositions);\n\n                    // add connectorids to the priority queue\n                    wireQueue.enqueue(wire, 1 / distance);\n                } else {\n                    warnings.push(\n                        `Found a wire that does not have two endings. (It had ${\n                            connectorsPositions.length\n                        } instead.)`\n                    );\n                }\n            }\n\n            if (window.Worker) {\n                let wirePoints = [];\n                let wireReferences = [];\n\n                // convert the queue to an array (this is needed by the web worker)\n                while (!wireQueue.isEmpty()) {\n                    const wire = wireQueue.dequeue();\n\n                    let wireStart = this.getConnectorPosition(wire.connection.from.connector, true);\n                    let wireEnd = this.getConnectorPosition(wire.connection.to.connector, true);\n\n                    wirePoints.push([\n                        {\n                            x: wireStart.x / this.gridSize,\n                            y: wireStart.y / this.gridSize\n                        },\n                        {\n                            x: wireEnd.x / this.gridSize,\n                            y: wireEnd.y / this.gridSize\n                        }\n                    ]);\n\n                    wireReferences.push(wire);\n                }\n\n                // [routeWorkerFileName] replaced in the build process (defined in gulpfile) depending on devel / prod build\n                let myWorker = new Worker('js/[routeWorkerFileName]');\n\n                let loadingMessage = this.messages.newLoadingMessage(\n                    'looking for the best wiring…'\n                );\n\n                myWorker.onmessage = event => {\n                    const { paths } = event.data;\n                    // iterate wireReferences and paths synchronously\n                    wireReferences.forEach((wire, key) => {\n                        wire.setWirePath(wire.pathToPolyLine(paths[key]));\n                        wire.updateWireState();\n                    });\n\n                    loadingMessage.hide();\n                };\n\n                const message = {\n                    wires: wirePoints,\n                    nonRoutableNodes: this.getNonRoutableNodes(),\n                    inconvenientNodes: this.getInconvenientNodes()\n                };\n\n                myWorker.postMessage(message);\n            } else {\n                // web worker is not supported: use an interval to make the import a bit slower\n                // by dividing it into chunks, so the browser window is not entirely frozen when the wiring is happening\n\n                const wiresToBeRoutedAtOnce = 10;\n                const delayBetweenIterations = 200;\n\n                // add wires in the order from short to long\n                let wirePlacingInterval = window.setInterval(() => {\n                    if (!wireQueue.isEmpty()) {\n                        for (let i = 0; i < wiresToBeRoutedAtOnce; ++i) {\n                            if (wireQueue.isEmpty()) {\n                                break;\n                            }\n\n                            const wire = wireQueue.dequeue();\n                            wire.routeWire(true, false);\n                            wire.updateWireState();\n                        }\n                    } else {\n                        console.log('finished');\n                        clearInterval(wirePlacingInterval);\n                    }\n                }, delayBetweenIterations);\n            }\n\n            // refresh the SVG document\n            this.refresh();\n\n            this.simulationEnabled = true;\n\n            resolve(warnings);\n        });\n    }\n\n    /**\n     * When user clicks on a connector, remember it until they click on some other connector.\n     * Than call newWire with the last two connectors ids as arguments.\n     * Visualize the process by displaying a grey wire between the first conenctor and the mouse pointer.\n     * @param  {string} connectorId id of the connector that the user clicked on\n     */\n    wireCreationHelper(connectorId, mousePosition) {\n        if (!this.wireCreation) {\n            this.wireCreation = {\n                fromId: connectorId\n            };\n\n            this.displayCreatedWire(mousePosition);\n        } else {\n            if (this.wireCreation.fromId !== connectorId) {\n                this.hideCreatedWire();\n\n                this.newWire(this.wireCreation.fromId, connectorId);\n\n                this.wireCreation = undefined;\n            }\n        }\n    }\n\n    /**\n     * helper for wireCreationHelper that displays a grey wire between the first connector and the specified mousePosition\n     * @param  {Object} mousePosition object with x and y coordinates in SVG pixels\n     */\n    displayCreatedWire(mousePosition) {\n        this.wireCreation.tempWire = new editorElements.HelperWire(\n            this,\n            this.wireCreation.fromId,\n            mousePosition\n        );\n\n        $(window).on('mousemove.wireCreation', event => {\n            event = this.viewbox.transformEvent(event);\n\n            mousePosition = {\n                x: event.pageX,\n                y: event.pageY\n            };\n\n            this.wireCreation.tempWire.updateMousePosition(mousePosition);\n        });\n\n        this.appendElement(this.wireCreation.tempWire);\n        this.moveToBackById(this.wireCreation.tempWire.id);\n    }\n\n    /**\n     * helper for wireCreationHelper that hides the temporary wire when wire creation is done\n     */\n    hideCreatedWire() {\n        $(window).off('mousemove.wireCreation');\n\n        this.wireCreation.tempWire.get().remove();\n        this.wireCreation.tempWire = undefined;\n    }\n\n    /**\n     * helper for wireCreationHelper that cancels the wire creation process\n     */\n    cancelWireCreation() {\n        if (this.wireCreation) {\n            this.hideCreatedWire();\n            this.wireCreation = undefined;\n        }\n    }\n\n    /**\n     * Run a logic simulation from the startingConnector.\n     * This refreshes the states of all elements in the network whose inputs are\n     * directly (or by transition) connected to startingConnector's output\n     * @param  {OutputConnector} startingConnector run simulation from this output connector\n     * @param  {Logic.state} state new state of the startingConnector\n     */\n    startNewSimulation(startingConnector, state) {\n        if (this.simulationEnabled) {\n            this.simulation = new Simulation(this);\n            this.simulation.notifyChange(startingConnector.id, state);\n            this.simulation.run();\n        }\n    }\n\n    /**\n     * Create a new gate on the specified position\n     * @param  {string}  name           type of the gate (and, or ...)\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the gate\n     * @return {editorElements.Gate}    instance of Gate that has been newly added\n     */\n    newGate(name, x, y, refresh = true) {\n        return this.newBox(x, y, new editorElements.Gate(this, name, x, y), refresh);\n    }\n\n    /**\n     * Create an input box on the specified position\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [isOn=false]   state of the input box (default is false (off))\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the input box\n     * @return {editorElements.InputBox}    instance of the InputBox that has been newly added\n     */\n    newInput(x, y, isOn = false, refresh = true) {\n        return this.newBox(x, y, new editorElements.InputBox(this, isOn), refresh);\n    }\n\n    /**\n     * Create an output box on the specified position\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the output box\n     * @return {editorElements.InputBox}    instance of the OutputBox that has been newly added\n     */\n    newOutput(x, y, refresh = true) {\n        return this.newBox(x, y, new editorElements.OutputBox(this), refresh);\n    }\n\n    /**\n     * Add a new Box to the canvas\n     * @param  {number}  x              horizontal position of the box in SVG pixels\n     * @param  {number}  y              vertical position of the box in SVG pixels\n     * @param  {editorElements.Box}  object         instance of an object derived from the editorElements.Box class\n     * @param  {Boolean} [refresh=true] if true, this.refresh() will be called after adding the box\n     * @return {editorElements.Box}                 return the instance of the newly added object\n     */\n    newBox(x, y, object, refresh = true) {\n        let index = this.boxes.length;\n\n        this.boxes[index] = object;\n\n        // translate the gate if x and y has been specified\n        if (x && y) {\n            let tr = new editorElements.Transform();\n            tr.setTranslate(x, y);\n\n            this.boxes[index].svgObj.addAttr({ transform: tr.get() });\n        }\n\n        this.appendElement(this.boxes[index], refresh);\n\n        // if tutorial exists, call tutorial callback\n        if (this.tutorial) {\n            this.tutorial.onElementAdded(this.boxes[index].name);\n        }\n\n        return this.boxes[index];\n    }\n\n    /**\n     * Remove a box from canvas based on the provided ID\n     * @param {string} boxId id of the box that should be removed\n     */\n    removeBox(boxId) {\n        let $gate = $('#' + boxId);\n\n        // find the gate in svg's list of gates\n        let gateIndex = -1;\n        for (let i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].svgObj.id === boxId) {\n                gateIndex = i;\n                break;\n            }\n        }\n\n        if (gateIndex > -1) {\n            // remove all wires connected to this gate\n            for (let i = 0; i < this.boxes[gateIndex].connectors.length; i++) {\n                this.removeWiresByConnectorId(this.boxes[gateIndex].connectors[i].id);\n            }\n\n            // remove the gate\n            this.boxes.splice(gateIndex, 1);\n            $gate.remove();\n\n            // if tutorial exists, call tutorial callback\n            if (this.tutorial) {\n                this.tutorial.onElementRemoved();\n            }\n        } else {\n            console.error('Trying to remove an nonexisting box. Box id:', boxId);\n        }\n    }\n\n    /**\n     * Remove all boxes from the canvas\n     */\n    cleanCanvas() {\n        // cannot simply iterate through the array because removeBox works with it\n\n        // create an array of ids\n        const ids = this.boxes.map(box => box.id);\n\n        // remove all boxes by their ids\n        for (const id of ids) {\n            this.removeBox(id);\n        }\n    }\n\n    /**\n     * Create a new wire connecting the provided connectors\n     * @param  {string}  fromId         id of the connector that the wire is attached to\n     * @param  {string}  toId           id of the connector that the wire is attached to\n     * @param  {Boolean} [refresh=true] if refresh is set to true, the SVG document will be reloaded after adding the wire\n     * @return {editorElements.Wire}    instance of editorElements.Wire that has been added to the canvas\n     */\n    newWire(fromId, toId, refresh = true, route = true) {\n        // wire must connect two distinct connectors\n        if (fromId === toId) return undefined;\n\n        let connectors = [this.getConnectorById(fromId), this.getConnectorById(toId)];\n\n        // input connectors can be connected to one wire max\n        connectors.forEach(conn => {\n            if (conn.isInputConnector) this.removeWiresByConnectorId(conn.id);\n        });\n        let index = this.wires.length;\n\n        try {\n            this.wires[index] = new editorElements.Wire(this, fromId, toId, refresh, route);\n        } catch (e) {\n            this.messages.newErrorMessage(e);\n            return undefined;\n        }\n\n        connectors.forEach(conn => {\n            conn.addWireId(this.wires[index].svgObj.id);\n        });\n\n        this.appendElement(this.wires[index], refresh);\n        this.moveToBackById(this.wires[index].svgObj.id);\n\n        if (refresh) this.wires[index].updateWireState();\n\n        return this.wires[index];\n    }\n\n    /**\n     * get the coordinates of the specified connector\n     * @param  {Connector}  connector      instance of {@link Connector}\n     * @param  {Boolean} [snapToGrid=true] if true, the connector position will be snapped to the grid\n     * @return {Object}                    point - object containing numeric attributes `x` and `y`\n     */\n    getConnectorPosition(connector, snapToGrid = true) {\n        // connector.svgObj.id has to be called, else the getCoordinates does not work on the first call in Firefox 55\n        const dummy = connector.svgObj.id; // eslint-disable-line no-unused-vars\n\n        let $connector = connector.svgObj.$el;\n\n        let position = $connector.position();\n\n        position.left = this.viewbox.transformX(position.left);\n        position.top = this.viewbox.transformY(position.top);\n\n        let width = $connector.attr('width');\n        let height = $connector.attr('height');\n\n        let x = position.left + width / 2;\n        let y = position.top + height / 2;\n        if (snapToGrid) {\n            x = this.snapToGrid(x);\n            y = this.snapToGrid(y);\n        }\n\n        return { x: x, y: y };\n    }\n\n    /**\n     * creates a new blackbox\n     * @param  {number} x       horizontal position of the blackbox in SVG pixels\n     * @param  {number} y       vertical position of the gate in SVG pixels\n     * @param  {number} inputs  number of input pins of this blackbox\n     * @param  {number} outputs number of output pins of this blackbox\n     * @param  {Array} table   Array of arrays, each inner array contains list of [Logic.state](./module-Logic.html#.state)s,\n     *                          that describe the combination of input pin and output pin states in the order from the top to bottom for both input and output connectors.\n     *                          If we had an AND array as a blackbox, one of the states could be `[Logic.state.on, Logic.state.off, Logic.state.off]`\n     *                          which means that if the first input connector is in the `on` state and the second connector is in the `off` state,\n     *                          the state of the output connector will be `off`.\n     *                          The array can be described as `[state for input conn 1, state for input conn 2, ..., state for output conn 1, state for output conn 2 ...]`.\n     * @param  {string}  name   a name that will be displayed on the blackbox\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the gate\n     *\n     * @return {editorElements.Blackbox} instance of {@link Blackbox} that has been added to the canvas\n     */\n    newBlackbox(inputs, outputs, table, name, x, y, refresh = true) {\n        const index = this.boxes.length;\n\n        this.boxes[index] = new editorElements.Blackbox(\n            this,\n            inputs,\n            outputs,\n            (...inputStates) => {\n                for (const line of table) {\n                    const lineInputStates = line.slice(0, inputs);\n\n                    // if every input state matches the corresponding input state in this line of the truth table\n                    if (inputStates.every((value, index) => value === lineInputStates[index])) {\n                        // return the rest of the line as output\n                        return line.slice(inputs);\n                    }\n                }\n                // if nothing matches, set all outputs to undefined\n                return Array.from(new Array(outputs), () => Logic.state.unknown);\n            },\n            name\n        );\n\n        if (x && y) {\n            let tr = new editorElements.Transform();\n            tr.setTranslate(x, y);\n\n            this.boxes[index].svgObj.addAttr({ transform: tr.get() });\n        }\n\n        this.appendElement(this.boxes[index], refresh);\n\n        return this.boxes[index];\n    }\n\n    /**\n     * Find the correct instance of editorElements.Wire in the app's wires by the provided id\n     * @param  {string} wireId id of the wire\n     * @return {editorElements.Wire} instance of the wire\n     */\n    getWireById(wireId) {\n        for (const wire of this.wires) {\n            if (wire.svgObj.id === wireId) {\n                return wire;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find all wires that are connected to the specified connector\n     * @param  {string} connectorId id of the connector\n     * @return {Set} set of ID's of the wires connected to this connector\n     */\n    getWiresByConnectorId(connectorId) {\n        let connector = this.getConnectorById(connectorId);\n        return connector.wireIds;\n    }\n\n    /**\n     * Remove wire that has the provided ID\n     * @param  {string} wireId ID of the wire that should be removed\n     */\n    removeWireById(wireId) {\n        for (let i = 0; i < this.wires.length; ++i) {\n            if (this.wires[i].svgObj.id === wireId) {\n                let { connectors } = this.wires[i];\n\n                for (let connector of connectors) {\n                    connector.removeWireIdAndUpdate(wireId);\n                }\n\n                // start simulation from the input connector to\n                // refresh the network after this wire\n\n                let inputConnector = this.wires[i].connection.to.connector;\n                this.startNewSimulation(inputConnector, inputConnector.state);\n\n                this.wires[i].svgObj.$el.remove();\n                this.wires.splice(i, 1);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Remove all wires that are connected to the connector provided by its ID\n     * @param  {string} connectorId ID of the connector\n     */\n    removeWiresByConnectorId(connectorId) {\n        let connector = this.getConnectorById(connectorId);\n\n        connector.wireIds.forEach(wireId => {\n            let wire = this.getWireById(wireId);\n\n            let { from, to } = wire.connection;\n\n            // get the other connector that is the wire connected to\n            let otherConnector = connectorId === from.id ? to.connector : from.connector;\n\n            // delete the wire record from the other connector\n            otherConnector.wireIds.delete(wireId);\n\n            // remove the wire representation using jQuery\n            $('#' + wireId).remove();\n\n            // if otherConnector is an input connector, set its state to unknown\n            if (otherConnector.isInputConnector) {\n                otherConnector.setState(Logic.state.unknown);\n                this.startNewSimulation(otherConnector, Logic.state.unknown);\n            }\n        });\n\n        // clear the list of wire Ids\n        connector.wireIds.clear();\n        // if connector is an input connector, set its state to unknown\n        if (connector.isInputConnector) {\n            connector.setState(Logic.state.unknown);\n            this.startNewSimulation(connector, Logic.state.unknown);\n        }\n    }\n\n    /**\n     * Find the correct instance of editorElements.Box in the app's boxes by the provided id\n     * @param  {string} boxId id of the box\n     * @return {editorElements.Box} instance of the box\n     */\n    getBoxById(boxId) {\n        for (let i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].svgObj.id === boxId) {\n                return this.boxes[i];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Find the correct instance of editorElements.Box in the app's boxes by ID of a connector that belongs to this box\n     * @param  {string} boxId id of the connector\n     * @return {editorElements.Box} instance of the box\n     */\n    getBoxByConnectorId(connectorId) {\n        for (let i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].getConnectorById(connectorId) !== undefined) {\n                return this.boxes[i];\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get instance of a connector based on it's ID (and also on an instance of editorElements.Wire if provided)\n     *\n     * The wire variable is used as heuristic: When we know the wire, we have to check only\n     * two gates instead of all of them\n     * @param  {string} connectorId id of the connector\n     * @param  {editorElements.Wire} [wire]      instance of the Wire that is connected to this connector\n     * @return {editorElements.Connector}        instance of the connector\n     */\n    getConnectorById(connectorId, wire = undefined) {\n        if (wire !== undefined) {\n            // we know the wire -- we can check only gates at the ends of this wire\n            const { from, to } = wire.connection;\n\n            if (from.id === connectorId) return from.connector;\n\n            if (to.id === connectorId) return to.connector;\n        } else {\n            // we do not know the wire -- we have to check all gates\n            for (const box of this.boxes) {\n                const connector = box.getConnectorById(connectorId);\n                if (connector) {\n                    return connector;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Get the logical jQuery target based on the factual jQuery target.\n     *\n     * If the object, that user interacted with, is not a connector and is in a group,\n     * return the group jQuery object instead of the original jQuery object.\n     * @param  {target} target jQuery target of the object user interacted with\n     * @return {target}        jQuery target of the object user wanted to interact with\n     */\n    getRealJQueryTarget(target) {\n        let $target = $(target);\n        if (!$target.hasClass('connector') && $target.parents('g').length > 0) {\n            $target = $target.parent();\n            while ($target.prop('tagName') !== 'G' && $target.prop('tagName') !== 'g') {\n                $target = $target.parent();\n            }\n        }\n        return $target;\n    }\n\n    // returns the editorElement that user interacted with, the \"target\" argument is a jQuery element\n    /**\n     * Get instance of some object from editorElement based on the jQuery target\n     * @param  {target} target jQuery target that user interacted with\n     * @return {editorElements.NetworkElement} instance of an object derived from editorElements.NetworkElement that the user interacted with\n     */\n    getRealTarget(target) {\n        if (target === undefined) {\n            return undefined;\n        }\n\n        // eventy se museji zpracovat tady, protoze v SVG se eventy nepropaguji\n        let $target = $(target);\n\n        if ($target.hasClass('connector')) {\n            // this is a connector, don't traverse groups\n            return this.getConnectorById($target.attr('id'));\n        } else if ($target.parents('g').length > 0) {\n            // this element is in a group and it is not a connector\n\n            // traversing up the DOM tree until we find the closest group\n            let $parentGroup = $target.parent();\n            while ($parentGroup.prop('tagName') !== 'G' && $parentGroup.prop('tagName') !== 'g') {\n                $parentGroup = $parentGroup.parent();\n            }\n\n            // try to match the jQuery element to the logical element using DOM classes\n\n            if ($parentGroup.hasClass('box')) {\n                // return the corresponding box\n                return this.getBoxById($parentGroup.attr('id'));\n            } else if ($parentGroup.hasClass('wire')) {\n                // return the corresponding wire\n                return this.getWireById($parentGroup.attr('id'));\n            } else {\n                // found a group that contains the target, but this group does not match any known element types\n                return undefined;\n            }\n        } else {\n            // element does not match any known element types\n            return undefined;\n        }\n    }\n\n    /**\n     * Add an element to the canvas\n     * @param  {editorElements.NetworkElement}  element Element that will be added on the canvas\n     * @param  {Boolean} [refresh=true] if true, the SVG document will be reloaded after adding this element\n     */\n    appendElement(element, refresh = true) {\n        this.appendJQueryObject(element.get(), refresh);\n    }\n\n    /**\n     * Append a jQuery element to the SVG document (helper for this.appendElement)\n     * @param  {object}  object         jQuery element that will be added to the SVG document\n     * @param  {Boolean} [refresh=true] if true, the SVG document will be reloaded after adding this element\n     */\n    appendJQueryObject(object, refresh = true) {\n        this.$svg.append(object);\n        if (refresh) this.refresh();\n    }\n\n    /**\n     * Add a new pattern to the definitions element in the SVG document\n     * @param {svgObj.Pattern} pattern pattern that will be added to the <devs> element in the SVG document\n     */\n    addPattern(pattern) {\n        this.$defs.append(pattern);\n        this.refresh();\n    }\n\n    /**\n     * Reload the SVG document (needed to display a newly appended jQuery object)\n     */\n    refresh() {\n        this.$svg.html(this.$svg.html());\n        console.log('SVG document has been reloaded.');\n    }\n\n    /**\n     * Display the context menu on the specified position\n     * @param  {number} x       horizontal position in CSS pixels\n     * @param  {number} y       vertical position in CSS pixels\n     * @param  {jQuery.element} $target the item user clicked on (used to display \"remove this element\"-type items in the menu)\n     */\n    displayContextMenu(x, y, $target) {\n        this.contextMenu.display(x, y, $target);\n\n        // if tutorial exists, call tutorial callback\n        if (this.tutorial) {\n            this.tutorial.onContextMenuOpened();\n        }\n    }\n\n    /**\n     * hide the context menu\n     */\n    hideContextMenu() {\n        this.contextMenu.hide();\n    }\n\n    /**\n     * snap a value to a grid\n     * @param  {number} value value in SVG pixels\n     * @return {number}       the value rounded to the closest number divisible by the grid size\n     */\n    snapToGrid(value) {\n        return Math.round(value / this.gridSize) * this.gridSize;\n    }\n\n    /**\n     * convert grid pixels to SVG pixels\n     * @param  {number} value distance in grid pixels\n     * @return {number}       distance in SVG pixels\n     */\n    gridToSVG(value) {\n        return value * this.gridSize;\n    }\n\n    /**\n     * convert SVG pixels to grid pixels\n     * @param {number} value distance in SVG pixels\n     * @return {number}      distance in grud pixels\n     */\n    SVGToGrid(value) {\n        return value / this.gridSize;\n    }\n\n    /**\n     * static function for snapping a value to a grid\n     * @param  {number} value value in SVG pixels\n     * @param  {number} gridSize size of the grid in SVG pixels\n     * @return {number}       the value rounded to the closest number divisible by the grid size\n     */\n    static snapToGrid(value, gridSize) {\n        return Math.round(value / gridSize) * gridSize;\n    }\n\n    /**\n     * move an element to the front in the canvas\n     * @param  {string} objId id of the element\n     */\n    moveToFrontById(objId) {\n        this.$svg.append($('#' + objId));\n    }\n\n    /**\n     * move an element to the back in the canvas\n     * @param  {string} objId id of the element\n     */\n    moveToBackById(objId) {\n        $('#' + this.background.id).after($('#' + objId));\n    }\n\n    /**\n     * get set of nodes, that cannot be used for wiring at any circumstances\n     * @return {Set} set of nodes (objects containing x and y coordinates) that are not suitable for wiring\n     */\n    getNonRoutableNodes() {\n        let blockedNodes = new Set();\n        // for each box\n        for (const box of this.boxes) {\n            const translate = box.getGridPixelTransform().getTranslate();\n\n            // for each item in blockedNodes (set of blocked nodes with coordinates relative\n            // to the left upper corner of rect; unit used is \"one gridSize\") convert the coordinates\n            // to absolute (multiple with gridSize and add position of rect) and add the result to the set\n            for (const node of box.blockedNodes) {\n                blockedNodes.add({\n                    x: translate.x + node.x,\n                    y: translate.y + node.y\n                });\n            }\n        }\n\n        // FOR DEBUG ONLY: display the non routable nodes\n        /*\n\n        if(this.nodeDisplay) {\n            for (const rectangleId of this.nodeDisplay) {\n                $(`#${rectangleId}`).remove();\n            }\n        }\n\n        this.nodeDisplay = [];\n\n        let first = true;\n\n        for (const node of blockedNodes) {\n            const x = this.gridToSVG(node.x);\n            const y = this.gridToSVG(node.y);\n\n            const w = 4;\n            const p = w / 2;\n\n            const nodeRectangle = new Rectangle(x - p, y - p, w, w, first ? \"blue\" : \"red\", \"none\")\n            this.nodeDisplay.push(nodeRectangle.id);\n            this.appendElement(nodeRectangle, false);\n\n            first = false;\n        }\n\n        this.refresh();\n\n        // */\n        // END FOR DEBUG ONLY\n\n        // return the set\n        return blockedNodes;\n    }\n\n    /**\n     * get set of nodes, that are inconvenient for wiring, but can be used, just are not preferred\n     * @return {Set} set of nodes (objects containing x and y coordinates) that are not preferred for wiring\n     */\n    getInconvenientNodes(ignoreWireId) {\n        let inconvenientNodes = new Set();\n        // for each wire\n\n        for (const wire of this.wires) {\n            if (ignoreWireId === undefined || ignoreWireId !== wire.id) {\n                if (wire.inconvenientNodes) {\n                    for (const node of wire.inconvenientNodes) {\n                        inconvenientNodes.add(node);\n                    }\n                }\n            }\n        }\n\n        // FOR DEBUG ONLY: display the inconvenient nodes\n        /*\n\n        if(this.inconvenientNodeDisplay) {\n            for (const rectangleId of this.inconvenientNodeDisplay) {\n                $(`#${rectangleId}`).remove();\n            }\n        }\n\n        this.inconvenientNodeDisplay = [];\n\n        for (const node of inconvenientNodes) {\n            const x = this.gridToSVG(node.x);\n            const y = this.gridToSVG(node.y);\n\n            const w = 4;\n            const p = w / 2;\n\n            const nodeRectangle = new Rectangle(x - p, y - p, w, w, \"orange\", \"none\")\n            this.inconvenientNodeDisplay.push(nodeRectangle.id);\n            this.appendElement(nodeRectangle, false);\n        }\n\n        this.refresh();\n\n        // */\n        // END FOR DEBUG ONLY\n\n        // return the set\n        return inconvenientNodes;\n    }\n}\n","/** @module Logic */\n/**\n * definitions of logic states and basic logic functions used in the simulation\n */\nexport default class Logic {\n    /**\n     * Enum for logic states.\n     *\n     * States:\n     * - `off`\n     * - `on`\n     * - `unknown`\n     * - `oscillating`\n     * @type {Number}\n     */\n    static get state() {\n        return {\n            off: 0,\n            on: 1,\n            unknown: 2,\n            oscillating: 3\n        };\n    }\n\n    /**\n     * list of all states that can be used in the simulation\n     *\n     * This getter iterates over Logic.state and returns an array containing all values of Logic.state's members\n     * @type {Array}\n     */\n    static get stateList() {\n        let states = [];\n\n        // iterate over all defined states and add their values to the states array\n        Object.keys(Logic.state).forEach(key => {\n            states.push(Logic.state[key]);\n        });\n\n        return states;\n    }\n\n    /**\n     * Logic AND\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static and(a, b) {\n        return Logic.runSymmetricRules(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.on],\n            [Logic.state.on, Logic.state.off, Logic.state.off],\n            [Logic.state.on, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.off],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.off],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n    /**\n     * Logic NAND\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static nand(a, b) {\n        return Logic.not(Logic.and(a, b));\n    }\n\n    /**\n     * Logic NOR\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static nor(a, b) {\n        return Logic.not(Logic.or(a, b));\n    }\n\n    /**\n     * Logic NOT\n     * @param  {Logic.state} a first input state\n     * @return {Logic.state}   output state\n     */\n    static not(a) {\n        if (a === Logic.state.on) {\n            return Logic.state.off;\n        } else if (a === Logic.state.off) {\n            return Logic.state.on;\n        } else {\n            return a;\n        }\n    }\n\n    /**\n     * Logic OR\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static or(a, b) {\n        return Logic.runSymmetricRules(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.on],\n            [Logic.state.on, Logic.state.off, Logic.state.on],\n            [Logic.state.on, Logic.state.unknown, Logic.state.on],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.on],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n\n    /**\n     * Logic XNOR\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static xnor(a, b) {\n        return Logic.not(Logic.xor(a, b));\n    }\n\n    /**\n     * Logic XOR\n     * @param  {Logic.state} a first input state\n     * @param  {Logic.state} b second input state\n     * @return {Logic.state}   output state\n     */\n    static xor(a, b) {\n        return Logic.runSymmetricRules(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.off],\n            [Logic.state.on, Logic.state.off, Logic.state.on],\n            [Logic.state.on, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n\n    /**\n     * Finds the correct rule in the array of rules and returns the corresponding return value.\n     * This function expects rules to be symmetric (so `a RULE b` should returns the same value as `b RULE a`),\n     * which allows to cut down on the `rules` array quite a bit\n     * @param  {Logic.state} a     first input state\n     * @param  {Logic.state} b     second input state\n     * @param  {Array} rules       Array of arrays. Each inner array represents a rule in the format [input1, input2, output].\n     *                             The function finds an array, where `a === input1` and `b === input1` (or `a === input2` and `b === input1`)\n     *                             and returns `output` from this array.\n     * @return {Logic.state}       output state\n     */\n    static runSymmetricRules(a, b, rules) {\n        // iterate through all the rules\n        for (const rule of rules) {\n            if ((rule[0] === a && rule[1] === b) || (rule[0] === b && rule[1] === a)) {\n                return rule[2];\n            }\n        }\n\n        // if no rule matches, the output state is unknown\n        return Logic.state.unknown;\n    }\n}\n","import Logic from './Logic';\n\n/**\n * @module Simulation\n */\n\nclass stateChange {\n    constructor(connectorId, state, whoCausedIt) {\n        this.connectorId = connectorId;\n        this.state = state;\n        this.whoCausedIt = whoCausedIt;\n    }\n}\n\n/**\n * This is a dummy that does nothing, just logs the function calls.\n *\n * Used on networks that has not been yet simulated but user tries to change logic values.\n */\nexport class SimulationDummy {\n    notifyChange() {\n        console.log('SimulationDummy.notifyChange() has been called.');\n    }\n\n    run() {\n        console.log('SimulationDummy.run() has been called.');\n    }\n}\n\n/**\n * This class runs the network simulation.\n *\n * _note: all connectors that are used in this class are **output connectors**_\n */\nexport default class Simulation {\n    /**\n     * @param {App} appInstance instance of [App](./module-App.html)\n     */\n    constructor(appInstance) {\n        /**\n         * instance of App this Simulation belongs to\n         * @type {App}\n         */\n        this.appInstance = appInstance;\n\n        /**\n         * maps each affected output connector to it's directly preceeding output connectors\n         * @type {Map}\n         */\n        this.predecessors = new Map();\n\n        /**\n         * maps waveId to an array of affected outputConnectors\n         * @type {Map}\n         */\n        this.waves = new Map();\n        this.wave = 0;\n\n        /**\n         * maps cycled connector id to set of states this connector was in\n         * @type {Map}\n         */\n        this.cycledConnectors = new Map();\n\n        /**\n         * set of cycled connectors that have been already resolved\n         * @type {Set}\n         */\n        this.resolvedCycledConnectors = new Set();\n    }\n\n    /**\n     * run the simulation\n     */\n    run() {\n        this.wave++;\n        while (this.waves.has(this.wave)) {\n            this.step();\n            this.waves.delete(this.wave); // clean old waves on the go\n            this.wave++;\n        }\n    }\n\n    /**\n     * one step/wave of the simulation\n     *\n     * determines states of the connectors in the current wave, detects cycles\n     */\n    step() {\n        for (let { connectorId, state, whoCausedIt } of this.waves.get(this.wave)) {\n            // skip resolved cycles\n            if (this.resolvedCycledConnectors.has(connectorId)) {\n                continue;\n            }\n\n            // skip connector that are cycles\n            if (this.cycledConnectors.has(connectorId)) {\n                // get the set of states that this connector appeared from the moment the signal first cycled\n                let states = this.cycledConnectors.get(connectorId);\n\n                // if the connector already had this state in this cycle, resolve the cycle\n                if (states.has(state)) {\n                    // if there are more states in the set, the connector is oscillating\n                    // (else it keeps its state and we just break the cycle)\n                    if (states.size > 1) {\n                        state = Logic.state.oscillating;\n                    }\n\n                    // mark this connector as resolved\n                    this.resolvedCycledConnectors.add(connectorId);\n\n                    // this is a new, unseen state, add it to the set and continue simulating the cycle\n                } else {\n                    states.add(state);\n                }\n\n                // map the modified set of states to the connector\n                this.cycledConnectors.set(connectorId, states);\n            }\n\n            this.whoCausedIt = connectorId;\n            /*  process all outputConnectors by setting their state\n                this will trigger a following event chain:\n                    outputConnector changes\n                    -> all connected wires change\n                    -> all inputConnectors connected to these wires change\n                    -> all elements that contain these inputConnectors change\n                    -> these elements compute the new state of their output connectors and call notifyChange()\n            */\n\n            if (whoCausedIt) {\n                this.addPredecessor(connectorId, whoCausedIt);\n            }\n\n            if (\n                !this.cycledConnectors.has(connectorId) &&\n                this.getAllPredecessors(connectorId).has(connectorId)\n            ) {\n                this.cycledConnectors.set(connectorId, new Set([state]));\n            }\n\n            // reflect the changes in SVG\n            let connector = this.appInstance.getConnectorById(connectorId);\n            if (connector) {\n                connector.setState(state);\n            }\n        }\n        this.whoCausedIt = undefined;\n    }\n\n    /**\n     * mark a predecessorConnectorId as a predecessor of connectorId\n     * @param {string} connectorId ID of a connector\n     * @param {string} predecessorConnectorId predecessor of `connectorId`\n     */\n    addPredecessor(connectorId, predecessorConnectorId) {\n        if (!this.predecessors.has(connectorId)) {\n            this.predecessors.set(connectorId, new Set());\n        }\n\n        this.predecessors.get(connectorId).add(predecessorConnectorId);\n    }\n\n    /**\n     * get set of all output connectors that are before this output connector\n     * @param  {string} connectorId ID of a connector\n     * @return {Set}                set of connector ids that are before this output connector\n     */\n    getAllPredecessors(connectorId) {\n        if (!this.predecessors.has(connectorId)) {\n            this.predecessors.set(connectorId, new Set());\n        }\n\n        let all = new Set();\n\n        this.predecessors.get(connectorId).forEach(all.add, all);\n\n        let prevSize = 0;\n        let size = all.size;\n        while (prevSize < size) {\n            for (let connector of all) {\n                if (this.predecessors.has(connector)) {\n                    this.predecessors.get(connector).forEach(all.add, all);\n                }\n            }\n            prevSize = size;\n            size = all.size;\n        }\n\n        return all;\n    }\n\n    /**\n     * Notify a change in the network. This function adds the changed connector to the next wave\n     * @param  {string} connectorId ID of the changed connector\n     * @param  {Logic.state} state  new [Logic.state](./module-Logic.html#.state) of the connector\n     */\n    notifyChange(connectorId, state) {\n        let waveId = this.wave + 1;\n\n        if (!this.waves.has(waveId)) {\n            this.waves.set(waveId, []);\n        }\n\n        this.waves.get(waveId).push(new stateChange(connectorId, state, this.whoCausedIt));\n    }\n}\n","/** @module editorElements */\n\n// transform\nexport { default as Transform } from './editorElements/Transform';\n\n// connectors\nexport { default as InputConnector } from './editorElements/InputConnector';\nexport { default as OutputConnector } from './editorElements/OutputConnector';\n\n// boxes\nexport { default as InputBox } from './editorElements/InputBox';\nexport { default as OutputBox } from './editorElements/OutputBox';\nexport { default as Gate } from './editorElements/Gate';\nexport { default as Blackbox } from './editorElements/Blackbox';\n\n// helper wire\nexport { default as HelperWire } from './editorElements/HelperWire';\n\n// wire\nexport { default as Wire } from './editorElements/Wire';\n","import {\n    Group,\n    Rectangle,\n    MultiLineText,\n    PolyLine,\n    PolyLinePoints,\n    PolyLinePoint\n} from '../svgObjects';\nimport Logic from '../Logic';\n\nimport Box from './Box';\n\n/** @module editorElements.Blackbox */\n\n/**\n * Blackbox is a box that is defined by its evaluation function\n * @extends Box\n */\nexport default class Blackbox extends Box {\n    /**\n     * @param {App} appInstance  instance of [App](./module-App.html)\n     * @param {number} inputConnectors  number of input connectors\n     * @param {number} outputConnectors number of output connectors\n     * @param {Function} evalFunction   function that takes `inputConnectors` [Logic.state](./module-Logic.html#.state)s\n     *                                  and returns `outputConnectors` Logic.states.\n     * @param {String} [name]        name that will be displayed on the blackbox\n     */\n    constructor(appInstance, inputConnectors, outputConnectors, evalFunction, name = '') {\n        const width = 11;\n        const height = Math.max(inputConnectors, outputConnectors) * 2;\n\n        super(appInstance, name, 'blackbox', width, height);\n\n        const connectorPinLenght = 2.5 * this.gridSize;\n\n        // override default svgObj structure\n        this.svgObj = new Group();\n\n        // transparent background rectangle\n        let hitbox = new Rectangle(0, 0, this.width, this.height, 'none', 'none');\n        hitbox.$el.addClass('rect');\n\n        this.svgObj.addChild(hitbox);\n\n        // main rectangle\n        const bodyWidth = this.width - 2 * connectorPinLenght;\n\n        let rectangle = new Rectangle(\n            connectorPinLenght,\n            0,\n            bodyWidth,\n            this.height,\n            'white',\n            'black'\n        );\n        rectangle.addAttr({ 'stroke-width': '2.5' });\n        rectangle.$el.addClass('rect');\n\n        this.svgObj.addChild(rectangle);\n\n        // text description of the box\n        const textWidth = bodyWidth - this.gridSize;\n        const textHeight = this.height - this.gridSize;\n        let text = new MultiLineText(\n            (this.width - textWidth) / 2, // horizontal centering\n            (this.height - textHeight) / 2, // vertical centering\n            textWidth,\n            textHeight,\n            name.toUpperCase(),\n            this.gridSize * 1.2\n        );\n        this.svgObj.addChild(text);\n\n        // add input connectors\n        for (let i = 0; i < inputConnectors; ++i) {\n            const gridPosition = i * 2 + 1;\n            const pixelPosition = gridPosition * this.gridSize;\n\n            let pin = new PolyLine(\n                new PolyLinePoints([\n                    new PolyLinePoint(0, pixelPosition),\n                    new PolyLinePoint(connectorPinLenght, pixelPosition)\n                ]),\n                1,\n                'black'\n            );\n\n            this.svgObj.addChild(pin);\n\n            // add the connector\n            this.addInputConnector(0, gridPosition);\n        }\n\n        // add output connectors\n        for (let i = 0; i < outputConnectors; ++i) {\n            const gridPosition = i * 2 + 1;\n            const pixelPosition = gridPosition * this.gridSize;\n\n            let pin = new PolyLine(\n                new PolyLinePoints([\n                    new PolyLinePoint(this.width - connectorPinLenght, pixelPosition),\n                    new PolyLinePoint(this.width, pixelPosition)\n                ]),\n                1,\n                'black'\n            );\n\n            this.svgObj.addChild(pin);\n\n            this.addOutputConnector(width, gridPosition);\n        }\n\n        this.svgObj.$el.addClass('box');\n\n        /**\n         * function that takes `inputConnectors` [Logic.state](./module-Logic.html#.state)s\n         * and returns `outputConnectors` Logic.states.\n         */\n        this.evalFunction = evalFunction;\n\n        // regenerate the blocked nodes after adding all the connectors\n        this.generateBlockNodes();\n    }\n\n    /**\n     * get data of this blackbox as a JSON-ready object\n     * @return {Object} javascript object containing essential data for this blackbox\n     */\n    get exportData() {\n        let data = super.exportData;\n        data.inputs = this.inputConnectors.length;\n        data.outputs = this.outputConnectors.length;\n\n        // generate the truth table\n\n        data.table = [];\n\n        // array of tested input states\n        const stateList = Logic.stateList;\n\n        // recursive function that generates all possible inputs\n        const getPermutations = length => {\n            let permutations = [];\n            switch (length) {\n                case 0:\n                    return [];\n                case 1:\n                    for (const state of stateList) {\n                        permutations.push([state]);\n                    }\n                    return permutations;\n                default:\n                    for (const state of stateList) {\n                        for (const perm of getPermutations(length - 1)) {\n                            permutations.push([state, ...perm]);\n                        }\n                    }\n                    return permutations;\n            }\n        };\n\n        // generate outputs for all the possible inputs\n        for (const inputValues of getPermutations(data.inputs)) {\n            const outputValues = this.evalFunction(...inputValues);\n\n            // if there is an output value that is not Logic.state.unknown, add this line to the\n            // truthtable, otherwise don't add it (if all output values are Logic.state.unknown,\n            // the input combination does not have to be defines, because Logic.state.unknown is the default value)\n            if (\n                outputValues.reduce((accumulator, current) => {\n                    return accumulator || current !== Logic.state.unknown;\n                })\n            ) {\n                data.table.push([...inputValues, ...outputValues]);\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * proccess the input connector states and reflect them in the output connector states according\n     * to the logic defined by this.evalFunction\n     */\n    refreshState() {\n        const inputStates = this.inputConnectors.map(conn => conn.state);\n        // call the evalFunction to get the output states\n        const outputStates = this.evalFunction(...inputStates);\n\n        // apply the outputStates to the outputConnectors\n        for (let i = 0; i < outputStates.length; ++i) {\n            this.outputConnectors[i].setState(outputStates[i]);\n        }\n    }\n\n    generateBlockNodes() {\n        // add blocked nodes on the connectors and between them as well\n\n        let specialNodes = [];\n        for (let i = 1; i < this.inputConnectors.length * 2; ++i) {\n            specialNodes.push({\n                x: 0,\n                y: i\n            });\n        }\n        for (let i = 1; i < this.outputConnectors.length * 2; ++i) {\n            specialNodes.push({\n                x: this.gridWidth,\n                y: i\n            });\n        }\n\n        super.generateBlockNodes(0, 1, 0, 1, ...specialNodes);\n    }\n}\n","import { Group, Rectangle, SvgImage } from '../svgObjects';\n\nimport NetworkElement from './NetworkElement';\nimport InputConnector from './InputConnector';\nimport OutputConnector from './OutputConnector';\nimport Transform from './Transform';\n\n/** @module editorElements.Box */\n\n/**\n * Parent class for gates and input and output boxes. Defines all the factors\n * that the boxes have in common (svgObj structure, draggability and rotatability...)\n * @extends NetworkElement\n */\nexport default class Box extends NetworkElement {\n    /**\n     * @param {App} appInstance  instance of [App](./module-App.html)\n     * @param {string} name       name of the element (input, output, and, or, xor...)\n     * @param {string} category   type of the element (io, gate)\n     * @param {number} gridWidth  width of the element in grid pixels\n     * @param {number} gridHeight height of the element in grid pixels\n     */\n    constructor(appInstance, name, category, gridWidth, gridHeight) {\n        super(appInstance);\n\n        /**\n         * specifies the box type within the category (input/output in io, and/or/... in gate)\n         * @type {string}\n         */\n        this.name = name;\n\n        /**\n         * specifies the box category (io for input or output, gate for logic gates)\n         * @type {string}\n         */\n        this.category = category;\n\n        /**\n         * size of the grid in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = this.appInstance.gridSize;\n\n        /**\n         * array of connectors of this box\n         * @type {Array}\n         */\n        this.connectors = [];\n\n        /**\n         * svgObj containing all SVG data used to display this box\n         * @type {svgObj}\n         */\n        this.svgObj = new Group();\n\n        /**\n         * width of this element in SVG pixels\n         * @type {number}\n         */\n        this.width = gridWidth * this.gridSize;\n        /**\n         * height of this element in SVG pixels\n         * @type {number}\n         */\n        this.height = gridHeight * this.gridSize;\n\n        /**\n         * width of this element in grid pixels\n         * @type {number}\n         */\n        this.gridWidth = gridWidth;\n        /**\n         * height of this element in grid pixels\n         * @type {number}\n         */\n        this.gridHeight = gridHeight;\n\n        // transparent background rectangle\n        let rectangle = new Rectangle(0, 0, this.width, this.height, 'none', 'none');\n        rectangle.$el.addClass('rect');\n\n        this.svgObj.addChild(rectangle);\n\n        // image of the element\n        this.image = new SvgImage(0, 0, this.width, this.height, this.url);\n        this.svgObj.addChild(this.image);\n\n        // add type=\"gate\", used in special callbacks in contextmenu\n        this.svgObj.addAttr({ type: category });\n\n        this.svgObj.$el.addClass('box');\n        this.svgObj.$el.addClass(category);\n    }\n\n    /**\n     * url of the image depicting this object\n     * @type {string}\n     */\n    get url() {\n        const category = this.category || '',\n            name = this.name || '',\n            suffix = this.imgSuffix || '';\n\n        return `img/svg/${category}/${name}${suffix}.svg`;\n    }\n\n    /**\n     * get all input connectors of this box\n     * @return {Array} array of input connectors\n     */\n    get inputConnectors() {\n        return this.connectors.filter(conn => conn.isInputConnector);\n    }\n\n    /**\n     * get all output connectors of this box\n     * @return {Array} array of output connectors\n     */\n    get outputConnectors() {\n        return this.connectors.filter(conn => conn.isOutputConnector);\n    }\n\n    /**\n     * get data of this box as a JSON-ready object\n     * @return {Object} javascript object containing essential data for this box\n     */\n    get exportData() {\n        let connections = [];\n\n        // go through all connectors\n        let counter = 0;\n        for (const conn of this.connectors) {\n            // go through each its wire id\n            for (const item of conn.wireIds) {\n                let thisWireId;\n                if (!this.appInstance.exportWireIdMap.has(item)) {\n                    // if the wire id is not in the map, add it and assign new arbitrary id\n                    this.appInstance.exportWireIdMap.set(item, this.appInstance.exportWireId);\n                    thisWireId = this.appInstance.exportWireId;\n                    this.appInstance.exportWireId++;\n                } else {\n                    // else get id from the map\n                    thisWireId = this.appInstance.exportWireIdMap.get(item);\n                }\n\n                // add this connection to the list\n                connections[connections.length] = {\n                    index: counter,\n                    type: conn.type,\n                    wireId: thisWireId\n                };\n            }\n            counter++;\n        }\n\n        return {\n            name: this.name,\n            category: this.category,\n            transform: this.getTransform(true),\n            connections: connections\n        };\n    }\n\n    /**\n     * get set of nodes that are not suitable for wire routing\n     * @param  {Number} [marginTop=0]    top margin of the element (distance from the element that should be also blocked)\n     * @param  {Number} [marginRight=0]  right margin of the element\n     * @param  {Number} [marginBottom=0] bottom margin of the element\n     * @param  {Number} [marginLeft=0]   left margin of the element\n     * @param  {Number} specialNodes     additional nodes that should be added to the set\n     * @return {Set}                     set of not suitable nodes\n     */\n    generateBlockNodes(\n        marginTop = 0,\n        marginRight = 0,\n        marginBottom = 0,\n        marginLeft = 0,\n        ...specialNodes\n    ) {\n        this.blockedNodes = new Set();\n        for (let x = marginLeft; x <= this.gridWidth - marginRight; x++) {\n            for (let y = marginTop; y <= this.gridHeight - marginBottom; y++) {\n                this.blockedNodes.add({\n                    x: x,\n                    y: y\n                });\n            }\n        }\n\n        for (let node of specialNodes) {\n            this.blockedNodes.add(node);\n        }\n    }\n\n    /**\n     * empty function, redefined in inherited elements\n     * refreshState takes input connector values and sets output values accordingly\n     */\n    refreshState() {\n        console.warn('Calling the virtual function refreshState has no effect.');\n    }\n\n    /**\n     * change image to another one that ends with a specified suffix\n     *\n     * *usage:* `changeImage(\"abc\")` changes image url to `image-abc.svg`,\n     * `changeImage()` changes image url to the default one (`image.svg`)\n     * @param  {string} [suffix] new suffix for the image\n     */\n    changeImage(suffix) {\n        if (suffix === undefined || suffix === '') {\n            this.imgSuffix = '';\n        } else {\n            this.imgSuffix = '-' + suffix;\n        }\n\n        this.image.changeUrl(this.url);\n    }\n\n    /**\n     * get a jQuery element representing this box\n     * @return {jQuery.element}\n     */\n    get() {\n        return this.svgObj.get();\n    }\n\n    /**\n     * rotate the set of blocked nodes by 90 degrees to the right or to the left, depending on the parameter\n     *\n     * used to rotate the nodes when the object itself is rotated\n     * @param  {boolean} right rotate clockwise if true, counterclockwise if false\n     */\n    rotateBlockedNodes(center, right) {\n        if (this.rotationParity === undefined) {\n            this.rotationParity = false;\n        }\n\n        this.rotationParity = !this.rotationParity;\n\n        let newBlockedNodes = new Set();\n\n        // rotate the node\n        console.log('center:', center);\n\n        for (const node of this.blockedNodes) {\n            let newNode;\n\n            const parityFactor = this.rotationParity ? 1 : -1;\n\n            if (right) {\n                newNode = {\n                    x: -node.y + this.gridHeight + (center.x - center.y) * parityFactor,\n                    y: node.x + (center.y - center.x) * parityFactor\n                };\n            } else {\n                newNode = {\n                    x: node.y + (center.x - center.y) * parityFactor\n                };\n\n                if (this.rotationParity) {\n                    newNode.y =\n                        -node.x +\n                        this.gridWidth +\n                        (this.gridHeight - center.y - (this.gridWidth - center.x));\n                } else {\n                    newNode.y = -node.x + this.gridHeight + (center.y - center.x);\n                }\n            }\n\n            newBlockedNodes.add(newNode);\n        }\n\n        this.blockedNodes = newBlockedNodes;\n    }\n\n    /**\n     * rotate the set of blocked nodes to the right\n     *\n     * used to rotate the nodes when the object itself is rotated\n     */\n    rotateBlockedNodesRight(center) {\n        this.rotateBlockedNodes(center, true);\n    }\n\n    /**\n     * rotate the set of blocked nodes to the right\n     *\n     * used to rotate the nodes when the object itself is rotated\n     */\n    rotateBlockedNodesLeft(center) {\n        this.rotateBlockedNodes(center, false);\n    }\n\n    rotate(clockWise) {\n        // get the transform value for this box and convert it to grid pixels\n        // (so we don't have to convert between SVG and grid pixels manually)\n        let transform = this.getTransform();\n        transform.toGridPixels(this.appInstance);\n\n        // calculate the center of the box\n        const realCenter = {\n            x: Math.round(this.gridWidth / 2),\n            y: Math.round(this.gridHeight / 2)\n        };\n\n        // swap the coordinates when the rotation parity is 1\n        const center = this.rotationParity\n            ? {\n                  x: realCenter.y,\n                  y: realCenter.x\n              }\n            : realCenter;\n\n        // apply the rotation to the transform object\n        if (clockWise) {\n            transform.rotateRight(center.x, center.y);\n        } else {\n            transform.rotateLeft(center.x, center.y);\n        }\n\n        // rotate the blocked nodes as well\n        if (clockWise) {\n            this.rotateBlockedNodesRight(center);\n        } else {\n            this.rotateBlockedNodesLeft(center);\n        }\n\n        // convert the modified transform back to SVG pixels\n        // and apply it to the svgObj\n        transform.toSVGPixels(this.appInstance);\n        this.svgObj.addAttr({ transform: transform.get() });\n\n        // update the wires\n        this.updateWires();\n\n        // if tutorial exists, call the tutorial callback\n        if (this.appInstance.tutorial) {\n            this.appInstance.tutorial.onBoxRotated();\n        }\n    }\n\n    /**\n     * add a connector to the element on the specified position\n     * @param {number}  left             horizontal distance from the left edge of the element\n     * @param {number}  top              vertical distance from the top edge of the element\n     * @param {Boolean} isInputConnector whether or not should this connector an input connector (`true` for input connector, `false` for output connector)\n     */\n    addConnector(left, top, isInputConnector) {\n        let index = this.connectors.length;\n        if (isInputConnector) {\n            this.connectors[index] = new InputConnector(this.appInstance, left, top);\n        } else {\n            this.connectors[index] = new OutputConnector(this.appInstance, left, top);\n        }\n        this.svgObj.addChild(this.connectors[index].get());\n    }\n\n    /**\n     * add an input connector to the element on the specified position\n     * @param {number} left horizontal distance from the left edge of the element\n     * @param {number} top  vertical distance from the top edge of the element\n     */\n    addInputConnector(left, top) {\n        return this.addConnector(left, top, true);\n    }\n\n    /**\n     * add an output connector to the element on the specified position\n     * @param {number} left horizontal distance from the left edge of the element\n     * @param {number} top  vertical distance from the top edge of the element\n     */\n    addOutputConnector(left, top) {\n        return this.addConnector(left, top, false);\n    }\n\n    /**\n     * get the connector object based on its id\n     * @param  {string} connectorId ID of the {@link Connector}\n     * @return {Connector}             instance of the {@link Connector} or `undefined` if not found\n     */\n    getConnectorById(connectorId) {\n        for (let i = 0; i < this.connectors.length; i++) {\n            if (this.connectors[i].id === connectorId) {\n                return this.connectors[i];\n            }\n        }\n        // if connector not found, return undefined\n        return undefined;\n    }\n\n    /**\n     * get the instance of {@link Transform} representing the state of the transform attribute of this element\n     * @param  {Boolean} [gridPixels=false] if `true`, function will return the result in grid pixels instead of SVG pixels\n     * @return {Transform}                  {@link Transform} of the element\n     */\n    getTransform(gridPixels = false) {\n        let transform;\n        if (!this.svgObj.$el.attr('transform')) {\n            // the element does not have a \"transform\" property --> create it\n            transform = new Transform();\n            transform.setTranslate(0, 0);\n            this.svgObj.addAttr({ transform: transform.get() });\n        } else {\n            // the element does have a \"transform\" property --> change it\n            transform = new Transform(this.svgObj.$el.attr('transform'));\n        }\n\n        // convert values to grid pixels\n        if (gridPixels) {\n            transform.toGridPixels(this.appInstance);\n        }\n\n        return transform;\n    }\n\n    /**\n     * get the instance of {@link Transform} representing the state of the transform attribute of this element _with lenght units in grid pixels_\n     * @return {Transform} {@link Transform} of the element\n     */\n    getGridPixelTransform() {\n        return this.getTransform(true);\n    }\n\n    /**\n     * set the transform attribute of this element\n     * @param {Transform} transform {@link Transform} of the element (with lengths specified in SVG pixels)\n     */\n    setTransform(transform) {\n        this.svgObj.addAttr({ transform: transform.get() });\n    }\n\n    /**\n     * function that is called on every mouse down on this element\n     *\n     * moves the element to the front and calls onMouseDownLeft if applicable\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseDown(event) {\n        this.mouseLeft = false;\n        if (event.which === 1) {\n            this.mouseLeft = true;\n            this.onMouseDownLeft(event);\n\n            // move the DOM element to front\n            this.appInstance.moveToFrontById(this.svgObj.id);\n        }\n    }\n\n    /**\n     * function that is called on every left mouse down on this element\n     *\n     * prepares element for the \"click\" and \"drag and drop\" actions\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseDownLeft(event) {\n        this.mouseMoved = false;\n\n        let transform = this.getTransform();\n\n        // save the current item position into a variable\n        let currentPosition = transform.getTranslate();\n\n        let { pageX, pageY } = this.appInstance.viewbox.transformEvent(event);\n\n        // calculate mouse offset from the object origin\n        this.offset = {\n            x: pageX - currentPosition.x,\n            y: pageY - currentPosition.y\n        };\n    }\n\n    /**\n     * function that is called on every left mouse move with this element\n     * applies the correct transform values to provide the \"drag and drop\" functionality\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseMove(event) {\n        if (this.mouseLeft) {\n            this.svgObj.$el.addClass('grabbed');\n\n            this.mouseMoved = true;\n\n            let { pageX, pageY } = this.appInstance.viewbox.transformEvent(event);\n\n            const left = pageX - this.offset.x;\n            const top = pageY - this.offset.y;\n\n            let transform = this.getTransform();\n            transform.setTranslate(left, top);\n\n            this.setTransform(transform);\n\n            this.updateWires(true);\n        }\n    }\n\n    /**\n     * function that is called on every mouse up on this element\n     * provides the \"click\" functionality and calls the onDrop handler for the \"drag and drop\" functionality\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseUp(event) {\n        if (event.which === 1) {\n            if (this.mouseMoved) {\n                this.onDrop(event);\n            } else {\n                this.onClick();\n            }\n        } else if (event.which === 2) {\n            this.onClickMiddle(event);\n        }\n\n        this.svgObj.$el.removeClass('grabbed');\n    }\n\n    /**\n     * called by onMouseUp when the mouse has been moved between onMouseDown and onMouseUp\n     *\n     * applies grid snapping of the element on the end of the \"drag and drop\" action\n     * @param  {jQuery.MouseEvent} event\n     */\n    onDrop(event) {\n        let { pageX, pageY } = this.appInstance.viewbox.transformEvent(event);\n\n        let left = pageX - this.offset.x;\n        let top = pageY - this.offset.y;\n\n        left = this.appInstance.snapToGrid(left);\n        top = this.appInstance.snapToGrid(top);\n\n        let transform = this.getTransform();\n        transform.setTranslate(left, top);\n\n        this.setTransform(transform);\n\n        this.updateWires();\n\n        // if tutorial exists, call tutorial callback\n        if (this.appInstance.tutorial) {\n            this.appInstance.tutorial.onBoxMoved();\n        }\n    }\n\n    /**\n     * empty function, will be redefined in InputBox\n     */\n    onClick() {}\n\n    /**\n     * custom callback function for middle click that rotates the box by 90 degrees to the right\n     */\n    onClickMiddle(event) {\n        if (event.ctrlKey) {\n            this.rotate(false);\n        } else {\n            this.rotate(true);\n        }\n    }\n\n    /**\n     * Updates all wires connected to this box. Iterates over all wires that are connected to this box\n     * and calls routeWire (or temporaryWire if the `temporary` parameter is set to true) to update the wire routing\n     * @param  {Boolean} [temporary=false] [description]\n     */\n    updateWires(temporary = false) {\n        this.connectors.forEach(conn => {\n            conn.wireIds.forEach(wireId => {\n                let wire = this.appInstance.getWireById(wireId);\n                if (temporary) {\n                    wire.temporaryWire();\n                } else {\n                    wire.routeWire();\n                }\n            });\n        });\n    }\n}\n","import NetworkElement from './NetworkElement';\nimport { Rectangle } from '../svgObjects';\nimport Logic from '../Logic';\n\nimport stateClasses from './stateClasses';\n\n/** @module editorElements.Connector */\n\n/**\n * parent class for input and output connectors\n * @extends NetworkElement\n */\nexport default class Connector extends NetworkElement {\n    /**\n     * @param {App} appInstance link to the [App](./module-App.html) instance that this connector will belong to\n     * @param {number} gridSize  size of the grid in SVG pixels\n     * @param {number} left      horizontal position defined in grid units (SVG pixels divided by the grid size)\n     * @param {number} top       vertical position defined in grid units (SVG pixels divided by the grid size)\n     */\n    constructor(appInstance, left, top) {\n        super(appInstance);\n\n        /**\n         * size of the grid in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = appInstance.gridSize;\n        /**\n         * size of the connector in SVG pixels\n         * @type {number}\n         */\n        this.connectorSize = appInstance.gridSize;\n        /**\n         * offset of the connector from the grid in SVG pixels\n         * @type {number}\n         */\n        this.connectorOffset = this.connectorSize / 2;\n\n        /**\n         * instance of {@link svgObjects.svgObj} that holds all SVG information about this connector\n         * @type {svgObj}\n         */\n        this.svgObj = new Rectangle(\n            left * this.gridSize - this.connectorOffset,\n            top * this.gridSize - this.connectorOffset,\n            this.connectorSize,\n            this.connectorSize,\n            'none',\n            'black'\n        );\n\n        this.svgObj.$el.addClass('connector');\n\n        /**\n         * this flag describes whether this connector is an input connector\n         * @type {Boolean}\n         */\n        this.isInputConnector = false;\n\n        /**\n         * current logical state of this connector\n         * @type {Logic.state}\n         */\n        this.elementState = Logic.state.unknown;\n        this.svgObj.addClass(stateClasses[Logic.state.unknown]);\n\n        /**\n         * set of ids of all wires connected to this connector\n         * @type {Set}\n         */\n        this.wireIds = new Set();\n    }\n\n    /**\n     * whether this connector is an output connector\n     * @return {Boolean}\n     */\n    get isOutputConnector() {\n        return !this.isInputConnector;\n    }\n\n    /**\n     * whether this connector is an output connector\n     * @return {Boolean}\n     */\n    set isOutputConnector(value) {\n        this.isInputConnector = !value;\n    }\n\n    /**\n     * add a wire id to the list of wire ids\n     * @param {string} wireId\n     */\n    addWireId(wireId) {\n        this.wireIds.add(wireId);\n    }\n\n    /**\n     * remove a wire id from the list of wire ids\n     * @param {string} wireId\n     */\n    removeWireId(wireId) {\n        this.wireIds.delete(wireId);\n    }\n\n    /**\n     * remove a wire specified by ID and update the connector\n     * @param  {string} wireId ID of the wire to be removed\n     */\n    removeWireIdAndUpdate(wireId) {\n        this.removeWireId(wireId);\n    }\n\n    /**\n     * set logical state of the connector\n     * @param {Logic.state} state new state of the connector\n     */\n    setState(state) {\n        this.svgObj.removeClasses(...stateClasses);\n        this.svgObj.addClass(stateClasses[state]);\n\n        this.elementState = state;\n    }\n\n    /**\n     * get state of this connector\n     * @return {Logic.state}\n     */\n    get state() {\n        return this.elementState;\n    }\n\n    /**\n     * get svgObj instance content of this connector\n     * @return {svgObjects.Rectangle}\n     */\n    get() {\n        return this.svgObj;\n    }\n\n    /**\n     * call [wireCreationHelper](./module-App.html#wireCreationHelper) on mouse up\n     */\n    onMouseUp(event) {\n        // only left click counts\n        if (event.which === 1) {\n            event = this.appInstance.viewbox.transformEvent(event);\n\n            const mousePosition = {\n                x: event.pageX,\n                y: event.pageY\n            };\n\n            this.appInstance.wireCreationHelper(this.svgObj.id, mousePosition);\n        }\n    }\n}\n","import Logic from '../Logic';\n\nimport Box from './Box';\n\n/** @module editorElements.Gate */\n\n/**\n * Gate is a box that processes the states of its input connectors and returns the result in its output connectors.\n * @extends Box\n */\nexport default class Gate extends Box {\n    /**\n     * @param {App} appInstance  instance of [App](./module-App.html)\n     * @param {string} name       name of the gate (and, not, xor...)\n     */\n    constructor(appInstance, name) {\n        const width = 9;\n        const height = 4;\n\n        super(appInstance, name, 'gate', width, height);\n\n        // ADD CONNECTORS\n\n        let specialNodes = [];\n\n        // output\n        this.addConnector(width, height / 2, false);\n\n        // block the output connector\n        specialNodes.push({\n            x: width,\n            y: height / 2\n        });\n\n        if (this.name === 'not' || this.name === 'repeater') {\n            // input\n            this.addConnector(0, height / 2, true);\n            // block the input connector\n            specialNodes.push({\n                x: 0,\n                y: height / 2\n            });\n        } else {\n            // input\n            this.addConnector(0, height / 4, true);\n            this.addConnector(0, height / (4 / 3), true);\n\n            // block the input connectors\n            specialNodes.push({\n                x: 0,\n                y: height / 4\n            });\n            specialNodes.push({\n                x: 0,\n                y: height / (4 / 3)\n            });\n\n            // add one blocked node between the inputs (for better looking wiring)\n            specialNodes.push({\n                x: 0,\n                y: height / 2\n            });\n        }\n\n        this.generateBlockNodes(...specialNodes);\n\n        this.refreshState();\n    }\n\n    /**\n     * array of valid gate names\n     * @type {Set}\n     */\n    static get validGates() {\n        // return new Set([\"not\", \"and\", \"or\", \"nand\", \"nor\", \"xor\", \"xnor\", \"repeater\"]);\n        return new Set(['not', 'and', 'or', 'nand', 'nor', 'xor', 'xnor']);\n    }\n\n    generateBlockNodes(...specialNodes) {\n        if (specialNodes !== undefined) {\n            super.generateBlockNodes(0, 1, 0, 1, ...specialNodes);\n        } else {\n            super.generateBlockNodes(0, 1, 0, 1);\n        }\n    }\n\n    /**\n     * proccess the input connector states and reflect them in the output connector states according\n     * to the logic corresponding to this gate's name\n     */\n    refreshState() {\n        // map gate names to their logic functions\n        const stateMap = {\n            and: () => Logic.and(this.connectors[1].state, this.connectors[2].state),\n            nand: () => Logic.nand(this.connectors[1].state, this.connectors[2].state),\n            nor: () => Logic.nor(this.connectors[1].state, this.connectors[2].state),\n            not: () => Logic.not(this.connectors[1].state),\n            or: () => Logic.or(this.connectors[1].state, this.connectors[2].state),\n            xnor: () => Logic.xnor(this.connectors[1].state, this.connectors[2].state),\n            xor: () => Logic.xor(this.connectors[1].state, this.connectors[2].state),\n            repeater: () => this.connectors[1].state\n        };\n\n        let state = Logic.state.unknown;\n\n        if (stateMap[this.name]) {\n            state = stateMap[this.name]();\n        }\n\n        // notify the simulator about this change\n        this.appInstance.simulation.notifyChange(this.connectors[0].id, state);\n    }\n}\n","import { PolyLine, PolyLinePoints, PolyLinePoint } from '../svgObjects';\n\nimport NetworkElement from './NetworkElement';\n\n/** @module editorElements.HelperWire */\n\n/**\n * A temporary wire that is connecting a {@link Connector} with a mouse pointer when user creates a wire.\n * @extends NetworkElement\n */\nexport default class HelperWire extends NetworkElement {\n    constructor(appInstance, fromId, mousePosition) {\n        super(appInstance);\n\n        const connector = this.appInstance.getConnectorById(fromId);\n        this.connectorPosition = this.appInstance.getConnectorPosition(connector, true);\n\n        const from = new PolyLinePoint(this.connectorPosition.x, this.connectorPosition.y);\n        const to = new PolyLinePoint(mousePosition.x, mousePosition.y);\n\n        const points = new PolyLinePoints([from, to]);\n\n        this.svgObj = new PolyLine(points, 2, '#8b8b8b');\n    }\n\n    updateMousePosition(mousePosition) {\n        const from = new PolyLinePoint(this.connectorPosition.x, this.connectorPosition.y);\n        const to = new PolyLinePoint(mousePosition.x, mousePosition.y);\n\n        const points = new PolyLinePoints([from, to]);\n\n        this.svgObj.updatePoints(points);\n    }\n\n    /**\n     * get the jQuery element for this helper wire\n     * @return {jQuery.element}\n     */\n    get() {\n        return this.svgObj.get();\n    }\n}\n","import Logic from '../Logic';\n\nimport Box from './Box';\n\n/** @module editorElements.InputBox */\n\n/**\n * InputBox has only output connectors and is used to set the input states for the logic network.\n * @extends Box\n */\nexport default class InputBox extends Box {\n    /**\n     * @param {App} appInstance  instance of [App](./module-App.html)\n     * @param {Boolean} [isOn=false] the initial state of the inputbox (`true` is *on*, `false` is *off*)\n     */\n    constructor(appInstance, isOn = false) {\n        const gridWidth = 7;\n        const gridHeight = 4;\n\n        super(appInstance, 'input', 'other', gridWidth, gridHeight);\n\n        this.addConnector(gridWidth, gridHeight / 2, false);\n\n        this.on = isOn;\n\n        this.generateBlockNodes();\n    }\n\n    /**\n     * get data of this input box as a JSON-ready object\n     * @return {Object} javascript object containing essential data for this input box\n     */\n    get exportData() {\n        let data = super.exportData;\n        data.isOn = this.isOn;\n\n        return data;\n    }\n\n    generateBlockNodes() {\n        // block the input connector node\n        const specialNode = {\n            x: this.gridWidth,\n            y: this.gridHeight / 2\n        };\n        super.generateBlockNodes(0, 1, 1, 0, specialNode);\n    }\n\n    /**\n     * start a new simulation from the output connector\n     */\n    refreshState() {\n        this.appInstance.startNewSimulation(this.connectors[0], this.connectors[0].state);\n    }\n\n    /**\n     * set the state of the inputbox to the corresponding value\n     * @param  {Boolean} isOn set to *on* if `true`, set to *off* if `false`\n     */\n    set on(isOn) {\n        if (isOn) {\n            // turn on\n            this.changeImage('on');\n            this.connectors[0].setState(Logic.state.on);\n            this.refreshState();\n        } else {\n            // turn off\n            this.changeImage();\n            this.connectors[0].setState(Logic.state.off);\n            this.refreshState();\n        }\n\n        this.isOn = isOn;\n    }\n\n    /**\n     * get the state of the inputbox (`true` if *on*, `false` if *off*)\n     * @return {Boolean} [description]\n     */\n    get on() {\n        return this.isOn;\n    }\n\n    /**\n     * toggle the state of the inputbox\n     */\n    onClick() {\n        this.on = !this.on;\n\n        if (this.appInstance.tutorial) {\n            this.appInstance.tutorial.onChangeInputBoxState();\n        }\n    }\n}\n","import Connector from './Connector';\nimport Logic from '../Logic';\n\n/** @module editorElements.InputConnector */\n\n/**\n * Connector that gets its state from a connected value and passes it through to the {@link Box} this connector belongs to.\n * @extends Connector\n */\nexport default class InputConnector extends Connector {\n    /**\n     * Call the constructor from the parent {@link Connector} class and set isInputConnector to true.\n     * @param {App} appInstance link to the [App](./module-App.html) instance that this connector will belong to\n     * @param {number} left      horizontal position defined in grid units (SVG pixels divided by the grid size)\n     * @param {number} top       vertical position defined in grid units (SVG pixels divided by the grid size)\n     */\n    constructor(appInstance, left, top) {\n        super(appInstance, left, top);\n\n        this.isInputConnector = true;\n    }\n\n    /**\n     * Call the setState method of {@link Connector} and than refresh the state of the connected {@link Box}\n     * @param {Logic.state} state new {@link Logic.state} of the connector\n     */\n    setState(state) {\n        super.setState(state);\n        // console.log(\"SET STATE ON IC\", this.id, \":\", state)\n\n        let box = this.appInstance.getBoxByConnectorId(this.svgObj.id);\n        box.refreshState();\n    }\n\n    /**\n     * remove the wire (by calling the removeWireIdAndUpdate of {@link Connector})\n     * and update state of this connector by setting it to undefined using the setState method\n     * @param  {string} wireId ID of the {@link Wire}\n     */\n    removeWireIdAndUpdate(wireId) {\n        super.removeWireIdAndUpdate(wireId);\n        this.setState(Logic.state.unknown);\n    }\n}\n","/** @module editorElements.NetworkElement */\n\n/**\n * parent class for all network elements\n */\nexport default class NetworkElement {\n    /**\n     * Basic constructor for NetworkElement\n     * @param {App} appInstance reference to the instance of [App](./module-App.html) that this element belongs to\n     */\n    constructor(appInstance) {\n        if (!appInstance) {\n            console.error('Parent SVG element has to be defined.');\n        }\n        this.appInstance = appInstance;\n\n        // used to store the svjObject's instance of this element\n        this.svgObj = undefined;\n    }\n\n    /**\n     * Get the unique ID of the SVG element tied to this logical element\n     * @return {string} ID of the SVG element\n     */\n    get id() {\n        return this.svgObj.id;\n    }\n\n    /**\n     * empty callback function to prevent error messages, function is implemented later in the {@link Box} class\n     */\n    onMouseDown() {}\n\n    /**\n     * empty function to prevent error messages, function is implemented later in the {@link Box} and {@link Connector} classes\n     */\n    onMouseUp() {}\n\n    /**\n     * empty function to prevent error messages, function is implemented later in the {@link Box} class\n     */\n    onMouseMove() {}\n\n    /**\n     * \"virtual\" getter for json data, prints an error that it has to be redefined in the derived classes\n     */\n    get exportData() {\n        console.error(\"'json' getter has not been defined for this element\", this);\n        return undefined;\n    }\n}\n","import Logic from '../Logic';\n\nimport Box from './Box';\n\n/** @module editorElements.OutputBox */\n\n/**\n * OutputBox has only input connectors and is used to visualize the output states of the logic network.\n * @extends Box\n */\nexport default class OutputBox extends Box {\n    /**\n     * @param {App} appInstance  instance of [App](./module-App.html)\n     */\n    constructor(appInstance) {\n        const gridHeight = 4;\n        const gridWidth = 5;\n\n        super(appInstance, 'output', 'other', gridWidth, gridHeight);\n\n        this.addConnector(0, gridHeight / 2, true);\n\n        this.generateBlockNodes();\n    }\n\n    /**\n     * set state of this output box to match the state of its input connector\n     */\n    refreshState() {\n        this.setState(this.connectors[0].state);\n    }\n\n    /**\n     * Reflect the input connector state in the appearance of the element - set\n     * the element image to represent the corresponding state\n     * @param {Logic.state} state new state of this outputBox\n     */\n    setState(state) {\n        if (state === Logic.state.on) {\n            if (this.appInstance.tutorial) {\n                this.appInstance.tutorial.onOutputBoxTrue();\n            }\n        }\n\n        let stateMap = {};\n        stateMap[Logic.state.on] = 'on';\n        stateMap[Logic.state.off] = 'off';\n        stateMap[Logic.state.unknown] = '';\n        stateMap[Logic.state.oscillating] = 'osc';\n\n        this.changeImage(stateMap[state]);\n    }\n\n    generateBlockNodes() {\n        // block the input connector node\n        const specialNode = {\n            x: 0,\n            y: this.gridHeight / 2\n        };\n        super.generateBlockNodes(0, 0, 0, 1, specialNode);\n    }\n}\n","import Connector from './Connector';\n\n/** @module editorElements.OutputConnector */\n\n/**\n * Connector that takes a state defined by the {@link Box} it belongs to and passes it to all connected wire\n * @extends Connector\n */\nexport default class OutputConnector extends Connector {\n    /**\n     * Call the constructor from the parent {@link Connector} class and set isOutputConnector to true.\n     * @param {App} appInstance link to the [App](./module-App.html) instance that this connector will belong to\n     * @param {number} left      horizontal position defined in grid units (SVG pixels divided by the grid size)\n     * @param {number} top       vertical position defined in grid units (SVG pixels divided by the grid size)\n     */\n    constructor(appInstance, left, top) {\n        super(appInstance, left, top);\n\n        this.isOutputConnector = true;\n    }\n\n    /**\n     * Call the setState method of {@link Connector} and than set the state of the connected {@link Wire}s\n     * @param {Logic.state} state new {@link Logic.state} of the connector\n     */\n    setState(state) {\n        super.setState(state);\n\n        for (const wireId of this.wireIds) {\n            this.appInstance.getWireById(wireId).setState(state);\n        }\n    }\n}\n","/** @module editorElements.Transform */\n\n/**\n * Helper class used by {@link Transform}.\n *\n * Represents one single property of the transform argument, for example `translate(360 150)`\n * that may be a part of longer transform argument like `transform=\"translate(360 150) rotate(90 30 20)\"`\n */\nclass Property {\n    /**\n     * Initialize the Property object\n     * @param {string} [string] string in the property format `propertyname(list of space separated values)`\n     */\n    constructor(string) {\n        if (string !== undefined) {\n            this.name = string.replace(/^[ ]*([^(]+).*/, '$1');\n            this.args = string.replace(/^[^(]+\\((.*)\\)/, '$1').split(' ');\n        }\n    }\n\n    /**\n     * set or replace the name of this property\n     * @param {string} name new name for this property\n     */\n    setName(name) {\n        this.name = name;\n    }\n\n    /**\n     * set arguments of this property\n     * @param {array} args array of arguments\n     */\n    setArguments(args) {\n        this.args = args;\n    }\n\n    /**\n     * get string representation of the property\n     * @return {string} property in the property format `name(arg1 arg2)`\n     */\n    get() {\n        return this.name + '(' + this.args.join(' ') + ')';\n    }\n}\n\n/**\n * API for manipulating the transform argument used in SVG\n */\nexport default class Transform {\n    /**\n     * Initialize the Transform object\n     * @param {string} [string] string in the format of the `transform` argument in SVG, for example `translate(360 150) rotate(90 30 20)`\n     */\n    constructor(string) {\n        /**\n         * array of {@link Property} instances\n         * @type {Array}\n         */\n        this.items = [];\n\n        if (string !== undefined) {\n            for (const item of string.split(')')) {\n                if (item) {\n                    // if not empty\n                    this.items.push(new Property(item + ')'));\n                }\n            }\n        }\n    }\n\n    /**\n     * convert distances from SVG pixels to grid pixels\n     * @param {App} appInstance instance of [App](./module-App.html)\n     */\n    toGridPixels(appInstance) {\n        this.pixelConversion(val => appInstance.SVGToGrid(val));\n    }\n\n    /**\n     * convert distances from grid pixels to SVG pixels\n     * @param {App} appInstance instance of [App](./module-App.html)\n     */\n    toSVGPixels(appInstance) {\n        this.pixelConversion(val => appInstance.gridToSVG(val));\n    }\n\n    /**\n     * Convert distances using a specified convertor. Used by toGridPixels and toSVGPixels\n     * @param  {Function} convertor function that converts int to int\n     */\n    pixelConversion(convertor) {\n        const propertyMap = {\n            translate: item => {\n                item.args = item.args.map(arg => convertor(arg));\n                return item;\n            },\n            rotate: item => {\n                item.args = [item.args[0], convertor(item.args[1]), convertor(item.args[2])];\n                return item;\n            }\n        };\n\n        this.items = this.items.map(item => {\n            return propertyMap[item.name] ? propertyMap[item.name](item) : item;\n        });\n    }\n\n    /**\n     * find a transform property by name and get its index in the [items](#items) array\n     * @param  {string} name name of the property\n     * @return {number}      index of the property in the array of properties or `-1` if not found\n     */\n    getIndex(name) {\n        for (let i = 0; i < this.items.length; i++) {\n            if (name === this.items[i].name) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * get the translate property\n     * @return {Object} object containing parameters of the translate attribute\n     */\n    getTranslate() {\n        let args = this.getArguments(this.getIndex('translate'));\n\n        return {\n            x: Number(args[0]),\n            y: Number(args[1])\n        };\n    }\n\n    /**\n     * get the rotate property\n     * @return {Object} object containing parameters of the rotate attribute\n     */\n    getRotate() {\n        let args = this.getArguments(this.getIndex('rotate'));\n\n        return {\n            deg: Number(args[0]),\n            centerX: Number(args[1]),\n            centerY: Number(args[2])\n        };\n    }\n\n    /**\n     * set translate to the specified values\n     * @param {number} x horizontal translation\n     * @param {number} y vertical translation\n     */\n    setTranslate(x, y) {\n        this.setParameter('translate', [x, y]);\n    }\n\n    /**\n     * set rotate to the specified values\n     * @param {number} deg     angle of the rotation in degrees\n     * @param {number} centerX horizontal position of the center of the rotation\n     * @param {number} centerY vertical position of the center of the rotation\n     */\n    setRotate(deg, centerX, centerY) {\n        this.setParameter('rotate', [deg, centerX, centerY]);\n    }\n\n    /**\n     * rotate by 90 degrees to the right or left, depending on the parameter `right`\n     * @param {number} centerX horizontal position of the center of the rotation\n     * @param {number} centerY vertical position of the center of the rotation\n     * @param {boolean} right rotate to the right if `true`, to the left if `false`\n     */\n    rotateRightAngle(centerX, centerY, right) {\n        const amount = right ? 90 : 270;\n\n        if (this.getIndex('rotate') === -1) {\n            this.setRotate(amount, centerX, centerY);\n        } else {\n            let newRotation = (parseInt(this.getRotate().deg) + amount) % 360;\n\n            if (newRotation === 180) {\n                // swap center coordinates\n                // because rotate(c, x, y) is defined like transform(-x, -y) rotate(c) transform(x, y)\n                let a = centerX;\n                centerX = centerY;\n                centerY = a;\n            }\n\n            this.setRotate(newRotation, centerX, centerY);\n        }\n    }\n\n    /**\n     * rotate by 90 degrees to the right\n     * @param  {number} centerX horizontal position of the center of the rotation\n     * @param  {number} centerY vertical position of the center of the rotation\n     */\n    rotateRight(centerX, centerY) {\n        this.rotateRightAngle(centerX, centerY, true);\n    }\n\n    /**\n     * rotate by 90 degrees to the left\n     * @param  {number} centerX horizontal position of the center of the rotation\n     * @param  {number} centerY vertical position of the center of the rotation\n     */\n    rotateLeft(centerX, centerY) {\n        this.rotateRightAngle(centerX, centerY, false);\n    }\n\n    /**\n     * get the transform values in a string\n     * @return {string} string that can be used as a value for the transform property of a SVG element\n     */\n    get() {\n        let retVal;\n        for (const item of this.items) {\n            if (retVal) {\n                retVal += ' ' + item.get();\n            } else {\n                retVal = item.get();\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * get arguments of a property specified by index\n     * @param  {number} index index of the property\n     * @return {array}       array of arguments of the specified property\n     */\n    getArguments(index) {\n        return this.items[index].args;\n    }\n\n    /**\n     * set argumets of a property specified by name\n     * @param {string} name name of the property\n     * @param {array} args array of arguments of the specified property\n     */\n    setParameter(name, args) {\n        // determine index of the parameter (if set), else index == -1\n        let index = this.getIndex(name);\n\n        // if the property has been already set, change it (rewrite the array in the right index)\n        // else create a new one (set index to the length of an array --> ad an item to the end)\n        if (index === -1) {\n            index = this.items.length;\n            this.items[index] = new Property();\n            this.items[index].setName(name);\n        }\n\n        // save args under the right index\n        this.items[index].setArguments(args);\n    }\n}\n","/** @module editorElements.Wire */\n\nimport { PolyLine, PolyLinePoints, PolyLinePoint, Group } from '../svgObjects';\nimport Logic from '../Logic';\nimport stateClasses from './stateClasses';\nimport findPath from '../findPath';\n\nimport NetworkElement from './NetworkElement';\n\n/**\n * Wire represents connection of two {@link Connector}s.\n * @extends NetworkElement\n */\nexport default class Wire extends NetworkElement {\n    /**\n     * @param {App} appInstance  instance of [App](./module-App.html)\n     * @param {string}  fromId    id of the first connector this wire will be connected to\n     * @param {string}  toId      id of the second connector this wire will be connected to\n     * @param {Boolean} [refresh=true] if `true`, the [App](./module-App.html) will refresh after creating this wire\n     */\n    constructor(appInstance, fromId, toId, refresh = true, route = true) {\n        super(appInstance);\n\n        this.gridSize = appInstance.gridSize;\n\n        this.connection = {\n            from: {\n                id: fromId,\n                box: this.appInstance.getBoxByConnectorId(fromId),\n                connector: this.appInstance.getConnectorById(fromId)\n            },\n            to: {\n                id: toId,\n                box: this.appInstance.getBoxByConnectorId(toId),\n                connector: this.appInstance.getConnectorById(toId)\n            }\n        };\n\n        if (this.connection.from.connector.isOutputConnector) {\n            if (this.connection.to.connector.isInputConnector) {\n                // desired state\n            } else {\n                // connecting two output connectors\n                throw 'Can not place wire between two output connectors';\n            }\n        } else {\n            if (this.connection.to.connector.isInputConnector) {\n                // connecting two input connectors\n                throw 'Can not place wire between two input connectors';\n            } else {\n                // swap them and we are ready to go\n                [this.connection.from, this.connection.to] = [\n                    this.connection.to,\n                    this.connection.from\n                ];\n            }\n        }\n\n        if (route) {\n            this.routeWire(true, refresh);\n        } else {\n            this.temporaryWire();\n        }\n\n        this.elementState = Logic.state.unknown;\n\n        this.setState(this.connection.from.connector.state);\n\n        if (refresh) {\n            const { connector } = this.connection.to;\n            this.appInstance.startNewSimulation(connector, connector.state);\n        }\n\n        this.svgObj.$el.addClass('wire');\n    }\n\n    get boxes() {\n        return [this.connection.from.box, this.connection.to.box];\n    }\n\n    get connectors() {\n        return [this.connection.from.connector, this.connection.to.connector];\n    }\n\n    /**\n     * get data of this wire as a JSON-ready object\n     * @return {Object} javascript object containing essential data for this wire\n     */\n    get exportData() {\n        return {\n            fromId: this.connection.from.id,\n            toId: this.connection.to.id\n        };\n    }\n\n    /**\n     * set the state of this wire to match the state of the input connector it is connected to\n     * @param {Logic.state} state [description]\n     */\n    setState(state) {\n        this.svgObj.removeClasses(...stateClasses);\n        this.svgObj.addClass(stateClasses[state]);\n\n        this.connection.to.connector.setState(state);\n\n        this.elementState = state;\n    }\n\n    /**\n     * get the current [Logic.state](./modules-Logic.html#.state) of this wire\n     * @return {Logic.state}\n     */\n    get state() {\n        return this.elementState;\n    }\n\n    /**\n     * update the state of this wire\n     */\n    updateWireState() {\n        for (const box of this.boxes) {\n            box.refreshState();\n        }\n    }\n\n    /**\n     * get the jQuery element for this wire\n     * @return {jQuery.element}\n     */\n    get() {\n        return this.svgObj.get();\n    }\n\n    /**\n     * get the PolyLine points for a temporary wire placement connecting the two connectors\n     * @return {PolyLinePoints} new instance of {@link PolyLinePoints}\n     */\n    getTemporaryWirePoints() {\n        let points = new PolyLinePoints();\n        points.append(new PolyLinePoint(this.wireStart.x, this.wireStart.y));\n        points.append(new PolyLinePoint(this.wireEnd.x, this.wireEnd.y));\n        return points;\n    }\n\n    /**\n     * route the wire using the temporary wire points\n     */\n    temporaryWire() {\n        this.wireStart = this.appInstance.getConnectorPosition(\n            this.connection.from.connector,\n            false\n        );\n        this.wireEnd = this.appInstance.getConnectorPosition(this.connection.to.connector, false);\n\n        this.setWirePath(this.getTemporaryWirePoints());\n    }\n\n    /**\n     * route the wire using the modified A* wire routing algorithm\n     */\n    routeWire(snapToGrid = true, refresh = true) {\n        this.wireStart = this.appInstance.getConnectorPosition(\n            this.connection.from.connector,\n            snapToGrid\n        );\n        this.wireEnd = this.appInstance.getConnectorPosition(\n            this.connection.to.connector,\n            snapToGrid\n        );\n\n        this.points = this.findRoute(\n            {\n                x: this.wireStart.x / this.gridSize,\n                y: this.wireStart.y / this.gridSize\n            },\n            {\n                x: this.wireEnd.x / this.gridSize,\n                y: this.wireEnd.y / this.gridSize\n            }\n        );\n\n        this.setWirePath(this.points);\n\n        if (refresh) this.updateWireState();\n\n        // regenerate inconvenient nodes\n        this.generateInconvenientNodes();\n    }\n\n    /**\n     * set the wire to follow the specified points\n     * @param {PolyLinePoints} points instance of {@link PolyLinePoints}\n     */\n    setWirePath(points) {\n        // set the line\n        if (this.svgObj !== undefined) {\n            // this.svgObj.updatePoints(points);\n            for (let child of this.svgObj.children) {\n                child.updatePoints(points);\n            }\n        } else {\n            this.svgObj = new Group();\n\n            let hitbox = new PolyLine(points, 10, 'white');\n            hitbox.addClass('hitbox');\n            hitbox.addAttr({ opacity: 0 });\n            this.svgObj.addChild(hitbox);\n\n            let mainLine = new PolyLine(points, 2);\n            mainLine.addClass('main', 'stateUnknown');\n            this.svgObj.addChild(mainLine);\n        }\n    }\n\n    pathToPolyLine(path) {\n        let totalPath = new PolyLinePoints();\n        for (const point of path) {\n            totalPath.append(new PolyLinePoint(point.x * this.gridSize, point.y * this.gridSize));\n        }\n        return totalPath;\n    }\n\n    /**\n     * find a nice route for the wire\n     * @param  {Object} start object containing numeric attributes `x` and `y` that represent the first endpoint of the wire in grid pixel\n     * @param  {Object} end   object containing numeric attributes `x` and `y` that represent the second endpoint of the wire in grid pixels\n     * @return {PolyLinePoints}       [description]\n     */\n    findRoute(start, end) {\n        let nonRoutable = this.appInstance.getNonRoutableNodes();\n\n        let punishedButRoutable;\n        if (this.svgObj === undefined) {\n            punishedButRoutable = this.appInstance.getInconvenientNodes();\n        } else {\n            punishedButRoutable = this.appInstance.getInconvenientNodes(this.svgObj.id);\n        }\n\n        let path = findPath(start, end, nonRoutable, punishedButRoutable, this.gridSize);\n\n        if (path) {\n            return this.pathToPolyLine(path);\n        }\n\n        // if a path was not found, try again but don't take into account the punished and non routable node\n        path = findPath(start, end, new Set(), new Set(), this.gridSize);\n\n        if (path) {\n            return this.pathToPolyLine(path);\n        }\n\n        // if the path was still not found, give up and return temporary points\n        return this.getTemporaryWirePoints();\n    }\n\n    /**\n     * generate a set of nodes, that are inconvenient for wiring, but can be used, just are not preferred\n     * @return {Set} set of nodes (objects containing x and y coordinates) that are not preferred for wiring\n     */\n    generateInconvenientNodes() {\n        this.inconvenientNodes = new Set();\n\n        let prevPoint;\n\n        this.points.forEach(point => {\n            const x = this.appInstance.SVGToGrid(point.x),\n                y = this.appInstance.SVGToGrid(point.y);\n\n            if (prevPoint === undefined) {\n                // if the prevPoint is undefined, add the first point\n                this.inconvenientNodes.add({ x, y });\n            } else {\n                // else add all the point between the prevPoint (excluded) and point (included)\n\n                if (prevPoint.x === x) {\n                    // if the line is horizontal\n                    let from = Math.min(prevPoint.y, y);\n                    let to = Math.max(prevPoint.y, y);\n\n                    while (from <= to) {\n                        this.inconvenientNodes.add({ x: x, y: from });\n                        from++;\n                    }\n                } else if (prevPoint.y === y) {\n                    // if the line is vertical\n                    let from = Math.min(prevPoint.x, x);\n                    let to = Math.max(prevPoint.x, x);\n\n                    while (from <= to) {\n                        this.inconvenientNodes.add({ x: from, y: y });\n                        from++;\n                    }\n                } else {\n                    // line is neither horizontal nor vertical, throw an error for better future debugging\n                    // console.error(\"getInconvenientNodes: line between two points is neither horizontal nor vertical\");\n                }\n            }\n\n            // set new prevPoint\n            prevPoint = { x, y };\n        });\n    }\n}\n","import Logic from '../Logic';\n\n/**\n * mapping of logical states to css classes\n * @type {Object}\n */\n\nlet map = []; // array so we can use the ...spread operator\n\nmap[Logic.state.on] = 'stateOn';\nmap[Logic.state.off] = 'stateOff';\nmap[Logic.state.unknown] = 'stateUnknown';\nmap[Logic.state.oscillating] = 'stateOscillating';\n\nexport default map;\n","import { manhattanDistance } from './other/helperFunctions';\nimport MapWithDefaultValue from './other/mapWithDefaultValue';\n\nimport { PriorityQueue } from 'libstl'; // note: imported from a node module\n\n/** @module findPath */\n\n/**\n * Heavily modified implementation of the A* algorithm\n * @param  {Object} start object containing numeric attributes `x` and `y` that represent the first endpoint of the wire in grid pixels\n * @param  {Object} end   object containing numeric attributes `x` and `y` that represent the second endpoint of the wire in grid pixels\n * @param  {Set} nonRoutable set of non routable nodes\n * @param  {Set} punishedButRoutable set of nodes that are not optimal for routing\n * @return {Array} array of objects containing numeric attributes `x` and `y`\n */\nexport default function findPath(start, end, nonRoutable, punishedButRoutable) {\n    const distanceFunction = manhattanDistance;\n\n    const wireCrossPunishment = 1;\n    const wireBendPunishment = 1;\n\n    // number of nodes, that can be opened at once\n    // once is this limit exceeded, aStar will fail and return undefined\n    const maxNodeLimit = 100000;\n\n    let closedNodes = new Set();\n    let openNodes = new Set();\n    let openNodeQueue = new PriorityQueue();\n\n    // functions for working with open nodes:\n\n    /**\n     * add a new open node to the structure\n     * @param {Object} node   object containing numeric attributes `x` and `y` that represent the first endpoint of the wire\n     * @param {number} fscore fScore of this node\n     */\n    const addOpenNode = (node, fscore) => {\n        openNodes.add(node);\n        // flip the fscore, because PriorityQueue uses max heap\n        openNodeQueue.enqueue(node, 1 / fscore);\n    };\n\n    /**\n     * get the open node with the lowest fScore and remove it\n     * @return {Object} object containing numeric attributes `x` and `y` that represent the first endpoint of the wire\n     */\n    const getOpenNode = () => {\n        const node = openNodeQueue.dequeue();\n        openNodes.delete(node);\n        return node;\n    };\n\n    let cameFrom = new Map();\n\n    // default value: infinity\n    let gScore = new MapWithDefaultValue(Infinity);\n    gScore.set(start, 0);\n\n    let startFScore = distanceFunction(start, end);\n\n    addOpenNode(start, startFScore);\n\n    openNodes.add(start);\n    openNodeQueue.enqueue(start, 1 / startFScore);\n\n    while (openNodes.size > 0) {\n        // get the value from openNodes that has the lowest fScore\n        const currentNode = getOpenNode();\n\n        // if we reached the end point, reconstruct the path and return it\n        if (currentNode.x == end.x && currentNode.y == end.y) {\n            return reconstructPath(cameFrom, currentNode);\n        }\n\n        // add this node to the closed nodes\n        closedNodes.add(currentNode);\n\n        // the farthest points accessible without avoiding obstacles in every direction\n        // (but max 50 in each direction)\n        for (let direction = 0; direction < 4; direction++) {\n            let newPoint = movePoint(currentNode, direction);\n\n            let wiresCrossed = 0;\n\n            for (let i = 0; i < 50; i++) {\n                // if newPoint is in the set of non routable points,\n                // don't add it and stop proceeding in this direction\n                if (setHasThisPoint(nonRoutable, newPoint)) {\n                    // if this not the end or start point, break\n                    if (\n                        !(newPoint.x === end.x && newPoint.y === end.y) &&\n                        !(newPoint.x === start.x && newPoint.y === start.y)\n                    ) {\n                        break;\n                    }\n                }\n\n                // skip this node, if it has been already closed\n                // or if it is on the list of non routable nodes\n                if (closedNodes.has(newPoint)) {\n                    continue;\n                }\n\n                // calculate possible GScore by applying a punishment for each node (\"bend\") in the path\n                let newGScore = wireBendPunishment + gScore.getWithDefault(currentNode);\n\n                if (setHasThisPoint(punishedButRoutable, newPoint)) {\n                    // if the node is in the set of punished nodes, apply the punishment\n                    wiresCrossed++;\n                }\n\n                // apply the punishment for each wire crossed in this direction\n                // note: we are counting the wires crossed when exporting this direction, not the wires\n                // crossed in the final path, there will be probably only at most of these nodes in the\n                // final path, not multiple\n                newGScore += wiresCrossed * wireCrossPunishment;\n\n                // skip this node if it has worst estimage gscore than in the gscore table\n                if (newGScore >= gScore.getWithDefault(newPoint)) {\n                    continue;\n                }\n\n                cameFrom.set(newPoint, currentNode);\n                gScore.set(newPoint, newGScore);\n\n                const newFScore = newGScore + distanceFunction(newPoint, end);\n\n                if (!openNodes.has(newPoint)) {\n                    // add the point to the list of points\n                    addOpenNode(newPoint, newFScore);\n                }\n\n                // move to the next point in the direciton\n                newPoint = movePoint(newPoint, direction);\n            }\n        }\n\n        if (openNodes.size > maxNodeLimit) {\n            console.log(\n                `aStar: Number of open nodes (${\n                    openNodes.size\n                }) exceeded the limit for open nodes (${maxNodeLimit}).`\n            );\n            break;\n        }\n    }\n    // if we got here, the path was not found\n\n    return undefined;\n}\n\n/**\n * returns `true` if the specified set of points contains the specified point (and returns `false` otherwise)\n * @param {Set} set set of points\n * @param {Object} point object containing numeric attributes `x` and `y`\n */\nfunction setHasThisPoint(set, point) {\n    for (let item of set) {\n        if (item.x === point.x && item.y === point.y) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Helper that moves the passed point in the specified direction. It simply adds or subtracts 1 from one of the coordinates depending on the direction attribute.\n * @param  {Object} point     object containing numeric attributes `x` and `y`\n * @param  {number} direction directions:\n *     - 0: up\n *     - 1: right\n *     - 2: down\n *     - 3: left\n * @return {Object}           object containing numeric attributes `x` and `y`\n */\nfunction movePoint({ x, y }, direction) {\n    // map direction do point coordinate modification\n    const dirMap = {\n        0: () => {\n            y -= 1;\n        },\n        1: () => {\n            x += 1;\n        },\n        2: () => {\n            y += 1;\n        },\n        3: () => {\n            x -= 1;\n        }\n    };\n\n    dirMap[direction]();\n\n    return { x, y };\n}\n\n/**\n * helper backtracking function used by the aStar algorithm to construct the final path\n * @param  {Object} cameFrom    object containing numeric attributes `x` and `y`\n * @param  {Object} currentNode object containing numeric attributes `x` and `y`\n * @return {Array} array of objects containing numeric attributes `x` and `y`\n */\nfunction reconstructPath(cameFrom, currentNode) {\n    let path = [];\n\n    path.push({\n        x: currentNode.x,\n        y: currentNode.y\n    });\n\n    while (cameFrom.has(currentNode)) {\n        currentNode = cameFrom.get(currentNode);\n        path.push({\n            x: currentNode.x,\n            y: currentNode.y\n        });\n    }\n\n    return path;\n}\n","/**\n * @module HelperFunctions\n */\n\nimport stringify from 'json-stringify-pretty-compact'; // note: imported from a module\n\n/**\n * add a cross browser event listener on a mouse scroll\n * @param {string} query DOM query of the element that the listener will be added to\n * @param {Function} func  Function that will be called when the event occurs. The function takes as a parameter an event object.\n */\nexport function addMouseScrollEventListener(query, func) {\n    let MouseWheelHandler = event => {\n        // redeclare for old IE support\n        var event = window.event || event; // eslint-disable-line no-redeclare\n\n        event.delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n\n        func(event);\n\n        return false;\n    };\n\n    let svgelement;\n\n    // if the query is a simple DOM id selector, we can use getElementById which has better backwards compatibility\n    if (query.match(/^#\\w+$/)) {\n        svgelement = document.getElementById(query.substr(1));\n    } else {\n        svgelement = document.querySelector(query);\n    }\n\n    if (svgelement.addEventListener) {\n        // IE9, Chrome, Safari, Opera\n        svgelement.addEventListener('mousewheel', MouseWheelHandler, false);\n        // Firefox\n        svgelement.addEventListener('DOMMouseScroll', MouseWheelHandler, false);\n    } else {\n        // IE 6/7/8\n        svgelement.attachEvent('onmousewheel', MouseWheelHandler);\n    }\n    svgelement.addEventListener(\n        'mousewheel',\n        function(e) {\n            console.log('event', e);\n        },\n        false\n    );\n}\n\n/**\n * convert a data object to JSON string or to a data URI containing a JSON string\n * @param  {Object}  data            object that will be serialized into a JSON string\n * @param  {Boolean} [pretty=false]  if `true`, the code will be proprerly indented, else a more compact syntax will be used\n * @param  {Boolean} [dataUri=false] return dataUri containing the JSON string instead of the pure JSON string\n * @return {string}\n */\nexport function getJSONString(data, pretty = false, dataUri = false) {\n    if (dataUri) {\n        return (\n            'data:application/json;charset=utf-8,' + encodeURIComponent(getJSONString(data, pretty))\n        );\n    } else {\n        if (pretty) return stringify(data, { maxLength: 50 });\n\n        return JSON.stringify(data);\n    }\n}\n\n/**\n * returns the Manhattan distance between the points _a_ and _b_\n * @param  {Object} a object containing numeric attributes `x` and `y`\n * @param  {Object} b object containing numeric attributes `x` and `y`\n * @return {number}\n */\nexport function manhattanDistance(a, b) {\n    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n}\n","/** @module Id */\n\n/**\n * the current instance of Id\n * @type {Id}\n */\nlet existingIdInstance;\n\n/**\n * singleton to generate unique id's\n *\n * usage: `let id = new Id().unique`\n */\nexport default class Id {\n    constructor() {\n        if (!existingIdInstance) {\n            existingIdInstance = this;\n        }\n\n        /**\n         * prefix for the id, that is common in all the Ids\n         * @type {String}\n         */\n        this.prefix = 'id';\n\n        /**\n         * numeric part of the next id (the next id without the prefix)\n         * @type {number}\n         */\n        this.nextId = 0;\n\n        return existingIdInstance;\n    }\n\n    /**\n     * get unique ID\n     * @return {string} new unique ID\n     */\n    get unique() {\n        let retVal = this.prefix + this.nextId;\n\n        // find next unused idXXXX to prevent id collision that might be caused by some other component\n        // (it really should not happen, but this is a simple way to ensure it)\n        while ($('#' + retVal).length) {\n            this.nextId++;\n            retVal = this.generate();\n        }\n        // return this id\n        this.nextId++;\n\n        return retVal;\n    }\n}\n","/** @module MapWithDefaultValue */\n/**\n * Map that has a default value specified in the constructor.\n *\n * For the complete documentation of the Map see [Map in the MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n *\n * Usage:\n * ```JavaScript\n let myMap = new MapWithDefaultValue(Infinity);\n const value = myMap.getWithDefault(key)\n ```\n *\n * _Note: This version is written specially for ES6 compiled into ES5. In non-compiled ES6 is the implementation far more elegant:_\n *\n * ```JavaScript\n export class MapWithDefaultValue extends Map {\n     constructor(defaultValue) {\n         super();\n\n         this.default = defaultValue;\n     }\n\n     get(key) {\n         if(this.has(key)) {\n             return super.get(key);\n         } else {\n             return this.default;\n         }\n     }\n }```\n * @class MapWithDefaultValue\n * @param defaultValue {any} default value that will be returned when the requested key is not found in the map\n */\nexport default function(defaultValue) {\n    let map = new Map();\n    /**\n     * @param  {any} key key of a requested item\n     * @return {any} value of the item with the corresponding key, or defaultValue if the key is not found in the map\n     */\n    map.getWithDefault = key => {\n        return map.has(key) ? map.get(key) : defaultValue;\n    };\n    return map;\n}\n","/** @module svgObjects */\n\n// non-svg classes used as helpers\nexport { default as PolyLinePoint } from './svgObjects/PolyLinePoint';\nexport { default as PolyLinePoints } from './svgObjects/PolyLinePoints';\n\n// virtual svg elements\nexport { default as Pattern } from './svgObjects/Pattern';\nexport { default as Group } from './svgObjects/Group';\n\n// \"physical/touchable\" svg elements\nexport { default as Rectangle } from './svgObjects/Rectangle';\nexport { default as SvgImage } from './svgObjects/SvgImage';\nexport { default as PolyLine } from './svgObjects/PolyLine';\n\nexport { default as Text } from './svgObjects/Text';\nexport { default as MultiLineText } from './svgObjects/MultiLineText';\n","import Tag from './Tag';\n\n/** @module svgObjects.Group */\n\n/**\n * SVG group, used for grouping elements, for example a gate is represented by many elements (rectangle, image, inivisible hitbox rectangle...),\n * but all of the elements need to be transformed together. Using groups the transform property can be set on the group which contains all the elements.\n * @extends Tag\n */\nexport default class Group extends Tag {\n    constructor() {\n        super('g');\n\n        this.children = [];\n    }\n\n    /**\n     * add an element to the group\n     * @param {SvgElement} el an instance of {@link SvgElement}\n     */\n    addChild(el) {\n        this.children.push(el);\n\n        this.$el.append(el.$el);\n        return el; // pro jednodussi \"let rect = g.addChild(new Rectangle(...\"\n    }\n}\n","import Tag from './Tag';\nimport Text from './Text';\n\n/** @module svgObjects.MultiLineText */\n\n/**\n * Multi line text element in SVG\n *\n * Multi line text is not natively supportend in SVG 1.1,\n * the workaround is to use the <foreignObject> element and display\n * a HTML paragraph inside of the SVG document.\n *\n * Because this technique is not supported by all of the browsers,\n * the foreignObject element is wrapped in <switch>, which\n * provides fallback for those cases.\n *\n * read more: [foreignObject on MDN web docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject)\n *\n * @extends Tag\n */\nexport default class MultiLineText extends Tag {\n    /**\n     * @param {number} x       horizontal position in SVG pixels\n     * @param {number} y       vertical position in SVG pixels\n     * @param {number} w       width of the text box in SVG pixels\n     * @param {number} h       height of the text box in SVG pixels\n     * @param {number} text    text content of the text box\n     * @param {string} size    CSS font size of the text\n     * @param {String} [color=\"black\"] color of the text\n     *\n     */\n    constructor(x, y, w, h, text, size, color = 'black') {\n        super('switch');\n\n        let foreignObject = new Tag('foreignObject');\n        let alternativeText = new Text(x, y, w, h, text, size, color);\n\n        foreignObject.addAttr({\n            x,\n            y,\n            width: w,\n            height: h\n        });\n\n        let $wrapper = $('<div>')\n            .attr('xmlns', 'http://www.w3.org/1999/xhtml')\n            .addClass('multilinetext')\n            .css('height', h);\n\n        let $paragraph = $('<p>')\n            .attr('xmlns', 'http://www.w3.org/1999/xhtml')\n            .css('font-size', size)\n            .append(text);\n\n        $wrapper.append($paragraph);\n        foreignObject.$el.append($wrapper);\n\n        this.$el.append(foreignObject.$el).append(alternativeText.$el);\n    }\n}\n","import Tag from './Tag';\n\n/** @module svgObjects.Pattern */\n\n/**\n * pattern object in SVG\n * @extends Tag\n */\nexport default class Pattern extends Tag {\n    /**\n     * @param {string} id     unique id of this pattern\n     * @param {number} width  width of one pattern tile in SVG pixels\n     * @param {number} height height of one pattern tile in SVG pixels\n     */\n    constructor(id, width, height) {\n        super('pattern');\n\n        this.addAttr({\n            id: id,\n            x: 0,\n            y: 0,\n            width: width,\n            height: height,\n            patternUnits: 'userSpaceOnUse',\n            viewBox: '0 0 ' + width + ' ' + height\n        });\n    }\n\n    /**\n     * add a child to this pattern\n     *\n     * pattern behaves a little like {@link Group} - it contains child elements, which represent the content of one tile of the pattern\n     * and the whole package of the child elements is repeated on each tile of the pattern\n     * @param {SvgElement} el element that will be added to the pattern\n     */\n    addChild(el) {\n        this.$el.append(el.$el);\n        return el;\n    }\n}\n","import Tag from './Tag';\n\n/** @module svgObjects.PolyLine */\n\n/**\n * SVG PolyLine (a path defined by sequence of points on plane)\n * @extends Tag\n */\nexport default class PolyLine extends Tag {\n    /**\n     * @param {PolyLinePoints} points points describing this PolyLine\n     * @param {number} [strokeWidth] width of the stroke for this PolyLine in SVG pixels\n     * @param {string} [color] CSS color of this PolyLine\n     */\n    constructor(points, strokeWidth, color) {\n        super('PolyLine');\n\n        let attributes = {\n            points: points.string,\n            fill: 'none',\n            'stroke-width': strokeWidth\n        };\n\n        if (color !== undefined) {\n            attributes.stroke = color;\n        }\n\n        this.addAttr(attributes);\n    }\n\n    /**\n     * update points of this PolyLine\n     * @param {PolyLinePoints} points new set of points describing this PolyLine\n     */\n    updatePoints(points) {\n        this.addAttr({\n            points: points.string\n        });\n    }\n}\n","/** @module svgObjects.PolyLinePoint */\n\n/**\n * one point of {@link PolyLinePoints}, used in the {@link PolyLine} object\n */\nexport default class PolyLinePoint {\n    /**\n     * @param {number} x horizontal coordinate of the PolyLine point\n     * @param {number} y vertical coordinate of the PolyLine point\n     */\n    constructor(x, y) {\n        this.x = 0;\n        this.y = 0;\n        if (x !== undefined && y !== undefined) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    /**\n     * change the coordinates of this point\n     * @param {number} x horizontal coordinate of the PolyLine point\n     * @param {number} y vertical coordinate of the PolyLine point\n     */\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * create PolyLine from a comma separated string (e.g. from a string formatted like this: \"x,y\", for example \"15,8\")\n     * @param  {string} string string in the format \"x,y\" representing a point in the SVG PolyLine\n     * @return {PolyLinePoint} newly created instance of {@link PolyLinePoint}\n     */\n    static parseFromString(string) {\n        let arr = string.split(',');\n        return new PolyLinePoint(arr[0], arr[1]);\n    }\n\n    /**\n     * return a string representation of this PolyLine point\n     * @return {string} string in the format \"x,y\"\n     */\n    get string() {\n        return this.x + ',' + this.y;\n    }\n\n    /**\n     * compare PolyLine points, return `true` if they are equal, else return `false`\n     * @param  {PolyLinePoint} a\n     * @param  {PolyLinePoint} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        return a.x === b.x && a.y === b.y;\n    }\n}\n","import PolyLinePoint from './PolyLinePoint';\n\n/** @module svgObjects.PolyLinePoints */\n\n/**\n * array-like structure used in {@link PolyLinePoints}\n */\nclass SmartArray {\n    /**\n     * @param {Array} [arr] if set, initialized SmartArray will contain these values\n     */\n    constructor(arr) {\n        if (arr !== undefined) {\n            this.arr = arr;\n        } else {\n            this.arr = [];\n        }\n    }\n\n    /**\n     * get a deep copy of this array\n     * @return {SmartArray}\n     */\n    copy() {\n        return SmartArray($.extend(true, [], this.arr));\n    }\n\n    /**\n     * append an item to the array\n     * @param item new item that will be appended to the array\n     */\n    append(item) {\n        return this.addWithIndex(item, this.arr.length);\n    }\n\n    /**\n     * prepend an item to the array\n     * @param item new item that will be prepended to the array\n     */\n    prepend(item) {\n        return this.addWithIndex(item, 0);\n    }\n\n    /**\n     * add a new item at the specified index, move all following items\n     * @param item new item that will be added at the specified index\n     * @param {number} index index of this item\n     */\n    addWithIndex(item, index) {\n        for (let i = this.arr.length; i > index; --i) {\n            this.arr[i] = this.arr[i - 1];\n        }\n        this.arr[index] = item;\n        return this; // to enable chaining of append / preppend / addWithIndex commands\n    }\n\n    /**\n     * get length of the array\n     * @return {number}\n     */\n    get length() {\n        return this.arr.length;\n    }\n\n    /**\n     * get item by index\n     * @param  {number} index index of the item\n     * @return contents of the array on the specified index\n     */\n    getItem(index) {\n        return this.arr[index];\n    }\n\n    /**\n     * @return last element of the array\n     */\n    get last() {\n        if (this.length !== 0) {\n            return this.arr[this.length - 1];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @return first element of the array\n     */\n    get first() {\n        if (this.length !== 0) {\n            return this.arr[0];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * remove an item from the array by index\n     * @param  {number} index index of the item that will be removed\n     */\n    remove(index) {\n        let length = this.length;\n\n        for (let i = index; i < length; ++i) {\n            this.arr[i] = this.arr[i + 1];\n        }\n        this.arr.pop();\n    }\n}\n\n/**\n * points of the {@link PolyLine}\n * @extends SmartArray\n */\nexport default class PolyLinePoints extends SmartArray {\n    /**\n     * @param {Array} [arr] array containing instances of {@link PolyLinePoint}\n     */\n    constructor(arr) {\n        super(arr);\n    }\n\n    /**\n     * get a deep copy of this object\n     * @return {PolyLinePoints}\n     */\n    copy() {\n        return new PolyLinePoints($.extend(true, [], this.arr));\n    }\n\n    /**\n     * append a point\n     * @param  {PolyLinePoint} point a new point\n     */\n    append(point) {\n        // call inherited function to handle the appending\n        super.append(point);\n\n        // if the second to last point is unnecessary, remove it\n        let length = this.length;\n        if (\n            length >= 3 &&\n            ((this.getItem(length - 3).x === this.getItem(length - 2).x &&\n                this.getItem(length - 2).x === this.getItem(length - 1).x) ||\n                (this.getItem(length - 3).y === this.getItem(length - 2).y &&\n                    this.getItem(length - 2).y === this.getItem(length - 1).y))\n        ) {\n            this.remove(length - 2);\n        }\n\n        // return this element (to allow chaining)\n        return this;\n    }\n\n    /**\n     * parse PolyLine from string\n     * @param  {string} string string in the PolyLine format (`x1,y1 x2,y2, x3,y3`)\n     * @return {PolyLinePoints} a new instance of {@link PolyLinePoints} created by parsing the string\n     */\n    static parseFromString(string) {\n        let pointStrings = string.split(' ');\n        let points = new PolyLinePoints();\n\n        for (let i = 0; i < pointStrings.length; ++i) {\n            points.append(PolyLinePoint.parseFromString(pointStrings[i]));\n        }\n\n        return points;\n    }\n\n    /**\n     * get a string representation of this PolyLine\n     * @return {string} string in the PolyLine format (`x1,y1 x2,y2, x3,y3`)\n     */\n    get string() {\n        let string = '';\n        for (let i = 0; i < this.length; ++i) {\n            if (i !== 0) {\n                string += ' ';\n            }\n            string += this.arr[i].string;\n        }\n        return string;\n    }\n\n    /**\n     * wrapper for foreach on the PolyLine points\n     * @param  {Function} func function that will be called on each element\n     */\n    forEach(func) {\n        for (let i = 0; i < this.arr.length; ++i) {\n            func(this.arr[i]);\n        }\n    }\n}\n","import SvgElement from './SvgElement';\n\n/** @module svgObjects.Rectangle */\n\n/**\n * a rectangle in SVG\n * @extends SvgElement\n */\nexport default class Rectangle extends SvgElement {\n    /**\n     * @param {number} x       horizontal position in SVG pixels\n     * @param {number} y       vertical position in SVG pixels\n     * @param {number} w       width in SVG pixels\n     * @param {number} h       height in SVG pixels\n     * @param {string} fill    filling color of the rectangle\n     * @param {string} stroke  stroke color of the rectangle\n     */\n    constructor(x, y, w, h, fill, stroke) {\n        super(x, y, w, h, 'rect');\n        this.addAttr({\n            fill: fill,\n            stroke: stroke,\n            'stroke-width': 0.5,\n            'pointer-events': 'all' // to trigger hover even with transparent background\n        });\n    }\n}\n","import Tag from './Tag';\n\n/** @module svgObjects.SvgElement */\n\n/**\n * represents visible element in SVG that has position and dimensions (for example `rectangle` is a SvgElement, but `pattern` is not, even though both are tags)\n * @extends Tag\n */\nexport default class SvgElement extends Tag {\n    /**\n     * @param {number} x       horizontal position in SVG pixels\n     * @param {number} y       vertical position in SVG pixels\n     * @param {number} w       width in SVG pixels\n     * @param {number} h       height in SVG pixels\n     * @param {string} tagName tag name of the element\n     */\n    constructor(x, y, w, h, tagName) {\n        super(tagName);\n\n        this.addAttr({\n            x: x,\n            y: y,\n            width: w,\n            height: h\n        });\n    }\n}\n","import SvgElement from './SvgElement';\n\n/** @module svgObjects.SvgImage */\n\n/**\n * an image in SVG\n * @extends SvgElement\n */\nexport default class SvgImage extends SvgElement {\n    constructor(x, y, w, h, url) {\n        super(x, y, w, h, 'image');\n        this.addAttr({\n            'xlink:href': url\n        });\n    }\n\n    /**\n     * change url of the image\n     * @param {string} url the new url of the image\n     */\n    changeUrl(url) {\n        this.addAttr({\n            'xlink:href': url\n        });\n    }\n}\n","import Id from '../other/id';\n\n/** @module svgObjects.Tag */\n\n/**\n * Parent class for all svgObjects\n */\nexport default class Tag {\n    /**\n     * @param {string} tagName SVG tag identifier (`rect`, `image`, `PolyLine`)\n     */\n    constructor(tagName) {\n        /**\n         * SVG tag identifier (`rect`, `image`, `PolyLine`)\n         * @type {string}\n         */\n        this.tagName = tagName;\n\n        /**\n         * jQuery element for this tag\n         * @type {jQuery.element}\n         */\n        this.$el = $('<' + this.tagName + '>');\n\n        /**\n         * unique ID of this SVG object\n         * @type {string}\n         */\n        this.id = new Id().unique;\n    }\n\n    /**\n     * add a class to this element\n     * @param {string} name class name to be added\n     */\n    addClass(name) {\n        this.$el.addClass(name);\n    }\n\n    /**\n     * remove class names from this element\n     * @param  {string} classes class names to be removed\n     */\n    removeClasses(...classes) {\n        for (let item of classes) {\n            this.$el.removeClass(item);\n        }\n    }\n\n    /**\n     * set attributes of this element\n     * @param {Object} assoc javascript object that will be mapped into attributes (`{key: value}` -> `key=\"value\"`)\n     */\n    addAttr(assoc) {\n        this.checkIfElementExistsInDOM();\n\n        // add attributes to the element\n        this.$el.attr(assoc);\n    }\n\n    /**\n     * get attribute value by name\n     * @param  {string} name name of the attribute\n     * @return {string}      value of the attribute\n     */\n    getAttr(name) {\n        this.checkIfElementExistsInDOM();\n\n        return this.$el.attr(name);\n    }\n\n    /**\n     * remove attribute by value\n     * @param  {string} name name of the attribute to be removed\n     */\n    removeAttr(name) {\n        this.checkIfElementExistsInDOM();\n\n        this.$el.removeAttr(name);\n    }\n\n    /**\n     * set id of this SVG object\n     * @param  {string} id new id for this object\n     */\n    set id(id) {\n        this.addAttr({ id: id });\n    }\n\n    /**\n     * get id of this SVG object\n     * @return {string}\n     */\n    get id() {\n        return this.getAttr('id');\n    }\n\n    /**\n     * get jQuery element for this SVG object\n     * @return {jQuery.element}\n     */\n    get() {\n        this.checkIfElementExistsInDOM();\n        return this.$el;\n    }\n\n    /**\n     * check if the element exists in dom, if so, refetch it from DOM using jQuery\n     */\n    checkIfElementExistsInDOM() {\n        let $jqElement = $('#' + this.$el.attr('id'));\n        if ($jqElement.length) {\n            this.$el = $jqElement;\n        }\n    }\n}\n","import Tag from './Tag';\n\n/** @module svgObjects.Text */\n\n/**\n * Text element in SVG\n * @extends Tag\n */\nexport default class Text extends Tag {\n    /**\n     * @param {number} x       horizontal position in SVG pixels\n     * @param {number} y       vertical position in SVG pixels\n     * @param {number} w       width of the text box in SVG pixels\n     * @param {number} h       height of the text box in SVG pixels\n     * @param {number} text    text content of the text box\n     * @param {string} size    CSS font size of the text\n     * @param {String} [color=\"black\"] color of the text\n     *\n     */\n    constructor(x, y, w, h, text, size, color = 'black') {\n        super('text');\n        this.addAttr({\n            x: x,\n            y: y,\n            width: w,\n            height: h,\n            fill: color\n        });\n\n        if (size) {\n            this.addAttr({\n                'font-size': size\n            });\n        }\n\n        this.$el.append(text);\n    }\n}\n","import { getLibrary, getNetworkFromLibrary } from './networkLibrary';\n\nimport { Gate } from '../editorElements';\n\n/**\n * Item in the [ContextMenu](./module-ContextMenu.html). ContextMenuItems can be nested using the appendItem function.\n */\nclass ContextMenuItem {\n    /**\n     * @param {string} text          text on the button\n     * @param {ContextMenu} contextMenu instance of the [ContextMenu](./module-ContextMenu.html) this item belongs to\n     * @param {Function} clickFunction callback function that will be called when user clicks this item\n     */\n    constructor(text, contextMenu, clickFunction) {\n        /**\n         * text on the button\n         * @type {string}\n         */\n        this.text = text;\n\n        /**\n         * instance of the [ContextMenu](./module-ContextMenu.html) this item belongs to\n         * @type {ContextMenu}\n         */\n        this.contextMenu = contextMenu;\n\n        /**\n         * jQuery element representing DOM content of this menu item\n         * @type {jQuery.element}\n         */\n        this.$el = $('<li>').text(text);\n\n        // set up click callback if clickFunction is defined\n        if (clickFunction !== undefined) {\n            $(this.$el).click(event => {\n                clickFunction();\n                contextMenu.hide();\n\n                event.stopPropagation();\n            });\n        }\n\n        /**\n         * jQuery element containing the submenu (or undefined, if item has no subitems)\n         * @type {jQuery.element}\n         */\n        this.$submenu = undefined;\n\n        /**\n         * submenu item counter\n         * @type {Number}\n         */\n        this.itemCount = 0;\n\n        // set hover callback\n        $(this.$el).hover(\n            event => {\n                // mouse on\n\n                if (this.length > 0) {\n                    this.$submenu.css({\n                        display: 'block',\n                        top: this.$el.offset().top,\n                        left: this.$el.parent().offset().left + this.$el.parent().width()\n                    });\n\n                    this.contextMenu.$el.after(this.$submenu);\n\n                    event.stopPropagation();\n                }\n            },\n            () => {\n                // mouse out\n                if (this.$submenu) {\n                    this.$submenu.css({\n                        display: 'none'\n                    });\n                }\n\n                // do not stop event propagation, here it is wanted\n                // (because submenu overrides display: none when user moves from this menu item to the submenu)\n            }\n        );\n    }\n\n    /**\n     * instance of [App](./module-App.html) this menu belongs to\n     * @type {App}\n     */\n    get appInstance() {\n        return this.contextMenu.appInstance;\n    }\n\n    /**\n     * number of items in the submenu\n     * @return {Number}\n     */\n    get length() {\n        return this.itemCount;\n    }\n\n    /**\n     * add a CSS class to this item\n     * @param {string} cls [description]\n     */\n    addClass(cls) {\n        this.$el.addClass(cls);\n        return this;\n    }\n\n    /**\n     * append a nested {@link ContextMenuItem} to this item\n     * @param  {ContextMenuItem} item item that will be appended\n     */\n    appendItem(item) {\n        if (!this.$submenu) {\n            this.$submenu = $('<ul>').addClass('subList');\n            this.$submenu.hover(\n                () => {\n                    this.$submenu.css('display', 'block');\n                },\n                () => {\n                    this.$submenu.css('display', 'none');\n                }\n            );\n        }\n        this.$submenu.append(item.$el);\n\n        this.itemCount++;\n\n        return item;\n    }\n\n    /**\n     * get jQuery element of this menu item\n     * @return {jQuery.element} jQuery element containing all DOM content for this menu item\n     */\n    get jQuery() {\n        return this.$el;\n    }\n\n    get jQuerySubmenu() {\n        return this.$submenu;\n    }\n}\n\n/**\n * Menu item that has a custom click callback function that adds a {@link Gate} of the specified type to the [App](./module-App.html)\n * @extends ContextMenuItem\n */\nclass GateMenuItem extends ContextMenuItem {\n    /**\n     * @param {string} type        type of the gate {@link Gate} (and, or, ...)\n     * @param {ContextMenu} contextMenu instance of the [ContextMenu](./module-ContextMenu.html) that this item belongs to\n     */\n    constructor(type, contextMenu) {\n        super(`${type.toUpperCase()} gate`, contextMenu, () => {\n            this.appInstance.newGate(\n                type,\n                this.appInstance.snapToGrid(\n                    this.appInstance.viewbox.transformX(contextMenu.position.x)\n                ),\n                this.appInstance.snapToGrid(\n                    this.appInstance.viewbox.transformY(contextMenu.position.y)\n                )\n            );\n        });\n    }\n}\n\n/**\n * Menu item that has a custom click callback function that adds a specified {@link Blackbox} to the [App](./module-App.html)\n * @extends ContextMenuItem\n */\nclass BlackboxMenuItem extends ContextMenuItem {\n    constructor(name, file, contextMenu) {\n        super(name, contextMenu, () => {\n            getNetworkFromLibrary(file)\n                .then(({ blackbox, name }) => {\n                    const { inputs, outputs, table } = blackbox;\n\n                    // use the name specified in the blackbox item, if it does not exist, use the name for the network\n                    let usedName = blackbox.name || name;\n\n                    this.appInstance.newBlackbox(\n                        inputs,\n                        outputs,\n                        table,\n                        usedName,\n                        this.appInstance.snapToGrid(\n                            this.appInstance.viewbox.transformX(contextMenu.position.x)\n                        ),\n                        this.appInstance.snapToGrid(\n                            this.appInstance.viewbox.transformY(contextMenu.position.y)\n                        )\n                    );\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        });\n    }\n}\n\n/**\n * Menu item that has a custom click callback function that adds a specified Network to the [App](./module-App.html)\n * @extends ContextMenuItem\n */\nclass NetworkMenuItem extends ContextMenuItem {\n    constructor(name, file, contextMenu) {\n        super(name, contextMenu, () => {\n            getNetworkFromLibrary(file)\n                .then(data => {\n                    this.appInstance\n                        .importData(\n                            data,\n                            Math.round(\n                                this.appInstance.viewbox.transformX(contextMenu.position.x) /\n                                    this.appInstance.gridSize\n                            ),\n                            Math.round(\n                                this.appInstance.viewbox.transformY(contextMenu.position.y) /\n                                    this.appInstance.gridSize\n                            )\n                        )\n                        .then(warnings => {\n                            for (const warning of warnings) {\n                                this.appInstance.messages.newWarningMessage(warning);\n                            }\n                        });\n                })\n                .catch(error => {\n                    this.appInstance.messages.newErrorMessage(error);\n                });\n        });\n    }\n}\n\n/** @module ContextMenu */\n/**\n * ContextMenu represents the menu that is displayed to the user when they right click on a canvas.\n * This menu allows user to add elements to the canvas and in the case that user rightclicked\n * on a specific element, this menu allows them to remove this element.\n */\nexport default class ContextMenu {\n    /**\n     * @param {App} appInstance instance of [App](./module-App.html) this menu belongs to\n     */\n    constructor(appInstance) {\n        /**\n         * instance of [App](./module-App.html) this menu belongs to\n         * @type {App}\n         */\n        this.appInstance = appInstance;\n\n        /**\n         * Position of the context menu. It is used to add the new elements to the correct position on the canvas.\n         * @type {Object}\n         */\n        this.position = {\n            x: 0,\n            y: 0\n        };\n\n        /**\n         * jQuery element containing the context menu\n         * @type {jQuery.element}\n         */\n        this.$el = $('<ul>');\n        this.$el.attr('id', 'contextMenu');\n\n        let special = new ContextMenuItem('Special elements', this);\n\n        // add input box\n        special.appendItem(\n            new ContextMenuItem('Input box', this, () => {\n                let position = {\n                    left: this.appInstance.snapToGrid(\n                        appInstance.viewbox.transformX(this.position.x)\n                    ),\n                    top: this.appInstance.snapToGrid(\n                        appInstance.viewbox.transformY(this.position.y)\n                    )\n                };\n\n                appInstance.newInput(position.left, position.top);\n            })\n        );\n\n        // add output box\n        special.appendItem(\n            new ContextMenuItem('Output box', this, () => {\n                let position = {\n                    left: this.appInstance.snapToGrid(\n                        appInstance.viewbox.transformX(this.position.x)\n                    ),\n                    top: this.appInstance.snapToGrid(\n                        appInstance.viewbox.transformY(this.position.y)\n                    )\n                };\n\n                appInstance.newOutput(position.left, position.top);\n            })\n        );\n\n        this.appendItem(special);\n\n        // list of gates that can be added\n        const gates = Gate.validGates;\n        let gateList = new ContextMenuItem('New gate', this, appInstance);\n        for (const name of gates) {\n            gateList.appendItem(new GateMenuItem(name, this));\n        }\n        this.appendItem(gateList);\n\n        // more options will be added in the getLibrary() callback below\n        let networkList = new ContextMenuItem('Add a network', this);\n        networkList.appendItem(\n            new ContextMenuItem('Paste a network', this, () => {\n                this.displayImportDialog();\n            })\n        );\n        this.appendItem(networkList); // always append\n\n        let blackboxList = new ContextMenuItem('Add a blackbox', this); // appends only if contains items (see the callback)\n\n        // network import (blackbox, network)\n        getLibrary()\n            .then(networks => {\n                for (const { name, file, hasTable, hasNetwork } of networks) {\n                    // add a network as a blackbox\n                    if (hasTable) {\n                        blackboxList.appendItem(new BlackboxMenuItem(name, file, this));\n                    }\n\n                    // load a network as a network of components connected with wires\n                    if (hasNetwork) {\n                        networkList.appendItem(new NetworkMenuItem(name, file, this));\n                    }\n                }\n\n                if (blackboxList.length > 0) {\n                    this.appendItem(blackboxList);\n                }\n            })\n            .catch(error => {\n                console.error(error);\n            });\n\n        // add conditional items for box and wire removal\n        this.appendConditionalItem('box', 'Remove this item', id => {\n            this.appInstance.removeBox(id);\n        });\n        this.appendConditionalItem('wire', 'Remove this wire', id => {\n            this.appInstance.removeWireById(id);\n        });\n\n        // add the context menu to the DOM\n        appInstance.$svg.before(this.$el);\n\n        /**\n         * Number of items in this menu (used in the .lenght getter). Conditional items do not count.\n         * @type {Number}\n         */\n        this.itemCount = 0;\n    }\n\n    get length() {\n        return this.itemCount;\n    }\n\n    /**\n     * append a context menu item to the context menu\n     * @param  {ContextMenuItem} item instance of {@link ContextMenuItem} that will be added to this menu\n     */\n    appendItem(item) {\n        this.$el.append(item.jQuery);\n\n        this.itemCount++;\n\n        return item;\n    }\n\n    /**\n     * appends an connditional item (that is shown only if the target has the class itemClass)\n     * @param  {string} itemClass     show the item only if the target has this class\n     * @param  {string} text          text of this menu item\n     * @param  {Function} clickFunction function with one argument (ID of the target) that will be called on click\n     */\n    appendConditionalItem(itemClass, text, clickFunction) {\n        if (!this.conditionalItems) {\n            this.conditionalItems = [];\n        }\n\n        this.conditionalItems[this.conditionalItems.length] = {\n            itemClass: itemClass,\n            text: text,\n            clickFunction: clickFunction\n        };\n    }\n\n    /**\n     * display the dialog for importing a network from a clipboard\n     */\n    displayImportDialog() {\n        let $popup = $('<div>')\n            .addClass('importExport')\n            .addClass('import');\n\n        let textareaId = 'importJSON';\n        let $textblock = $('<textarea>').attr('id', textareaId);\n\n        let lityInstance;\n\n        $popup.append($textblock).append(\n            $('<a>')\n                .attr({\n                    href: '#',\n                    class: 'upload'\n                })\n                .append($('<img>').attr('src', 'img/gui/import.svg'))\n                .append(' import from JSON')\n                .on('click', () => {\n                    let data;\n\n                    try {\n                        data = JSON.parse($('#' + textareaId).val());\n                    } catch (e) {\n                        this.appInstance.messages.newErrorMessage(\n                            'The imported file is not a valid JSON file.'\n                        );\n                        lityInstance.close();\n                    }\n\n                    if (data) {\n                        // proccess the imported data\n                        this.appInstance\n                            .importData(\n                                data,\n                                Math.round(\n                                    this.appInstance.viewbox.transformX(this.position.x) /\n                                        this.appInstance.gridSize\n                                ),\n                                Math.round(\n                                    this.appInstance.viewbox.transformY(this.position.y) /\n                                        this.appInstance.gridSize\n                                )\n                            )\n                            .then(warnings => {\n                                for (const warning of warnings) {\n                                    this.appInstance.messages.newWarningMessage(warning);\n                                }\n                            })\n                            .finally(() => {\n                                lityInstance.close();\n                            });\n                    }\n                })\n        );\n\n        lityInstance = lity($popup);\n\n        // focus on the textblock\n        $textblock.focus();\n    }\n\n    /**\n     * decide whether or not to display specific conditional items\n     * @param  {jQuery.element} $target jQuery target of a MouseEvent (element that user clicked on)\n     */\n    resolveConditionalItems($target) {\n        for (let item of this.conditionalItems) {\n            if ($target.hasClass(item.itemClass)) {\n                this.appendItem(\n                    new ContextMenuItem(item.text, this, () => {\n                        item.clickFunction($target.attr('id'));\n                    })\n                ).addClass('conditional');\n            }\n        }\n    }\n\n    /**\n     * hide all conditional items\n     */\n    hideAllConditionalItems() {\n        this.$el.children('.conditional').remove();\n    }\n\n    /**\n     * displays the context menu with the right set of conditional items\n     * @param  {number} x       horizontal position of the context menu in CSS pixels\n     * @param  {number} y       vertical position of the context menu in CSS pixels\n     * @param  {jQuery.element} $target jQuery target of a MouseEvent (element that user clicked on)\n     */\n    display(x, y, $target) {\n        this.position = {\n            x: x,\n            y: y\n        };\n\n        this.resolveConditionalItems($target);\n\n        this.$el\n            .css({\n                display: 'block',\n                top: y,\n                left: x\n            })\n            // set the width expicitly, or else the menu will widen when displaying a submenu\n            // 2 is to prevent a weird text wrap bug\n            .css('width', 'auto')\n            .css('width', this.$el.innerWidth() + 2);\n    }\n\n    /**\n     * hide the context menu\n     */\n    hide() {\n        this.$el.css({ display: 'none' });\n        $('.subList').css({ display: 'none' });\n        this.hideAllConditionalItems();\n    }\n}\n","import { getJSONString } from '../other/helperFunctions';\n\n/**\n * FloatingButton represents a button that is used in the floating menu in the right bottom corner\n * of the application. It may have a custom tooltip and callback on the click event\n */\nclass FloatingButton {\n    /**\n     * @param {string} buttonClass Custom string that identifies the SVG icon used on this button. This string is also added as a CSS class to the button.\n     * @param {string} tooltip     tooltip for the button, that will be displayed on hover and also used as alternative title for the image\n     * @param {Function} clickEvent  custom callback when user clicks the button\n     * @param {App} appInstance   reference to the parent SVG element\n     */\n    constructor(buttonClass, tooltip, clickEvent, appInstance) {\n        /**\n         * jQuery element representing the button\n         * @type {jQuery.element}\n         */\n        this.$el = $('<a>');\n\n        // add classes to the element\n        this.$el.addClass('button');\n        this.$el.addClass(buttonClass);\n\n        // add the icon\n        this.$el.append(\n            $('<img>')\n                .attr('src', `img/gui/${buttonClass}.svg`)\n                .attr('alt', tooltip)\n        );\n\n        // add the tooltip element and an event listener if tooltip is defined\n        if (tooltip) {\n            /**\n             * jQuery element representing the tooltip\n             * @type {jQuery.element}\n             */\n            this.$tooltip = $('<div>');\n            this.$tooltip.addClass('tooltip').html(tooltip);\n\n            appInstance.$svg.after(this.$tooltip);\n\n            this.$el.hover(\n                () => {\n                    this.$tooltip.fadeIn(200);\n                },\n                () => {\n                    this.$tooltip.fadeOut(200);\n                }\n            );\n        }\n\n        // add an event listener on click, if the callback function is defined\n        if (clickEvent) {\n            this.$el.on('click', clickEvent);\n        }\n    }\n}\n\n/** @module FloatingMenu */\n/**\n * Class to represent the floating menu in the right bottom corner of the page.\n * It instantiates all the buttons and their callbacks.\n */\nexport default class FloatingMenu {\n    /**\n     * @param {App} appInstance reference to the App element this menu is associated with\n     */\n    constructor(appInstance) {\n        /**\n         * the jQuery element containing all buttons\n         * @type {jQuery.element}\n         */\n        this.$el = $('<div>');\n\n        const id = 'floatingMenu';\n\n        this.$el.attr('id', id);\n\n        // const $loader = $(\"<div>\").addClass(\"loader\").addClass(\"hidden\");\n\n        /* EXPORT */\n        this.append(\n            new FloatingButton(\n                'export',\n                'Get code for this network',\n                () => {\n                    // create the popup container holding all popup content (that will be passed to lity)\n                    let $popup = $('<div>')\n                        .addClass('importExport')\n                        .addClass('export');\n\n                    // generate the block with code to be displayed and append it to the popup element\n                    const $textblock = $('<textarea>').text(\n                        getJSONString(appInstance.exportData, true)\n                    );\n\n                    $popup.append($textblock);\n\n                    // generate the links\n                    $popup.append(\n                        $('<a>')\n                            .attr({\n                                href: getJSONString(appInstance.exportData, true, true),\n                                class: 'download',\n                                download: 'network.json'\n                            })\n                            .append($('<img>').attr('src', 'img/gui/export.svg'))\n                            .append(' expanded JSON')\n                    );\n                    $popup.append(\n                        $('<a>')\n                            .attr({\n                                href: getJSONString(appInstance.exportData, false, true),\n                                class: 'download',\n                                download: 'network.min.json'\n                            })\n                            .append($('<img>').attr('src', 'img/gui/export.svg'))\n                            .append(' compact JSON')\n                    );\n\n                    lity($popup);\n\n                    // highlight the text in the textblock\n                    $textblock.select();\n                },\n                appInstance\n            )\n        );\n\n        /* Tutorial */\n        this.append(\n            new FloatingButton(\n                'tutorial',\n                'Start the tutorial',\n                () => {\n                    appInstance.startTutorial();\n                },\n                appInstance\n            )\n        );\n\n        appInstance.$svg.after(this.$el);\n\n        /* HELP */\n\n        let help = new FloatingButton('help', 'Display a help page', false, appInstance);\n        help.$el.attr({\n            href: './docs/user.html',\n            'data-lity': ''\n        });\n        this.append(help);\n\n        appInstance.$svg.after(this.$el);\n    }\n\n    /**\n     * append a FloatingButton to this menu\n     * @param  {FloatingButton} menuItem append an instance of  {@link FloatingButton} to this menu\n     */\n    append(menuItem) {\n        this.$el.append(menuItem.$el);\n    }\n}\n","/** @module Messages */\n\n/**\n * a generic message that can be displayed in the {@link Messages} box\n */\nclass Message {\n    /**\n     * @param {string} text               text of the message\n     * @param {Function} [onHide] a function that will be called when the `hide()` method is called\n     */\n    constructor(text, onHide) {\n        this.$el = $('<div>')\n            .addClass('message')\n            .text(text);\n\n        /**\n         * callback function that will be called when the `hide()` method is called\n         * @type {Function}\n         */\n        this.onHide = onHide;\n    }\n\n    /**\n     * hide the message (and call the onHide callback if there is any)\n     */\n    hide() {\n        this.$el.remove();\n\n        if (this.onHide) {\n            this.onHide();\n        }\n    }\n}\n\n/**\n * a loading message that can be displayed in the {@link Messages} box\n * @extends Message\n */\nclass LoadingMessage extends Message {\n    constructor(text, onHide = undefined) {\n        super(text, onHide);\n\n        this.$el.addClass('loading');\n    }\n}\n\n/**\n * a message that has a close button and that can be displayed in the {@link Messages} box\n * @extends Message\n */\nclass ClosableMessage extends Message {\n    constructor(text, onHide = undefined) {\n        super(text, onHide);\n\n        this.$el.append(\n            $('<span>')\n                .addClass('close')\n                .click(() => {\n                    this.hide();\n                })\n        );\n    }\n}\n\n/**\n * an error message that can be displayed in the {@link Messages} box\n * @extends ClosableMessage\n */\nclass ErrorMessage extends ClosableMessage {\n    constructor(text, onHide = undefined) {\n        super(text, onHide);\n\n        this.$el.addClass('error');\n    }\n}\n\n/**\n * a warning message that can be displayed in the {@link Messages} box\n * @extends ClosableMessage\n */\nclass WarningMessage extends ClosableMessage {\n    constructor(text, onHide = undefined) {\n        super(text, onHide);\n\n        this.$el.addClass('warning');\n    }\n}\n\n/**\n * display messages to the user in a nice UI\n */\nexport default class Messages {\n    constructor() {\n        /**\n         * jQuery element that represents the message interface. This element contains all the currently displayed messages.\n         * @type {jQuery.element}\n         */\n        this.$el = $('<div>').addClass('messages');\n\n        /**\n         * number of currently displayed messages, has a specified setter and getter\n         * @type {number}\n         */\n        this.count = 0;\n\n        // place the progress info element\n        $('body').append(this.$el);\n    }\n\n    /**\n     * get the number of currently displayed messages\n     * @return {number} [description]\n     */\n    get count() {\n        return this.messageCount;\n    }\n\n    /**\n     * Set the number of currently displayed messages. Should be called only through functions that add messages.\n     *\n     * If the message count is >= 1, the jQuery element for the UI is displayed, if the message count is <1, the UI is hidden.\n     * @param  {number} value [description]\n     * @return {number}       [description]\n     */\n    set count(value) {\n        this.messageCount = value;\n\n        if (this.messageCount < 1) {\n            this.hide();\n        } else {\n            this.display();\n        }\n    }\n\n    /**\n     * hide the message box by adding a `hidden` class to the element\n     */\n    hide() {\n        this.$el.addClass('hidden');\n    }\n\n    /**\n     * display the message box by removing the `hidden` class to the element\n     */\n    display() {\n        this.$el.removeClass('hidden');\n    }\n\n    /**\n     * add a new message to the message box\n     * @param  {string} text             text of the message\n     * @param  {Message} [constr=Message] constructor of the message, must be a derivate of the {@link Message} class\n     * @return {Message}                  the newly constructed message (instance made by the specified constructor)\n     */\n    newMessage(text, constr = Message) {\n        // Create the message by calling the constructor,\n        // provide it with text and a callback function that will be called when hiding the message.\n        // This callback subtracts 1 from the\n        let message = new constr(text, () => {\n            this.count--;\n        });\n\n        this.$el.append(message.$el);\n        this.count++;\n\n        return message;\n    }\n\n    /**\n     * create a new loading message and add it to the message box\n     * @param  {string} text text of the message\n     * @return {LoadingMessage} the newly constructed {@link LoadingMessage}\n     */\n    newLoadingMessage(text) {\n        return this.newMessage(text, LoadingMessage);\n    }\n\n    /**\n     * create a new error message and add it to the message box\n     * @param  {string} text text of the message\n     * @return {ErrorMessage} the newly constructed {@link ErrorMessage}\n     */\n    newErrorMessage(text) {\n        return this.newMessage(text, ErrorMessage);\n    }\n\n    /**\n     * create a new warning message and add it to the message box\n     * @param  {string} text text of the message\n     * @return {WarningMessage} the newly constructed {@link WarningMessage}\n     */\n    newWarningMessage(text) {\n        return this.newMessage(text, WarningMessage);\n    }\n}\n","/** @module Tutorial */\n/**\n * Display and manage the tutorial\n */\nexport default class Tutorial {\n    /**\n     * @param {App} appInstance instance of [App](./module-App.html) for this tutorial\n     * @param {Function} [onTutorialClosed] callback function when user closes or finishes the tutorial\n     */\n    constructor(appInstance, onTutorialClosed) {\n        /**\n         * instance of [App](./module-App.html) for this tutorial\n         * @type {App}\n         */\n        this.appInstance = appInstance;\n\n        /**\n         * helper variable for the `step` property, stores current state of the tutorial (step `0` means that tutorial is closed)\n         * @type {Number}\n         */\n        this.currentStep = 0;\n\n        /**\n         * jQuery element containing the tutorial popup\n         * @type {jQuery.element}\n         */\n        this.$tutorialWindow;\n        /**\n         * jQuery element for the dynamic part of the tutorial popup\n         * (text and buttons that are dependent on the current state of the tutorial)\n         * @type {Array}\n         */\n        this.$tutorialContent;\n\n        /**\n         * array of functions that represent intividual steps in the tutorial\n         * by default populated with step `0` that closes the tutorial\n         * @type {Array}\n         */\n        this.steps = [\n            () => {\n                this.closeWindow(onTutorialClosed);\n            }\n        ];\n\n        // set up the tutorial\n        this.setUpTutorial();\n    }\n\n    /**\n     * get the current step of the tutorial, this number corresponds to the index in the `this.steps` array\n     * that contains the function for the last displayed step\n     * @return {Number}\n     */\n    get step() {\n        return this.currentStep;\n    }\n\n    /**\n     * change the current step of the tutorial, `0` means \"stop the tutorial\"\n     * @param  {Number} value the step of the tutorial to be displayed\n     */\n    set step(value) {\n        // reset all hooks\n        this.resetHooks();\n\n        this.currentStep = value;\n\n        if (this.step < this.steps.length) {\n            this.steps[this.step]();\n\n            if (this.step === 1) this.displayWindow();\n        } else {\n            this.step = 0;\n        }\n    }\n\n    /**\n     * reset all tutorial hooks\n     */\n    resetHooks() {\n        /**\n         * _tutorial hook_, called when the context menu is opened\n         */\n        this.onContextMenuOpened = () => {};\n\n        /**\n         * _tutorial hook_, called when a new element is added\n         */\n        this.onElementAdded = () => {};\n\n        /**\n         * _tutorial hook_, called when a box is moved\n         */\n        this.onBoxMoved = () => {};\n\n        /**\n         * _tutorial hook_, called when a box is rotated\n         */\n        this.onBoxRotated = () => {};\n\n        /**\n         * _tutorial hook_, called when an output box value is set to `on`\n         */\n        this.onOutputBoxTrue = () => {};\n\n        /**\n         * _tutorial hook_, called when the canvas is moved\n         */\n        this.onCanvasMoved = () => {};\n\n        /**\n         * _tutorial hook_, called when the canvas is zoomed\n         */\n        this.onCanvasZoomed = () => {};\n\n        /**\n         * _tutorial hook_, called when a box is removed\n         */\n        this.onElementRemoved = () => {};\n\n        /**\n         * _tutorial hook_, called when user changes the state of an input box\n         */\n        this.onChangeInputBoxState = () => {};\n    }\n\n    /**\n     * set up the tutorial: reset all tutorial hooks and define the order of tutorial steps\n     */\n    setUpTutorial() {\n        this.resetHooks();\n\n        this.steps.push(\n            () => {\n                this.stepWelcome();\n            },\n            () => {\n                this.stepAddBoxes();\n            },\n            () => {\n                this.stepMoveCanvas();\n            },\n            () => {\n                this.stepZoomCanvas();\n            },\n            () => {\n                this.stepMoveBoxes();\n            },\n            () => {\n                this.stepWiring();\n            },\n            () => {\n                this.switchInputBox();\n            },\n            () => {\n                this.stepRemoveBox();\n            },\n            () => {\n                this.stepFinish();\n            }\n        );\n    }\n\n    /**\n     * _tutorial step_: display context menu\n     */\n    stepWelcome() {\n        this.windowContent(\n            `Welcome to Hradla! To get started, click anywhere on the editing area with your right mouse button.`\n        );\n\n        this.onContextMenuOpened = () => {\n            this.next();\n        };\n    }\n\n    /**\n     * _tutorial step_: add input box, output box and a NOT gate\n     */\n    stepAddBoxes() {\n        this.windowContent(\n            `Great job! Now you know, how to open the editor menu.\n            Now try to add an <em>Input box</em>, <em>Output box</em> and a <em>NOT gate</em>\n            to the editing area.`\n        );\n\n        let elementsAdded = {\n            inputBox: false,\n            outputBox: false,\n            notGate: false\n        };\n\n        this.onElementAdded = name => {\n            switch (name) {\n                case 'input':\n                    elementsAdded.inputBox = true;\n                    break;\n                case 'output':\n                    elementsAdded.outputBox = true;\n                    break;\n                case 'not':\n                    elementsAdded.notGate = true;\n                    break;\n                default:\n                    // no action on default\n                    break;\n            }\n\n            if (elementsAdded.inputBox && elementsAdded.outputBox && elementsAdded.notGate) {\n                // proceed to the next step of the tutorial\n                this.next();\n            }\n        };\n    }\n\n    /**\n     * _tutorial step_: move the canvas\n     */\n    stepMoveCanvas() {\n        this.windowContent(\n            `You can move the editing area (sometimes called canvas) by dragging\n            with the middle mouse button or by holding the <code>Ctrl</code> key\n            and dragging with the left mouse button. Check it out.`\n        );\n\n        this.onCanvasMoved = () => {\n            this.next();\n        };\n    }\n\n    /**\n     * _tutorial step_: zoom the canvas\n     */\n    stepZoomCanvas() {\n        this.windowContent(\n            `You can also zoom in and out using the mouse wheel\n            or with the <code>+</code>&nbsp;and <code>−</code>&nbsp;keys.`\n        );\n\n        this.onCanvasZoomed = () => {\n            this.next();\n        };\n    }\n\n    /**\n     * _tutorial step_: move the boxes\n     */\n    stepMoveBoxes() {\n        this.windowContent(`You can move the elements on the editing canvas by dragging them\n            using the left mouse button. You can also rotate them using middle click. Try it out.`);\n\n        let boxMoved = false;\n        let boxRotated = false;\n\n        let moveRotateCallback = () => {\n            if (boxMoved && boxRotated) {\n                this.next();\n            }\n        };\n\n        this.onBoxMoved = () => {\n            boxMoved = true;\n            moveRotateCallback();\n        };\n\n        this.onBoxRotated = () => {\n            boxRotated = true;\n            moveRotateCallback();\n        };\n    }\n\n    /**\n     * _tutorial step_: create an invertor\n     */\n    stepWiring() {\n        this.windowContent(\n            `Essential part of logic networks is the wiring. Create a very simple\n            inverter by connecting the <em>Input box</em> to the input of the <em>NOT gate</em>\n            and the output of the <em>NOT gate</em> to the input of the <em>Output box</em>.`,\n            `To connect two elemnts, simply click on a connector of the first element,\n            than click on a conector of the second element.`\n        );\n\n        this.onOutputBoxTrue = () => {\n            this.next();\n        };\n    }\n\n    /**\n     * _tutorial step_: change the state of an input box\n     */\n    switchInputBox() {\n        this.windowContent(`\n            The input boxes can be in two states: <em>ON</em> and <em>OFF</em>, signalled\n            by the green and red colors respectively. You can left click on an Input box to\n            switch its state. Try it out!\n        `);\n\n        this.onChangeInputBoxState = () => {\n            this.next();\n        };\n    }\n\n    /**\n     * _tutorial step_: remove a box\n     */\n    stepRemoveBox() {\n        this.windowContent(\n            `When you right click on an element, you can find a new item in the menu,\n            that allows you to remove the element. This works for wires as well as for gates and other types of boxes.\n            Try to remove an element!`\n        );\n\n        this.onElementRemoved = () => {\n            this.next();\n        };\n    }\n\n    /**\n     * _tutorial step_: ask the user if they want to clean the canvas before closing the tutorial\n     */\n    stepFinish() {\n        this.windowContent(\n            `You're all set, enjoy your stay!`,\n            `Do you wish to start with empty canvas?`\n        );\n        this.windowChoice(\n            {\n                text: 'yes, clean the canvas',\n                func: () => {\n                    this.appInstance.cleanCanvas();\n                    this.stop();\n                }\n            },\n            {\n                text: 'no, keep the canvas as it is',\n                func: () => {\n                    this.stop();\n                }\n            }\n        );\n    }\n\n    /**\n     * display the tutorial window\n     */\n    displayWindow() {\n        this.appInstance.$svg.after(this.$tutorialWindow);\n    }\n\n    /**\n     * close the tutorial window\n     * @param  {Function} [onTutorialClosed] callback function that is called when the tutorial is closed\n     */\n    closeWindow(onTutorialClosed) {\n        this.$tutorialWindow.remove();\n\n        if (onTutorialClosed !== undefined) {\n            onTutorialClosed();\n        }\n    }\n\n    /**\n     * set the tutorial window text content\n     * @param  {...string} text each string is a separate paragraph\n     */\n    windowContent(...text) {\n        if (!this.$tutorialWindow) {\n            this.$tutorialWindow = $('<div>').attr('id', 'tutorial');\n\n            this.$topButtonsLeft = $('<div>').addClass('left');\n\n            this.$tutorialWindow.append(\n                $('<div>')\n                    .addClass('topButtons')\n                    .append(this.$topButtonsLeft)\n                    .append(\n                        // the .right div can be added here because it is not modified during the tutorial\n                        $('<div>')\n                            .addClass('right')\n                            .append(\n                                $('<a>')\n                                    .attr({\n                                        href: '#',\n                                        title: 'close tutorial'\n                                    })\n                                    .addClass('button close')\n                                    .click(() => {\n                                        this.stop();\n                                    })\n                            )\n                    )\n            );\n\n            this.$tutorialWindow.append(this.$topButtons);\n\n            this.$tutorialContent = $('<div>').addClass('content');\n            this.$tutorialWindow.append(this.$tutorialContent);\n        }\n\n        this.$topButtonsLeft.html('');\n\n        let $prev = $('<a>')\n            .attr({\n                href: '#',\n                title: 'go back'\n            })\n            .addClass('button prev');\n\n        if (this.step > 1) {\n            $prev.click(() => {\n                this.prev();\n            });\n        } else {\n            $prev.addClass('disabled');\n        }\n\n        let $next = $('<a>')\n            .attr({\n                href: '#',\n                title: 'go forward'\n            })\n            .addClass('button next');\n\n        if (this.step < this.steps.length - 1) {\n            $next.click(() => {\n                this.next();\n            });\n        } else {\n            $next.addClass('disabled');\n        }\n\n        this.$topButtonsLeft.append($prev).append($next);\n\n        // set the text content\n\n        this.$tutorialContent.html('');\n        for (const paragraph of text) {\n            this.$tutorialContent.append($('<p>').html(paragraph));\n        }\n\n        // // render the buttons in each step (to remove focus and to\n        // // ensure there is no \"back\" button on the first step or \"next\" button on the last step)\n        // if(this.$prevNext) {\n        //     this.$prevNext.remove();\n        // }\n        //\n        // this.$prevNext = $(\"<div>\").addClass(\"bottomButtons\");\n        //\n        // if(this.step>1) {\n        //     this.$prevNext.append(\n        //         $(\"<a>\").attr(\"href\", \"#\").addClass(\"button prev\")\n        //         // .text(\"back\")\n        //         .click(() => {\n        //             this.step--;\n        //         })\n        //     )\n        // }\n        //\n        // if(this.step < this.steps.length - 1) {\n        //     this.$prevNext.append(\n        //         $(\"<a>\").attr(\"href\", \"#\").addClass(\"button next\")\n        //         // .text(\"next\")\n        //         .click(() => {\n        //             this.next();\n        //         })\n        //     )\n        // }\n        //\n        // this.$tutorialWindow.append(this.$prevNext);\n    }\n\n    /**\n     * add buttons with choices to the tutorial window\n     * @param  {...object} choices each choice is an object in with a `string` property _text_ and a `function` property _func_\n     */\n    windowChoice(...choices) {\n        let $choices = $('<ol>').addClass('choices');\n        for (const choice of choices) {\n            $choices.append(\n                $('<li>').append(\n                    $('<a>')\n                        .attr('href', '#')\n                        .click(() => {\n                            choice.func();\n                        })\n                        .html(choice.text)\n                )\n            );\n        }\n        this.$tutorialContent.append($choices);\n    }\n\n    /**\n     * start the tutorial\n     */\n    start() {\n        this.step = 1;\n    }\n\n    /**\n     * go to the next step of the tutorial\n     */\n    next() {\n        this.step++;\n    }\n\n    /**\n     * go to the previous step of the tutorial\n     */\n    prev() {\n        this.step--;\n    }\n\n    /**\n     * stop the tutorial\n     */\n    stop() {\n        this.step = 0;\n    }\n}\n","/** @module ViewBox */\n/**\n * ViewBox provides an api for oprerating with the viewBox argument of the <svg> DOM element.\n */\nexport default class ViewBox {\n    /**\n     * Initialize viewBox\n     * @param {number} left   distance of the left edge of the viewbox from document's y axis in SVG pixels\n     * @param {number} top    distance of the top edge of the viewbox from the document's x axis in SVG pixels\n     * @param {number} width  width of the viewbox in SVG pixels\n     * @param {number} height height of the viewbox in SVG pixels\n     */\n    constructor(left, top, width, height) {\n        /**\n         * ViewBox attributes before applying zoom and shift\n         * @type {object}\n         */\n        this.real = { left, top, width, height };\n\n        /**\n         * The maximum amount of zoom on the viewbox\n         * @type {number}\n         */\n        this.maxZoom = 8;\n        /**\n         * The minimum amount of zoom on the viewbox\n         * @type {number}\n         */\n        this.minZoom = 0.1;\n\n        /**\n         * Amount of zoom on the viewbox, always between this.minZoom and this.maxZoom\n         * @type {number}\n         */\n        this.realZoom = 1;\n\n        /**\n         * amount of horizontal shift of the document\n         * @type {number}\n         */\n        this.leftShift = 0;\n        /**\n         * amount of vertical shift of the document\n         * @type {number}\n         */\n        this.topShift = 0;\n    }\n\n    /**\n     * update the dimensions of the viewbox (used on window resize)\n     * @param  {Number} width  new width of the viewbox in SVG pixels\n     * @param  {Number} height new height of the viewbox in SVG pixels\n     */\n    newDimensions(width, height) {\n        // keep the viewbox centered\n        this.real.left += (this.real.width - width) / 2;\n        this.real.top += (this.real.height - height) / 2;\n\n        // update the dimensions\n        this.real.width = width;\n        this.real.height = height;\n    }\n\n    /**\n     * apply viewbox movement and take the zoom into account\n     * @param  {number} left horizontal movement\n     * @param  {number} top  vertical movement\n     */\n    move(left, top) {\n        this.leftShift += left / this.zoom;\n        this.topShift += top / this.zoom;\n    }\n\n    /**\n     * get the amount of zoom on the viewbox\n     * @return {number}\n     */\n    get zoom() {\n        return this.realZoom;\n    }\n\n    /**\n     * set the amount of zoom on the viewbox\n     * @param {number} value the new amount of zoom\n     */\n    set zoom(value) {\n        // fit this.realZoom to fit between this.minZoom and this.maxZoom\n        this.realZoom = Math.max(Math.min(value, this.maxZoom), this.minZoom);\n    }\n\n    /**\n     * get the width of the viewbox with the current zoom applied\n     * @return {number} the final width of the viewbox\n     */\n    get width() {\n        return this.real.width / this.zoom;\n    }\n\n    /**\n     * get the height of the viewbox with the current zoom applied\n     * @return {number} the final height of the viewbox\n     */\n    get height() {\n        return this.real.height / this.zoom;\n    }\n\n    /**\n     * get the horizontal distance from the y axis of the document with zoom and shift value applied\n     * @return {number}\n     */\n    get left() {\n        return this.real.left - this.leftShift + (this.real.width - this.width) / 2;\n    }\n\n    /**\n     * get the vertical distance from the x axis of the document with zoom and shift value applied\n     * @return {number}\n     */\n    get top() {\n        return this.real.top - this.topShift + (this.real.height - this.height) / 2;\n    }\n\n    /**\n     * get the computed viewbox values as a string in the correct format that can be used in the viewBox attribute of the SVG element\n     * @return {string} string in format \"left top width height\"\n     */\n    get str() {\n        return `${this.left} ${this.top} ${this.width} ${this.height}`;\n    }\n\n    /**\n     * transform horizontal units to the scale and shift of the editor\n     * @param  {number} x original horizontal value\n     * @return {number}   transformed horizontal value\n     */\n    transformX(x) {\n        return this.left + x / this.zoom;\n    }\n\n    /**\n     * transform vertical units to the scale and shift of the editor\n     * @param  {number} y original vertical value\n     * @return {number}   transformed vertical value\n     */\n    transformY(y) {\n        return this.top + y / this.zoom;\n    }\n\n    /**\n     * transform pageX and pageY parameters of the jquery event to match the zoom and shift of the viewbox\n     * @param  {jquery.MouseEvent} event original event\n     * @return {jquery.MouseEvent}       the same event but with transformed pageX and pageY members\n     */\n    transformEvent(event) {\n        event.pageX = this.transformX(event.pageX);\n        event.pageY = this.transformY(event.pageY);\n\n        return event;\n    }\n}\n","/**\n * @module Library\n */\n\nconst libraryDir = './library/';\n\n/**\n * get list of networks from the library\n * @return {Promise} promise, the resolution is an object containing a list of libraries\n */\nexport function getLibrary() {\n    return new Promise((resolve, reject) => {\n        const libraryFile = libraryDir + 'networkList.json';\n\n        let request = new XMLHttpRequest();\n\n        request.addEventListener('load', function() {\n            if (this.response) {\n                resolve(this.response.networks);\n            }\n        });\n\n        request.addEventListener(['error', 'abort'], () => {\n            reject('Failed loading libraries.');\n        });\n\n        request.open('GET', libraryFile, true);\n        request.responseType = 'json';\n        request.send();\n    });\n}\n\n/**\n * get a network from the library, specified by filename\n * @param  {string} networkName library file name without the extension\n * @return {Promise} promise, the resolution is an object containing the library import data\n */\nexport function getNetworkFromLibrary(networkName) {\n    return new Promise((resolve, reject) => {\n        let request = new XMLHttpRequest();\n\n        request.addEventListener('load', function() {\n            if (this.response) {\n                resolve(this.response);\n            }\n        });\n\n        request.addEventListener(['error', 'abort'], () => {\n            reject(`Failed loading library ${networkName}.`);\n        });\n\n        request.open('GET', libraryDir + networkName + '.json', true);\n        request.responseType = 'json';\n        request.send();\n    });\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}