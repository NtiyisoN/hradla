{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/es6/canvas.js","src/es6/contextMenu.js","src/es6/editorElements.js","src/es6/floatingMenu.js","src/es6/fn.js","src/es6/importExport.js","src/es6/logic.js","src/es6/main.js","src/es6/networkLibrary.js","src/es6/simulation.js","src/es6/structuresAndClasses.js","src/es6/svgObjects.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","\"use strict\";\n\nimport * as svgObj from './svgObjects.js'\nimport * as editorElements from './editorElements.js'\nimport Logic from './logic.js'\nimport ContextMenu from './contextMenu.js'\nimport FloatingMenu from './floatingMenu.js'\nimport Simulation from './simulation.js'\nimport Fn from './fn.js'\n\n/**\n * ViewBox provides an api for oprerating with the viewBox argument of the <svg> DOM element.\n */\nclass ViewBox {\n    /**\n     * Initialize viewBox\n     * @param {number} left   distance of the left edge of the viewbox from document's y axis in SVG pixels\n     * @param {number} top    distance of the top edge of the viewbox from the document's x axis in SVG pixels\n     * @param {number} width  width of the viewbox in SVG pixels\n     * @param {number} height height of the viewbox in SVG pixels\n     */\n    constructor(left, top, width, height) {\n        /**\n         * ViewBox attributes before applying zoom and shift\n         * @type {object}\n         */\n        this.real = { left, top, width, height }\n\n        /**\n         * The maximum amount of zoom on the viewbox\n         * @type {number}\n         */\n        this.maxZoom = 8;\n        /**\n         * The minimum amount of zoom on the viewbox\n         * @type {number}\n         */\n        this.minZoom = 0.1;\n\n        /**\n         * Amount of zoom on the viewbox, always between this.minZoom and this.maxZoom\n         * @type {number}\n         */\n        this.realZoom = 1\n\n        /**\n         * amount of horizontal shift of the document\n         * @type {number}\n         */\n        this.leftShift = 0\n        /**\n         * amount of vertical shift of the document\n         * @type {number}\n         */\n        this.topShift = 0\n    }\n\n    /**\n     * get the amount of zoom on the viewbox\n     * @return {number}\n     */\n    get zoom() {\n        return this.realZoom;\n    }\n\n    /**\n     * set the amount of zoom on the viewbox\n     * @param {number} value the new amount of zoom\n     */\n    set zoom(value) {\n        // fit this.realZoom to fit between this.minZoom and this.maxZoom\n        this.realZoom = Math.max(Math.min(value, this.maxZoom), this.minZoom);\n    }\n\n    /**\n     * get the width of the viewbox with the current zoom applied\n     * @return {number} the final width of the viewbox\n     */\n    get width() {\n        return this.real.width / this.zoom\n    }\n\n    /**\n     * get the height of the viewbox with the current zoom applied\n     * @return {number} the final height of the viewbox\n     */\n    get height() {\n        return this.real.height / this.zoom\n    }\n\n    /**\n     * get the horizontal distance from the y axis of the document with zoom and shift value applied\n     * @return {number}\n     */\n    get left() {\n        return this.real.left - (this.leftShift / this.zoom) + ((this.real.width - this.width) / 2)\n    }\n\n    /**\n     * get the vertical distance from the x axis of the document with zoom and shift value applied\n     * @return {number}\n     */\n    get top() {\n        return this.real.top - (this.topShift / this.zoom) + ((this.real.height - this.height) / 2)\n    }\n\n    /**\n     * get the computed viewbox values as a string in the correct format that can be used in the viewBox attribute of the SVG element\n     * @return {string} string in format \"left top width height\"\n     */\n    get str() {\n        return `${this.left} ${this.top} ${this.width} ${this.height}`\n    }\n\n    /**\n     * transform horizontal units to the scale and shift of the editor\n     * @param  {number} x original horizontal value\n     * @return {number}   transformed horizontal value\n     */\n    transformX(x) {\n        return this.left + (x / this.zoom)\n    }\n\n    /**\n     * transform vertical units to the scale and shift of the editor\n     * @param  {number} y original vertical value\n     * @return {number}   transformed vertical value\n     */\n    transformY(y) {\n        return this.top + (y / this.zoom)\n    }\n\n    /**\n     * transform pageX and pageY parameters of the jquery event to match the zoom and shift of the viewbox\n     * @param  {jquery.MouseEvent} event original event\n     * @return {jquery.MouseEvent}       the same event but with transformed pageX and pageY members\n     */\n    transformEvent(event) {\n        event.pageX = this.transformX(event.pageX)\n        event.pageY = this.transformY(event.pageY)\n\n        return event\n    }\n}\n\nconst\n    ctrlKey = 17,\n    cmdKey = 91;\n\n/** @module Canvas */\n/**\n * Main class of the application. It represents an instance of the whole editor and holds\n * references to all its elements.\n */\nexport default class Canvas {\n    /**\n     * Initialize the Svg class\n     * @param {string} canvas   query selector of the SVG element, that will contain all SVG content of the application\n     * @param {number} gridSize initial size of the grid in SVG pixels\n     */\n    constructor(canvas, gridSize) {\n        /**\n         * jQuery element for the SVG document\n         */\n        this.$svg = $(canvas);\n\n        /**\n         * space between grid lines in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = gridSize;\n\n        /**\n         * Array of all boxes (instances of objects derived from editorElements.Box) used on Canvas\n         * @type {Array}\n         */\n        this.boxes = []; // stores all boxes\n\n        /**\n         * Array of all wires (instances of editorElements.Wire) used on Canvas\n         * @type {Array}\n         */\n        this.wires = []; // stores all wires\n\n        this.simulationEnabled = true\n        this.simulation = new Simulation(this); // dummy, will be overwritten on startNewSimulation\n\n        /**\n         * distance from the left top corner to the first element in the imported network\n         * and distance from the left top corner to the imported black box _in grid pixels_\n         * @type {number}\n         */\n        this.leftTopPadding = 4;\n\n        // create the defs element, used for patterns\n        this.$defs = $(\"<defs>\");\n        this.$svg.prepend(this.$defs);\n\n        // BACKGROUND PATTERN\n        let pattern = new svgObj.Pattern(\"grid\", this.gridSize, this.gridSize);\n\n        let patternPoints = new svgObj.PolylinePoints()\n            .append(new svgObj.PolylinePoint(0, 0))\n            .append(new svgObj.PolylinePoint(this.gridSize, 0))\n            .append(new svgObj.PolylinePoint(this.gridSize, this.gridSize));\n\n        pattern.addChild(new svgObj.PolyLine(patternPoints, \"#a3a4d2\", 2));\n        this.addPattern(pattern.get());\n\n        this.background = new svgObj.Rectangle(0, 0, this.width, this.height, \"url(#grid)\", \"none\");\n        this.appendJQueryObject(this.background.get());\n        this.refresh();\n\n        // set the viewbox for future zooming and moving of the canvas\n        this.$svg.attr('preserveAspectRatio', 'xMinYMin slice')\n        this.viewbox = new ViewBox(0, 0, this.width, this.height)\n        this.applyViewbox()\n\n        // CONSTRUCT CONTEXT MENU\n        this.contextMenu = new ContextMenu(this);\n\n        // CONSTRUCT FLOATING MENU\n        this.floatingMenu = new FloatingMenu(this);\n\n        // ALL EVENT CALLBACKS\n        let target;\n        this.$svg.on('mousedown', event => {\n            target = this.getRealTarget(event.target);\n            if(target!==undefined) {\n                // propagate mousedown to the real target\n                target.onMouseDown(event);\n            } else {\n                // mousedown happened directly on the svg\n                this.onMouseDown(event)\n            }\n\n            this.hideContextMenu();\n            event.preventDefault();\n        }).on('mousemove', event => {\n            if(target!==undefined) {\n                target.onMouseMove(event);\n            } else {\n                // mousemove happened directly on the svg\n                this.onMouseMove(event)\n            }\n\n            event.preventDefault();\n        }).on('mouseup', (event) => {\n            if(target!==undefined) {\n                target.onMouseUp(event);\n            } else {\n                // mouseup happened directly on the svg\n                this.onMouseUp(event)\n            }\n\n            target = undefined;\n\n            event.preventDefault();\n        }).on(\"contextmenu\", event => {\n            this.displayContextMenu(event.pageX, event.pageY, this.getRealJQueryTarget(event.target));\n            event.preventDefault();\n        })\n\n        $(document).on('keydown', event => {\n            this.onKeyDown(event);\n        }).on(\"keyup\", event => {\n            this.onKeyUp(event);\n        });\n\n        Fn.addMouseScrollEventListener(canvas, event => {\n            // zoom only if the ctrl key is pressed\n            if(event.ctrlKey) {\n                switch (event.delta) {\n                    case 1:\n                        this.zoom += 0.1\n                        break\n                    case -1:\n                        this.zoom -= 0.1\n                        break\n                }\n            }\n\n            event.preventDefault()\n        })\n    }\n\n    /**\n     * Get the width of the main SVG element\n     * @return {number} width of the SVG element in pixels\n     */\n    get width() {\n        return this.$svg.width()\n    }\n\n    /**\n     * Get the height of the main SVG element\n     * @return {number} height of the SVG element in pixels\n     */\n    get height() {\n        return this.$svg.height()\n    }\n\n    /**\n     * Process all keydown events that are connected to Canvas\n     * @param  {jquery.KeyboardEvent} event KeyboardEvent generated by a listener\n     */\n    onKeyDown(event) {\n        if(event.keyCode === ctrlKey || event.keyCode === cmdKey) {\n            this.$svg.addClass('grabbable');\n        }\n    }\n\n    /**\n     * Process all keyup events that are connected to Canvas\n     * @param  {jquery.KeyboardEvent} event KeyboardEvent generated by a listener\n     */\n    onKeyUp(event) {\n        if(event.keyCode === ctrlKey || event.keyCode === cmdKey) {\n            this.$svg.removeClass('grabbable');\n        }\n    }\n\n    /**\n     * Process all mousedown events that are happening directly on the Canvas\n     * @param  {jquery.MouseEvent} event MouseEvent generated by a listener\n     */\n    onMouseDown(event) {\n        // middle mouse or left mouse + ctrl moves the canvas\n        if(event.which === 2 || (event.which === 1 && event.ctrlKey)) {\n            this.$svg.addClass('grabbed');\n            this.moveCanvas = {\n                left: event.pageX,\n                top: event.pageY\n            }\n        }\n    }\n\n    /**\n     * Process all mousemove events that are happening directly on the Canvas\n     * @param  {jquery.MouseEvent} event MouseEvent generated by a listener\n     */\n    onMouseMove(event) {\n        if(this.moveCanvas) {\n            let left = event.pageX - this.moveCanvas.left\n            let top = event.pageY - this.moveCanvas.top\n\n            this.viewbox.leftShift += left\n            this.viewbox.topShift += top\n            this.applyViewbox()\n\n            this.moveCanvas = {\n                left: event.pageX,\n                top: event.pageY\n            }\n        }\n    }\n\n    /**\n     * Process all mouseup events that are happening directly on the Canvas\n     * @param  {jquery.MouseEvent} event MouseEvent generated by a listener\n     */\n    onMouseUp(event) {\n        if(this.moveCanvas) {\n            this.$svg.removeClass('grabbed');\n            this.moveCanvas = undefined\n        }\n    }\n\n    /**\n     * Set the viewBox attribute of the SVG element and size and position attributes\n     * of the rectangle with the background grid to match the values in this.viewbox\n     */\n    applyViewbox() {\n        // adjust background\n        this.background.addAttr({\n            x: this.viewbox.left,\n            y: this.viewbox.top,\n            width: this.viewbox.width,\n            height: this.viewbox.height\n        })\n\n        // set the viewBox attribute\n        this.$svg.attr('viewBox', this.viewbox.str)\n    }\n\n    /**\n     * Get the current zoom multiplier of the canvas\n     * @return {number}\n     */\n    get zoom() {\n        return this.viewbox.zoom\n    }\n\n    /**\n     * Set the zoom multiplier of the canvas.\n     * I sets the viewbox zoom and then applies the new value by calling this.applyViewbox()\n     * @param  {number} value set the zoom to this value\n     */\n    set zoom(value) {\n        this.viewbox.zoom = value\n        this.applyViewbox()\n    }\n\n    /**\n     * Generate an object containing export data for the Canvas and all elements.\n     * Data from this function should cover all important information needed to import the\n     * network in a different session.\n     * @return {object} object containing infomration about the network\n     */\n    get exportData() {\n        this.exportWireIdMap = new Map();\n        this.exportWireId = 0;\n\n        let data = {\n            // TODO implement gridSize scaling\n            // gridSize: this.gridSize,\n            boxes: []\n        };\n\n        for (const box of this.boxes) {\n            data.boxes.push(box.exportData)\n        }\n\n        return data;\n    }\n\n    /**\n     * Recreate a logic network from the data provided\n     * @param  {object} data object containing information about the imported network\n     */\n    importData(data) {\n        return new Promise((resolve, reject) => {\n            this.simulationEnabled = false\n\n            // TODO implement gridSize scaling\n\n            // list of wires to be added\n            let newWires = new Map();\n\n            // find the leftmost and topmost coordinate of any box, save them to leftTopCorner\n            let leftTopCorner;\n\n            for (const boxData of data.boxes) {\n                for(const transformInfo of boxData.transform.items) {\n                    if(transformInfo.name === \"translate\") {\n                        if(leftTopCorner) {\n                            leftTopCorner = {\n                                x: Math.min(leftTopCorner.x, transformInfo.args[0]),\n                                y: Math.min(leftTopCorner.y, transformInfo.args[1])\n                            }\n                        } else {\n                            leftTopCorner = {\n                                x: transformInfo.args[0],\n                                y: transformInfo.args[1]\n                            }\n                        }\n                    }\n                }\n            }\n\n            for(let boxData of data.boxes) {\n                // add box\n                let box;\n                switch (boxData.category) {\n                    case \"gate\":\n                        // add new gate (without reloading the SVG, we will reload it once after the import)\n                        box = this.newGate(boxData.name, 0, 0, false);\n                        break;\n                    case \"io\":\n                        switch (boxData.name) {\n                            case \"input\":\n                                // add new input (without reloading the SVG, we will reload it once after the import)\n                                box = this.newInput(0, 0, boxData.isOn, false);\n                                break;\n                            case \"output\":\n                                // add new output (without reloading the SVG, we will reload it once after the import)\n                                box = this.newOutput(0, 0, false);\n                                break;\n                            default:\n                                console.error(\"Unknown io box name '\"+boxData.name+\"'.\");\n                                break;\n                        }\n                        break;\n                    default:\n                        console.error(\"Unknown box category '\"+boxData.category+\"'.\");\n                }\n\n                if (box) {\n                    // proccess box transforms (translation and rotation)\n                    let transform = new editorElements.Transform();\n\n                    for(let j = 0 ; j < boxData.transform.items.length ; ++j) {\n                        switch (boxData.transform.items[j].name) {\n                            case \"translate\":\n                                transform.setTranslate(\n                                    boxData.transform.items[j].args[0]\n                                        - leftTopCorner.x // make it the relative distance from the leftmost element\n                                        - Math.round(this.viewbox.leftShift / this.gridSize) // move the element relative to the viewbox shift\n                                        + this.leftTopPadding, // apply padding\n\n                                    boxData.transform.items[j].args[1]\n                                        - leftTopCorner.y // make it the relative distance from the topmost element\n                                        - Math.round(this.viewbox.topShift / this.gridSize) // move the element relative to the viewbox shift\n                                        + this.leftTopPadding // apply padding\n                                );\n                                break;\n                            case \"rotate\":\n                                transform.setRotate(\n                                    boxData.transform.items[j].args[0],\n                                    boxData.transform.items[j].args[1],\n                                    boxData.transform.items[j].args[2]\n                                );\n                                break;\n                            default:\n                                console.error(\"Unknown transform property '\"+boxData.transform.items[j].name+\"'.\");\n                                break;\n                        }\n                    }\n\n                    transform.toSVGPixels(this);\n                    box.setTransform(transform);\n\n                    // add all wires to the list of wires to be added\n                    for(let j = 0 ; j < boxData.connections.length ; ++j) {\n                        // get the artificial wire id\n                        let wireId = boxData.connections[j].wireId;\n\n                        // pass the values got from json into a variable that will be added into the map\n                        let value = {\n                            index: boxData.connections[j].index,\n                            type: boxData.connections[j].type,\n                            boxId: box.id\n                        };\n\n                        // add the value to the map\n                        if(newWires.has(wireId)) {\n                            // if there already is a wire with this id in the map,\n                            // add the value to the end of the array of values\n                            let mapValue = newWires.get(wireId);\n                            mapValue[mapValue.length] = value;\n                            newWires.set(wireId, mapValue);\n                        } else {\n                            // if there is no wire with this id in the map\n                            // add the wire and set the value to be the first element in the array\n                            newWires.set(wireId, [value]);\n                        }\n                    }\n                }\n            }\n\n            // refresh the SVG document (needed for wiring)\n            this.refresh();\n\n            // with all boxes added, we can now connect them with wires\n            newWires.forEach(item => {\n                let connectorIds = [];\n                if(item[0] && item[1]) {\n                    for (const i of [0, 1]) {\n                        let box = this.getBoxById(item[i].boxId);\n\n                        connectorIds[i] = box.connectors[item[i].index].id;\n                    }\n                }\n                this.newWire(connectorIds[0], connectorIds[1], true);\n            });\n\n            // refresh the SVG document\n            this.refresh();\n\n            this.simulationEnabled = true;\n            for (let box of this.boxes) {\n                if (box instanceof editorElements.InputBox) {\n                    // switch the input box state to the oposit and back, for some reason calling box.refreshState()\n                    // results in weird unfinished simulation\n                    // this causes update of the output connector and a start of a new simulation\n\n                    // TODO find better solution instead of this workaround\n                    box.on = !box.on\n                    box.on = !box.on\n                }\n            }\n\n            resolve()\n        })\n    }\n\n    /**\n     * When user clicks on a connector, remember it until they click on some other connector.\n     * Than call newWire with the last two connectors ids as arguments.\n     * @param  {string} connectorId id of the connector that the user clicked on\n     */\n    wireCreationHelper(connectorId) {\n        if(!this.firstConnectorId) {\n            this.firstConnectorId = connectorId;\n        } else {\n            this.newWire(this.firstConnectorId, connectorId);\n            this.firstConnectorId = undefined;\n        }\n    }\n\n    /**\n     * Run a logic simulation from the startingConnector.\n     * This refreshes the states of all elements in the network whose inputs are\n     * directly (or by transition) connected to startingConnector's output\n     * @param  {OutputConnector} startingConnector run simulation from this output connector\n     * @param  {Logic.state} state new state of the startingConnector\n     */\n    startNewSimulation(startingConnector, state) {\n        if(this.simulationEnabled) {\n            this.simulation = new Simulation(this)\n            this.simulation.notifyChange(startingConnector.id, state)\n            this.simulation.run()\n        }\n    }\n\n    /**\n     * Create a new gate on the specified position\n     * @param  {string}  name           type of the gate (and, or ...)\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the gate\n     * @return {editorElements.Gate}    instance of Gate that has been newly added\n     */\n    newGate(name, x, y, refresh = true) {\n        return this.newBox(x, y, new editorElements.Gate(this, name, x, y), refresh);\n    }\n\n    /**\n     * Create an input box on the specified position\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [isOn=false]   state of the input box (default is false (off))\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the input box\n     * @return {editorElements.InputBox}    instance of the InputBox that has been newly added\n     */\n    newInput(x, y, isOn = false, refresh = true) {\n        return this.newBox(x, y, new editorElements.InputBox(this, isOn), refresh);\n    }\n\n    /**\n     * Create an output box on the specified position\n     * @param  {number}  x              horizontal position of the gate in SVG pixels\n     * @param  {number}  y              vertical position of the gate in SVG pixels\n     * @param  {boolean} [refresh=true] if true, this.refresh() will be called after adding the output box\n     * @return {editorElements.InputBox}    instance of the OutputBox that has been newly added\n     */\n    newOutput(x, y, refresh = true) {\n        return this.newBox(x, y, new editorElements.OutputBox(this), refresh);\n    }\n\n    /**\n     * Add a new Box to the Canvas\n     * @param  {number}  x              horizontal position of the box in SVG pixels\n     * @param  {number}  y              vertical position of the box in SVG pixels\n     * @param  {editorElements.Box}  object         instance of an object derived from the editorElements.Box class\n     * @param  {Boolean} [refresh=true] if true, this.refresh() will be called after adding the box\n     * @return {editorElements.Box}                 return the instance of the newly added object\n     */\n    newBox(x, y, object, refresh = true) {\n        let index = this.boxes.length;\n\n        this.boxes[index] = object;\n\n        // translate the gate if x and y has been specified\n        if(x && y) {\n            let tr = new editorElements.Transform();\n            tr.setTranslate(x, y);\n\n            this.boxes[index].svgObj.addAttr({\"transform\": tr.get()});\n        }\n\n        this.appendElement(this.boxes[index], refresh);\n\n        return this.boxes[index];\n    }\n\n    /**\n     * Remove a box from Canvas based on the provided ID\n     * @param {string} boxId id of the box that should be removed\n     */\n    removeBox(boxId) {\n        let $gate = $(\"#\"+boxId);\n\n        // find the gate in svg's list of gates\n        let gateIndex = -1;\n        for(let i = 0 ; i < this.boxes.length ; i++) {\n            if(this.boxes[i].svgObj.id===boxId) {\n                gateIndex = i;\n                break;\n            }\n        }\n\n        if(gateIndex > -1) {\n            // remove all wires connected to this gate\n            for(let i = 0; i < this.boxes[gateIndex].connectors.length; i++) {\n                this.removeWiresByConnectorId(this.boxes[gateIndex].connectors[i].svgObj.id);\n            }\n\n            // remove the gate\n            this.boxes.splice(gateIndex, 1);\n            $gate.remove();\n        } else {\n            console.error(\"Trying to remove an nonexisting box. Box id:\", boxId);\n        }\n    }\n\n    /**\n     * Create a new wire connecting the provided connectors\n     * @param  {string}  fromId         id of the connector that the wire is attached to\n     * @param  {string}  toId           id of the connector that the wire is attached to\n     * @param  {Boolean} [refresh=true] if refresh is set to true, the SVG document will be reloaded after adding the wire\n     * @return {editorElements.Wire}    instance of editorElements.Wire that has been added to the Canvas\n     */\n    newWire(fromId, toId, refresh = true) {\n        // wire must connect two distinct connectors\n        if (fromId===toId)\n            return false\n\n        let connectors = [this.getConnectorById(fromId), this.getConnectorById(toId)]\n\n        // input connectors can be connected to one wire max\n        connectors.forEach(conn => {\n            if(conn.isInputConnector)\n                this.removeWiresByConnectorId(conn.id)\n        })\n        let index = this.wires.length;\n        this.wires[index] = new editorElements.Wire(this, fromId, toId, this.gridSize, refresh);\n\n        connectors.forEach(conn => {\n            conn.addWireId(this.wires[index].svgObj.id);\n        })\n\n        this.appendElement(this.wires[index], refresh);\n        this.moveToBackById(this.wires[index].svgObj.id);\n\n        if(refresh)\n            this.wires[index].updateWireState()\n\n        return this.wires[index];\n    }\n\n    importBlackbox(truthtable, name) {\n        const {inputs, outputs, table} = truthtable;\n        const padding = this.leftTopPadding * this.gridSize;\n        return this.newBlackbox(padding, padding, inputs, outputs, table, name);\n    }\n\n    newBlackbox(x, y, inputs, outputs, table, name) {\n        return new Promise((resolve) => {\n            const height = Math.max(inputs, outputs) * 2;\n            const index = this.boxes.length;\n\n            this.boxes[index] = new editorElements.Blackbox(\n                this,\n                inputs,\n                outputs,\n                (...inputStates) => {\n                    for (const line of table) {\n                        const lineInputStates = line.slice(0, inputs);\n\n                        // if every input state matches the corresponding input state in this line of the truth table\n                        if(inputStates.every((value, index) => value === lineInputStates[index])) {\n                            // return the rest of the line as output\n                            return line.slice(inputs);\n                        }\n                    }\n                    // if nothing matches, set all outputs to undefined\n                    return Array.from(new Array(outputs), () => Logic.state.unknown)\n                },\n                name\n            );\n\n            if(x && y) {\n                let tr = new editorElements.Transform();\n                tr.setTranslate(x, y);\n\n                this.boxes[index].svgObj.addAttr({\"transform\": tr.get()});\n            }\n\n            this.appendElement(this.boxes[index], true);\n\n            resolve(this.boxes[index]);\n        })\n    }\n\n    /**\n     * Find the correct instance of editorElements.Wire in the Canvas' wires by the provided id\n     * @param  {string} wireId id of the wire\n     * @return {editorElements.Wire} instance of the wire\n     */\n    getWireById(wireId) {\n        for (const wire of this.wires) {\n            if(wire.svgObj.id === wireId) {\n                return wire\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find all wires that are connected to the specified connector\n     * @param  {string} connectorId id of the connector\n     * @return {Set} set of ID's of the wires connected to this connector\n     */\n    getWiresByConnectorId(connectorId) {\n        let connector = this.getConnectorById(connectorId);\n        return connector.wireIds;\n    }\n\n    /**\n     * Remove wire that has the provided ID\n     * @param  {string} wireId ID of the wire that should be removed\n     */\n    removeWireById(wireId) {\n        for(let i = 0 ; i < this.wires.length ; ++i) {\n            if (this.wires[i].svgObj.id === wireId) {\n\n                let connector1 = this.wires[i].startConnector;\n                let connector2 = this.wires[i].endConnector;\n\n                connector1.removeWireIdAndUpdate(wireId);\n                connector2.removeWireIdAndUpdate(wireId);\n\n                this.wires[i].svgObj.$el.remove();\n                this.wires.splice(i, 1);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Remove all wires that are connected to the connector provided by its ID\n     * @param  {string} connectorId ID of the connector\n     */\n    removeWiresByConnectorId(connectorId) {\n        let connector = this.getConnectorById(connectorId);\n\n        connector.wireIds.forEach(wireId => {\n            let wire = this.getWireById(wireId);\n\n            // get the other connector that is the wire connected to\n            let otherConnector = this.getConnectorById(wire.fromId, wire);\n            if(otherConnector.svgObj.id===connectorId) {\n                otherConnector = this.getConnectorById(wire.toId, wire);\n            }\n\n            // delete the wire record from the other connector\n            otherConnector.wireIds.delete(wireId);\n\n            // remove the wire representation using jQuery\n            $(\"#\" + wireId).remove();\n\n            // if otherConnector is an input connector, set its state to unknown\n            if(otherConnector.isInputConnector) {\n                this.startNewSimulation(otherConnector, Logic.state.unknown)\n            }\n        });\n\n        // clear the list of wire Ids\n        connector.wireIds.clear();\n        // if connector is an input connector, set its state to unknown\n        if(connector.isInputConnector) {\n            connector.setState(Logic.state.unknown);\n        }\n    }\n\n    /**\n     * Find the correct instance of editorElements.Box in the Canvas' boxes by the provided id\n     * @param  {string} boxId id of the box\n     * @return {editorElements.Box} instance of the box\n     */\n    getBoxById(boxId) {\n        for(let i = 0 ; i < this.boxes.length ; i++) {\n            if(this.boxes[i].svgObj.id===boxId) {\n                return this.boxes[i];\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Find the correct instance of editorElements.Box in the Canvas' boxes by ID of a connector that belongs to this box\n     * @param  {string} boxId id of the connector\n     * @return {editorElements.Box} instance of the box\n     */\n    getBoxByConnectorId(connectorId) {\n        for(let i = 0 ; i < this.boxes.length ; i++) {\n            if (this.boxes[i].getConnectorById(connectorId) !== undefined) {\n                return this.boxes[i];\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get instance of a connector based on it's ID (and also on an instance of editorElements.Wire if provided)\n     *\n     * The wire variable is used as heuristic: When we know the wire, we have to check only\n     * two gates instead of all of them\n     * @param  {string} connectorId id of the connector\n     * @param  {editorElements.Wire} [wire]      instance of the Wire that is connected to this connector\n     * @return {editorElements.Connector}        instance of the connector\n     */\n    getConnectorById(connectorId, wire=undefined) {\n\n        if(wire!==undefined) {\n            // we know the wire -- we can check only gates at the ends of this wire\n            let connector = wire.startBox.getConnectorById(connectorId)\n            if (!connector) {\n                connector = wire.endBox.getConnectorById(connectorId)\n            }\n            return connector\n\n        } else {\n            // we do not know the wire -- we have to check all gates\n            for (const box of this.boxes) {\n                const connector = box.getConnectorById(connectorId)\n                if(connector) {\n                    return connector\n                }\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Get the logical jQuery target based on the factual jQuery target.\n     *\n     * If the object, that user interacted with, is not a connector and is in a group,\n     * return the group jQuery object instead of the original jQuery object.\n     * @param  {target} target jQuery target of the object user interacted with\n     * @return {target}        jQuery target of the object user wanted to interact with\n     */\n    getRealJQueryTarget(target) {\n        let $target = $(target);\n        if(!$target.hasClass(\"connector\") && $target.parents('g').length > 0) {\n            $target = $target.parent();\n            while ($target.prop(\"tagName\") !== \"G\" && $target.prop(\"tagName\") !== \"g\") {\n                $target = $target.parent();\n            }\n        }\n        return $target;\n    }\n\n    // returns the editorElement that user interacted with, the \"target\" argument is a jQuery element\n    /**\n     * Get instance of some object from editorElement based on the jQuery target\n     * @param  {target} target jQuery target that user interacted with\n     * @return {editorElements.NetworkElement} instance of an object derived from editorElements.NetworkElement that the user interacted with\n     */\n    getRealTarget(target) {\n        // eventy se museji zpracovat tady, protoze v SVG se eventy nepropaguji\n        let $target = $(target);\n\n        if($target.hasClass(\"connector\")) {\n            // this is a connector, don't traverse groups\n            return this.getConnectorById($target.attr('id'));\n        } else if($target.parents('g').length > 0) {\n            // this element is in a group and it is not a connector\n\n            // traversing up the DOM tree until we find the closest group\n            let $parentGroup = $target.parent();\n            while ($parentGroup.prop(\"tagName\") !== \"G\" && $parentGroup.prop(\"tagName\") !== \"g\") {\n                $parentGroup = $parentGroup.parent();\n            }\n\n            return this.getBoxById($parentGroup.attr('id'));\n        } else if ($target.hasClass(\"wire\")) {\n            return this.getWireById($target.attr('id'));\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Add an element to the Canvas\n     * @param  {editorElements.NetworkElement}  element Element that will be added on the Canvas\n     * @param  {Boolean} [refresh=true] if true, the SVG document will be reloaded after adding this element\n     */\n    appendElement(element, refresh = true) {\n        this.appendJQueryObject(element.get(), refresh);\n    }\n\n    /**\n     * Append a jQuery element to the SVG document (helper for this.appendElement)\n     * @param  {object}  object         jQuery element that will be added to the SVG document\n     * @param  {Boolean} [refresh=true] if true, the SVG document will be reloaded after adding this element\n     */\n    appendJQueryObject(object, refresh = true) {\n        this.$svg.append(object);\n        if(refresh)\n            this.refresh();\n    }\n\n    /**\n     * Add a new pattern to the definitions element in the SVG document\n     * @param {svgObj.Pattern} pattern pattern that will be added to the <devs> element in the SVG document\n     */\n    addPattern(pattern) {\n        this.$defs.append(pattern);\n        this.refresh();\n    }\n\n    /**\n     * Reload the SVG document (needed to display a newly appended jQuery object)\n     */\n    refresh() {\n        this.$svg.html(this.$svg.html());\n        console.log(\"SVG document has been reloaded.\")\n    }\n\n    /**\n     * Display the context menu on the specified position\n     * @param  {number} x       horizontal position in CSS pixels\n     * @param  {number} y       vertical position in CSS pixels\n     * @param  {jQuery.element} $target the item user clicked on (used to display \"remove this element\"-type items in the menu)\n     */\n    displayContextMenu(x, y, $target) {\n        this.contextMenu.display(x, y, $target);\n    }\n\n    /**\n     * hide the context menu\n     */\n    hideContextMenu() {\n        this.contextMenu.hide();\n    }\n\n    /**\n     * snap a value to a grid\n     * @param  {number} value value in SVG pixels\n     * @return {number}       the value rounded to the closest number divisible by the grid size\n     */\n    snapToGrid(value) {\n        return Math.round(value / this.gridSize) * this.gridSize;\n    }\n\n    /**\n     * convert grid pixels to SVG pixels\n     * @param  {number} value distance in grid pixels\n     * @return {number}       distance in SVG pixels\n     */\n    gridToSVG(value) {\n        return value * this.gridSize;\n    }\n\n    /**\n     * convert SVG pixels to grid pixels\n     * @param {number} value distance in SVG pixels\n     * @return {number}      distance in grud pixels\n     */\n    SVGToGrid(value) {\n        return value / this.gridSize;\n    }\n\n    /**\n     * static function for snapping a value to a grid\n     * @param  {number} value value in SVG pixels\n     * @param  {number} gridSize size of the grid in SVG pixels\n     * @return {number}       the value rounded to the closest number divisible by the grid size\n     */\n    static snapToGrid(value, gridSize) {\n        return Math.round(value / gridSize) * gridSize;\n    }\n\n    /**\n     * move an element to the front in the canvas\n     * @param  {string} objId id of the element\n     */\n    moveToFrontById(objId) {\n        this.$svg.append($(\"#\" + objId));\n    }\n\n    /**\n     * move an element to the back in the canvas\n     * @param  {string} objId id of the element\n     */\n    moveToBackById(objId) {\n        $(\"#\" + this.background.id)\n            .after($(\"#\" + objId));\n    }\n\n    /**\n     * get set of nodes, that cannot be used for wiring at any circumstances\n     * @return {Set} set of nodes (objects containing x and y coordinates) that are not suitable for wiring\n     */\n    getNonRoutableNodes() {\n        let blockedNodes = new Set();\n        // for each box\n        for(let i = 0 ; i < this.boxes.length ; ++i) {\n            // get the jQuery child with class .rect (\"hitbox\")\n            let rect = $('#' + this.boxes[i].svgObj.id).children(\".rect\")[0];\n            // get the position of the rectangle\n            let position = $(rect).position();\n\n            // snap the position to the grid\n            position.left = this.snapToGrid(position.left);\n            position.top = this.snapToGrid(position.top);\n\n            // for each item in blockedNodes (set of blocked nodes with coordinates relative\n            // to the left upper corner of rect; unit used is \"one gridSize\") convert the coordinates\n            // to absolute (multiple with gridSize and add position of rect) and add the result to the set\n            for(let item of this.boxes[i].blockedNodes) {\n                let absoluteX = position.left + item.x * this.gridSize;\n                let absoluteY = position.top + item.y * this.gridSize;\n\n                blockedNodes.add({\n                    x: absoluteX,\n                    y: absoluteY\n                });\n            }\n        }\n        // TODO ensure that this.refresh() is really unnecessary\n        // this.refresh();\n        // return the set\n        return blockedNodes;\n    }\n\n    /**\n     * get set of nodes, that are inconvenient for wiring, but can be used, just are not preferred\n     * @return {Set} set of nodes (objects containing x and y coordinates) that are not preferred for wiring\n     */\n    getInconvenientNodes(ignoreWireId) {\n\n        let inconvenientNodes = new Set();\n        // for each wire\n        for(let i = 0 ; i < this.wires.length ; ++i) {\n            // (ignore the wire that is specified in the ignoreWireId argument (if any))\n            if(ignoreWireId===undefined || ignoreWireId!==this.wires[i].svgObj.id) {\n                // cycle through points, for each neigbours add all points that are in between them\n                // i.e.: (0,0) and (0,30) are blocking these nodes: (0,0), (0,10), (0,20), (0,30)\n                let prevPoint;\n                this.wires[i].points.forEach(point => {\n                    if (prevPoint === undefined) {\n                        // if the prevPoint is undefined, add the first point\n                        inconvenientNodes.add({x: point.x, y: point.y});\n                    } else {\n                        // else add all the point between the prevPoint (excluded) and point (included)\n\n                        if(prevPoint.x===point.x) {\n                            // if the line is horizontal\n                            let from = Math.min(prevPoint.y, point.y);\n                            let to = Math.max(prevPoint.y, point.y);\n\n                            while(from <= to) {\n                                inconvenientNodes.add({x: point.x, y: from});\n                                from += this.gridSize;\n                            }\n                        } else if(prevPoint.y===point.y) {\n                            // if the line is vertical\n                            let from = Math.min(prevPoint.x, point.x);\n                            let to = Math.max(prevPoint.x, point.x);\n\n                            while(from <= to) {\n                                inconvenientNodes.add({x: from, y: point.y});\n                                from += this.gridSize;\n                            }\n                        } else {\n                            // line is neither horizontal nor vertical, throw an error for better future debugging\n                            console.error(\"getInconvenientNodes: line between two points is neither horizontal nor vertical\");\n                        }\n                    }\n\n                    // set new prevPoint\n                    prevPoint = {\n                        x: point.x,\n                        y: point.y\n                    };\n                });\n\n\n            }\n        }\n        // return the set\n        return inconvenientNodes;\n    }\n}\n","\"use strict\";\n\n/**\n * Item in the [ContextMenu](./module-ContextMenu.html). ContextMenuItems can be nested using the appendItem function.\n */\nclass ContextMenuItem {\n    /**\n     * @param {string} text          text on the button\n     * @param {ContextMenu} contextMenu instance of the [ContextMenu](./module-ContextMenu.html) this item belongs to\n     * @param {Canvas} parentSVG     instance of [Canvas](./module-Canvas.html) this menu belongs to\n     * @param {Function} clickFunction callback function that will be called when user clicks this item\n     */\n    constructor(text, contextMenu, parentSVG, clickFunction) {\n        /**\n         * text on the button\n         * @type {string}\n         */\n        this.text = text;\n\n        /**\n         * instance of the [ContextMenu](./module-ContextMenu.html) this item belongs to\n         * @type {ContextMenu}\n         */\n        this.contextMenu = contextMenu;\n\n        /**\n         * instance of [Canvas](./module-Canvas.html) this menu belongs to\n         * @type {Canvas}\n         */\n        this.parentSVG = parentSVG;\n\n        /**\n         * jQuery element representing DOM content of this menu item\n         * @type {jQuery.element}\n         */\n        this.$el = $(\"<li>\").text(text);\n\n        // set up click callback if clickFunction is defined\n        if(clickFunction) {\n            $(this.$el).click(\n                event => {\n                    clickFunction(event);\n                    contextMenu.hide();\n                }\n            );\n        }\n    }\n\n    /**\n     * add a CSS class to this item\n     * @param {string} cls [description]\n     */\n    addClass(cls) {\n        this.$el.addClass(cls);\n        return this;\n    }\n\n    /**\n     * append a nested {@link ContextMenuItem} to this item\n     * @param  {ContextMenuItem} item item that will be appended\n     */\n    appendItem(item) {\n        if(!this.subList) {\n            this.subList = $(\"<ul>\");\n            this.$el.append(this.subList);\n        }\n\n        this.subList.append(item.jQuery);\n\n        return item;\n    }\n\n    /**\n     * get jQuery element of this menu item\n     * @return {jQuery.element} jQuery element containing all DOM content for this menu item\n     */\n    get jQuery() {\n        return this.$el;\n    }\n}\n\n/**\n * Menu item that has a custom click callback function that adds a {@link Gate} of the specified type to the [Canvas](./module-Canvas.html)\n * @extends ContextMenuItem\n */\nclass GateMenuItem extends ContextMenuItem {\n    /**\n     * @param {string} type        type of the gate {@link Gate} (and, or, ...)\n     * @param {ContextMenu} contextMenu instance of the [ContextMenu](./module-ContextMenu.html) that this item belongs to\n     * @param {Canvas} parentSVG   instance of [Canvas](./module-Canvas.html) this menu belongs to\n     */\n    constructor(type, contextMenu, parentSVG) {\n        super(\n            `${type} gate`,\n            contextMenu,\n            parentSVG,\n            event => {\n                let position = {\n                    left: parentSVG.snapToGrid(parentSVG.viewbox.transformX(contextMenu.position.x)),\n                    top: parentSVG.snapToGrid(parentSVG.viewbox.transformY(contextMenu.position.y))\n                };\n\n                parentSVG.newGate(\n                    type,\n                    position.left, // x coordinate\n                    position.top // y coordinate\n                );\n            }\n        );\n    }\n}\n\n/** @module ContextMenu */\n/**\n * ContextMenu represents the menu that is displayed to the user when they right click on a canvas.\n * This menu allows user to add elements to the Canvas and in the case that user rightclicked\n * on a specific element, this menu allows them to remove this element.\n */\nexport default class ContextMenu {\n    /**\n     * @param {Canvas} parentSVG instance of [Canvas](./module-Canvas.html) this menu belongs to\n     */\n    constructor(parentSVG) {\n        /**\n         * instance of [Canvas](./module-Canvas.html) this menu belongs to\n         * @type {Canvas}\n         */\n        this.parentSVG = parentSVG;\n\n        // list of gates that can be added\n        const gates = [\"not\", \"and\", \"or\", \"nand\", \"nor\", \"xor\", \"xnor\"];\n\n        /**\n         * Position of the context menu. It is used to add the new elements to the correct position on the Canvas.\n         * @type {Object}\n         */\n        this.position = {\n            x: 0, y: 0\n        };\n\n        /**\n         * jQuery element containing the context menu\n         * @type {jQuery.element}\n         */\n        this.$el = $(\"<ul>\");\n        this.$el.attr('id', 'contextMenu');\n\n        // add all gates\n        let gateList = new ContextMenuItem(\"New gate\", this, parentSVG);\n        for (let i = 0 ; i < gates.length ; ++i) {\n            gateList.appendItem(\n                new GateMenuItem(gates[i], this, parentSVG)\n            );\n        }\n        this.appendItem(gateList);\n\n        // add input box\n        this.appendItem(\n            new ContextMenuItem(\"Input box\", this, parentSVG,\n                () => {\n                    let position = {\n                        left: this.parentSVG.snapToGrid(parentSVG.viewbox.transformX(this.position.x)),\n                        top: this.parentSVG.snapToGrid(parentSVG.viewbox.transformY(this.position.y))\n                    };\n\n                    parentSVG.newInput(position.left, position.top);\n                }\n            )\n        );\n\n        // add output box\n        this.appendItem(new ContextMenuItem(\"Output box\", this, parentSVG, () => {\n            let position = {\n                left: this.parentSVG.snapToGrid(parentSVG.viewbox.transformX(this.position.x)),\n                top: this.parentSVG.snapToGrid(parentSVG.viewbox.transformY(this.position.y))\n            };\n\n            parentSVG.newOutput(position.left, position.top);\n        }));\n\n        // add conditional items for box and wire removal\n        this.appendConditionalItem('box', 'Remove this item', id => {this.parentSVG.removeBox(id)});\n        this.appendConditionalItem('wire', 'Remove this wire', id => {this.parentSVG.removeWireById(id)});\n\n        // add the context menu to the DOM\n        parentSVG.$svg.before(this.$el);\n    }\n\n    /**\n     * append a context menu item to the context menu\n     * @param  {ContextMenuItem} item instance of {@link ContextMenuItem} that will be added to this menu\n     */\n    appendItem(item) {\n        this.$el.append(item.jQuery);\n        return item;\n    }\n\n    /**\n     * appends an connditional item (that is shown only if the target has the class itemClass)\n     * @param  {string} itemClass     show the item only if the target has this class\n     * @param  {string} text          text of this menu item\n     * @param  {Function} clickFunction function with one argument (ID of the target) that will be called on click\n     */\n    appendConditionalItem(itemClass, text, clickFunction) {\n        if(!this.conditionalItems) {\n            this.conditionalItems = [];\n        }\n\n        this.conditionalItems[this.conditionalItems.length] = {\n            itemClass: itemClass,\n            text: text,\n            clickFunction: clickFunction\n        }\n    }\n\n    /**\n     * decide whether or not to display specific conditional items\n     * @param  {jQuery.element} $target jQuery target of a MouseEvent (element that user clicked on)\n     */\n    resolveConditionalItems($target) {\n        for(let i = 0; i < this.conditionalItems.length; ++i) {\n            if($target.hasClass(this.conditionalItems[i].itemClass)) {\n                this.appendItem(\n                    new ContextMenuItem(\n                        this.conditionalItems[i].text, this, this.parentSVG,\n                        () => {\n                            this.conditionalItems[i].clickFunction($target.attr('id'));\n                        }\n                    )\n                ).addClass('conditional');\n            }\n        }\n    }\n\n    /**\n     * hide all conditional items\n     */\n    hideAllConditionalItems() {\n        this.$el.children('.conditional').remove();\n    }\n\n    /**\n     * displays the context menu with the right set of conditional items\n     * @param  {number} x       horizontal position of the context menu in CSS pixels\n     * @param  {number} y       vertical position of the context menu in CSS pixels\n     * @param  {jQuery.element} $target jQuery target of a MouseEvent (element that user clicked on)\n     */\n    display(x, y, $target) {\n        this.position = {\n            x: x,\n            y: y\n        };\n\n        this.$el.css({\n            display: 'block',\n            top: y + \"px\",\n            left: x + \"px\"\n        });\n\n        this.resolveConditionalItems($target);\n    }\n\n    /**\n     * hide the context menu\n     */\n    hide() {\n        this.$el.css({display: 'none'});\n        this.hideAllConditionalItems();\n    }\n}\n","import * as svgObj from './svgObjects.js'\nimport * as Structures from './structuresAndClasses.js'\nimport Logic from './logic.js'\n\n/**\n * mapping of logical states to css classes\n * @type {Object}\n */\nconst stateClasses = {\n    on: \"stateOn\",\n    off: \"stateOff\",\n    unknown: \"stateUnknown\",\n    oscillating: \"stateOscillating\"\n};\n\n/**\n * Helper class used by {@link Transform}.\n *\n * Represents one single property of the transform argument, for example `translate(360 150)`\n * that may be a part of longer transform argument like `transform=\"translate(360 150) rotate(90 30 20)\"`\n */\nclass Property {\n    /**\n     * Initialize the Property object\n     * @param {string} [string] string in the property format `propertyname(list of space separated values)`\n     */\n    constructor(string) {\n        if(string!==undefined) {\n            this.name = string.replace(/^[ ]*([^(]+).*/, \"$1\");\n            this.args = string.replace(/^[^(]+\\((.*)\\)/, \"$1\").split(' ');\n        }\n    }\n\n    /**\n     * set or replace the name of this property\n     * @param {string} name new name for this property\n     */\n    setName(name) {\n        this.name = name;\n    }\n\n    /**\n     * set arguments of this property\n     * @param {array} args array of arguments\n     */\n    setArguments(args) {\n        this.args = args;\n    }\n\n    /**\n     * get string representation of the property\n     * @return {string} property in the property format `name(arg1 arg2)`\n     */\n    get() {\n        return this.name + \"(\" + this.args.join(\" \") + \")\";\n    }\n}\n\n/**\n * API for manipulating the transform argument used in SVG\n */\nexport class Transform {\n    /**\n     * Initialize the Transform object\n     * @param {string} [string] string in the format of the `transform` argument in SVG, for example `translate(360 150) rotate(90 30 20)`\n     */\n    constructor(string) {\n        /**\n         * array of {@link Property} instances\n         * @type {Array}\n         */\n        this.items = [];\n\n        if(string!==undefined) {\n            let splitItems = string.split(\")\");\n\n            for (let i = 0 ; i < splitItems.length ; i++) {\n                if(splitItems[i]) { // if not empty\n                    this.items.push(new Property(splitItems[i] + \")\"));\n                }\n            }\n        }\n    }\n\n    /**\n     * convert distances from SVG pixels to grid pixels\n     * @param  {Canvas} parentSVG instance of [Canvas](./module-Canvas.html)\n     */\n    toGridPixels(parentSVG) {\n        for (let item of this.items) {\n            if(item.name === \"translate\") {\n                item.args = [\n                    parentSVG.SVGToGrid(item.args[0]),\n                    parentSVG.SVGToGrid(item.args[1]),\n                ]\n            } else if(item.name === \"rotate\") {\n                item.args = [\n                    item.args[0],\n                    parentSVG.SVGToGrid(item.args[1]),\n                    parentSVG.SVGToGrid(item.args[2]),\n                ]\n            }\n        }\n    }\n\n    /**\n     * convert distances from grid pixels to SVG pixels\n     * @param  {Canvas} parentSVG instance of [Canvas](./module-Canvas.html)\n     */\n    toSVGPixels(parentSVG) {\n        for (let item of this.items) {\n            if(item.name === \"translate\") {\n                item.args = [\n                    parentSVG.gridToSVG(item.args[0]),\n                    parentSVG.gridToSVG(item.args[1]),\n                ]\n            } else if(item.name === \"rotate\") {\n                item.args = [\n                    item.args[0],\n                    parentSVG.gridToSVG(item.args[1]),\n                    parentSVG.gridToSVG(item.args[2]),\n                ]\n            }\n        }\n    }\n\n    /**\n     * find a transform property by name and get its index in the [items](#items) array\n     * @param  {string} name name of the property\n     * @return {number}      index of the property in the array of properties or `-1` if not found\n     */\n    getIndex(name) {\n        for(let i = 0 ; i < this.items.length; i++) {\n            if(name === this.items[i].name) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * get the translate property\n     * @return {Object} object containing parameters of the translate attribute\n     */\n    getTranslate() {\n        let args = this.getArguments(this.getIndex(\"translate\"));\n\n        return {\n            x: args[0],\n            y: args[1]\n        }\n    }\n\n    /**\n     * get the rotate property\n     * @return {Object} object containing parameters of the rotate attribute\n     */\n    getRotate() {\n        let args = this.getArguments(this.getIndex(\"rotate\"));\n\n        return {\n            deg: args[0],\n            centreX: args[1],\n            centreY: args[2]\n        }\n    }\n\n    /**\n     * set translate to the specified values\n     * @param {number} x horizontal translation\n     * @param {number} y vertical translation\n     */\n    setTranslate(x, y) {\n        this.setParameter(\"translate\", [x, y]);\n    }\n\n    /**\n     * set rotate to the specified values\n     * @param {number} deg     angle of the rotation in degrees\n     * @param {number} centreX horizontal position of the centre of the rotation\n     * @param {number} centreY vertical position of the centre of the rotation\n     */\n    setRotate(deg, centreX, centreY) {\n        this.setParameter(\"rotate\", [deg, centreX, centreY]);\n    }\n\n    /**\n     * rotate by 90 degrees to the right\n     * @param  {number} centreX horizontal position of the centre of the rotation\n     * @param  {number} centreY vertical position of the centre of the rotation\n     */\n    rotateRight(centreX, centreY) {\n        if(this.getIndex(\"rotate\")===-1) {\n            this.setRotate(90, centreX, centreY);\n        } else {\n            let newRotation = (parseInt(this.getRotate().deg) + 90) % 360;\n\n            if(newRotation===180) {\n                // swap centre coordinates\n                // because rotate(c, x, y) is defined like transform(-x, -y) rotate(c) transform(x, y)\n                let a = centreX;\n                centreX = centreY;\n                centreY = a;\n            }\n\n            this.setRotate(\n                newRotation,\n                centreX,\n                centreY\n            );\n        }\n    }\n\n    /**\n     * get the transform values in a string\n     * @return {string} string that can be used as a value for the transform property of a SVG element\n     */\n    get() {\n        let retVal = \"\";\n        for(let i = 0 ; i < this.items.length ; i++) {\n            if(i!==0) {\n                retVal += \" \";\n            }\n            retVal += this.items[i].get();\n        }\n        return retVal;\n    }\n\n    /**\n     * get arguments of a property specified by index\n     * @param  {number} index index of the property\n     * @return {array}       array of arguments of the specified property\n     */\n    getArguments(index) {\n        return this.items[index].args;\n    }\n\n    /**\n     * set argumets of a property specified by name\n     * @param {string} name name of the property\n     * @param {array} args array of arguments of the specified property\n     */\n    setParameter(name, args) {\n        // determine index of the parameter (if set), else index == -1\n        let index = this.getIndex(name);\n\n        // if the property has been already set, change it (rewrite the array in the right index)\n        // else create a new one (set index to the length of an array --> ad an item to the end)\n        if(index===-1) {\n            index = this.items.length;\n            this.items[index] = new Property();\n            this.items[index].setName(name);\n        }\n\n        // save args under the right index\n        this.items[index].setArguments(args);\n    }\n}\n\n/**\n * parent class for all network elements\n */\nclass NetworkElement {\n    /**\n     * Basic constructor for NetworkElement\n     * @param {Canvas} parentSVG reference to the instance of {@link Canvas} that this element belongs to\n     */\n    constructor(parentSVG) {\n        if(!parentSVG) {\n            console.error(\"Parent SVG element has to be defined.\");\n        }\n        this.parentSVG = parentSVG;\n\n        // used to store the svjObject's instance of this element\n        this.svgObj = undefined;\n    }\n\n    /**\n     * Get the unique ID of the SVG element tied to this logical element\n     * @return {string} ID of the SVG element\n     */\n    get id() {\n        return this.svgObj.id;\n    }\n\n    /**\n     * empty callback function to prevent error messages, function is implemented later in the {@link Box} class\n     */\n    onMouseDown() {}\n\n    /**\n     * empty function to prevent error messages, function is implemented later in the {@link Box} and {@link Connector} classes\n     */\n    onMouseUp() {}\n\n    /**\n     * empty function to prevent error messages, function is implemented later in the {@link Box} class\n     */\n    onMouseMove() {}\n\n    /**\n     * \"virtual\" getter for json data, prints an error that it has to be redefined in the derived classes\n     */\n    get exportData() {\n        console.error(\"'json' getter has not been defined for this element\", this);\n        return undefined;\n    }\n}\n\n/**\n * parent class for input and output connectors\n * @extends NetworkElement\n */\nclass Connector extends NetworkElement {\n    /**\n     * @param {Canvas} parentSVG link to the {@link Canvas} instance that this connector will belong to\n     * @param {number} gridSize  size of the grid in SVG pixels\n     * @param {number} left      horizontal position defined in grid units (SVG pixels divided by the grid size)\n     * @param {number} top       vertical position defined in grid units (SVG pixels divided by the grid size)\n     */\n    constructor(parentSVG, gridSize, left, top) {\n        super(parentSVG);\n\n        /**\n         * size of the grid in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = gridSize;\n        /**\n         * size of the connector in SVG pixels\n         * @type {number}\n         */\n        this.connectorSize = gridSize;\n        /**\n         * offset of the connector from the grid in SVG pixels\n         * @type {number}\n         */\n        this.connectorOffset = this.connectorSize / 2;\n\n        /**\n         * instance of {@link svgObjects.svgObj} that holds all SVG information about this connector\n         * @type {svgObj}\n         */\n        this.svgObj = new svgObj.Rectangle(\n            left * this.gridSize - this.connectorOffset,\n            top * this.gridSize - this.connectorOffset,\n            this.connectorSize,\n            this.connectorSize,\n            \"none\",\n            \"black\"\n        );\n\n        this.svgObj.$el.addClass(\"connector\");\n\n        /**\n         * this flag describes whether this connector is an input connector\n         * @type {Boolean}\n         */\n        this.isInputConnector = false;\n\n        /**\n         * current logical state of this connector\n         * @type {Logic.state}\n         */\n        this.elementState = Logic.state.unknown;\n        this.svgObj.addClass(stateClasses.unknown);\n\n        /**\n         * set of ids of all wires connected to this connector\n         * @type {Set}\n         */\n        this.wireIds = new Set();\n    }\n\n    /**\n     * whether this connector is an output connector\n     * @return {Boolean}\n     */\n    get isOutputConnector() {\n        return !this.isInputConnector;\n    }\n\n    /**\n     * whether this connector is an output connector\n     * @return {Boolean}\n     */\n    set isOutputConnector(value) {\n        this.isInputConnector = !value;\n    }\n\n    /**\n     * add a wire id to the list of wire ids\n     * @param {string} wireId\n     */\n    addWireId(wireId) {\n        this.wireIds.add(wireId);\n    }\n\n    /**\n     * remove a wire id from the list of wire ids\n     * @param {string} wireId\n     */\n    removeWireId(wireId) {\n        this.wireIds.delete(wireId);\n    }\n\n    /**\n     * remove a wire specified by ID and update the connector\n     * @param  {string} wireId ID of the wire to be removed\n     */\n    removeWireIdAndUpdate(wireId) {\n        this.removeWireId(wireId);\n    }\n\n    /**\n     * set logical state of the connector\n     * @param {Logic.state} state new state of the connector\n     */\n    setState(state) {\n        this.svgObj.removeClasses(stateClasses.on, stateClasses.off, stateClasses.unknown, stateClasses.oscillating);\n\n        switch (state) {\n            case Logic.state.unknown:\n                this.svgObj.addClass(stateClasses.unknown);\n                break;\n            case Logic.state.on:\n                this.svgObj.addClass(stateClasses.on);\n                break;\n            case Logic.state.off:\n                this.svgObj.addClass(stateClasses.off);\n                break;\n            case Logic.state.oscillating:\n                this.svgObj.addClass(stateClasses.oscillating);\n                break;\n        }\n\n        this.elementState = state;\n    }\n\n    /**\n     * get state of this connector\n     * @return {Logic.state}\n     */\n    get state() {\n        return this.elementState;\n    }\n\n    /**\n     * get svgObj instance content of this connector\n     * @return {svgObjects.Rectangle}\n     */\n    get() {\n        return this.svgObj;\n    }\n\n    /**\n     * call [wireCreationHelper](./module-Canvas.html#wireCreationHelper) on mouse up\n     */\n    onMouseUp() {\n        this.parentSVG.wireCreationHelper(this.svgObj.id);\n    }\n}\n\n/**\n * Connector that gets its state from a connected value and passes it through to the {@link Box} this connector belongs to.\n * @extends Connector\n */\nexport class InputConnector extends Connector {\n    constructor(parentSVG, gridSize, left, top) {\n        super(parentSVG, gridSize, left, top);\n\n        this.isInputConnector = true;\n    }\n\n    /**\n     * Call the setState method of {@link Connector} and than refresh the state of the connected {@link Box}\n     * @param {Logic.state} state new {@link Logic.state} of the connector\n     */\n    setState(state) {\n        super.setState(state);\n\n        let gate = this.parentSVG.getBoxByConnectorId(this.svgObj.id);\n        gate.refreshState();\n    }\n\n    /**\n     * remove the wire (by calling the removeWireIdAndUpdate of {@link Connector})\n     * and update state of this connector by setting it to undefined using the setState method\n     * @param  {string} wireId ID of the {@link Wire}\n     */\n    removeWireIdAndUpdate(wireId) {\n        super.removeWireIdAndUpdate(wireId);\n        this.setState(Logic.state.unknown);\n    }\n\n    get state() {\n        return super.state;\n    }\n}\n\n/**\n * Connector that takes a state defined by the {@link Box} it belongs to and passes it to all connected wire\n * @extends Connector\n */\nexport class OutputConnector extends Connector {\n    constructor(parentSVG, gridSize, left, top) {\n        super(parentSVG, gridSize, left, top);\n\n        this.isOutputConnector = true;\n    }\n\n    /**\n     * Call the setState method of {@link Connector} and than set the state of the connected {@link Wire}s\n     * @param {Logic.state} state new {@link Logic.state} of the connector\n     */\n    setState(state) {\n        super.setState(state);\n\n        for (const wireId of this.wireIds) {\n            this.parentSVG.getWireById(wireId).setState(state);\n        }\n    }\n\n    get state() {\n        return super.state;\n    }\n}\n\n/**\n * Parent class for gates and input and output boxes. Defines all the factors\n * that the boxes have in common (svgObj structure, draggability and rotatability...)\n * @extends NetworkElement\n */\nclass Box extends NetworkElement {\n    /**\n     * @param {Canvas} parentSVG  instance of [Canvas](./module-Canvas.html)\n     * @param {string} name       name of the element (input, output, and, or, xor...)\n     * @param {string} category   type of the element (io, gate)\n     * @param {number} gridWidth  width of the element in grid pixels\n     * @param {number} gridHeight height of the element in grid pixels\n     */\n    constructor(parentSVG, name, category, gridWidth, gridHeight) {\n        super(parentSVG);\n\n        /**\n         * specifies the box type within the category (input/output in io, and/or/... in gate)\n         * @type {string}\n         */\n        this.name = name;\n\n        /**\n         * specifies the box category (io for input or output, gate for logic gates)\n         * @type {string}\n         */\n        this.category = category;\n\n        /**\n         * size of the grid in SVG pixels\n         * @type {number}\n         */\n        this.gridSize = this.parentSVG.gridSize;\n\n        /**\n         * url of the image depicting this object\n         * @type {string}\n         */\n        this.url = \"img/\" + this.category + \"/\" + this.name + \".svg\";\n\n        /**\n         * array of connectors of this box\n         * @type {Array}\n         */\n        this.connectors = [];\n\n        /**\n         * svgObj containing all SVG data used to display this box\n         * @type {svgObj}\n         */\n        this.svgObj = new svgObj.Group();\n\n        /**\n         * width of this element in SVG pixels\n         * @type {number}\n         */\n        this.width = gridWidth * this.gridSize;\n        /**\n         * height of this element in SVG pixels\n         * @type {number}\n         */\n        this.height = gridHeight * this.gridSize;\n\n        /**\n         * width of this element in grid pixels\n         * @type {number}\n         */\n        this.gridWidth = gridWidth;\n        /**\n         * height of this element in grid pixels\n         * @type {number}\n         */\n        this.gridHeight = gridHeight;\n\n        // transparent background rectangle\n        let rectangle = new svgObj.Rectangle(0, 0, this.width, this.height, \"none\", \"none\");\n        rectangle.$el.addClass('rect');\n\n        this.svgObj.addChild(rectangle);\n        // image of the element\n        this.image = new svgObj.SvgImage(0, 0, this.width, this.height, this.url);\n        this.svgObj.addChild(this.image);\n\n        // add draggability and rotatability\n        this.svgObj.draggable(true);\n        this.svgObj.rotatable(true);\n\n        // add type=\"gate\", used in special callbacks in contextmenu\n        this.svgObj.addAttr({\"type\": category});\n\n        this.svgObj.$el.addClass(\"box\");\n        this.svgObj.$el.addClass(category);\n\n        this.generateBlockNodes();\n    }\n\n    /**\n     * get all input connectors of this box\n     * @return {Array} array of input connectors\n     */\n    get inputConnectors() {\n        return this.connectors.filter(conn => conn.isInputConnector)\n    }\n\n    /**\n     * get all output connectors of this box\n     * @return {Array} array of output connectors\n     */\n    get outputConnectors() {\n        return this.connectors.filter(conn => conn.isOutputConnector)\n    }\n\n    /**\n     * get data of this box as a JSON-ready object\n     * @return {object}\n     */\n    get exportData() {\n        let connections = [];\n\n        // go through all connectors\n        let counter = 0\n        for (const conn of this.connectors) {\n            // go through each its wire id\n            for (const item of conn.wireIds) {\n                let thisWireId;\n                if(!this.parentSVG.exportWireIdMap.has(item)) {\n                    // if the wire id is not in the map, add it and assign new arbitrary id\n                    this.parentSVG.exportWireIdMap.set(item, this.parentSVG.exportWireId);\n                    thisWireId = this.parentSVG.exportWireId;\n                    this.parentSVG.exportWireId++;\n                } else {\n                    // else get id from the map\n                    thisWireId = this.parentSVG.exportWireIdMap.get(item);\n                }\n\n\n                // add this connection to the list\n                connections[connections.length] = {\n                    index: counter,\n                    type: conn.type,\n                    wireId: thisWireId\n                };\n            }\n            counter++\n        }\n\n        return {\n            name: this.name,\n            category: this.category,\n            transform: this.getTransform(true),\n            connections: connections\n        };\n    }\n\n    /**\n     * get set of nodes that are not suitable for wire routing\n     * @param  {Number} [marginTop=0]    top margin of the element (distance from the element that should be also blocked)\n     * @param  {Number} [marginRight=0]  right margin of the element\n     * @param  {Number} [marginBottom=0] bottom margin of the element\n     * @param  {Number} [marginLeft=0]   left margin of the element\n     * @param  {Number} specialNodes     additional nodes that should be added to the set\n     * @return {Set}                     set of not suitable nodes\n     */\n    generateBlockNodes(marginTop = 0, marginRight = 0, marginBottom = 0, marginLeft = 0, ...specialNodes) {\n        this.blockedNodes = new Set();\n        for(let x = marginLeft ; x <= this.gridWidth - marginRight ; x++) {\n            for(let y = marginTop ; y <= this.gridHeight - marginBottom ; y++) {\n                this.blockedNodes.add({\n                    x: x,\n                    y: y\n                });\n            }\n        }\n\n        for (let node of specialNodes) {\n            this.blockedNodes.add(node);\n        }\n    }\n\n    /**\n     * empty function, redefined in inherited elements\n     * refreshState takes input connector values and sets output values accordingly\n     */\n    refreshState() {\n        console.warn(\"Calling the virtual function refreshState has no effect.\");\n    }\n\n    /**\n     * change image to another one that ends with a specified suffix\n     *\n     * *usage:* `changeImage(\"abc\")` changes image url to `image-abc.svg`,\n     * `changeImage()` changes image url to the default one (`image.svg`)\n     * @param  {string} [suffix] new suffix for the image\n     */\n    changeImage(suffix) {\n        if(suffix === undefined || suffix === \"\") {\n            suffix = \"\";\n        } else {\n            suffix = \"-\" + suffix;\n        }\n        this.url = \"img/\" + this.category + \"/\" + this.name + suffix + \".svg\";\n\n        this.image.changeUrl(this.url);\n    }\n\n    /**\n     * get a jQuery element representing this box\n     * @return {jQuery.element}\n     */\n    get() {\n        return this.svgObj.get();\n    }\n\n    /**\n     * remove a specific onde from the set of blocked nodes\n     * @param  {number} x horizontal position of the blocked node in grid pixels\n     * @param  {number} y vertical position of the blocked node in grid pixels\n     */\n    removeBlockedNode(x, y) {\n        for(let item of this.blockedNodes) {\n            if(item.x===x && item.y===y) {\n                this.blockedNodes.delete(item);\n                break;\n            }\n        }\n    }\n\n    /**\n     * rotate the set of blocked nodes to the right\n     *\n     * used to rotate the nodes when the object itself is rotated\n     */\n    rotateBlockedNodesRight() {\n        if(this.rotation===undefined || this.rotation===4) {\n            this.rotation = 0;\n        }\n        this.rotation++;\n\n        if(this.rotation === 1 || this.rotation === 3) {\n            let newBlockedNodes = new Set();\n            this.blockedNodes.forEach(item => {\n                newBlockedNodes.add({\n                    x: Math.abs(item.y - this.gridHeight),\n                    y: item.x\n                });\n            });\n            this.blockedNodes = newBlockedNodes;\n        } else if(this.rotation === 2 || this.rotation === 4) {\n            let newBlockedNodes = new Set();\n            this.blockedNodes.forEach(item => {\n                newBlockedNodes.add({\n                    x: Math.abs(item.y - this.gridWidth),\n                    y: item.x\n                });\n            });\n            this.blockedNodes = newBlockedNodes;\n        }\n    }\n\n    /**\n     * add a connector to the element on the specified position\n     * @param {number}  left             horizontal distance from the left edge of the element\n     * @param {number}  top              vertical distance from the top edge of the element\n     * @param {Boolean} isInputConnector whether or not should this connector an input connector (`true` for input connector, `false` for output connector)\n     */\n    addConnector(left, top, isInputConnector) {\n        let index = this.connectors.length;\n        if(isInputConnector) {\n            this.connectors[index] = new InputConnector(this.parentSVG, this.gridSize, left, top);\n        } else {\n            this.connectors[index] = new OutputConnector(this.parentSVG, this.gridSize, left, top);\n        }\n        this.svgObj.addChild(this.connectors[index].get());\n\n        this.removeBlockedNode(left, top);\n    }\n\n    /**\n     * add an input connector to the element on the specified position\n     * @param {number} left horizontal distance from the left edge of the element\n     * @param {number} top  vertical distance from the top edge of the element\n     */\n    addInputConnector(left, top) {\n        return this.addConnector(left, top, true)\n    }\n\n    /**\n     * add an output connector to the element on the specified position\n     * @param {number} left horizontal distance from the left edge of the element\n     * @param {number} top  vertical distance from the top edge of the element\n     */\n    addOutputConnector(left, top) {\n        return this.addConnector(left, top, false)\n    }\n\n    /**\n     * get the connector object based on its id\n     * @param  {string} connectorId ID of the {@link Connector}\n     * @return {Connector}             instance of the {@link Connector} or `undefined` if not found\n     */\n    getConnectorById(connectorId) {\n        for(let i = 0 ; i < this.connectors.length ; i++) {\n            if(this.connectors[i].id===connectorId) {\n                return this.connectors[i];\n            }\n        }\n        // if connector not found, return undefined\n        return undefined;\n    }\n\n    /**\n     * get the instance of {@link Transform} representing the state of the transform attribute of this element\n     * @param  {Boolean} [gridPixels=false] if `true`, function will return the result in grid pixels instead of SVG pixels\n     * @return {Transform}                  {@link Transform} of the element\n     */\n    getTransform(gridPixels = false) {\n        let transform;\n        if (!this.svgObj.$el.attr(\"transform\")) {\n            // the element does not have a \"transform\" property --> create it\n            transform = new Transform();\n            transform.setTranslate(0, 0);\n            this.svgObj.addAttr({\"transform\": transform.get()});\n        } else {\n            // the element does have a \"transform\" property --> change it\n            transform = new Transform(this.svgObj.$el.attr(\"transform\"));\n        }\n\n        // convert values to grid pixels\n        if(gridPixels) {\n            transform.toGridPixels(this.parentSVG);\n        }\n\n        return transform;\n    }\n\n    /**\n     * get the instance of {@link Transform} representing the state of the transform attribute of this element _with lenght units in grid pixels_\n     * @return {Transform} {@link Transform} of the element\n     */\n    getGridPixelTransform() {\n        return getTransform(true);\n    }\n\n    /**\n     * set the transform attribute of this element\n     * @param {Transform} transform {@link Transform} of the element (with lengths specified in SVG pixels)\n     */\n    setTransform(transform) {\n        this.svgObj.addAttr({\"transform\": transform.get()});\n    }\n\n    /**\n     * function that is called on every mouse down on this element\n     *\n     * moves the element to the front and calls onMouseDownLeft if applicable\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseDown(event) {\n        this.mouseLeft = false;\n        if(event.which === 1) {\n            this.mouseLeft = true;\n            this.onMouseDownLeft(event);\n\n            // move the DOM element to front\n            this.parentSVG.moveToFrontById(this.svgObj.id);\n        }\n    }\n\n    /**\n     * function that is called on every left mouse down on this element\n     *\n     * prepares element for the \"click\" and \"drag and drop\" actions\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseDownLeft(event) {\n        this.mouseMoved = false;\n\n        let transform = this.getTransform();\n\n        // save the current item position into a variable\n        let currentPosition = transform.getTranslate();\n\n        let {pageX, pageY} = this.parentSVG.viewbox.transformEvent(event)\n\n        // calculate mouse offset from the object origin\n        this.offset = {\n            x: pageX - currentPosition.x,\n            y: pageY - currentPosition.y\n        };\n    }\n\n    /**\n     * function that is called on every left mouse move with this element\n     * applies the correct transform values to provide the \"drag and drop\" functionality\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseMove(event) {\n        if(this.mouseLeft) {\n            this.svgObj.$el.addClass('grabbed');\n\n            this.mouseMoved = true;\n\n            let {pageX, pageY} = this.parentSVG.viewbox.transformEvent(event)\n\n            const left = pageX - this.offset.x;\n            const top = pageY - this.offset.y;\n\n            let transform = this.getTransform();\n            transform.setTranslate(left, top);\n\n            this.setTransform(transform);\n\n            this.updateWires(true);\n        }\n    }\n\n    /**\n     * function that is called on every mouse up on this element\n     * provides the \"click\" functionality and calls the onDrop handler for the \"drag and drop\" functionality\n     * @param  {jQuery.MouseEvent} event\n     */\n    onMouseUp(event) {\n        if(event.which === 1) {\n            if(this.mouseMoved) {\n                this.onDrop(event);\n            } else {\n                this.onClick();\n            }\n        } else if (event.which === 2 ) {\n            this.onClickMiddle();\n        }\n\n        this.svgObj.$el.removeClass('grabbed');\n    }\n\n    /**\n     * called by onMouseUp when the mouse has been moved between onMouseDown and onMouseUp\n     *\n     * applies grid snapping of the element on the end of the \"drag and drop\" action\n     * @param  {jQuery.MouseEvent} event\n     */\n    onDrop(event) {\n        let {pageX, pageY} = this.parentSVG.viewbox.transformEvent(event)\n\n        let left = pageX - this.offset.x;\n        let top = pageY - this.offset.y;\n\n        left = this.parentSVG.snapToGrid(left);\n        top = this.parentSVG.snapToGrid(top);\n\n        let transform = this.getTransform();\n        transform.setTranslate(left, top);\n\n        this.setTransform(transform);\n\n        this.updateWires();\n    }\n\n    /**\n     * empty function, will be redefined in InputBox\n     */\n    onClick() {}\n\n    onClickMiddle() {\n        let transform = this.getTransform();\n\n        let rect = this.svgObj.$el[0].getBoundingClientRect();\n\n        let centreX = Math.round(rect.width / 2);\n        let centreY = Math.round(rect.height / 2);\n\n        centreX -= centreX % this.gridSize;\n        centreY -= centreY % this.gridSize;\n\n        transform.rotateRight(\n            centreX,\n            centreY\n        );\n\n        this.svgObj.addAttr({\"transform\": transform.get()});\n\n        this.rotateBlockedNodesRight();\n\n        this.updateWires();\n    }\n\n    // updates all wires connected to this box\n    updateWires(temporary = false) {\n        this.connectors.forEach(conn => {\n            conn.wireIds.forEach(wireId => {\n                let wire = this.parentSVG.getWireById(wireId);\n                if(temporary) {\n                    wire.temporaryWire();\n                } else {\n                    wire.routeWire();\n                }\n            })\n        })\n    }\n}\n\n/**\n * InputBox has only output connectors and is used to set the input states for the logic network.\n * @extends Box\n */\nexport class InputBox extends Box {\n    constructor(parentSVG, isOn = false) {\n        const width = 7;\n        const height = 4;\n\n        super(parentSVG, \"input\", \"io\", width, height);\n\n        this.addConnector(width, height / 2, false);\n\n        this.on = isOn;\n    }\n\n    get exportData() {\n        let data = super.exportData;\n        data.isOn = this.isOn;\n        return data;\n    }\n\n    generateBlockNodes() {\n        super.generateBlockNodes(0, 1, 1, 0);\n    }\n\n    refreshState() {\n        // start a new simulation from the output connector\n        this.parentSVG.startNewSimulation(this.connectors[0], this.connectors[0].state)\n    }\n\n    set on(isOn) {\n        if (isOn) {\n            // turn on\n            this.changeImage(\"on\");\n            this.connectors[0].setState(Logic.state.on);\n            this.refreshState()\n        } else {\n            // turn off\n            this.changeImage();\n            this.connectors[0].setState(Logic.state.off);\n            this.refreshState()\n        }\n\n        this.isOn = isOn;\n    }\n\n    get on() {\n        return this.isOn;\n    }\n\n    onClick() {\n        this.on = !this.on;\n    }\n}\n\n/**\n * OutputBox has only input connectors and is used to visualize the output states of the logic network.\n * @extends Box\n */\nexport class OutputBox extends Box {\n    constructor(parentSVG) {\n        const height = 4;\n        const width = 5;\n\n        super(parentSVG, \"output\", \"io\", width, height);\n\n        this.addConnector(0, height / 2, true);\n    }\n\n    refreshState() {\n        this.setState(this.connectors[0].state);\n    }\n\n    setState(state) {\n        switch (state) {\n            case Logic.state.on:\n                this.changeImage(\"on\");\n                break;\n            case Logic.state.off:\n                this.changeImage(\"off\");\n                break;\n            case Logic.state.unknown:\n                this.changeImage();\n                break;\n            case Logic.state.oscillating:\n                this.changeImage(\"osc\");\n                break;\n        }\n    }\n\n    generateBlockNodes() {\n        super.generateBlockNodes(0, 0, 0, 1);\n    }\n}\n\n/**\n * Gate is a box that processes the states of its input connectors and returns the result in its output connectors.\n * @extends Box\n */\nexport class Gate extends Box {\n    constructor(parentSVG, name) {\n        const width = 9;\n        const height = 4;\n\n        super(parentSVG, name, \"gate\", width, height);\n\n        // output\n        this.addConnector(width, height / 2, false);\n\n        if(this.name===\"not\") {\n            // input\n            this.addConnector(0, height / 2, true);\n        } else {\n            // input\n            this.addConnector(0, height / 4, true);\n            this.addConnector(0, height / (4/3), true);\n\n            // add one blockedNode between the inputs (for better looking wiring)\n            // and regenerate blocked nodes\n            this.generateBlockNodes({\n                x: 0,\n                y: height / 2\n            });\n        }\n\n        this.refreshState();\n    }\n\n    generateBlockNodes(specialNode) {\n        if(specialNode!==undefined) {\n            super.generateBlockNodes(0, 1, 0, 1, specialNode);\n        } else {\n            super.generateBlockNodes(0, 1, 0, 1);\n        }\n    }\n\n    refreshState() {\n        let state = Logic.state.unknown\n        switch (this.name) {\n            case \"and\":\n                state =  Logic.and(this.connectors[1].state, this.connectors[2].state)\n                break;\n            case \"nand\":\n                state =  Logic.nand(this.connectors[1].state, this.connectors[2].state)\n                break;\n            case \"nor\":\n                state =  Logic.nor(this.connectors[1].state, this.connectors[2].state)\n                break;\n            case \"not\":\n                state =  Logic.not(this.connectors[1].state)\n                break;\n            case \"or\":\n                state =  Logic.or(this.connectors[1].state, this.connectors[2].state)\n                break;\n            case \"xnor\":\n                state =  Logic.xnor(this.connectors[1].state, this.connectors[2].state)\n                break;\n            case \"xor\":\n                state =  Logic.xor(this.connectors[1].state, this.connectors[2].state)\n                break;\n        }\n        // notify the simulator about this change\n        this.parentSVG.simulation.notifyChange(this.connectors[0].id, state)\n    }\n}\n\n/* TODO document */\nexport class Blackbox extends Box {\n    constructor(parentSVG, inputConnectors, outputConnectors, evalFunction, name = \"\") {\n        const width = 11;\n        const height = Math.max(inputConnectors, outputConnectors) * 2;\n\n        super(parentSVG, name, \"blackbox\", width, height);\n\n        const connectorPinLenght = 2.5 * this.gridSize;\n\n        // override default svgObj structure\n        this.svgObj = new svgObj.Group();\n\n        // transparent background rectangle\n        let hitbox = new svgObj.Rectangle(0, 0, this.width, this.height, \"none\", \"none\");\n        hitbox.$el.addClass('rect');\n\n        this.svgObj.addChild(hitbox);\n\n        // main rectangle\n        const bodyWidth = this.width - 2 * connectorPinLenght;\n\n        let rectangle = new svgObj.Rectangle(connectorPinLenght, 0, bodyWidth, this.height, \"white\", \"black\");\n        rectangle.addAttr({'stroke-width': '2.5'});\n        rectangle.$el.addClass('rect');\n\n        this.svgObj.addChild(rectangle);\n\n        // text description of the box\n        const textWidth = bodyWidth - this.gridSize;\n        const textHeight = this.height - this.gridSize;\n        let text = new svgObj.MultiLineText(\n            (this.width - textWidth) / 2, // horizontal centering\n            (this.height - textHeight) / 2, // vertical centering\n            textWidth,\n            this.height,\n            name.toUpperCase(),\n            this.gridSize * 1.2\n        );\n        this.svgObj.addChild(text);\n\n        // add input connectors\n        for (let i = 0 ; i < inputConnectors ; ++i) {\n            const gridPosition = (i * 2) + 1;\n            const pixelPosition = gridPosition * this.gridSize;\n\n            let pin = new svgObj.PolyLine(\n                new svgObj.PolylinePoints([\n                    new svgObj.PolylinePoint(0, pixelPosition),\n                    new svgObj.PolylinePoint(connectorPinLenght, pixelPosition),\n                ]),\n                \"black\",\n                1\n            )\n\n            this.svgObj.addChild(pin);\n\n            // add the connector\n            this.addInputConnector(0, gridPosition);\n        }\n\n        // add output connectors\n        for (let i = 0 ; i < outputConnectors ; ++i) {\n            const gridPosition = (i * 2) + 1;\n            const pixelPosition = gridPosition * this.gridSize;\n\n            let pin = new svgObj.PolyLine(\n                new svgObj.PolylinePoints([\n                    new svgObj.PolylinePoint(this.width - connectorPinLenght, pixelPosition),\n                    new svgObj.PolylinePoint(this.width, pixelPosition),\n                ]),\n                \"black\",\n                1\n            )\n\n            this.svgObj.addChild(pin);\n\n            this.addOutputConnector(width, gridPosition);\n        }\n\n        // add draggability and rotatability\n        this.svgObj.draggable(true);\n        this.svgObj.rotatable(true);\n\n        // add type=\"gate\", used in special callbacks in contextmenu\n        // this.svgObj.addAttr({\"type\": \"blackbox\"});\n\n        this.svgObj.$el.addClass(\"box\");\n        // this.svgObj.$el.addClass(category);\n\n        // add the evalFunction to object property so it can be accessed in refreshState\n        this.evalFunction = evalFunction;\n    }\n\n    refreshState() {\n        const inputStates = this.inputConnectors.map(conn => conn.state);\n        // call the evalFunction to get the output states\n        const outputStates = this.evalFunction(...inputStates);\n\n        // apply the outputStates to the outputConnectors\n        for (let i = 0; i < outputStates.length ; ++i) {\n            this.outputConnectors[i].setState(outputStates[i]);\n        }\n    }\n}\n\n/**\n * Wire represents connection of two {@link Connector}s.\n * @extends NetworkElement\n */\nexport class Wire extends NetworkElement {\n    constructor(parentSVG, fromId, toId, gridSize, refresh = true) {\n        // small TODO: rework start... end... to arrays? (not important)\n\n        super(parentSVG);\n\n        this.gridSize = gridSize;\n\n        this.fromId = fromId;\n        this.toId = toId;\n\n        this.startBox = this.parentSVG.getBoxByConnectorId(fromId);\n        this.endBox = this.parentSVG.getBoxByConnectorId(toId);\n\n        this.boxes = [this.startBox, this.endBox]\n\n        this.startConnector = this.parentSVG.getConnectorById(fromId);\n        this.endConnector = this.parentSVG.getConnectorById(toId);\n\n        this.connectors = [this.startConnector, this.endConnector]\n        this.routeWire(true, refresh);\n\n        this.elementState = Logic.state.unknown;\n\n        for (let connector of this.connectors) {\n            if(connector.isOutputConnector) {\n                this.setState(connector.state);\n            }\n        }\n\n        this.svgObj.$el.addClass(\"wire\");\n    }\n\n    get exportData() {\n        return {\n            fromId: this.fromId,\n            toId: this.toId\n        };\n    }\n\n    setState(state) {\n        this.svgObj.removeClasses(stateClasses.on, stateClasses.off, stateClasses.unknown, stateClasses.oscillating);\n\n        switch (state) {\n            case Logic.state.unknown:\n                this.svgObj.addClass(stateClasses.unknown);\n                break;\n            case Logic.state.on:\n                this.svgObj.addClass(stateClasses.on);\n                break;\n            case Logic.state.off:\n                this.svgObj.addClass(stateClasses.off);\n                break;\n            case Logic.state.oscillating:\n                this.svgObj.addClass(stateClasses.oscillating);\n                break;\n        }\n\n        if (this.startConnector.isInputConnector) {\n            this.startConnector.setState(state);\n        }\n        if(this.endConnector.isInputConnector) {\n            this.endConnector.setState(state);\n        }\n\n        this.elementState = state;\n    }\n\n    get state() {\n        return this.elementState;\n    }\n\n    updateWireState() {\n        for (const box of this.boxes) {\n            box.refreshState()\n        }\n    }\n\n    get() {\n        return this.svgObj.get();\n    }\n\n    getTemporaryWirePoints() {\n        let points = new svgObj.PolylinePoints();\n        points.append(new svgObj.PolylinePoint(this.wireStart.x, this.wireStart.y));\n        points.append(new svgObj.PolylinePoint(this.wireEnd.x, this.wireEnd.y));\n        return points;\n    }\n\n    temporaryWire() {\n        this.wireStart = this.getCoordinates(this.startConnector, false);\n        this.wireEnd = this.getCoordinates(this.endConnector, false);\n\n        this.setWirePath(this.getTemporaryWirePoints());\n\n        // this.svgObj.removeClasses(stateClasses.on, stateClasses.off, stateClasses.unknown, stateClasses.oscillating);\n        // this.svgObj.addClass(stateClasses.unknown);\n    }\n\n    routeWire(snapToGrid = true, refresh = true) {\n        this.wireStart = this.getCoordinates(this.startConnector, snapToGrid);\n        this.wireEnd = this.getCoordinates(this.endConnector, snapToGrid);\n\n        this.points = this.aStar(\n            {\n                x: this.wireStart.x / this.gridSize,\n                y: this.wireStart.y / this.gridSize\n            },\n            {\n                x: this.wireEnd.x / this.gridSize,\n                y: this.wireEnd.y / this.gridSize\n            });\n\n        this.setWirePath(this.points);\n\n        if (refresh)\n            this.updateWireState();\n    }\n\n    setWirePath(points) {\n        // set the line\n        if(this.svgObj!==undefined) {\n            this.svgObj.updatePoints(points);\n        } else {\n            this.svgObj = new svgObj.PolyLine(points, \"#8b8b8b\", 2);\n        }\n\n        this.svgObj.removeClasses(stateClasses.on, stateClasses.off, stateClasses.unknown, stateClasses.oscillating);\n        this.svgObj.addClass(stateClasses.unknown);\n\n        this.svgObj.addAttr({\n            fromId: this.fromId,\n            toId: this.toId\n        });\n    }\n\n\n\n    // implementation based on this pseudocode: https://en.wikipedia.org/wiki/A*_search_algorithm#Pseudocode\n    aStar(start, end) {\n        const wireCrossPunishment = 2;\n        const wireBendPunishment = 1;\n\n        // number of nodes, that can be opened at once\n        // once is this limit exceeded, aStar will fail and getTemporaryWirePoints will be used instead\n        const maxNodeLimit = 50000;\n\n        let closedNodes = new Set();\n        let openNodes = new Set();\n        openNodes.add(start);\n\n        let cameFrom = new Map();\n\n        // default value: infinity\n        let gScore = new Structures.MapWithDefaultValue(Infinity);\n        gScore.set(start, 0);\n\n        // default value: infinity\n        let fScore = new Structures.MapWithDefaultValue(Infinity);\n        fScore.set(start, Wire.manhattanDistance(start, end));\n\n        let nonRoutable = this.parentSVG.getNonRoutableNodes();\n        let punishedButRoutable;\n        if(this.svgObj===undefined) {\n            punishedButRoutable = this.parentSVG.getInconvenientNodes();\n        } else {\n            punishedButRoutable = this.parentSVG.getInconvenientNodes(this.svgObj.id);\n        }\n\n        while (openNodes.size > 0) {\n            let currentNode;\n            let currentNodeFScore;\n\n            // find the value from openNodes that has the lowest fScore\n            // (can be implemented effectively using min-heap data structure (maybe TODO sometime)?)\n            for (const node of openNodes) {\n                if(!currentNode || fScore.get(node) < currentNodeFScore) {\n                    currentNode = node;\n                    currentNodeFScore = fScore.get(currentNode)\n                }\n            }\n\n            if(svgObj.PolylinePoint.equals(currentNode, end)) {\n                return this.reconstructPath(cameFrom, currentNode);\n            }\n\n            openNodes.delete(currentNode);\n            closedNodes.add(currentNode);\n\n            // the farthest points accessible without avoiding obstacles in every direction\n            // (but max 50 in each direction)\n            for(let direction = 0 ; direction < 4 ; direction++) {\n                let newPoint = Wire.movePoint(currentNode, direction);\n                for(let i = 0 ; i < 50 ; i++) {\n                    // if newPoint is in the set of non routable points,\n                    // don't add it and stop proceeding in this direction\n                    if(Wire.setHasThisPoint(nonRoutable, this.scalePointToGrid(newPoint))) {\n                        break;\n                    }\n\n                    // skip this node, if it has been already closed\n                    // or if it is on the list of non routable nodes\n                    if (closedNodes.has(newPoint)) {\n                        continue;\n                    }\n\n                    if (!openNodes.has(newPoint)) {\n                        openNodes.add(newPoint);\n                    }\n\n                    // calculate possible GScore by adding 1 to the score of the node we came from\n                    // (we prioritize to minimize the number of nodes and not the distance,\n                    //  so we are adding 1 on all nodes, even if the euclidean / mannhatan distance may vary)\n                    let increment = wireBendPunishment;\n                    let possibleGScore = gScore.get(currentNode) + increment;\n\n                    if(Wire.setHasThisPoint(punishedButRoutable, this.scalePointToGrid(newPoint))) {\n                        // if the node is in the set of punished node, punish it by adding to the GScore\n                        possibleGScore += wireCrossPunishment;\n                    }\n\n                    // skip this node if it has worst estimage gscore than in the gscore table\n                    if (possibleGScore >= gScore.get(newPoint)) {\n                        continue;\n                    }\n\n                    cameFrom.set(newPoint, currentNode);\n                    gScore.set(newPoint, possibleGScore);\n                    fScore.set(newPoint, possibleGScore + Wire.manhattanDistance(newPoint, end));\n\n                    // if newPoint is in the set of punished but routable points,\n                    // add it but stop proceeding in this direction\n                    if(Wire.setHasThisPoint(punishedButRoutable, this.scalePointToGrid(newPoint))) {\n                        break;\n                    }\n\n                    // move to the next point in the direciton\n                    newPoint = Wire.movePoint(newPoint, direction);\n                }\n            }\n\n            if(openNodes.size > maxNodeLimit) {\n                break;\n            }\n        }\n        // if we got here, the path does not exist -> let's use temporary path ignoring all colisions\n        return this.getTemporaryWirePoints();\n    }\n    static movePoint(point, direction) {\n        switch (direction) {\n            case 0: // up\n                return {\n                    x: point.x,\n                    y: point.y - 1\n                };\n            case 1: // right\n                return {\n                    x: point.x + 1,\n                    y: point.y\n                };\n            case 2: // down\n                return {\n                    x: point.x,\n                    y: point.y + 1\n                };\n            case 3: // left\n                return {\n                    x: point.x - 1,\n                    y: point.y\n                };\n        }\n    }\n    scalePointToGrid(point) {\n        return {\n            x: point.x * this.gridSize,\n            y: point.y * this.gridSize\n        }\n    }\n\n    reconstructPath(cameFrom, currentNode) {\n        let totalPath = new svgObj.PolylinePoints();\n        totalPath.append(new svgObj.PolylinePoint(currentNode.x * this.gridSize, currentNode.y * this.gridSize));\n\n        while (cameFrom.has(currentNode)) {\n            currentNode = cameFrom.get(currentNode);\n            totalPath.append(new svgObj.PolylinePoint(currentNode.x * this.gridSize, currentNode.y * this.gridSize));\n        }\n\n        return totalPath;\n    }\n\n    static manhattanDistance(a, b) {\n        // Manhattan geometry\n        return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n    }\n\n    static setHasThisPoint(set, point) {\n        for (let item of set) {\n            if(item.x === point.x && item.y === point.y) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getCoordinates(connector, snapToGrid = true) {\n        // connector.svgObj.id has to be called, else the getCoordinates does not work on the first call in Firefox 55\n        let dummy = connector.svgObj.id;\n\n        let $connector = connector.svgObj.$el;\n\n        let position = $connector.position();\n\n        position.left = this.parentSVG.viewbox.transformX(position.left)\n        position.top = this.parentSVG.viewbox.transformY(position.top)\n\n        let width = $connector.attr(\"width\");\n        let height = $connector.attr(\"height\");\n\n        let x = position.left + width / 2;\n        let y = position.top + height / 2;\n        if(snapToGrid) {\n            x = this.parentSVG.snapToGrid(x);\n            y = this.parentSVG.snapToGrid(y);\n        }\n\n        return {\n            x: x,\n            y: y\n        };\n    }\n}\n","import { exportNetwork } from \"./importExport.js\";\n\nimport {\n    getLibrary,\n    getNetworkFromLibrary\n} from './networkLibrary.js';\n\n/**\n * FloatingButton represents a button that is used in the floating menu in the right bottom corner\n * of the application. It may have a custom tooltip and callback on the click event\n */\nclass FloatingButton {\n    /**\n     * @param {string} buttonClass Custom string that identifies the SVG icon used on this button. This string is also added as a CSS class to the button.\n     * @param {string} tooltip     tooltip for the button, that will be displayed on hover and also used as alternative title for the image\n     * @param {Function} clickEvent  custom callback when user clicks the button\n     * @param {Canvas} parentSVG   reference to the parent SVG element\n     */\n    constructor(buttonClass, tooltip, clickEvent, parentSVG) {\n        /**\n         * jQuery element representing the button\n         * @type {jQuery.element}\n         */\n        this.$el = $('<a>')\n\n        // add classes to the element\n        this.$el.addClass(\"button\");\n        this.$el.addClass(buttonClass);\n\n        // add the icon\n        this.$el.append(\n            $(\"<img>\")\n            .attr(\"src\", `img/gui/${buttonClass}.svg`)\n            .attr(\"alt\", tooltip)\n        );\n\n        // add the tooltip element and an event listener if tooltip is defined\n        if (tooltip) {\n            /**\n             * jQuery element representing the tooltip\n             * @type {jQuery.element}\n             */\n            this.$tooltip = $(\"<div>\");\n            this.$tooltip\n                .addClass(\"tooltip\")\n                .html(tooltip);\n\n            parentSVG.$svg.after(this.$tooltip);\n\n            this.$el.hover(() => {\n                this.$tooltip.fadeIn(200);\n            }, () => {\n                this.$tooltip.fadeOut(200);\n            });\n        }\n\n        // add an event listener on click, if the callback function is defined\n        if (clickEvent) {\n            this.$el.on(\"click\", clickEvent);\n        }\n    }\n}\n\n/** @module FloatingMenu */\n/**\n * Class to represent the floating menu in the right bottom corner of the page.\n * It instantiates all the buttons and their callbacks.\n */\nexport default class FloatingMenu {\n    /**\n     * @param {Canvas} parentSVG reference to the Canvas element this menu is associated with\n     */\n    constructor(parentSVG) {\n        /**\n         * the jQuery element containing all buttons\n         * @type {jQuery.element}\n         */\n        this.$el = $('<div>')\n\n        const id = 'floatingMenu';\n\n        this.$el.attr(\"id\", id);\n\n        const $loader = $(\"<div>\").addClass(\"loader\").addClass(\"hidden\");\n\n        /* IMPORT */\n\n        // here will be the instance of Lity stored\n        // (we need to store it, because the \"import\" button also closes Lity)\n        let lityInstance;\n\n        this.append(\n            new FloatingButton(\"import\", \"Import a network from a file\", () => {\n                let $popup = $(\"<div>\")\n                    .addClass(\"importExport\")\n                    .addClass(\"import\");\n\n                let textareaId = \"importJSON\";\n                let $textblock = $(\"<textarea>\").attr('id', textareaId);\n\n                $popup.append(\n                    $textblock\n                ).append(\n                    $(\"<a>\").attr({\n                        \"href\": \"#\",\n                        \"class\": \"upload\"\n                    })\n                    .append(\n                        $(\"<img>\").attr('src', \"img/gui/import.svg\")\n                    )\n                    .append(\" import from JSON\")\n                    .on('click', () => {\n                        $popup.children().addClass(\"hidden\");\n                        $loader.removeClass(\"hidden\");\n\n                        const data = JSON.parse($('#' + textareaId).val());\n\n                        // proccess the imported data\n                        parentSVG.importData(data).then(() => {\n                            // close Lity\n                            lityInstance.close();\n                        })\n                    })\n                ).append($loader);\n\n                lityInstance = lity($popup);\n\n                // focus on the textblock\n                $textblock.focus();\n            }, parentSVG)\n        );\n\n        /* LOAD FROM LIBRARY */\n        this.append(\n            new FloatingButton(\"library\", \"Load a network from the library\", () => {\n\n                let $popup = $(\"<div>\")\n                    .addClass(\"importExport\")\n                    .addClass(\"library\");\n\n                let $list = $(\"<ul>\")\n                $popup.append($list).append($loader);\n\n                getLibrary().then(networkList => {\n                    for (const networkInfo of networkList) {\n                        if(networkInfo.hasNetwork || networkInfo.hasTable) {\n                            let $listItem = $(\"<li>\")\n                            .append(\n                                $(\"<span class='name'>\")\n                                    .append(networkInfo.name)\n                            );\n\n                            if(networkInfo.hasNetwork) {\n                                $listItem.append(\n                                    $(\"<a>\").append(\n                                        \"load as network\"\n                                    ).attr(\"href\", \"#\").on(\"click\", () => {\n                                        $popup.children().addClass(\"hidden\");\n                                        $loader.removeClass(\"hidden\");\n\n                                        getNetworkFromLibrary(networkInfo.file).then(response => {\n                                            // proccess the imported data\n                                            parentSVG.importData(response).then(() => {\n                                                // close Lity\n                                                lityInstance.close();\n                                            })\n                                        })\n                                    })\n                                )\n                            }\n\n                            if(networkInfo.hasTable) {\n                                $listItem.append(\n                                    $(\"<a>\").append(\n                                        \"load in blackbox\"\n                                    ).attr(\"href\", \"#\").on(\"click\", () => {\n                                        $popup.children().addClass(\"hidden\");\n                                        $loader.removeClass(\"hidden\");\n\n                                        getNetworkFromLibrary(networkInfo.file).then(response => {\n                                            parentSVG.importBlackbox(response.truthtable, response.name).then(() => {\n                                                // close Lity\n                                                lityInstance.close();\n                                            });\n                                        })\n                                    })\n                                )\n                            }\n                            $list.append($listItem)\n                        }\n                    }\n                })\n\n                $popup.append()\n\n                lityInstance = lity($popup);\n            }, parentSVG)\n        );\n\n        /* EXPORT */\n        this.append(\n            new FloatingButton(\"export\", \"Get code for this network\", () => {\n                const data = new exportNetwork(parentSVG);\n\n                // create the popup container holding all popup content (that will be passed to lity)\n                let $popup = $(\"<div>\")\n                    .addClass(\"importExport\")\n                    .addClass(\"export\");\n\n                // generate the block with code to be displayed and append it to the popup element\n                const $textblock = $(\"<textarea>\").text(data.json(exportNetwork.style.pretty))\n\n                $popup.append($textblock);\n\n                // generate the links\n                $popup.append(\n                    $(\"<a>\").attr({\n                        \"href\": data.json(exportNetwork.style.pretty, true),\n                        \"class\": \"download\",\n                        \"download\": \"network.json\"\n                    }).append(\n                        $(\"<img>\").attr('src', \"img/gui/export.svg\")\n                    ).append(\" expanded JSON\")\n                );\n                $popup.append(\n                    $(\"<a>\").attr({\n                        \"href\": data.json(exportNetwork.style.compact, true),\n                        \"class\": \"download\",\n                        \"download\": \"network.min.json\"\n                    }).append(\n                        $(\"<img>\").attr('src', \"img/gui/export.svg\")\n                    ).append(\" compact JSON\")\n                );\n\n                lity($popup);\n\n                // highlight the text in the textblock\n                $textblock.select();\n            }, parentSVG)\n        );\n\n        /* HELP */\n\n        let help = new FloatingButton(\"help\", \"Display a help page\", false, parentSVG);\n        help.$el.attr({\n            'href': './docs/user.html',\n            'data-lity': ''\n        });\n        this.append(help);\n\n        parentSVG.$svg.after(this.$el);\n    }\n\n    /**\n     * append a FloatingButton to this menu\n     * @param  {FloatingButton} menuItem append an instance of  {@link FloatingButton} to this menu\n     */\n    append(menuItem) {\n        this.$el.append(menuItem.$el);\n    }\n}\n","\"use strict\";\n\nexport default class Fn {\n    static deepCopy(arr) {\n        return $.extend(true, [], arr);\n    }\n\n    static addMouseScrollEventListener(query, func) {\n        let MouseWheelHandler = event => {\n            var event = window.event || event; // old IE support\n            event.delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\n\n            func(event)\n\n            return false;\n        }\n\n        // TODO add more backwards compatibility somehow\n        let svgelement = document.querySelector(query);\n\n        if (svgelement.addEventListener) {\n            // IE9, Chrome, Safari, Opera\n            svgelement.addEventListener(\"mousewheel\", MouseWheelHandler, false);\n            // Firefox\n            svgelement.addEventListener(\"DOMMouseScroll\", MouseWheelHandler, false);\n        } else  {\n            // IE 6/7/8\n            svgelement.attachEvent(\"onmousewheel\", MouseWheelHandler);\n        }\n        svgelement.addEventListener('mousewheel', function(e) {\n            console.log('event', e)\n        }, false)\n    }\n}\n","\"use strict\";\n\nexport class exportNetwork {\n    constructor(parentSVG) {\n        this.parentSVG = parentSVG;\n    }\n\n    get exportData() {\n        return this.parentSVG.exportData;\n    }\n\n    json(style = exportNetwork.style.compact, dataUri = false) {\n        if(dataUri) {\n            return 'data:application/json;charset=utf-8,'\n                + encodeURIComponent(this.json(style));\n        } else {\n            switch (style) {\n                case exportNetwork.style.compact:\n                    return JSON.stringify(this.exportData);\n                case exportNetwork.style.pretty:\n                    return JSON.stringify(this.exportData, null, 2);\n            }\n        }\n    }\n\n    static get style() {\n        return {\n            pretty: 0,\n            compact: 1\n        }\n    };\n}\n","\"use strict\";\n\n// logic functions used in the gate evaluation\nexport default class Logic {\n    static and(a, b) {\n        return Logic.testLogicRulesSymmetric(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.on],\n            [Logic.state.on, Logic.state.off, Logic.state.off],\n            [Logic.state.on, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.off],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.off],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n    static nand(a, b) {\n        return Logic.not(Logic.and(a, b));\n    }\n    static nor(a, b) {\n        return Logic.not(Logic.or(a, b));\n    }\n    static not(a) {\n        if(a === Logic.state.on) {\n            return Logic.state.off;\n        } else if (a === Logic.state.off) {\n            return Logic.state.on;\n        } else {\n            return a;\n        }\n    }\n    static or(a, b) {\n        return Logic.testLogicRulesSymmetric(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.on],\n            [Logic.state.on, Logic.state.off, Logic.state.on],\n            [Logic.state.on, Logic.state.unknown, Logic.state.on],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.on],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n    static xnor(a, b) {\n        return Logic.not(Logic.xor(a, b));\n    }\n    static xor(a, b) {\n        return Logic.testLogicRulesSymmetric(a, b, [\n            [Logic.state.on, Logic.state.on, Logic.state.off],\n            [Logic.state.on, Logic.state.off, Logic.state.on],\n            [Logic.state.on, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.on, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.off, Logic.state.off, Logic.state.off],\n            [Logic.state.off, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.off, Logic.state.oscillating, Logic.state.oscillating],\n\n            [Logic.state.unknown, Logic.state.unknown, Logic.state.unknown],\n            [Logic.state.unknown, Logic.state.oscillating, Logic.state.unknown],\n\n            [Logic.state.oscillating, Logic.state.oscillating, Logic.state.oscillating]\n        ]);\n    }\n\n    static get state() {\n        return {\n            unknown: 0,\n            on: 1,\n            off: 2,\n            oscillating: 3\n        }\n    }\n\n    static testLogicRulesSymmetric(a, b, rules) {\n        for (let i = 0 ; i < rules.length ; i++) {\n            if((rules[i][0]===a && rules[i][1]===b) || (rules[i][0]===b && rules[i][1]===a)) {\n                return rules[i][2];\n            }\n        }\n    }\n}","import Canvas from './canvas.js';\n\n/**\n * When the document is ready, initialize the application\n */\n$(() => {\n    new Canvas(\"#canvas\", 10);\n});\n","\nconst libraryDir = './library/'\n\nexport function getLibrary() {\n    return new Promise((resolve, reject) => {\n        const libraryFile = libraryDir + 'networkList.json';\n\n        let request = new XMLHttpRequest();\n\n        request.addEventListener(\"load\", function() {\n            if(this.response) {\n                resolve(this.response.networks);\n            }\n        });\n\n        request.open('GET', libraryFile, true);\n        request.responseType = 'json';\n        request.send();\n    });\n}\n\nexport function getNetworkFromLibrary(networkName) {\n    return new Promise((resolve, reject) => {\n        let request = new XMLHttpRequest();\n\n        request.addEventListener(\"load\", function() {\n            if(this.response) {\n                resolve(this.response);\n            }\n        });\n\n        request.open('GET', libraryDir + networkName + '.json', true);\n        request.responseType = 'json';\n        request.send();\n    });\n}\n","import Logic from './logic.js'\n\nclass stateChange {\n    constructor(connectorId, state, whoCausedIt) {\n        this.connectorId = connectorId\n        this.state = state\n        this.whoCausedIt = whoCausedIt\n    }\n}\n\n// all connectors mentioned here are OUTPUT CONNECTORS\nexport default class Simulation {\n    constructor(parentSVG) {\n        this.parentSVG = parentSVG\n\n        // maps each affected output connector to it's directly preceeding output connectors\n        this.predecessors = new Map();\n\n        // maps waveId -> array of outputConnectors affected\n        this.waves = new Map();\n        this.wave = 0\n\n        this.cycledConnectors = new Map()\n        this.resolvedCycledConnectors = new Set()\n\n    }\n\n    run() {\n        this.wave++;\n        while(this.waves.has(this.wave)) {\n            this.step()\n            this.waves.delete(this.wave) // clean old waves on the go\n            this.wave++\n        }\n    }\n\n    step() {\n        for (let {connectorId, state, whoCausedIt} of this.waves.get(this.wave)) {\n            // skip resolved cycles\n            if(this.resolvedCycledConnectors.has(connectorId)) {\n                continue\n            }\n\n            // skip connector that are cycles\n            if (this.cycledConnectors.has(connectorId)) {\n                // get the set of states that this connector appeared from the moment the signal first cycled\n                let states = this.cycledConnectors.get(connectorId)\n\n                // if the connector already had this state in this cycle, resolve the cycle\n                if(states.has(state)) {\n\n                    // if there are more states in the set, the connector is oscillating\n                    // (else it keeps its state and we just break the cycle)\n                    if(states.size > 1) {\n                        state = Logic.state.oscillating\n                    }\n\n                    // mark this connector as resolved\n                    this.resolvedCycledConnectors.add(connectorId)\n\n                // this is a new, unseen state, add it to the set and continue simulating the cycle\n                } else {\n                    states.add(state)\n                }\n\n                // map the modified set of states to the connector\n                this.cycledConnectors.set(connectorId, states)\n            }\n\n            this.whoCausedIt = connectorId\n            /*  process all outputConnectors by setting their state\n                this will trigger a following event chain:\n                    outputConnector changes\n                    -> all connected wires change\n                    -> all inputConnectors connected to these wires change\n                    -> all elements that contain these inputConnectors change\n                    -> these elements compute the new state of their output connectors and call notifyChange()\n            */\n\n\n            if(whoCausedIt) {\n                this.addPredecessor(connectorId, whoCausedIt)\n            }\n\n            if (!this.cycledConnectors.has(connectorId) && this.getAllPredecessors(connectorId).has(connectorId)) {\n                this.cycledConnectors.set(connectorId, new Set([state]))\n            }\n\n\n            // reflect the changes in SVG\n            let connector = this.parentSVG.getConnectorById(connectorId)\n            if(connector) {\n                connector.setState(state)\n            }\n        }\n        this.whoCausedIt = undefined\n    }\n\n    // mark a predecessorConnectorId as a predecessor of connectorId\n    addPredecessor(connectorId, predecessorConnectorId) {\n        if(!this.predecessors.has(connectorId)) {\n            this.predecessors.set(connectorId, new Set())\n        }\n\n        this.predecessors.get(connectorId).add(predecessorConnectorId)\n    }\n\n    // returns set of all output connectors, that are before this output connector\n    getAllPredecessors(connectorId) {\n        if(!this.predecessors.has(connectorId)) {\n            this.predecessors.set(connectorId, new Set())\n        }\n\n        let all = new Set()\n\n        this.predecessors.get(connectorId).forEach(all.add, all);\n\n        let prevSize = 0\n        let size = all.size\n        while(prevSize < size) {\n            for (let connector of all) {\n                if (this.predecessors.has(connector)) {\n                    this.predecessors.get(connector).forEach(all.add, all);\n                }\n            }\n            prevSize = size\n            size = all.size\n        }\n\n        return all\n    }\n\n    notifyChange(connectorId, state) {\n        let waveId = this.wave + 1\n\n        if(!this.waves.has(waveId)) {\n            this.waves.set(waveId, [])\n        }\n\n        this.waves.get(waveId).push(new stateChange(connectorId, state, this.whoCausedIt));\n    }\n}\n","\"use strict\";\n\n// singleton to generate unique id's\nlet existingIdInstance = null;\n// usage: let id = new Id().unique\nexport class Id {\n    constructor() {\n        if(!existingIdInstance){\n            existingIdInstance = this;\n        }\n\n        this.prefix = \"id\";\n        this.nextId = 0;\n\n        return existingIdInstance;\n    }\n\n    get unique() {\n        let retVal = this.generate();\n\n        // find next unused idXXXX to prevent id collision that might be caused by some other component\n        // (it really should not happen, but this is a simple method to ensure safety)\n        while($(\"#\"+retVal).length) {\n            this.nextId++;\n            retVal = this.generate();\n        }\n        // return this id\n        this.nextId++;\n\n        return retVal;\n    }\n\n    generate() {\n        return this.prefix + this.nextId;\n    }\n}\n\n// to es5 compiler friendly implementation (\"calling a builtin Map constructor without new is forbidden\")\nexport class MapWithDefaultValue {\n    constructor(defaultValue) {\n        this.map = new Map();\n        this.default = defaultValue;\n\n\n    }\n\n    get size() {\n        return this.map.size;\n    }\n\n    clear() {\n        return this.map.clear();\n    }\n\n    forEach(...args) {\n        return this.map.forEach(...args);\n    }\n\n    get(key) {\n        return this.map.get(key);\n    }\n\n    delete(key) {\n        return this.map.delete(key);\n    }\n\n    set(key, value) {\n        return this.map.set(key, value);\n    }\n\n    has(key) {\n        return this.map.has(key);\n    }\n\n    entries() {\n        return this.map.entries();\n    }\n\n    keys() {\n        return this.map.keys();\n    }\n\n    values() {\n        return this.map.values();\n    }\n}\n\n/*\n// es6 implementation\nexport class MapWithDefaultValue extends Map {\n    constructor(defaultValue) {\n        super();\n\n        this.default = defaultValue;\n    }\n\n    get(key) {\n        if(this.has(key)) {\n            return super.get(key);\n        } else {\n            return this.default;\n        }\n    }\n}\n*/","import * as Structures from './structuresAndClasses.js'\n\nclass Tag {\n    constructor(tagName) {\n        this.tagName = tagName;\n\n        this.$el = $(\"<\"+this.tagName+\">\");\n\n        this.id = new Structures.Id().unique;\n    }\n\n    addClass(name) {\n        this.$el.addClass(name);\n    }\n\n    removeClasses(...classes) {\n        for(let item of classes) {\n            this.$el.removeClass(item);\n        }\n    }\n\n    addAttr(assoc) {\n        this.checkIfElementExistsInDOM();\n\n        // add attributes to the element\n        this.$el.attr(assoc);\n    }\n\n    getAttr(name) {\n        this.checkIfElementExistsInDOM();\n\n        return this.$el.attr(name);\n    }\n\n    removeAttr(name) {\n        this.checkIfElementExistsInDOM();\n\n        this.$el.removeAttr(name);\n    }\n\n    set id(id) {\n        this.addAttr({\"id\": id});\n    };\n\n    get id() {\n        return this.getAttr(\"id\");\n    };\n\n    get() {\n        this.checkIfElementExistsInDOM();\n        return this.$el;\n    }\n\n    // if the element exists in dom, we need to fetch it using jQuery\n    checkIfElementExistsInDOM() {\n        let $jqElement = $(\"#\"+this.$el.attr('id'));\n        if($jqElement.length) {\n            this.$el = $jqElement;\n        }\n    }\n}\n\nclass Draggable extends Tag {\n    constructor(tagName) {\n        super(tagName);\n    }\n\n    draggable(value) {\n        this.addAttr({\"draggable\": value});\n    }\n}\n\nclass Rotatable extends Tag {\n    constructor(tagName) {\n        super(tagName);\n    }\n\n    rotatable(value) {\n        this.addAttr({\"rotatable\": value});\n    }\n}\n\n// there is no multiple inheritance in ES6, so I have to do something ugly like this\nclass DraggableRotatable extends Draggable {\n    constructor(tagName) {\n        super(tagName);\n    }\n\n    rotatable(value) {\n        this.addAttr({\"rotatable\": value});\n    }\n}\n\nclass SvgElement extends DraggableRotatable {\n    constructor(x, y, w, h, tagName) {\n        super(tagName);\n\n        this.addAttr({\n            x: x,\n            y: y,\n            width: w,\n            height: h\n        });\n    }\n}\n\nexport class Rectangle extends SvgElement {\n    constructor(x, y, w, h, fill, stroke) {\n        super(x, y, w, h, \"rect\");\n        this.addAttr({\n            fill: fill,\n            stroke: stroke,\n            'stroke-width': 0.5,\n            'pointer-events': 'all' // to trigger hover even with transparent background\n        });\n    }\n}\n\nexport class SvgImage extends SvgElement {\n    constructor(x, y, w, h, url) {\n        super(x, y, w, h, \"image\");\n        this.addAttr({\n            \"xlink:href\": url\n        });\n    }\n\n    changeUrl(url) {\n        this.addAttr({\n            \"xlink:href\": url\n        });\n    }\n}\n\nexport class Group extends DraggableRotatable {\n    constructor() {\n        super(\"g\");\n    }\n\n    addChild(el) {\n        this.$el.append(el.$el);\n        return el; // pro jednodussi \"let rect = g.addChild(new Rectangle(...\"\n    }\n}\n\nexport class PolylinePoint {\n    constructor(x, y) {\n        this.x = 0;\n        this.y = 0;\n        if(x !== undefined && y !== undefined) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    static parseFromString(string) {\n        let arr = string.split(\",\");\n        return new PolylinePoint(arr[0], arr[1]);\n    }\n\n    get string() {\n        return this.x + \",\" + this.y;\n    }\n\n    static equals(a, b) {\n        return a.x === b.x && a.y === b.y;\n    }\n}\n\nclass SmartArray {\n    constructor(arr) {\n        if(arr !== undefined) {\n            this.arr = arr;\n        } else {\n            this.arr = [];\n        }\n    }\n\n    copy() {\n        return SmartArray($.extend(true, [], this.arr));\n    }\n\n    append(point) {\n        return this.addWithIndex(point, this.arr.length);\n    }\n\n    prepend(point) {\n        return this.addWithIndex(point, 0);\n    }\n\n    // add a point at the specified index, move all following items\n    addWithIndex(point, index) {\n        for(let i = this.arr.length ; i > index ; --i) {\n            this.arr[i] = this.arr[i-1];\n        }\n        this.arr[index] = point;\n        return this; // to enable chaining of append / preppend / addWithIndex commands\n    }\n\n    get length() {\n        return this.arr.length;\n    }\n\n    getItem(index) {\n        return this.arr[index];\n    }\n\n    get last() {\n        if(this.length!==0) {\n            return this.arr[this.length - 1];\n        } else {\n            return false;\n        }\n    }\n\n    get first() {\n        if(this.length!==0) {\n            return this.arr[0];\n        } else {\n            return false;\n        }\n    }\n\n    // indexArray must be sorted (ASC, eg. [1, 3, 4, 8])\n    remove(index) {\n        let length = this.length;\n\n        for(let i = index ; i < length ; ++i) {\n            this.arr[i] = this.arr[i + 1];\n        }\n        this.arr.pop();\n    }\n}\n\nexport class PolylinePoints extends SmartArray {\n    constructor(arr) {\n        super(arr);\n    }\n\n    copy() {\n        return new PolylinePoints($.extend(true, [], this.arr));\n    }\n\n    append(point) {\n        // call inherited function to handle the appending\n        super.append(point);\n\n        // if the second to last point is unnecessary, remove it\n        let length = this.length;\n        if ( length >= 3\n                && (    ( this.getItem(length - 3).x === this.getItem(length - 2).x &&\n                          this.getItem(length - 2).x === this.getItem(length - 1).x )\n                     || ( this.getItem(length - 3).y === this.getItem(length - 2).y &&\n                          this.getItem(length - 2).y === this.getItem(length - 1).y )\n                   )\n           )\n        {\n            this.remove(length - 2);\n        }\n\n        // return this element (to allow chaining)\n        return this;\n    }\n\n\n    static parseFromString(string) {\n        let pointStrings = string.split(\" \");\n        let points = new PolylinePoints();\n\n        for(let i = 0 ; i < pointStrings.length ; ++i) {\n            points.append(PolylinePoint.parseFromString(pointStrings[i]));\n        }\n\n        return points;\n    }\n\n    get string() {\n        let string = \"\";\n        for(let i = 0 ; i < this.length ; ++i) {\n            if(i !== 0) {\n                string += \" \";\n            }\n            string += this.arr[i].string;\n        }\n        return string;\n    }\n\n    forEach(func) {\n        for(let i = 0 ; i < this.arr.length ; ++i) {\n            func(this.arr[i]);\n        }\n    }\n}\n\nexport class PolyLine extends Tag {\n    constructor(points, color, strokeWidth) {\n        super(\"polyline\");\n\n        this.addAttr({\n            points: points.string,\n            stroke: color,\n            fill: \"none\",\n            \"stroke-width\": strokeWidth\n        });\n    }\n\n    updatePoints(points) {\n        this.addAttr({\n            points: points.string\n        });\n    }\n}\n\nexport class Text extends Tag {\n    constructor(x, y, w, h, text, size, color = \"black\") {\n        const lineHeight = size * 1.2;\n\n        super(\"text\");\n        this.addAttr({\n            x: x,\n            y: y,\n            width: w,\n            height: h,\n            fill: color\n        });\n\n        if(size) {\n            this.addAttr({\n                'font-size': size\n            })\n        }\n\n        this.$el.append(text);\n    }\n}\n\n/**\n * Multi line text is not natively supportend in SVG 1.1,\n * the workaround is to use the <foreignObject> element and display\n * a HTML paragraph inside of the SVG document.\n *\n * Because this technique is not supported by all of the browsers,\n * the foreignObject element is wrapped in <switch>, which\n * provides fallback for those cases.\n *\n * read more: [foreignObject on MDN web docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject)\n */\nexport class MultiLineText extends Tag {\n    constructor(x, y, w, h, text, size, color = \"black\") {\n        super(\"switch\");\n\n        let foreignObject = new Tag(\"foreignObject\");\n        let alternativeText = new Text(x, y, w, h, text, size, color);\n\n        foreignObject.addAttr({\n            x,\n            y,\n            width: w,\n            height: h\n        });\n\n        foreignObject.$el.append(\n            $(`<p class=\"multilinetext\" xmlns=\"http://www.w3.org/1999/xhtml\" style=\"font-size:${size}px\">`).append(text)\n        )\n\n        this.$el.append(\n            foreignObject.$el\n        ).append(\n            alternativeText.$el\n        )\n    }\n\n}\n\nexport class Pattern extends Tag {\n    constructor(id, width, height) {\n        super(\"pattern\");\n\n        this.addAttr({\n            id: id,\n            x: 0,\n            y: 0,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            viewBox: \"0 0 \"+width+\" \"+height\n        });\n    }\n\n    addChild(el) {\n        this.$el.append(el.$el);\n        return el; // pro jednodussi \"let rect = g.addChild(new Rectangle(...\"\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}